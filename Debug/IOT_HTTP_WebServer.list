
IOT_HTTP_WebServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ff8  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00172e70  08018230  08018230  00028230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0818b0a0  0818b0a0  001a02e0  2**0
                  CONTENTS
  4 .ARM          00000008  0818b0a0  0818b0a0  0019b0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0818b0a8  0818b0a8  001a02e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0818b0a8  0818b0a8  0019b0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0818b0b0  0818b0b0  0019b0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0818b0b8  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fe8  200002e0  0818b398  001a02e0  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  200032c8  0818b398  001a32c8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  001a02e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036740  00000000  00000000  001a0316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069c9  00000000  00000000  001d6a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b8  00000000  00000000  001dd420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002468  00000000  00000000  001dfbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e66f  00000000  00000000  001e2040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000338b3  00000000  00000000  002206af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e57c  00000000  00000000  00253f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  003b24de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b840  00000000  00000000  003b2530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200002e0 	.word	0x200002e0
 8000254:	00000000 	.word	0x00000000
 8000258:	08018214 	.word	0x08018214

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200002e4 	.word	0x200002e4
 8000274:	08018214 	.word	0x08018214

08000278 <strcmp>:
 8000278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800027c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000280:	2a01      	cmp	r2, #1
 8000282:	bf28      	it	cs
 8000284:	429a      	cmpcs	r2, r3
 8000286:	d0f7      	beq.n	8000278 <strcmp>
 8000288:	1ad0      	subs	r0, r2, r3
 800028a:	4770      	bx	lr

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	; 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	; 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_uldivmod>:
 8000ca4:	b953      	cbnz	r3, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca6:	b94a      	cbnz	r2, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	bf08      	it	eq
 8000cac:	2800      	cmpeq	r0, #0
 8000cae:	bf1c      	itt	ne
 8000cb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb8:	f000 b9b8 	b.w	800102c <__aeabi_idiv0>
 8000cbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc4:	f000 f83c 	bl	8000d40 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_d2lz>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	460d      	mov	r5, r1
 8000cde:	f7ff ff0b 	bl	8000af8 <__aeabi_dcmplt>
 8000ce2:	b928      	cbnz	r0, 8000cf0 <__aeabi_d2lz+0x1c>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cec:	f000 b80a 	b.w	8000d04 <__aeabi_d2ulz>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cf6:	f000 f805 	bl	8000d04 <__aeabi_d2ulz>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_d2ulz>:
 8000d04:	b5d0      	push	{r4, r6, r7, lr}
 8000d06:	2200      	movs	r2, #0
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <__aeabi_d2ulz+0x34>)
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	460f      	mov	r7, r1
 8000d0e:	f7ff fc81 	bl	8000614 <__aeabi_dmul>
 8000d12:	f7ff ff57 	bl	8000bc4 <__aeabi_d2uiz>
 8000d16:	4604      	mov	r4, r0
 8000d18:	f7ff fc02 	bl	8000520 <__aeabi_ui2d>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <__aeabi_d2ulz+0x38>)
 8000d20:	f7ff fc78 	bl	8000614 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff faba 	bl	80002a4 <__aeabi_dsub>
 8000d30:	f7ff ff48 	bl	8000bc4 <__aeabi_d2uiz>
 8000d34:	4621      	mov	r1, r4
 8000d36:	bdd0      	pop	{r4, r6, r7, pc}
 8000d38:	3df00000 	.word	0x3df00000
 8000d3c:	41f00000 	.word	0x41f00000

08000d40 <__udivmoddi4>:
 8000d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d46:	4604      	mov	r4, r0
 8000d48:	460f      	mov	r7, r1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d148      	bne.n	8000de0 <__udivmoddi4+0xa0>
 8000d4e:	428a      	cmp	r2, r1
 8000d50:	4694      	mov	ip, r2
 8000d52:	d961      	bls.n	8000e18 <__udivmoddi4+0xd8>
 8000d54:	fab2 f382 	clz	r3, r2
 8000d58:	b143      	cbz	r3, 8000d6c <__udivmoddi4+0x2c>
 8000d5a:	f1c3 0120 	rsb	r1, r3, #32
 8000d5e:	409f      	lsls	r7, r3
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	409c      	lsls	r4, r3
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	430f      	orrs	r7, r1
 8000d6c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	0c22      	lsrs	r2, r4, #16
 8000d76:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d7a:	fb01 7716 	mls	r7, r1, r6, r7
 8000d7e:	fb06 f00e 	mul.w	r0, r6, lr
 8000d82:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x5c>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x5a>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 8137 	bhi.w	8001008 <__udivmoddi4+0x2c8>
 8000d9a:	463e      	mov	r6, r7
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f1 	udiv	r0, r2, r1
 8000da4:	fb01 2210 	mls	r2, r1, r0, r2
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x86>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x84>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 811c 	bhi.w	8000ffc <__udivmoddi4+0x2bc>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	2600      	movs	r6, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0x9a>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c5 4300 	strd	r4, r3, [r5]
 8000dda:	4631      	mov	r1, r6
 8000ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de0:	428b      	cmp	r3, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0xb8>
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	f000 80fd 	beq.w	8000fe4 <__udivmoddi4+0x2a4>
 8000dea:	2600      	movs	r6, #0
 8000dec:	e9c5 0100 	strd	r0, r1, [r5]
 8000df0:	4630      	mov	r0, r6
 8000df2:	4631      	mov	r1, r6
 8000df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df8:	fab3 f683 	clz	r6, r3
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d14b      	bne.n	8000e98 <__udivmoddi4+0x158>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f0c0 80f2 	bcc.w	8000fea <__udivmoddi4+0x2aa>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f240 80ef 	bls.w	8000fea <__udivmoddi4+0x2aa>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d0e3      	beq.n	8000dda <__udivmoddi4+0x9a>
 8000e12:	e9c5 4700 	strd	r4, r7, [r5]
 8000e16:	e7e0      	b.n	8000dda <__udivmoddi4+0x9a>
 8000e18:	b902      	cbnz	r2, 8000e1c <__udivmoddi4+0xdc>
 8000e1a:	deff      	udf	#255	; 0xff
 8000e1c:	fab2 f382 	clz	r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 809d 	bne.w	8000f60 <__udivmoddi4+0x220>
 8000e26:	1a89      	subs	r1, r1, r2
 8000e28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e2c:	b297      	uxth	r7, r2
 8000e2e:	2601      	movs	r6, #1
 8000e30:	0c20      	lsrs	r0, r4, #16
 8000e32:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e36:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3e:	fb07 f002 	mul.w	r0, r7, r2
 8000e42:	4288      	cmp	r0, r1
 8000e44:	d90f      	bls.n	8000e66 <__udivmoddi4+0x126>
 8000e46:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4a:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0901 	movcs.w	r9, #1
 8000e54:	f04f 0900 	movcc.w	r9, #0
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	d903      	bls.n	8000e64 <__udivmoddi4+0x124>
 8000e5c:	f1b9 0f00 	cmp.w	r9, #0
 8000e60:	f000 80cf 	beq.w	8001002 <__udivmoddi4+0x2c2>
 8000e64:	4642      	mov	r2, r8
 8000e66:	1a09      	subs	r1, r1, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e7a:	42a7      	cmp	r7, r4
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x150>
 8000e7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e82:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x14e>
 8000e88:	42a7      	cmp	r7, r4
 8000e8a:	f200 80b4 	bhi.w	8000ff6 <__udivmoddi4+0x2b6>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	1be4      	subs	r4, r4, r7
 8000e92:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e96:	e79b      	b.n	8000dd0 <__udivmoddi4+0x90>
 8000e98:	f1c6 0720 	rsb	r7, r6, #32
 8000e9c:	40b3      	lsls	r3, r6
 8000e9e:	fa01 f406 	lsl.w	r4, r1, r6
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	40f9      	lsrs	r1, r7
 8000ea8:	40b2      	lsls	r2, r6
 8000eaa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb6:	431c      	orrs	r4, r3
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec0:	0c20      	lsrs	r0, r4, #16
 8000ec2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ec6:	fb09 1118 	mls	r1, r9, r8, r1
 8000eca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ece:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed2:	4288      	cmp	r0, r1
 8000ed4:	d90f      	bls.n	8000ef6 <__udivmoddi4+0x1b6>
 8000ed6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eda:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ede:	bf2c      	ite	cs
 8000ee0:	f04f 0b01 	movcs.w	fp, #1
 8000ee4:	f04f 0b00 	movcc.w	fp, #0
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	d903      	bls.n	8000ef4 <__udivmoddi4+0x1b4>
 8000eec:	f1bb 0f00 	cmp.w	fp, #0
 8000ef0:	f000 808d 	beq.w	800100e <__udivmoddi4+0x2ce>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	1a09      	subs	r1, r1, r0
 8000ef8:	b2a4      	uxth	r4, r4
 8000efa:	fbb1 f0f9 	udiv	r0, r1, r9
 8000efe:	fb09 1110 	mls	r1, r9, r0, r1
 8000f02:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f06:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0a:	458e      	cmp	lr, r1
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x1de>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f16:	d201      	bcs.n	8000f1c <__udivmoddi4+0x1dc>
 8000f18:	458e      	cmp	lr, r1
 8000f1a:	d87f      	bhi.n	800101c <__udivmoddi4+0x2dc>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f22:	eba1 010e 	sub.w	r1, r1, lr
 8000f26:	fba0 9802 	umull	r9, r8, r0, r2
 8000f2a:	4541      	cmp	r1, r8
 8000f2c:	464c      	mov	r4, r9
 8000f2e:	46c6      	mov	lr, r8
 8000f30:	d302      	bcc.n	8000f38 <__udivmoddi4+0x1f8>
 8000f32:	d106      	bne.n	8000f42 <__udivmoddi4+0x202>
 8000f34:	454b      	cmp	r3, r9
 8000f36:	d204      	bcs.n	8000f42 <__udivmoddi4+0x202>
 8000f38:	3801      	subs	r0, #1
 8000f3a:	ebb9 0402 	subs.w	r4, r9, r2
 8000f3e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d070      	beq.n	8001028 <__udivmoddi4+0x2e8>
 8000f46:	1b1a      	subs	r2, r3, r4
 8000f48:	eb61 010e 	sbc.w	r1, r1, lr
 8000f4c:	fa22 f306 	lsr.w	r3, r2, r6
 8000f50:	fa01 f707 	lsl.w	r7, r1, r7
 8000f54:	40f1      	lsrs	r1, r6
 8000f56:	2600      	movs	r6, #0
 8000f58:	431f      	orrs	r7, r3
 8000f5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f5e:	e73c      	b.n	8000dda <__udivmoddi4+0x9a>
 8000f60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f64:	f1c3 0020 	rsb	r0, r3, #32
 8000f68:	fa01 f203 	lsl.w	r2, r1, r3
 8000f6c:	fa21 f600 	lsr.w	r6, r1, r0
 8000f70:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f74:	fa24 f100 	lsr.w	r1, r4, r0
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	409c      	lsls	r4, r3
 8000f7e:	4311      	orrs	r1, r2
 8000f80:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f84:	0c0a      	lsrs	r2, r1, #16
 8000f86:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f8a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f8e:	fb00 f607 	mul.w	r6, r0, r7
 8000f92:	4296      	cmp	r6, r2
 8000f94:	d90e      	bls.n	8000fb4 <__udivmoddi4+0x274>
 8000f96:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9e:	bf2c      	ite	cs
 8000fa0:	f04f 0901 	movcs.w	r9, #1
 8000fa4:	f04f 0900 	movcc.w	r9, #0
 8000fa8:	4296      	cmp	r6, r2
 8000faa:	d902      	bls.n	8000fb2 <__udivmoddi4+0x272>
 8000fac:	f1b9 0f00 	cmp.w	r9, #0
 8000fb0:	d031      	beq.n	8001016 <__udivmoddi4+0x2d6>
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	1b92      	subs	r2, r2, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb2 f6fe 	udiv	r6, r2, lr
 8000fbc:	fb0e 2216 	mls	r2, lr, r6, r2
 8000fc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fc4:	fb06 f207 	mul.w	r2, r6, r7
 8000fc8:	428a      	cmp	r2, r1
 8000fca:	d907      	bls.n	8000fdc <__udivmoddi4+0x29c>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x29a>
 8000fd6:	428a      	cmp	r2, r1
 8000fd8:	d823      	bhi.n	8001022 <__udivmoddi4+0x2e2>
 8000fda:	4646      	mov	r6, r8
 8000fdc:	1a89      	subs	r1, r1, r2
 8000fde:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe2:	e725      	b.n	8000e30 <__udivmoddi4+0xf0>
 8000fe4:	462e      	mov	r6, r5
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	e6f7      	b.n	8000dda <__udivmoddi4+0x9a>
 8000fea:	1a84      	subs	r4, r0, r2
 8000fec:	eb61 0303 	sbc.w	r3, r1, r3
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	461f      	mov	r7, r3
 8000ff4:	e70b      	b.n	8000e0e <__udivmoddi4+0xce>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e749      	b.n	8000e90 <__udivmoddi4+0x150>
 8000ffc:	4464      	add	r4, ip
 8000ffe:	3802      	subs	r0, #2
 8001000:	e6e1      	b.n	8000dc6 <__udivmoddi4+0x86>
 8001002:	3a02      	subs	r2, #2
 8001004:	4461      	add	r1, ip
 8001006:	e72e      	b.n	8000e66 <__udivmoddi4+0x126>
 8001008:	3e02      	subs	r6, #2
 800100a:	4462      	add	r2, ip
 800100c:	e6c6      	b.n	8000d9c <__udivmoddi4+0x5c>
 800100e:	f1a8 0802 	sub.w	r8, r8, #2
 8001012:	4461      	add	r1, ip
 8001014:	e76f      	b.n	8000ef6 <__udivmoddi4+0x1b6>
 8001016:	3802      	subs	r0, #2
 8001018:	4462      	add	r2, ip
 800101a:	e7cb      	b.n	8000fb4 <__udivmoddi4+0x274>
 800101c:	3802      	subs	r0, #2
 800101e:	4461      	add	r1, ip
 8001020:	e77d      	b.n	8000f1e <__udivmoddi4+0x1de>
 8001022:	3e02      	subs	r6, #2
 8001024:	4461      	add	r1, ip
 8001026:	e7d9      	b.n	8000fdc <__udivmoddi4+0x29c>
 8001028:	462e      	mov	r6, r5
 800102a:	e6d6      	b.n	8000dda <__udivmoddi4+0x9a>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <bsp_init>:
  * @brief  Initialize the bsp modules
  * @param  None
  * @retval Web Server status
  */
int bsp_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  int status = BSP_ERROR_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]

  /* Initialize GREEN led */
  status |= BSP_LED_Init(LED_GREEN);
 800103a:	2001      	movs	r0, #1
 800103c:	f002 fe30 	bl	8003ca0 <BSP_LED_Init>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	607b      	str	r3, [r7, #4]

  /* Initialize RED led */
  status |= BSP_LED_Init(LED_RED);
 8001048:	2000      	movs	r0, #0
 800104a:	f002 fe29 	bl	8003ca0 <BSP_LED_Init>
 800104e:	4602      	mov	r2, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	607b      	str	r3, [r7, #4]

  return status;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <webserver_console_config>:
  * @brief  Configure the console
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Set parameter to be configured */
  Console_UARTHandle.Instance                    = USART1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <webserver_console_config+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <webserver_console_config+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  Console_UARTHandle.Init.BaudRate               = 115200;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <webserver_console_config+0x74>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  Console_UARTHandle.Init.WordLength             = UART_WORDLENGTH_8B;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <webserver_console_config+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  Console_UARTHandle.Init.StopBits               = UART_STOPBITS_1;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <webserver_console_config+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  Console_UARTHandle.Init.Parity                 = UART_PARITY_NONE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <webserver_console_config+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  Console_UARTHandle.Init.Mode                   = UART_MODE_TX_RX;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <webserver_console_config+0x74>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  Console_UARTHandle.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <webserver_console_config+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  Console_UARTHandle.Init.OverSampling           = UART_OVERSAMPLING_16;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <webserver_console_config+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  Console_UARTHandle.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <webserver_console_config+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  Console_UARTHandle.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <webserver_console_config+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  Console_UARTHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <webserver_console_config+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the UART mode */
  if (HAL_UART_Init(&Console_UARTHandle) != HAL_OK)
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <webserver_console_config+0x74>)
 80010aa:	f00f fc7a 	bl	80109a2 <HAL_UART_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <webserver_console_config+0x5a>
  {
    return CONSOLE_ERROR;
 80010b4:	f06f 0302 	mvn.w	r3, #2
 80010b8:	e009      	b.n	80010ce <webserver_console_config+0x6e>
  }

  /* Disable the UART FIFO mode */
  if (HAL_UARTEx_DisableFifoMode(&Console_UARTHandle) != HAL_OK)
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <webserver_console_config+0x74>)
 80010bc:	f010 fa37 	bl	801152e <HAL_UARTEx_DisableFifoMode>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <webserver_console_config+0x6c>
  {
    return CONSOLE_ERROR;
 80010c6:	f06f 0302 	mvn.w	r3, #2
 80010ca:	e000      	b.n	80010ce <webserver_console_config+0x6e>
  }

  return WEBSERVER_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002fc 	.word	0x200002fc
 80010d8:	40013800 	.word	0x40013800

080010dc <webserver_console_print_header>:
  * @brief  Print web server application header in hyperterminal
  * @param  None
  * @retval None
  */
void webserver_console_print_header(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  printf("\r\n");
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <webserver_console_print_header+0x20>)
 80010e2:	f013 fb57 	bl	8014794 <puts>
  printf("=======================================================================================================\r\n");
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <webserver_console_print_header+0x24>)
 80010e8:	f013 fb54 	bl	8014794 <puts>
  printf("============================       STM32U5 Webserver Demonstration        =============================\r\n");
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <webserver_console_print_header+0x28>)
 80010ee:	f013 fb51 	bl	8014794 <puts>
  printf("=======================================================================================================\r\n");
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <webserver_console_print_header+0x24>)
 80010f4:	f013 fb4e 	bl	8014794 <puts>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08018230 	.word	0x08018230
 8001100:	08018234 	.word	0x08018234
 8001104:	080182a0 	.word	0x080182a0

08001108 <webserver_console_get_ssid>:
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_get_ssid(ap_t *net_wifi_registred_hotspot,
                                                   char *SSID)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  char ch;
  uint32_t count = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]

	  } while (SSID[count] == '\r');

  }

  printf("\r\n");
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <webserver_console_get_ssid+0x3c>)
 8001118:	f013 fb3c 	bl	8014794 <puts>
  printf("*** RUMPF BUILD, AUTOCONNECT TO Corellium SSID =====================================================================\r\n");
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <webserver_console_get_ssid+0x40>)
 800111e:	f013 fb39 	bl	8014794 <puts>

  /* Clear pending characters */
  if (HAL_UART_AbortReceive(&Console_UARTHandle) != HAL_OK)
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <webserver_console_get_ssid+0x44>)
 8001124:	f00f fe14 	bl	8010d50 <HAL_UART_AbortReceive>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <webserver_console_get_ssid+0x2c>
  {
	return CONSOLE_ERROR;
 800112e:	f06f 0302 	mvn.w	r3, #2
 8001132:	e003      	b.n	800113c <webserver_console_get_ssid+0x34>
  }

  /* Store user SSID */
  net_wifi_registred_hotspot->ssid = "Corellium";
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <webserver_console_get_ssid+0x48>)
 8001138:	601a      	str	r2, [r3, #0]

  return WEBSERVER_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	08018230 	.word	0x08018230
 8001148:	0801830c 	.word	0x0801830c
 800114c:	200002fc 	.word	0x200002fc
 8001150:	08018384 	.word	0x08018384

08001154 <webserver_console_get_password>:
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_console_get_password(ap_t *net_wifi_registred_hotspot,
                                                       char *PassWord)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  char ch;
  uint32_t count = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]

	  } while ((PassWord[count] == '\n') || (PassWord[count] == ' ') || (PassWord[count] == '\r'));
  }

  /* Clear pending characters */
  if (HAL_UART_AbortReceive(&Console_UARTHandle) != HAL_OK)
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <webserver_console_get_password+0x30>)
 8001164:	f00f fdf4 	bl	8010d50 <HAL_UART_AbortReceive>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <webserver_console_get_password+0x20>
  {
	return CONSOLE_ERROR;
 800116e:	f06f 0302 	mvn.w	r3, #2
 8001172:	e003      	b.n	800117c <webserver_console_get_password+0x28>
  }

  /* Store user PWD */
  net_wifi_registred_hotspot->pwd = "12345678";
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <webserver_console_get_password+0x34>)
 8001178:	605a      	str	r2, [r3, #4]

  return WEBSERVER_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200002fc 	.word	0x200002fc
 8001188:	08018390 	.word	0x08018390

0800118c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  while (HAL_OK != HAL_UART_Transmit(&Console_UARTHandle, (uint8_t *) &ch, 1, 30000))
 8001194:	bf00      	nop
 8001196:	1d39      	adds	r1, r7, #4
 8001198:	f247 5330 	movw	r3, #30000	; 0x7530
 800119c:	2201      	movs	r2, #1
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <__io_putchar+0x28>)
 80011a0:	f00f fc4f 	bl	8010a42 <HAL_UART_Transmit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f5      	bne.n	8001196 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 80011aa:	687b      	ldr	r3, [r7, #4]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200002fc 	.word	0x200002fc

080011b8 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  char ch;

  while (HAL_OK != HAL_UART_Receive(&Console_UARTHandle, (uint8_t *) &ch, 1, HAL_MAX_DELAY))
 80011be:	bf00      	nop
 80011c0:	1df9      	adds	r1, r7, #7
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c6:	2201      	movs	r2, #1
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <__io_getchar+0x28>)
 80011ca:	f00f fcdf 	bl	8010b8c <HAL_UART_Receive>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f5      	bne.n	80011c0 <__io_getchar+0x8>
  {
    ;
  }

  return ch;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002fc 	.word	0x200002fc

080011e4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
     - Configure the Flash prefetch
     - Configure the Systick to generate an interrupt each 1 msec
     - Set NVIC Group Priority to 3
     - Low Level Initialization
  */
  HAL_Init();
 80011e8:	f007 fae2 	bl	80087b0 <HAL_Init>

  /* Enable the Instruction Cache */
  instruction_cache_enable();
 80011ec:	f000 fb63 	bl	80018b6 <instruction_cache_enable>

  /* Configure the System clock to have a frequency of 120 MHz */
  system_clock_config();
 80011f0:	f000 fb6a 	bl	80018c8 <system_clock_config>

  /* Initialize bsp resources */
  bsp_init();
 80011f4:	f7ff ff1c 	bl	8001030 <bsp_init>

  /* Demonstration entry */
  app_entry();
 80011f8:	f001 fd29 	bl	8002c4e <app_entry>

  while (1)
 80011fc:	e7fe      	b.n	80011fc <main+0x18>
	...

08001200 <HAL_MspInit>:

/**
  * Initializes the Global MCU Support Package.
  */
void HAL_MspInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
  /* Enable VDDIO2 supply */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_MspInit+0x70>)
 8001208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_MspInit+0x70>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_MspInit+0x70>)
 8001218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001224:	f00a fac0 	bl	800b7a8 <HAL_PWREx_EnableVddIO2>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_MspInit+0x70>)
 800122a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_MspInit+0x70>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_MspInit+0x70>)
 800123a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MspInit+0x70>)
 8001248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_MspInit+0x70>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_MspInit+0x70>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001264:	f00a fab0 	bl	800b7c8 <HAL_PWREx_DisableUCPDDeadBattery>
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	46020c00 	.word	0x46020c00

08001274 <HAL_SPI_MspInit>:
* @brief  SPI MSP Initialization
* @param  hspi : SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0be      	sub	sp, #248	; 0xf8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct       = {0};
 800127c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	22c8      	movs	r2, #200	; 0xc8
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f012 fa90 	bl	80137ba <memset>

  /* Check SPI instance */
  if (hspi->Instance == SPI2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a76      	ldr	r2, [pc, #472]	; (8001478 <HAL_SPI_MspInit+0x204>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	f040 80e5 	bne.w	8001470 <HAL_SPI_MspInit+0x1fc>
  {
    /* Peripherals clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012a6:	4b75      	ldr	r3, [pc, #468]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012ac:	4a73      	ldr	r2, [pc, #460]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80012b6:	4b71      	ldr	r3, [pc, #452]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPDMA1_CLK_ENABLE();
 80012c4:	4b6d      	ldr	r3, [pc, #436]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a6c      	ldr	r2, [pc, #432]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e8:	4a64      	ldr	r2, [pc, #400]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012f2:	4b62      	ldr	r3, [pc, #392]	; (800147c <HAL_SPI_MspInit+0x208>)
 80012f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]

    /* Configure peripheral kernel clock */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection   = RCC_SPI2CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f00b fd12 	bl	800cd40 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_SPI_MspInit+0xb2>
    {
      webserver_process_error();
 8001322:	f001 fcbd 	bl	8002ca0 <webserver_process_error>
    }

    /* SPI2 GPIO Configuration */
    GPIO_InitStruct.Pin       = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1;
 8001326:	231a      	movs	r3, #26
 8001328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133e:	2305      	movs	r3, #5
 8001340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001344:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001348:	4619      	mov	r1, r3
 800134a:	484d      	ldr	r0, [pc, #308]	; (8001480 <HAL_SPI_MspInit+0x20c>)
 800134c:	f008 fa10 	bl	8009770 <HAL_GPIO_Init>

    /* Set Rx DMA channel configuration */
    handle_GPDMA1_Channel4.Instance                   = GPDMA1_Channel4;
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001352:	4a4d      	ldr	r2, [pc, #308]	; (8001488 <HAL_SPI_MspInit+0x214>)
 8001354:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.Init.Request               = GPDMA1_REQUEST_SPI2_RX;
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001358:	2208      	movs	r2, #8
 800135a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel4.Init.BlkHWRequest          = DMA_BREQ_SINGLE_BURST;
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_SPI_MspInit+0x210>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel4.Init.Direction             = DMA_PERIPH_TO_MEMORY;
 8001362:	4b48      	ldr	r3, [pc, #288]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel4.Init.SrcInc                = DMA_SINC_FIXED;
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <HAL_SPI_MspInit+0x210>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel4.Init.DestInc               = DMA_DINC_INCREMENTED;
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001370:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001374:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel4.Init.SrcDataWidth          = DMA_SRC_DATAWIDTH_BYTE;
 8001376:	4b43      	ldr	r3, [pc, #268]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel4.Init.DestDataWidth         = DMA_DEST_DATAWIDTH_BYTE;
 800137c:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_SPI_MspInit+0x210>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel4.Init.Priority              = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001382:	4b40      	ldr	r3, [pc, #256]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001384:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001388:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel4.Init.SrcBurstLength        = 1U;
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_SPI_MspInit+0x210>)
 800138c:	2201      	movs	r2, #1
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel4.Init.DestBurstLength       = 1U;
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001392:	2201      	movs	r2, #1
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel4.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_SPI_MspInit+0x210>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel4.Init.TransferEventMode     = DMA_TCEM_BLOCK_TRANSFER;
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_SPI_MspInit+0x210>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel4.Init.Mode                  = DMA_NORMAL;
 80013a4:	4b37      	ldr	r3, [pc, #220]	; (8001484 <HAL_SPI_MspInit+0x210>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
    /* Initialize Rx DMA channel */
    if (HAL_DMA_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 80013aa:	4836      	ldr	r0, [pc, #216]	; (8001484 <HAL_SPI_MspInit+0x210>)
 80013ac:	f007 fc08 	bl	8008bc0 <HAL_DMA_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_SPI_MspInit+0x146>
    {
      webserver_process_error();
 80013b6:	f001 fc73 	bl	8002ca0 <webserver_process_error>
    }
    /* Link Rx DMA channel handle */
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel4);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a31      	ldr	r2, [pc, #196]	; (8001484 <HAL_SPI_MspInit+0x210>)
 80013be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80013c2:	4a30      	ldr	r2, [pc, #192]	; (8001484 <HAL_SPI_MspInit+0x210>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    /* Set Tx DMA channel configuration */
    handle_GPDMA1_Channel5.Instance                   = GPDMA1_Channel5;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013ca:	4a31      	ldr	r2, [pc, #196]	; (8001490 <HAL_SPI_MspInit+0x21c>)
 80013cc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.Init.Request               = GPDMA1_REQUEST_SPI2_TX;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013d0:	2209      	movs	r2, #9
 80013d2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel5.Init.BlkHWRequest          = DMA_BREQ_SINGLE_BURST;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel5.Init.Direction             = DMA_MEMORY_TO_PERIPH;
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel5.Init.SrcInc                = DMA_SINC_INCREMENTED;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013e4:	2208      	movs	r2, #8
 80013e6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel5.Init.DestInc               = DMA_DINC_FIXED;
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel5.Init.SrcDataWidth          = DMA_SRC_DATAWIDTH_BYTE;
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel5.Init.DestDataWidth         = DMA_DEST_DATAWIDTH_BYTE;
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel5.Init.Priority              = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_SPI_MspInit+0x218>)
 80013fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001400:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel5.Init.SrcBurstLength        = 1U;
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_SPI_MspInit+0x218>)
 8001404:	2201      	movs	r2, #1
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel5.Init.DestBurstLength       = 1U;
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_SPI_MspInit+0x218>)
 800140a:	2201      	movs	r2, #1
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_SPI_MspInit+0x218>)
 8001410:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel5.Init.TransferEventMode     = DMA_TCEM_BLOCK_TRANSFER;
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_SPI_MspInit+0x218>)
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel5.Init.Mode                  = DMA_NORMAL;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_SPI_MspInit+0x218>)
 800141e:	2200      	movs	r2, #0
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
    /* Initialize Tx DMA channel */
    if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8001422:	481a      	ldr	r0, [pc, #104]	; (800148c <HAL_SPI_MspInit+0x218>)
 8001424:	f007 fbcc 	bl	8008bc0 <HAL_DMA_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_SPI_MspInit+0x1be>
    {
      webserver_process_error();
 800142e:	f001 fc37 	bl	8002ca0 <webserver_process_error>
    }
    /* Link Tx DMA channel handle */
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel5);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_SPI_MspInit+0x218>)
 8001436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800143a:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_SPI_MspInit+0x218>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	65d3      	str	r3, [r2, #92]	; 0x5c

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2105      	movs	r1, #5
 8001444:	203c      	movs	r0, #60	; 0x3c
 8001446:	f007 fb2e 	bl	8008aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800144a:	203c      	movs	r0, #60	; 0x3c
 800144c:	f007 fb45 	bl	8008ada <HAL_NVIC_EnableIRQ>
    /* GPDMA1 channel4 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 5, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2105      	movs	r1, #5
 8001454:	2021      	movs	r0, #33	; 0x21
 8001456:	f007 fb26 	bl	8008aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 800145a:	2021      	movs	r0, #33	; 0x21
 800145c:	f007 fb3d 	bl	8008ada <HAL_NVIC_EnableIRQ>
    /* GPDMA1 channel5 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 5, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2105      	movs	r1, #5
 8001464:	2022      	movs	r0, #34	; 0x22
 8001466:	f007 fb1e 	bl	8008aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 800146a:	2022      	movs	r0, #34	; 0x22
 800146c:	f007 fb35 	bl	8008ada <HAL_NVIC_EnableIRQ>
  }
}
 8001470:	bf00      	nop
 8001472:	37f8      	adds	r7, #248	; 0xf8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40003800 	.word	0x40003800
 800147c:	46020c00 	.word	0x46020c00
 8001480:	42020c00 	.word	0x42020c00
 8001484:	200006f0 	.word	0x200006f0
 8001488:	40020250 	.word	0x40020250
 800148c:	20000768 	.word	0x20000768
 8001490:	400202d0 	.word	0x400202d0

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0bc      	sub	sp, #240	; 0xf0
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	22c8      	movs	r2, #200	; 0xc8
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f012 f980 	bl	80137ba <memset>

  /* Initializes the peripherals clock */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014ba:	f04f 0201 	mov.w	r2, #1
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c6:	2300      	movs	r3, #0
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00b fc36 	bl	800cd40 <HAL_RCCEx_PeriphCLKConfig>

  /* Peripheral clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <HAL_UART_MspInit+0xc0>)
 80014d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_UART_MspInit+0xc0>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_UART_MspInit+0xc0>)
 80014e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

  /* USART1 GPIO Configuration */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_UART_MspInit+0xc0>)
 80014f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014f8:	4a16      	ldr	r2, [pc, #88]	; (8001554 <HAL_UART_MspInit+0xc0>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_UART_MspInit+0xc0>)
 8001504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001510:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800152a:	2307      	movs	r3, #7
 800152c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001534:	4619      	mov	r1, r3
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <HAL_UART_MspInit+0xc4>)
 8001538:	f008 f91a 	bl	8009770 <HAL_GPIO_Init>

  /* USART1 interrupt Init */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2105      	movs	r1, #5
 8001540:	203d      	movs	r0, #61	; 0x3d
 8001542:	f007 fab0 	bl	8008aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001546:	203d      	movs	r0, #61	; 0x3d
 8001548:	f007 fac7 	bl	8008ada <HAL_NVIC_EnableIRQ>
}
 800154c:	bf00      	nop
 800154e:	37f0      	adds	r7, #240	; 0xf0
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	46020c00 	.word	0x46020c00
 8001558:	42020000 	.word	0x42020000

0800155c <HAL_LPTIM_MspInit>:
* @brief  LPTIM MSP Init
* @param  hlptim : LPTIM handle
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef *hlptim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0ce      	sub	sp, #312	; 0x138
 8001560:	af00      	add	r7, sp, #0
 8001562:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001566:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800156a:	6018      	str	r0, [r3, #0]
  RCC_OscInitTypeDef       RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  /* Enable LSE clock */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800156c:	2304      	movs	r3, #4
 800156e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001572:	2381      	movs	r3, #129	; 0x81
 8001574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001582:	4618      	mov	r0, r3
 8001584:	f00a f930 	bl	800b7e8 <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_LPTIM_MspInit+0x36>
  {
    webserver_process_error();
 800158e:	f001 fb87 	bl	8002ca0 <webserver_process_error>
  }

  /* Select the LSE clock as LPTIM peripheral clock */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001592:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001596:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]
  RCC_PeriphCLKInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80015a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00b fbc1 	bl	800cd40 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_LPTIM_MspInit+0x6c>
  {
    webserver_process_error();
 80015c4:	f001 fb6c 	bl	8002ca0 <webserver_process_error>
  }

  /* Enable LPTIM clock */
  __HAL_RCC_LPTIM1_CLK_ENABLE();
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_LPTIM_MspInit+0xd4>)
 80015ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_LPTIM_MspInit+0xd4>)
 80015d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_LPTIM_MspInit+0xd4>)
 80015da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015de:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80015e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015f4:	681b      	ldr	r3, [r3, #0]

  /* Force the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_FORCE_RESET();
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_LPTIM_MspInit+0xd4>)
 80015f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_LPTIM_MspInit+0xd4>)
 80015fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001602:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Release the LPTIM Periheral Clock Reset */
  __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_LPTIM_MspInit+0xd4>)
 8001608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800160c:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_LPTIM_MspInit+0xd4>)
 800160e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001612:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* USART1 interrupt DeInit */
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 15, 15);
 8001616:	220f      	movs	r2, #15
 8001618:	210f      	movs	r1, #15
 800161a:	2043      	movs	r0, #67	; 0x43
 800161c:	f007 fa43 	bl	8008aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001620:	2043      	movs	r0, #67	; 0x43
 8001622:	f007 fa5a 	bl	8008ada <HAL_NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	46020c00 	.word	0x46020c00

08001634 <NMI_Handler>:
/**********************************************************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  while (1)
 8001656:	e7fe      	b.n	8001656 <SecureFault_Handler+0x4>

08001658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001686:	f007 f8ef 	bl	8008868 <HAL_IncTick>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&Wifi_SPIHandle);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <SPI2_IRQHandler+0x10>)
 8001696:	f00e feaf 	bl	80103f8 <HAL_SPI_IRQHandler>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000660 	.word	0x20000660

080016a4 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80016a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016ac:	f008 fb60 	bl	8009d70 <HAL_GPIO_EXTI_IRQHandler>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80016b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016bc:	f008 fb58 	bl	8009d70 <HAL_GPIO_EXTI_IRQHandler>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 channel4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <GPDMA1_Channel4_IRQHandler+0x10>)
 80016ca:	f007 fc50 	bl	8008f6e <HAL_DMA_IRQHandler>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200006f0 	.word	0x200006f0

080016d8 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 channel5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <GPDMA1_Channel5_IRQHandler+0x10>)
 80016de:	f007 fc46 	bl	8008f6e <HAL_DMA_IRQHandler>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000768 	.word	0x20000768

080016ec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&LPTIMHandle);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <LPTIM1_IRQHandler+0x10>)
 80016f2:	f009 fbe8 	bl	800aec6 <HAL_LPTIM_IRQHandler>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000390 	.word	0x20000390

08001700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_kill>:

int _kill(int pid, int sig)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171a:	f011 fff7 	bl	801370c <__errno>
 800171e:	4603      	mov	r3, r0
 8001720:	2216      	movs	r2, #22
 8001722:	601a      	str	r2, [r3, #0]
	return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_exit>:

void _exit (int status)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffe7 	bl	8001710 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001742:	e7fe      	b.n	8001742 <_exit+0x12>

08001744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e00a      	b.n	800176c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001756:	f7ff fd2f 	bl	80011b8 <__io_getchar>
 800175a:	4601      	mov	r1, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf0      	blt.n	8001756 <_read+0x12>
	}

return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e009      	b.n	80017a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fcf7 	bl	800118c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf1      	blt.n	8001790 <_write+0x12>
	}
	return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_close>:

int _close(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017de:	605a      	str	r2, [r3, #4]
	return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_isatty>:

int _isatty(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f011 ff5c 	bl	801370c <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200c0000 	.word	0x200c0000
 8001880:	00008000 	.word	0x00008000
 8001884:	2000038c 	.word	0x2000038c
 8001888:	200032c8 	.word	0x200032c8

0800188c <system_init>:
  * @brief  Initialize the system application
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Configure the console */
  if (webserver_console_config() != WEBSERVER_OK)
 8001890:	f7ff fbe6 	bl	8001060 <webserver_console_config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <system_init+0x14>
  {
    return SYSTEM_ERROR;
 800189a:	f06f 0301 	mvn.w	r3, #1
 800189e:	e008      	b.n	80018b2 <system_init+0x26>
  }

  /* Configure the LPTIM peripheral */
  if (lptim_config() != WEBSERVER_OK)
 80018a0:	f000 f87e 	bl	80019a0 <lptim_config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <system_init+0x24>
  {
    return SYSTEM_ERROR;
 80018aa:	f06f 0301 	mvn.w	r3, #1
 80018ae:	e000      	b.n	80018b2 <system_init+0x26>
  }

  return WEBSERVER_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <instruction_cache_enable>:
  * @brief  Enable ICACHE with 1-way set-associative configuration.
  * @param  None
  * @retval None
  */
void instruction_cache_enable(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* Configure ICACHE associativity mode */
  HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f009 f8e2 	bl	800aa84 <HAL_ICACHE_ConfigAssociativityMode>

  /* Enable ICACHE */
  HAL_ICACHE_Enable();
 80018c0:	f009 f900 	bl	800aac4 <HAL_ICACHE_Enable>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <system_clock_config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef system_clock_config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09e      	sub	sp, #120	; 0x78
 80018cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	615a      	str	r2, [r3, #20]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2260      	movs	r2, #96	; 0x60
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f011 ff67 	bl	80137ba <memset>

  /* Configure the main internal regulator output voltage */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ec:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80018f0:	f009 fed8 	bl	800b6a4 <HAL_PWREx_ControlVoltageScaling>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <system_clock_config+0x38>
  {
    return SYSTEM_ERROR;
 80018fa:	f06f 0301 	mvn.w	r3, #1
 80018fe:	e04a      	b.n	8001996 <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 8001900:	2338      	movs	r3, #56	; 0x38
 8001902:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSI48State          = RCC_HSI48_ON;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 800190a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800190e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001914:	2310      	movs	r3, #16
 8001916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_0;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIDiv              = RCC_LSI_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001920:	2302      	movs	r3, #2
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8001924:	2301      	movs	r3, #1
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMBOOST       = RCC_PLLMBOOST_DIV4;
 8001928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM            = 3;
 800192e:	2303      	movs	r3, #3
 8001930:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN            = 15;
 8001932:	230f      	movs	r3, #15
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP            = 2;
 8001936:	2302      	movs	r3, #2
 8001938:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ            = 2;
 800193a:	2302      	movs	r3, #2
 800193c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR            = 2;
 800193e:	2302      	movs	r3, #2
 8001940:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE          = RCC_PLLVCIRANGE_1;
 8001942:	230c      	movs	r3, #12
 8001944:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN        = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4618      	mov	r0, r3
 800194e:	f009 ff4b 	bl	800b7e8 <HAL_RCC_OscConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <system_clock_config+0x96>
  {
    return SYSTEM_ERROR;
 8001958:	f06f 0301 	mvn.w	r3, #1
 800195c:	e01b      	b.n	8001996 <system_clock_config+0xce>
  }

  /* Initializes the CPU, AHB and APB busses clocks */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 800195e:	231f      	movs	r3, #31
 8001960:	663b      	str	r3, [r7, #96]	; 0x60
                                     RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001962:	2303      	movs	r3, #3
 8001964:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001976:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800197a:	2103      	movs	r1, #3
 800197c:	4618      	mov	r0, r3
 800197e:	f00a fe09 	bl	800c594 <HAL_RCC_ClockConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <system_clock_config+0xc6>
  {
    return SYSTEM_ERROR;
 8001988:	f06f 0301 	mvn.w	r3, #1
 800198c:	e003      	b.n	8001996 <system_clock_config+0xce>
  }

  /* Configure the Systick */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800198e:	2004      	movs	r0, #4
 8001990:	f007 f8be 	bl	8008b10 <HAL_SYSTICK_CLKSourceConfig>

  return WEBSERVER_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3778      	adds	r7, #120	; 0x78
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <lptim_config>:
  * @brief  Initialize the LPTIM peripheral
  * @param  None
  * @retval Web Server status
  */
static WebServer_StatusTypeDef lptim_config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
   *  Counter Trigger = Software trigger
   *  Output Polarity = High
   *  Update mode     = Immediate (Registers are immediately updated after any
   *                    write access)
   */
  LPTIMHandle.Instance = LPTIM1;
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <lptim_config+0xb0>)
 80019a8:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <lptim_config+0xb4>)
 80019aa:	601a      	str	r2, [r3, #0]

  LPTIMHandle.Init.Clock.Source                  = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <lptim_config+0xb0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
  LPTIMHandle.Init.Clock.Prescaler               = LPTIM_PRESCALER_DIV1;
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <lptim_config+0xb0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  LPTIMHandle.Init.CounterSource                 = LPTIM_COUNTERSOURCE_INTERNAL;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <lptim_config+0xb0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  LPTIMHandle.Init.UltraLowPowerClock.Polarity   = LPTIM_CLOCKPOLARITY_RISING;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <lptim_config+0xb0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  LPTIMHandle.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <lptim_config+0xb0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  LPTIMHandle.Init.Trigger.Source                = LPTIM_TRIGSOURCE_SOFTWARE;
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <lptim_config+0xb0>)
 80019cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d0:	615a      	str	r2, [r3, #20]
  LPTIMHandle.Init.Trigger.ActiveEdge            = LPTIM_ACTIVEEDGE_RISING;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <lptim_config+0xb0>)
 80019d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019d8:	619a      	str	r2, [r3, #24]
  LPTIMHandle.Init.Period                        = PERIOD_VALUE;
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <lptim_config+0xb0>)
 80019dc:	f240 6267 	movw	r2, #1639	; 0x667
 80019e0:	621a      	str	r2, [r3, #32]
  LPTIMHandle.Init.RepetitionCounter             = 0;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <lptim_config+0xb0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize LPTIM peripheral according to the passed parameters */
  if (HAL_LPTIM_Init(&LPTIMHandle) != HAL_OK)
 80019e8:	4819      	ldr	r0, [pc, #100]	; (8001a50 <lptim_config+0xb0>)
 80019ea:	f009 f87b 	bl	800aae4 <HAL_LPTIM_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <lptim_config+0x5a>
  {
    return SYSTEM_ERROR;
 80019f4:	f06f 0301 	mvn.w	r3, #1
 80019f8:	e026      	b.n	8001a48 <lptim_config+0xa8>
  }

  /* Register LPTIM callback */
  if (HAL_LPTIM_RegisterCallback(&LPTIMHandle, HAL_LPTIM_UPDATE_EVENT_CB_ID, LPTIM_UpdateEventCallback) != HAL_OK)
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <lptim_config+0xb8>)
 80019fc:	2109      	movs	r1, #9
 80019fe:	4814      	ldr	r0, [pc, #80]	; (8001a50 <lptim_config+0xb0>)
 8001a00:	f009 fc66 	bl	800b2d0 <HAL_LPTIM_RegisterCallback>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <lptim_config+0x70>
  {
    return SYSTEM_ERROR;
 8001a0a:	f06f 0301 	mvn.w	r3, #1
 8001a0e:	e01b      	b.n	8001a48 <lptim_config+0xa8>
  /*
  *  Period = 99
  *  Pulse  = 49
  *  According to this configuration, the duty cycle will be equal to 50%
  */
  sConfig.Pulse      = PULSE_VALUE;
 8001a10:	f240 3333 	movw	r3, #819	; 0x333
 8001a14:	603b      	str	r3, [r7, #0]
  sConfig.OCPolarity = LPTIM_OCPOLARITY_LOW;
 8001a16:	2301      	movs	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&LPTIMHandle, &sConfig, LPTIM_CHANNEL_1) != HAL_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <lptim_config+0xb0>)
 8001a22:	f009 fa1d 	bl	800ae60 <HAL_LPTIM_OC_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <lptim_config+0x92>
  {
    return SYSTEM_ERROR;
 8001a2c:	f06f 0301 	mvn.w	r3, #1
 8001a30:	e00a      	b.n	8001a48 <lptim_config+0xa8>
  }

  /* Start the LPTIM PWM */
  if (HAL_LPTIM_PWM_Start_IT(&LPTIMHandle, LPTIM_CHANNEL_1) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <lptim_config+0xb0>)
 8001a36:	f009 f961 	bl	800acfc <HAL_LPTIM_PWM_Start_IT>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <lptim_config+0xa6>
  {
    return SYSTEM_ERROR;
 8001a40:	f06f 0301 	mvn.w	r3, #1
 8001a44:	e000      	b.n	8001a48 <lptim_config+0xa8>
  }

  return WEBSERVER_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000390 	.word	0x20000390
 8001a54:	46004400 	.word	0x46004400
 8001a58:	08001a5d 	.word	0x08001a5d

08001a5c <LPTIM_UpdateEventCallback>:
  * @brief  Update event callback in non-blocking mode.
  * @param  hlptim : Pointer to LPTIM handle
  * @retval None
  */
static void LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Toggle GREEN led */
  BSP_LED_Toggle(LED_GREEN);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f002 f9b7 	bl	8003dd8 <BSP_LED_Toggle>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a7a:	e003      	b.n	8001a84 <LoopCopyDataInit>

08001a7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a82:	3104      	adds	r1, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a8c:	d3f6      	bcc.n	8001a7c <CopyDataInit>
	ldr	r2, =_sbss
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a90:	e002      	b.n	8001a98 <LoopFillZerobss>

08001a92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a94:	f842 3b04 	str.w	r3, [r2], #4

08001a98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <LoopForever+0x16>)
	cmp	r2, r3
 8001a9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a9c:	d3f9      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9e:	f006 fe4f 	bl	8008740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f011 fe39 	bl	8013718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa6:	f7ff fb9d 	bl	80011e4 <main>

08001aaa <LoopForever>:

LoopForever:
    b LoopForever
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001aac:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001ab0:	0818b0b8 	.word	0x0818b0b8
	ldr	r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ab8:	200002e0 	.word	0x200002e0
	ldr	r2, =_sbss
 8001abc:	200002e0 	.word	0x200002e0
	ldr	r3, = _ebss
 8001ac0:	200032c8 	.word	0x200032c8

08001ac4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_IRQHandler>
	...

08001ac8 <webserver_http_encode_html_response>:
  * @param  html_size     : html body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_html_response(char *html_response,
                                                            int html_size)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(html_response, 0, strlen((char *)html_response));
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7fe fbd1 	bl	800028c <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f011 fe62 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(html_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f012 fe96 	bl	801482e <strcpy>

  /* Add http server header */
  strcat(html_response, http_headers[HTTP_HEADER_SERVER]);
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f012 fe81 	bl	8014810 <strcat>

  /* Add http control headers */
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_ORIGIN]);
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f012 fe7b 	bl	8014810 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_METHODS]);
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f012 fe75 	bl	8014810 <strcat>
  strcat(html_response, http_headers[HTTP_HEADER_CONTROL_HEADERS]);
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f012 fe6f 	bl	8014810 <strcat>

  /* Add http content type header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f012 fe69 	bl	8014810 <strcat>
  strcat(html_response, http_content_types[HTTP_HEADER_CONTENT_HTML]);
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <webserver_http_encode_html_response+0xf4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f012 fe63 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f012 fe5d 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(html_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f012 fe57 	bl	8014810 <strcat>
  sprintf(body_length, "%d", html_size);
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	4915      	ldr	r1, [pc, #84]	; (8001bc0 <webserver_http_encode_html_response+0xf8>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f012 fe30 	bl	80147d0 <siprintf>
  strcat(html_response, body_length);
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	4619      	mov	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f012 fe4a 	bl	8014810 <strcat>
  strcat(html_response, "\r\n");
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7fe fb85 	bl	800028c <strlen>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <webserver_http_encode_html_response+0xfc>)
 8001b8c:	8811      	ldrh	r1, [r2, #0]
 8001b8e:	7892      	ldrb	r2, [r2, #2]
 8001b90:	8019      	strh	r1, [r3, #0]
 8001b92:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(html_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f012 fe38 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(html_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <webserver_http_encode_html_response+0xf0>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f012 fe32 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000030 	.word	0x20000030
 8001bc0:	08018568 	.word	0x08018568
 8001bc4:	0801856c 	.word	0x0801856c

08001bc8 <webserver_http_encode_css_response>:
  * @param  css_size     : css body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_css_response(char *css_response,
                                                           int css_size)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(css_response, 0, strlen((char *)css_response));
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7fe fb51 	bl	800028c <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f011 fde2 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(css_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <webserver_http_encode_css_response+0xcc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f012 fe16 	bl	801482e <strcpy>

  /* Add http server header */
  strcat(css_response, http_headers[HTTP_HEADER_SERVER]);
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <webserver_http_encode_css_response+0xcc>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f012 fe01 	bl	8014810 <strcat>

  /* Add http content type header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <webserver_http_encode_css_response+0xcc>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	4619      	mov	r1, r3
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f012 fdfb 	bl	8014810 <strcat>
  strcat(css_response, http_content_types[HTTP_HEADER_CONTENT_CSS]);
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <webserver_http_encode_css_response+0xd0>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f012 fdf5 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <webserver_http_encode_css_response+0xcc>)
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f012 fdef 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(css_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <webserver_http_encode_css_response+0xcc>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f012 fde9 	bl	8014810 <strcat>
  sprintf(body_length, "%d", css_size);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	4915      	ldr	r1, [pc, #84]	; (8001c9c <webserver_http_encode_css_response+0xd4>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f012 fdc2 	bl	80147d0 <siprintf>
  strcat(css_response, body_length);
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f012 fddc 	bl	8014810 <strcat>
  strcat(css_response, "\r\n");
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7fe fb17 	bl	800028c <strlen>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <webserver_http_encode_css_response+0xd8>)
 8001c68:	8811      	ldrh	r1, [r2, #0]
 8001c6a:	7892      	ldrb	r2, [r2, #2]
 8001c6c:	8019      	strh	r1, [r3, #0]
 8001c6e:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(css_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <webserver_http_encode_css_response+0xcc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f012 fdca 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(css_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <webserver_http_encode_css_response+0xcc>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4619      	mov	r1, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f012 fdc4 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000030 	.word	0x20000030
 8001c9c:	08018568 	.word	0x08018568
 8001ca0:	0801856c 	.word	0x0801856c

08001ca4 <webserver_http_encode_js_response>:
  * @param  js_size     : js body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_js_response(char *js_response,
                                                          int js_size)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(js_response, 0, strlen((char *)js_response));
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7fe fae3 	bl	800028c <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f011 fd74 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(js_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <webserver_http_encode_js_response+0xcc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f012 fda8 	bl	801482e <strcpy>

  /* Add http server header */
  strcat(js_response, http_headers[HTTP_HEADER_SERVER]);
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <webserver_http_encode_js_response+0xcc>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f012 fd93 	bl	8014810 <strcat>

  /* Add http content type header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <webserver_http_encode_js_response+0xcc>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f012 fd8d 	bl	8014810 <strcat>
  strcat(js_response, http_content_types[HTTP_HEADER_CONTENT_JS]);
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <webserver_http_encode_js_response+0xd0>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f012 fd87 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <webserver_http_encode_js_response+0xcc>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f012 fd81 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(js_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <webserver_http_encode_js_response+0xcc>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f012 fd7b 	bl	8014810 <strcat>
  sprintf(body_length, "%d", js_size);
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	4915      	ldr	r1, [pc, #84]	; (8001d78 <webserver_http_encode_js_response+0xd4>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f012 fd54 	bl	80147d0 <siprintf>
  strcat(js_response, body_length);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f012 fd6e 	bl	8014810 <strcat>
  strcat(js_response, "\r\n");
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7fe faa9 	bl	800028c <strlen>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <webserver_http_encode_js_response+0xd8>)
 8001d44:	8811      	ldrh	r1, [r2, #0]
 8001d46:	7892      	ldrb	r2, [r2, #2]
 8001d48:	8019      	strh	r1, [r3, #0]
 8001d4a:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(js_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <webserver_http_encode_js_response+0xcc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f012 fd5c 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(js_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <webserver_http_encode_js_response+0xcc>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f012 fd56 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000030 	.word	0x20000030
 8001d78:	08018568 	.word	0x08018568
 8001d7c:	0801856c 	.word	0x0801856c

08001d80 <webserver_http_encode_favicon_response>:
  * @param  favicon_size     : favicon body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_favicon_response(char *favicon_response,
                                                               int favicon_size)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous data */
  memset(favicon_response, 0, strlen((char *)favicon_response));
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7fe fa75 	bl	800028c <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	2100      	movs	r1, #0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f011 fd06 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(favicon_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f012 fd3a 	bl	801482e <strcpy>

  /* Add http server header */
  strcat(favicon_response, http_headers[HTTP_HEADER_SERVER]);
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f012 fd25 	bl	8014810 <strcat>

  /* Add http cache control header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CACHE_CONTROL]);
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f012 fd1f 	bl	8014810 <strcat>

  /* Add http content type header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f012 fd19 	bl	8014810 <strcat>
  strcat(favicon_response, http_content_types[HTTP_HEADER_CONTENT_FAVICON]);
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <webserver_http_encode_favicon_response+0xdc>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f012 fd13 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f012 fd0d 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f012 fd07 	bl	8014810 <strcat>
  sprintf(body_length, "%d", favicon_size);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4915      	ldr	r1, [pc, #84]	; (8001e60 <webserver_http_encode_favicon_response+0xe0>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f012 fce0 	bl	80147d0 <siprintf>
  strcat(favicon_response, body_length);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4619      	mov	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f012 fcfa 	bl	8014810 <strcat>
  strcat(favicon_response, "\r\n");
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fa35 	bl	800028c <strlen>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <webserver_http_encode_favicon_response+0xe4>)
 8001e2c:	8811      	ldrh	r1, [r2, #0]
 8001e2e:	7892      	ldrb	r2, [r2, #2]
 8001e30:	8019      	strh	r1, [r3, #0]
 8001e32:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(favicon_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f012 fce8 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(favicon_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <webserver_http_encode_favicon_response+0xd8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f012 fce2 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000030 	.word	0x20000030
 8001e60:	08018568 	.word	0x08018568
 8001e64:	0801856c 	.word	0x0801856c

08001e68 <webserver_http_encode_sensor_response>:
  * @param  sensor_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_sensor_response(char *sensor_response,
                                                              int sensor_size)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(sensor_response, 0, strlen(sensor_response));
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe fa01 	bl	800028c <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2100      	movs	r1, #0
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f011 fc92 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(sensor_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <webserver_http_encode_sensor_response+0xb4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f012 fcc6 	bl	801482e <strcpy>

  /* Add http content type header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <webserver_http_encode_sensor_response+0xb4>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f012 fcb1 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <webserver_http_encode_sensor_response+0xb4>)
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f012 fcab 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <webserver_http_encode_sensor_response+0xb4>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f012 fca5 	bl	8014810 <strcat>
  sprintf(body_length, "%d", sensor_size);
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4914      	ldr	r1, [pc, #80]	; (8001f20 <webserver_http_encode_sensor_response+0xb8>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f012 fc7e 	bl	80147d0 <siprintf>
  strcat(sensor_response, body_length);
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f012 fc98 	bl	8014810 <strcat>
  strcat(sensor_response, "\r\n");
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7fe f9d3 	bl	800028c <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <webserver_http_encode_sensor_response+0xbc>)
 8001ef0:	8811      	ldrh	r1, [r2, #0]
 8001ef2:	7892      	ldrb	r2, [r2, #2]
 8001ef4:	8019      	strh	r1, [r3, #0]
 8001ef6:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(sensor_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <webserver_http_encode_sensor_response+0xb4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f012 fc86 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(sensor_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <webserver_http_encode_sensor_response+0xb4>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f012 fc80 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	08018568 	.word	0x08018568
 8001f24:	0801856c 	.word	0x0801856c

08001f28 <webserver_http_encode_woff2_response>:
  * @param  woff2_size     : sensor body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_woff2_response(char *woff2_response,
                                                             int woff2_size)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(woff2_response, 0, strlen(woff2_response));
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe f9a1 	bl	800028c <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2100      	movs	r1, #0
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f011 fc32 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(woff2_response, http_headers[HTTP_HEADER_ACCEPT]);
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <webserver_http_encode_woff2_response+0xb4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f012 fc66 	bl	801482e <strcpy>

  /* Add http content type header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <webserver_http_encode_woff2_response+0xb4>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f012 fc51 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <webserver_http_encode_woff2_response+0xb4>)
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f012 fc4b 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <webserver_http_encode_woff2_response+0xb4>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f012 fc45 	bl	8014810 <strcat>
  sprintf(body_length, "%d", woff2_size);
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <webserver_http_encode_woff2_response+0xb8>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f012 fc1e 	bl	80147d0 <siprintf>
  strcat(woff2_response, body_length);
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f012 fc38 	bl	8014810 <strcat>
  strcat(woff2_response, "\r\n");
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe f973 	bl	800028c <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <webserver_http_encode_woff2_response+0xbc>)
 8001fb0:	8811      	ldrh	r1, [r2, #0]
 8001fb2:	7892      	ldrb	r2, [r2, #2]
 8001fb4:	8019      	strh	r1, [r3, #0]
 8001fb6:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(woff2_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <webserver_http_encode_woff2_response+0xb4>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f012 fc26 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(woff2_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <webserver_http_encode_woff2_response+0xb4>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f012 fc20 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	08018568 	.word	0x08018568
 8001fe4:	0801856c 	.word	0x0801856c

08001fe8 <webserver_http_encode_json_response>:
  * @param  json_size     : json body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_json_response(char *json_response,
                                                            int json_size)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(json_response, 0, strlen(json_response));
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7fe f941 	bl	800028c <strlen>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	2100      	movs	r1, #0
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f011 fbd2 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(json_response, http_headers[HTTP_HEADER_ACCEPT]);
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <webserver_http_encode_json_response+0xc0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4619      	mov	r1, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f012 fc06 	bl	801482e <strcpy>

  /* Add http content type header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <webserver_http_encode_json_response+0xc0>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4619      	mov	r1, r3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f012 fbf1 	bl	8014810 <strcat>
  strcat(json_response, http_content_types[HTTP_HEADER_CONTENT_JSON]);
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <webserver_http_encode_json_response+0xc4>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f012 fbeb 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <webserver_http_encode_json_response+0xc0>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	4619      	mov	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f012 fbe5 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(json_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <webserver_http_encode_json_response+0xc0>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f012 fbdf 	bl	8014810 <strcat>
  sprintf(body_length, "%d", json_size);
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4915      	ldr	r1, [pc, #84]	; (80020b0 <webserver_http_encode_json_response+0xc8>)
 800205a:	4618      	mov	r0, r3
 800205c:	f012 fbb8 	bl	80147d0 <siprintf>
  strcat(json_response, body_length);
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f012 fbd2 	bl	8014810 <strcat>
  strcat(json_response, "\r\n");
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7fe f90d 	bl	800028c <strlen>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <webserver_http_encode_json_response+0xcc>)
 800207c:	8811      	ldrh	r1, [r2, #0]
 800207e:	7892      	ldrb	r2, [r2, #2]
 8002080:	8019      	strh	r1, [r3, #0]
 8002082:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(json_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <webserver_http_encode_json_response+0xc0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4619      	mov	r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f012 fbc0 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(json_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <webserver_http_encode_json_response+0xc0>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4619      	mov	r1, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f012 fbba 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000030 	.word	0x20000030
 80020b0:	08018568 	.word	0x08018568
 80020b4:	0801856c 	.word	0x0801856c

080020b8 <webserver_http_encode_image_response>:
  * @param  image_size     : image body size.
  * @retval Web Server status.
  */
WebServer_StatusTypeDef webserver_http_encode_image_response(char *image_response,
                                                             int image_size)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  char body_length[20] = {0};
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]

  /* Clear response buffer from any previous response */
  memset(image_response, 0, strlen(image_response));
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe f8d9 	bl	800028c <strlen>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	2100      	movs	r1, #0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f011 fb6a 	bl	80137ba <memset>

  /* Add http accept header */
  strcpy(image_response, http_headers[HTTP_HEADER_ACCEPT]);
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <webserver_http_encode_image_response+0xc0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f012 fb9e 	bl	801482e <strcpy>

  /* Add http content type header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_TYPE]);
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <webserver_http_encode_image_response+0xc0>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f012 fb89 	bl	8014810 <strcat>
  strcat(image_response, http_content_types[HTTP_HEADER_CONTENT_IMAGE]);
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <webserver_http_encode_image_response+0xc4>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f012 fb83 	bl	8014810 <strcat>

  /* Add http content range header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_RANGE]);
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <webserver_http_encode_image_response+0xc0>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f012 fb7d 	bl	8014810 <strcat>

  /* Add http content length header */
  strcat(image_response, http_headers[HTTP_HEADER_CONTENT_LENGTH]);
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <webserver_http_encode_image_response+0xc0>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f012 fb77 	bl	8014810 <strcat>
  sprintf(body_length, "%d", image_size);
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4915      	ldr	r1, [pc, #84]	; (8002180 <webserver_http_encode_image_response+0xc8>)
 800212a:	4618      	mov	r0, r3
 800212c:	f012 fb50 	bl	80147d0 <siprintf>
  strcat(image_response, body_length);
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f012 fb6a 	bl	8014810 <strcat>
  strcat(image_response, "\r\n");
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7fe f8a5 	bl	800028c <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <webserver_http_encode_image_response+0xcc>)
 800214c:	8811      	ldrh	r1, [r2, #0]
 800214e:	7892      	ldrb	r2, [r2, #2]
 8002150:	8019      	strh	r1, [r3, #0]
 8002152:	709a      	strb	r2, [r3, #2]

  /* Add http close connection header */
  strcat(image_response, http_headers[HTTP_HEADER_CONNECTION_CLOSE]);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <webserver_http_encode_image_response+0xc0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f012 fb58 	bl	8014810 <strcat>

  /* Add http end of headers */
  strcat(image_response, http_headers[HTTP_HEADER_HEADERS_END]);
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <webserver_http_encode_image_response+0xc0>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f012 fb52 	bl	8014810 <strcat>

  return WEBSERVER_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000
 800217c:	20000030 	.word	0x20000030
 8002180:	08018568 	.word	0x08018568
 8002184:	0801856c 	.word	0x0801856c

08002188 <webserver_http_start>:
  * @brief  Start HTTP web server process
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_http_start(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* create a TCP socket */
  printf("\r\n");
 800218c:	483a      	ldr	r0, [pc, #232]	; (8002278 <webserver_http_start+0xf0>)
 800218e:	f012 fb01 	bl	8014794 <puts>
  printf("*** Create TCP socket \r\n");
 8002192:	483a      	ldr	r0, [pc, #232]	; (800227c <webserver_http_start+0xf4>)
 8002194:	f012 fafe 	bl	8014794 <puts>
  if ((sock = net_socket(NET_AF_INET, NET_SOCK_STREAM, NET_IPPROTO_TCP)) < 0)
 8002198:	2206      	movs	r2, #6
 800219a:	2101      	movs	r1, #1
 800219c:	2002      	movs	r0, #2
 800219e:	f00f ff95 	bl	80120cc <net_socket>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a36      	ldr	r2, [pc, #216]	; (8002280 <webserver_http_start+0xf8>)
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <webserver_http_start+0xf8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da05      	bge.n	80021bc <webserver_http_start+0x34>
  {
    printf("*** Fail : Socket not created !!!! \r\n");
 80021b0:	4834      	ldr	r0, [pc, #208]	; (8002284 <webserver_http_start+0xfc>)
 80021b2:	f012 faef 	bl	8014794 <puts>
    return SOCKET_ERROR;
 80021b6:	f06f 0307 	mvn.w	r3, #7
 80021ba:	e05b      	b.n	8002274 <webserver_http_start+0xec>
  }
  printf("*** TCP socket created \r\n");
 80021bc:	4832      	ldr	r0, [pc, #200]	; (8002288 <webserver_http_start+0x100>)
 80021be:	f012 fae9 	bl	8014794 <puts>

  /* Bind socket */
  printf("*** Set port and bind socket \r\n");
 80021c2:	4832      	ldr	r0, [pc, #200]	; (800228c <webserver_http_start+0x104>)
 80021c4:	f012 fae6 	bl	8014794 <puts>
  address.sa_family = NET_AF_INET;
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <webserver_http_start+0x108>)
 80021ca:	2202      	movs	r2, #2
 80021cc:	705a      	strb	r2, [r3, #1]
  address.sa_len    = sizeof(net_sockaddr_t);
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <webserver_http_start+0x108>)
 80021d0:	2210      	movs	r2, #16
 80021d2:	701a      	strb	r2, [r3, #0]
  net_set_port((struct net_sockaddr *)&address, HTTP_SERVER_PORT);
 80021d4:	2150      	movs	r1, #80	; 0x50
 80021d6:	482e      	ldr	r0, [pc, #184]	; (8002290 <webserver_http_start+0x108>)
 80021d8:	f00f fa80 	bl	80116dc <net_set_port>
  if (net_bind(sock, (struct net_sockaddr *)&address, sizeof(address)) != 0U)
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <webserver_http_start+0xf8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2210      	movs	r2, #16
 80021e2:	492b      	ldr	r1, [pc, #172]	; (8002290 <webserver_http_start+0x108>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00f ff9f 	bl	8012128 <net_bind>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <webserver_http_start+0x74>
  {
    printf("*** Fail : Socket not binded !!!! \r\n");
 80021f0:	4828      	ldr	r0, [pc, #160]	; (8002294 <webserver_http_start+0x10c>)
 80021f2:	f012 facf 	bl	8014794 <puts>
    return SOCKET_ERROR;
 80021f6:	f06f 0307 	mvn.w	r3, #7
 80021fa:	e03b      	b.n	8002274 <webserver_http_start+0xec>
  }
  printf("*** Port and socket binded \r\n");
 80021fc:	4826      	ldr	r0, [pc, #152]	; (8002298 <webserver_http_start+0x110>)
 80021fe:	f012 fac9 	bl	8014794 <puts>

  /* listen for incoming connections */
  printf("*** Listen for incoming connections \r\n");
 8002202:	4826      	ldr	r0, [pc, #152]	; (800229c <webserver_http_start+0x114>)
 8002204:	f012 fac6 	bl	8014794 <puts>
  if (net_listen(sock, 5) != 0U)
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <webserver_http_start+0xf8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2105      	movs	r1, #5
 800220e:	4618      	mov	r0, r3
 8002210:	f010 f83c 	bl	801228c <net_listen>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <webserver_http_start+0x9e>
  {
    printf("*** Fail : Listening not started !!!! \r\n");
 800221a:	4821      	ldr	r0, [pc, #132]	; (80022a0 <webserver_http_start+0x118>)
 800221c:	f012 faba 	bl	8014794 <puts>
    return SOCKET_ERROR;
 8002220:	f06f 0307 	mvn.w	r3, #7
 8002224:	e026      	b.n	8002274 <webserver_http_start+0xec>
  }
  printf("*** Listening started \r\n");
 8002226:	481f      	ldr	r0, [pc, #124]	; (80022a4 <webserver_http_start+0x11c>)
 8002228:	f012 fab4 	bl	8014794 <puts>

  size = sizeof(remotehost);
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <webserver_http_start+0x120>)
 800222e:	2210      	movs	r2, #16
 8002230:	601a      	str	r2, [r3, #0]

  /* Infinite loop to serve socket communication */
  while (1)
  {
    /* Accept net socket requests */
    newconn = net_accept(sock, (struct net_sockaddr *)&remotehost, (uint32_t *)&size);
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <webserver_http_start+0xf8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <webserver_http_start+0x120>)
 8002238:	491c      	ldr	r1, [pc, #112]	; (80022ac <webserver_http_start+0x124>)
 800223a:	4618      	mov	r0, r3
 800223c:	f00f ffbe 	bl	80121bc <net_accept>
 8002240:	4603      	mov	r3, r0
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <webserver_http_start+0x128>)
 8002244:	6013      	str	r3, [r2, #0]

    /* Check if a valid new connection is requested */
    if (newconn > 0)
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <webserver_http_start+0x128>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	dd0d      	ble.n	800226a <webserver_http_start+0xe2>
    {
      /* Treat net socket requests */
      if (http_treat_request(newconn) != WEBSERVER_OK)
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <webserver_http_start+0x128>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f832 	bl	80022bc <http_treat_request>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0e9      	beq.n	8002232 <webserver_http_start+0xaa>
      {
        printf("*** Fail : Invalid HTTP request !!!! \r\n");
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <webserver_http_start+0x12c>)
 8002260:	f012 fa98 	bl	8014794 <puts>
        return SOCKET_ERROR;
 8002264:	f06f 0307 	mvn.w	r3, #7
 8002268:	e004      	b.n	8002274 <webserver_http_start+0xec>
      }
    }
    else
    {
      printf("*** Fail : Invalid socket connection !!!! \r\n");
 800226a:	4813      	ldr	r0, [pc, #76]	; (80022b8 <webserver_http_start+0x130>)
 800226c:	f012 fa92 	bl	8014794 <puts>
      return SOCKET_ERROR;
 8002270:	f06f 0307 	mvn.w	r3, #7
    }
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	08018570 	.word	0x08018570
 800227c:	08018574 	.word	0x08018574
 8002280:	2000042c 	.word	0x2000042c
 8002284:	0801858c 	.word	0x0801858c
 8002288:	080185b4 	.word	0x080185b4
 800228c:	080185d0 	.word	0x080185d0
 8002290:	20000438 	.word	0x20000438
 8002294:	080185f0 	.word	0x080185f0
 8002298:	08018614 	.word	0x08018614
 800229c:	08018634 	.word	0x08018634
 80022a0:	0801865c 	.word	0x0801865c
 80022a4:	08018684 	.word	0x08018684
 80022a8:	20000434 	.word	0x20000434
 80022ac:	20000448 	.word	0x20000448
 80022b0:	20000430 	.word	0x20000430
 80022b4:	0801869c 	.word	0x0801869c
 80022b8:	080186c4 	.word	0x080186c4

080022bc <http_treat_request>:
  * @brief  Treat webserver HTTP request
  * @param  socket : connection socket
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_treat_request(uint32_t socket)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	f5ad 6dbe 	sub.w	sp, sp, #1520	; 0x5f0
 80022c2:	af02      	add	r7, sp, #8
 80022c4:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80022c8:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80022cc:	6018      	str	r0, [r3, #0]
  unsigned char recv_buffer[HTTP_RECEIVE_BUFFER_SIZE];

  /* Clear receive buffer */
  memset((void*)recv_buffer, 0, HTTP_RECEIVE_BUFFER_SIZE);
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f011 fa6e 	bl	80137ba <memset>

  /* Read the http request */
  if (net_recvfrom(socket, recv_buffer, HTTP_RECEIVE_BUFFER_SIZE, 0, (struct net_sockaddr *)&remotehost, (uint32_t *)&size) < 0)
 80022de:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80022e2:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	f107 010c 	add.w	r1, r7, #12
 80022ec:	4ba1      	ldr	r3, [pc, #644]	; (8002574 <http_treat_request+0x2b8>)
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	4ba1      	ldr	r3, [pc, #644]	; (8002578 <http_treat_request+0x2bc>)
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2300      	movs	r3, #0
 80022f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80022fa:	f010 f851 	bl	80123a0 <net_recvfrom>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	da02      	bge.n	800230a <http_treat_request+0x4e>
  {
    return HTTP_ERROR;
 8002304:	f06f 0306 	mvn.w	r3, #6
 8002308:	e1fa      	b.n	8002700 <http_treat_request+0x444>
  }

  /* Treat get cmd */
  if (strncmp((char *)recv_buffer, http_get_cmd, http_get_cmd_size) == 0U)
 800230a:	4b9c      	ldr	r3, [pc, #624]	; (800257c <http_treat_request+0x2c0>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	499b      	ldr	r1, [pc, #620]	; (8002580 <http_treat_request+0x2c4>)
 8002314:	4618      	mov	r0, r3
 8002316:	f012 fa92 	bl	801483e <strncmp>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 81dd 	bne.w	80026dc <http_treat_request+0x420>
  {
    /* Send html */
    if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_html_cmd, http_html_cmd_size) == 0U)
 8002322:	4b96      	ldr	r3, [pc, #600]	; (800257c <http_treat_request+0x2c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f107 020c 	add.w	r2, r7, #12
 800232a:	4413      	add	r3, r2
 800232c:	4a95      	ldr	r2, [pc, #596]	; (8002584 <http_treat_request+0x2c8>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	4995      	ldr	r1, [pc, #596]	; (8002588 <http_treat_request+0x2cc>)
 8002332:	4618      	mov	r0, r3
 8002334:	f012 fa83 	bl	801483e <strncmp>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <http_treat_request+0x9e>
    {
      http_send_response(HTTP_HEADER_HTML_ID, socket, http_header_response, html_buff, html_buff_size);
 800233e:	4b93      	ldr	r3, [pc, #588]	; (800258c <http_treat_request+0x2d0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8002346:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4b90      	ldr	r3, [pc, #576]	; (8002590 <http_treat_request+0x2d4>)
 800234e:	4a91      	ldr	r2, [pc, #580]	; (8002594 <http_treat_request+0x2d8>)
 8002350:	6809      	ldr	r1, [r1, #0]
 8002352:	2000      	movs	r0, #0
 8002354:	f000 f9ee 	bl	8002734 <http_send_response>
 8002358:	e1c3      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send css shunk */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_css_chunk_cmd, http_css_chunk_cmd_size) == 0U)
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <http_treat_request+0x2c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f107 020c 	add.w	r2, r7, #12
 8002362:	4413      	add	r3, r2
 8002364:	4a8c      	ldr	r2, [pc, #560]	; (8002598 <http_treat_request+0x2dc>)
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	498c      	ldr	r1, [pc, #560]	; (800259c <http_treat_request+0x2e0>)
 800236a:	4618      	mov	r0, r3
 800236c:	f012 fa67 	bl	801483e <strncmp>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <http_treat_request+0xd6>
    {
      http_send_response(HTTP_HEADER_CSS_ID, socket, http_header_response, css_shunk_buff, css_shunk_buff_size);
 8002376:	4b8a      	ldr	r3, [pc, #552]	; (80025a0 <http_treat_request+0x2e4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800237e:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <http_treat_request+0x2e8>)
 8002386:	4a83      	ldr	r2, [pc, #524]	; (8002594 <http_treat_request+0x2d8>)
 8002388:	6809      	ldr	r1, [r1, #0]
 800238a:	2002      	movs	r0, #2
 800238c:	f000 f9d2 	bl	8002734 <http_send_response>
 8002390:	e1a7      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send main css */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_css_main_cmd, http_css_main_cmd_size) == 0U)
 8002392:	4b7a      	ldr	r3, [pc, #488]	; (800257c <http_treat_request+0x2c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f107 020c 	add.w	r2, r7, #12
 800239a:	4413      	add	r3, r2
 800239c:	4a82      	ldr	r2, [pc, #520]	; (80025a8 <http_treat_request+0x2ec>)
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4982      	ldr	r1, [pc, #520]	; (80025ac <http_treat_request+0x2f0>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	f012 fa4b 	bl	801483e <strncmp>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10d      	bne.n	80023ca <http_treat_request+0x10e>
    {
      http_send_response(HTTP_HEADER_CSS_ID, socket, http_header_response, css_main_buff, css_main_buff_size);
 80023ae:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <http_treat_request+0x2f4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80023b6:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4b7d      	ldr	r3, [pc, #500]	; (80025b4 <http_treat_request+0x2f8>)
 80023be:	4a75      	ldr	r2, [pc, #468]	; (8002594 <http_treat_request+0x2d8>)
 80023c0:	6809      	ldr	r1, [r1, #0]
 80023c2:	2002      	movs	r0, #2
 80023c4:	f000 f9b6 	bl	8002734 <http_send_response>
 80023c8:	e18b      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send js shunk */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_js_chunk_cmd, http_js_chunk_cmd_size) == 0U)
 80023ca:	4b6c      	ldr	r3, [pc, #432]	; (800257c <http_treat_request+0x2c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f107 020c 	add.w	r2, r7, #12
 80023d2:	4413      	add	r3, r2
 80023d4:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <http_treat_request+0x2fc>)
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	4978      	ldr	r1, [pc, #480]	; (80025bc <http_treat_request+0x300>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f012 fa2f 	bl	801483e <strncmp>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <http_treat_request+0x146>
    {
      http_send_response(HTTP_HEADER_JS_ID, socket, http_header_response, js_shunk_buff, js_shunk_buff_size);
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <http_treat_request+0x304>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80023ee:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <http_treat_request+0x308>)
 80023f6:	4a67      	ldr	r2, [pc, #412]	; (8002594 <http_treat_request+0x2d8>)
 80023f8:	6809      	ldr	r1, [r1, #0]
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 f99a 	bl	8002734 <http_send_response>
 8002400:	e16f      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send main js */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_js_main_cmd, http_js_main_cmd_size) == 0U)
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <http_treat_request+0x2c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f107 020c 	add.w	r2, r7, #12
 800240a:	4413      	add	r3, r2
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <http_treat_request+0x30c>)
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	496e      	ldr	r1, [pc, #440]	; (80025cc <http_treat_request+0x310>)
 8002412:	4618      	mov	r0, r3
 8002414:	f012 fa13 	bl	801483e <strncmp>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <http_treat_request+0x17e>
    {
      http_send_response(HTTP_HEADER_JS_ID, socket, http_header_response, js_main_buff, js_main_buff_size);
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <http_treat_request+0x314>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8002426:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4b69      	ldr	r3, [pc, #420]	; (80025d4 <http_treat_request+0x318>)
 800242e:	4a59      	ldr	r2, [pc, #356]	; (8002594 <http_treat_request+0x2d8>)
 8002430:	6809      	ldr	r1, [r1, #0]
 8002432:	2001      	movs	r0, #1
 8002434:	f000 f97e 	bl	8002734 <http_send_response>
 8002438:	e153      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send favicon */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_favicon_cmd, http_favicon_cmd_size) == 0U)
 800243a:	4b50      	ldr	r3, [pc, #320]	; (800257c <http_treat_request+0x2c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f107 020c 	add.w	r2, r7, #12
 8002442:	4413      	add	r3, r2
 8002444:	4a64      	ldr	r2, [pc, #400]	; (80025d8 <http_treat_request+0x31c>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4964      	ldr	r1, [pc, #400]	; (80025dc <http_treat_request+0x320>)
 800244a:	4618      	mov	r0, r3
 800244c:	f012 f9f7 	bl	801483e <strncmp>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <http_treat_request+0x1b6>
    {
      http_send_response(HTTP_HEADER_FAVICON_ID, socket, http_header_response, favicon_buff, favicon_buff_size);
 8002456:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <http_treat_request+0x324>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800245e:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <http_treat_request+0x328>)
 8002466:	4a4b      	ldr	r2, [pc, #300]	; (8002594 <http_treat_request+0x2d8>)
 8002468:	6809      	ldr	r1, [r1, #0]
 800246a:	2003      	movs	r0, #3
 800246c:	f000 f962 	bl	8002734 <http_send_response>
 8002470:	e137      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send json */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_json_cmd, http_json_cmd_size) == 0U)
 8002472:	4b42      	ldr	r3, [pc, #264]	; (800257c <http_treat_request+0x2c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f107 020c 	add.w	r2, r7, #12
 800247a:	4413      	add	r3, r2
 800247c:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <http_treat_request+0x32c>)
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	495a      	ldr	r1, [pc, #360]	; (80025ec <http_treat_request+0x330>)
 8002482:	4618      	mov	r0, r3
 8002484:	f012 f9db 	bl	801483e <strncmp>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <http_treat_request+0x1ee>
    {
      http_send_response(HTTP_HEADER_JSON_ID, socket, http_header_response, json_buff, json_buff_size);
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <http_treat_request+0x334>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8002496:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <http_treat_request+0x338>)
 800249e:	4a3d      	ldr	r2, [pc, #244]	; (8002594 <http_treat_request+0x2d8>)
 80024a0:	6809      	ldr	r1, [r1, #0]
 80024a2:	2009      	movs	r0, #9
 80024a4:	f000 f946 	bl	8002734 <http_send_response>
 80024a8:	e11b      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send font */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_font_cmd, http_font_cmd_size) == 0U)
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <http_treat_request+0x2c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f107 020c 	add.w	r2, r7, #12
 80024b2:	4413      	add	r3, r2
 80024b4:	4a50      	ldr	r2, [pc, #320]	; (80025f8 <http_treat_request+0x33c>)
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	4950      	ldr	r1, [pc, #320]	; (80025fc <http_treat_request+0x340>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f012 f9bf 	bl	801483e <strncmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <http_treat_request+0x226>
    {
      http_send_response(HTTP_HEADER_FONT_ID, socket, http_header_response, font_buff, font_buff_size);
 80024c6:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <http_treat_request+0x344>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80024ce:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <http_treat_request+0x348>)
 80024d6:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <http_treat_request+0x2d8>)
 80024d8:	6809      	ldr	r1, [r1, #0]
 80024da:	2008      	movs	r0, #8
 80024dc:	f000 f92a 	bl	8002734 <http_send_response>
 80024e0:	e0ff      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send image */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_image_cmd, http_image_cmd_size) == 0U)
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <http_treat_request+0x2c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f107 020c 	add.w	r2, r7, #12
 80024ea:	4413      	add	r3, r2
 80024ec:	4a46      	ldr	r2, [pc, #280]	; (8002608 <http_treat_request+0x34c>)
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	4946      	ldr	r1, [pc, #280]	; (800260c <http_treat_request+0x350>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f012 f9a3 	bl	801483e <strncmp>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <http_treat_request+0x25e>
    {
      http_send_response(HTTP_HEADER_IMAGE_ID, socket, http_header_response, image_buff, image_buff_size);
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <http_treat_request+0x354>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8002506:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4b41      	ldr	r3, [pc, #260]	; (8002614 <http_treat_request+0x358>)
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <http_treat_request+0x2d8>)
 8002510:	6809      	ldr	r1, [r1, #0]
 8002512:	200a      	movs	r0, #10
 8002514:	f000 f90e 	bl	8002734 <http_send_response>
 8002518:	e0e3      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send read temperature response */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_temperature_cmd, http_read_temperature_cmd_size) == 0U)
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <http_treat_request+0x2c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f107 020c 	add.w	r2, r7, #12
 8002522:	4413      	add	r3, r2
 8002524:	4a3c      	ldr	r2, [pc, #240]	; (8002618 <http_treat_request+0x35c>)
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	493c      	ldr	r1, [pc, #240]	; (800261c <http_treat_request+0x360>)
 800252a:	4618      	mov	r0, r3
 800252c:	f012 f987 	bl	801483e <strncmp>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d17a      	bne.n	800262c <http_treat_request+0x370>
    {
      webserver_temp_sensor_read(&temperature_value);
 8002536:	483a      	ldr	r0, [pc, #232]	; (8002620 <http_treat_request+0x364>)
 8002538:	f000 fa8a 	bl	8002a50 <webserver_temp_sensor_read>
      sprintf(http_sensor_value, "%g", temperature_value);
 800253c:	4b38      	ldr	r3, [pc, #224]	; (8002620 <http_treat_request+0x364>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f80f 	bl	8000564 <__aeabi_f2d>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4936      	ldr	r1, [pc, #216]	; (8002624 <http_treat_request+0x368>)
 800254c:	4836      	ldr	r0, [pc, #216]	; (8002628 <http_treat_request+0x36c>)
 800254e:	f012 f93f 	bl	80147d0 <siprintf>
      http_send_response(HTTP_HEADER_SENSOR_ID, socket, http_header_response, http_sensor_value, strlen(http_sensor_value));
 8002552:	4835      	ldr	r0, [pc, #212]	; (8002628 <http_treat_request+0x36c>)
 8002554:	f7fd fe9a 	bl	800028c <strlen>
 8002558:	4603      	mov	r3, r0
 800255a:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800255e:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <http_treat_request+0x36c>)
 8002566:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <http_treat_request+0x2d8>)
 8002568:	6809      	ldr	r1, [r1, #0]
 800256a:	2004      	movs	r0, #4
 800256c:	f000 f8e2 	bl	8002734 <http_send_response>
 8002570:	e0b7      	b.n	80026e2 <http_treat_request+0x426>
 8002572:	bf00      	nop
 8002574:	20000434 	.word	0x20000434
 8002578:	20000448 	.word	0x20000448
 800257c:	08018d80 	.word	0x08018d80
 8002580:	08018d78 	.word	0x08018d78
 8002584:	08018d88 	.word	0x08018d88
 8002588:	08018d84 	.word	0x08018d84
 800258c:	0808a78c 	.word	0x0808a78c
 8002590:	08089ed4 	.word	0x08089ed4
 8002594:	2000046c 	.word	0x2000046c
 8002598:	08018da4 	.word	0x08018da4
 800259c:	08018d8c 	.word	0x08018d8c
 80025a0:	080754fc 	.word	0x080754fc
 80025a4:	08066e90 	.word	0x08066e90
 80025a8:	08018dc0 	.word	0x08018dc0
 80025ac:	08018da8 	.word	0x08018da8
 80025b0:	08066e8c 	.word	0x08066e8c
 80025b4:	08018ea4 	.word	0x08018ea4
 80025b8:	08018dd8 	.word	0x08018dd8
 80025bc:	08018dc4 	.word	0x08018dc4
 80025c0:	0818a930 	.word	0x0818a930
 80025c4:	08114408 	.word	0x08114408
 80025c8:	08018df0 	.word	0x08018df0
 80025cc:	08018ddc 	.word	0x08018ddc
 80025d0:	08114404 	.word	0x08114404
 80025d4:	0810cb54 	.word	0x0810cb54
 80025d8:	08018e40 	.word	0x08018e40
 80025dc:	08018e30 	.word	0x08018e30
 80025e0:	08076520 	.word	0x08076520
 80025e4:	08075500 	.word	0x08075500
 80025e8:	08018e2c 	.word	0x08018e2c
 80025ec:	08018e1c 	.word	0x08018e1c
 80025f0:	0818aa70 	.word	0x0818aa70
 80025f4:	0818a934 	.word	0x0818a934
 80025f8:	08018e18 	.word	0x08018e18
 80025fc:	08018df4 	.word	0x08018df4
 8002600:	08089ed0 	.word	0x08089ed0
 8002604:	08076524 	.word	0x08076524
 8002608:	08018e60 	.word	0x08018e60
 800260c:	08018e44 	.word	0x08018e44
 8002610:	0810cb50 	.word	0x0810cb50
 8002614:	0808a790 	.word	0x0808a790
 8002618:	08018e78 	.word	0x08018e78
 800261c:	08018e64 	.word	0x08018e64
 8002620:	20000420 	.word	0x20000420
 8002624:	080186f0 	.word	0x080186f0
 8002628:	20000458 	.word	0x20000458
    }
    /* Send read pressure response */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_pressure_cmd, http_read_pressure_cmd_size) == 0U)
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <http_treat_request+0x450>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f107 020c 	add.w	r2, r7, #12
 8002634:	4413      	add	r3, r2
 8002636:	4a36      	ldr	r2, [pc, #216]	; (8002710 <http_treat_request+0x454>)
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <http_treat_request+0x458>)
 800263c:	4618      	mov	r0, r3
 800263e:	f012 f8fe 	bl	801483e <strncmp>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11d      	bne.n	8002684 <http_treat_request+0x3c8>
    {
      webserver_press_sensor_read(&pressure_value);
 8002648:	4833      	ldr	r0, [pc, #204]	; (8002718 <http_treat_request+0x45c>)
 800264a:	f000 fa79 	bl	8002b40 <webserver_press_sensor_read>
      sprintf(http_sensor_value, "%g", pressure_value);
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <http_treat_request+0x45c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff86 	bl	8000564 <__aeabi_f2d>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	492f      	ldr	r1, [pc, #188]	; (800271c <http_treat_request+0x460>)
 800265e:	4830      	ldr	r0, [pc, #192]	; (8002720 <http_treat_request+0x464>)
 8002660:	f012 f8b6 	bl	80147d0 <siprintf>
      http_send_response(HTTP_HEADER_SENSOR_ID, socket, http_header_response, http_sensor_value, strlen(http_sensor_value));
 8002664:	482e      	ldr	r0, [pc, #184]	; (8002720 <http_treat_request+0x464>)
 8002666:	f7fd fe11 	bl	800028c <strlen>
 800266a:	4603      	mov	r3, r0
 800266c:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8002670:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <http_treat_request+0x464>)
 8002678:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <http_treat_request+0x468>)
 800267a:	6809      	ldr	r1, [r1, #0]
 800267c:	2004      	movs	r0, #4
 800267e:	f000 f859 	bl	8002734 <http_send_response>
 8002682:	e02e      	b.n	80026e2 <http_treat_request+0x426>
    }
    /* Send read humidity response */
    else if (strncmp((char *)&recv_buffer[http_get_cmd_size], http_read_humidity_cmd, http_read_humidity_cmd_size) == 0U)
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <http_treat_request+0x450>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f107 020c 	add.w	r2, r7, #12
 800268c:	4413      	add	r3, r2
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <http_treat_request+0x46c>)
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	4926      	ldr	r1, [pc, #152]	; (800272c <http_treat_request+0x470>)
 8002694:	4618      	mov	r0, r3
 8002696:	f012 f8d2 	bl	801483e <strncmp>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d120      	bne.n	80026e2 <http_treat_request+0x426>
    {
      webserver_humid_sensor_read(&humidity_value);
 80026a0:	4823      	ldr	r0, [pc, #140]	; (8002730 <http_treat_request+0x474>)
 80026a2:	f000 fac0 	bl	8002c26 <webserver_humid_sensor_read>
      sprintf(http_sensor_value, "%g", humidity_value);
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <http_treat_request+0x474>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff5a 	bl	8000564 <__aeabi_f2d>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4919      	ldr	r1, [pc, #100]	; (800271c <http_treat_request+0x460>)
 80026b6:	481a      	ldr	r0, [pc, #104]	; (8002720 <http_treat_request+0x464>)
 80026b8:	f012 f88a 	bl	80147d0 <siprintf>
      http_send_response(HTTP_HEADER_SENSOR_ID, socket, http_header_response, http_sensor_value, strlen(http_sensor_value));
 80026bc:	4818      	ldr	r0, [pc, #96]	; (8002720 <http_treat_request+0x464>)
 80026be:	f7fd fde5 	bl	800028c <strlen>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80026c8:	f2a2 51e4 	subw	r1, r2, #1508	; 0x5e4
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <http_treat_request+0x464>)
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <http_treat_request+0x468>)
 80026d2:	6809      	ldr	r1, [r1, #0]
 80026d4:	2004      	movs	r0, #4
 80026d6:	f000 f82d 	bl	8002734 <http_send_response>
 80026da:	e002      	b.n	80026e2 <http_treat_request+0x426>
    }
  }
  else
  {
    return HTTP_ERROR;
 80026dc:	f06f 0306 	mvn.w	r3, #6
 80026e0:	e00e      	b.n	8002700 <http_treat_request+0x444>
  }

  /* Close connection socket */
  if (net_closesocket(socket) != 0U)
 80026e2:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80026e6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00f feb3 	bl	8012458 <net_closesocket>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <http_treat_request+0x442>
  {
    return HTTP_ERROR;
 80026f8:	f06f 0306 	mvn.w	r3, #6
 80026fc:	e000      	b.n	8002700 <http_treat_request+0x444>
  }

  return WEBSERVER_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	f507 67bd 	add.w	r7, r7, #1512	; 0x5e8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	08018d80 	.word	0x08018d80
 8002710:	08018e8c 	.word	0x08018e8c
 8002714:	08018e7c 	.word	0x08018e7c
 8002718:	20000424 	.word	0x20000424
 800271c:	080186f0 	.word	0x080186f0
 8002720:	20000458 	.word	0x20000458
 8002724:	2000046c 	.word	0x2000046c
 8002728:	08018ea0 	.word	0x08018ea0
 800272c:	08018e90 	.word	0x08018e90
 8002730:	20000428 	.word	0x20000428

08002734 <http_send_response>:
static WebServer_StatusTypeDef http_send_response(uint32_t headers_id,
                                                  uint32_t socket,
                                                  char *headers_buff,
                                                  const char *body_buff,
                                                  uint32_t data_size)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
  /* Send HTTP header response */
  if (http_send_headers_response(headers_id, socket, headers_buff, data_size) != WEBSERVER_OK)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f817 	bl	800277c <http_send_headers_response>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <http_send_response+0x26>
  {
    return HTTP_ERROR;
 8002754:	f06f 0306 	mvn.w	r3, #6
 8002758:	e00b      	b.n	8002772 <http_send_response+0x3e>
  }

  /* Send HTTP body response */
  if (http_send(socket, (const char *)body_buff, data_size) != WEBSERVER_OK)
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	68b8      	ldr	r0, [r7, #8]
 8002760:	f000 f8ae 	bl	80028c0 <http_send>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <http_send_response+0x3c>
  {
    return HTTP_ERROR;
 800276a:	f06f 0306 	mvn.w	r3, #6
 800276e:	e000      	b.n	8002772 <http_send_response+0x3e>
  }

  return WEBSERVER_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <http_send_headers_response>:
  */
static WebServer_StatusTypeDef http_send_headers_response(uint32_t socket,
                                                          uint32_t headers_id,
                                                          char *headers_buff,
                                                          uint32_t data_size)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  /* Check header ID */
  switch(headers_id)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b0a      	cmp	r3, #10
 800278e:	d871      	bhi.n	8002874 <http_send_headers_response+0xf8>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <http_send_headers_response+0x1c>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027c5 	.word	0x080027c5
 800279c:	080027f1 	.word	0x080027f1
 80027a0:	080027db 	.word	0x080027db
 80027a4:	08002807 	.word	0x08002807
 80027a8:	08002833 	.word	0x08002833
 80027ac:	08002875 	.word	0x08002875
 80027b0:	08002875 	.word	0x08002875
 80027b4:	08002875 	.word	0x08002875
 80027b8:	0800281d 	.word	0x0800281d
 80027bc:	08002849 	.word	0x08002849
 80027c0:	0800285f 	.word	0x0800285f
  {
    /* Send HTML header response */
  case HTTP_HEADER_HTML_ID:
    {
      if (webserver_http_encode_html_response(headers_buff, data_size) != WEBSERVER_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff f97d 	bl	8001ac8 <webserver_http_encode_html_response>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d052      	beq.n	800287a <http_send_headers_response+0xfe>
      {
        return HTTP_ERROR;
 80027d4:	f06f 0306 	mvn.w	r3, #6
 80027d8:	e06e      	b.n	80028b8 <http_send_headers_response+0x13c>
    }

    /* Send CSS header response */
  case HTTP_HEADER_CSS_ID:
    {
      if (webserver_http_encode_css_response(headers_buff, data_size) != WEBSERVER_OK)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff f9f2 	bl	8001bc8 <webserver_http_encode_css_response>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d049      	beq.n	800287e <http_send_headers_response+0x102>
      {
        return HTTP_ERROR;
 80027ea:	f06f 0306 	mvn.w	r3, #6
 80027ee:	e063      	b.n	80028b8 <http_send_headers_response+0x13c>
    }

    /* Send JS header response */
  case HTTP_HEADER_JS_ID:
    {
      if (webserver_http_encode_js_response(headers_buff, data_size) != WEBSERVER_OK)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fa55 	bl	8001ca4 <webserver_http_encode_js_response>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d040      	beq.n	8002882 <http_send_headers_response+0x106>
      {
        return HTTP_ERROR;
 8002800:	f06f 0306 	mvn.w	r3, #6
 8002804:	e058      	b.n	80028b8 <http_send_headers_response+0x13c>
    }

    /* Send favicon header response */
  case HTTP_HEADER_FAVICON_ID:
    {
      if (webserver_http_encode_favicon_response(headers_buff, data_size) != WEBSERVER_OK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fab8 	bl	8001d80 <webserver_http_encode_favicon_response>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d037      	beq.n	8002886 <http_send_headers_response+0x10a>
      {
        return HTTP_ERROR;
 8002816:	f06f 0306 	mvn.w	r3, #6
 800281a:	e04d      	b.n	80028b8 <http_send_headers_response+0x13c>
    }

    /* Send font header response */
  case HTTP_HEADER_FONT_ID:
    {
      if (webserver_http_encode_woff2_response(headers_buff, data_size) != WEBSERVER_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fb81 	bl	8001f28 <webserver_http_encode_woff2_response>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02e      	beq.n	800288a <http_send_headers_response+0x10e>
      {
        return HTTP_ERROR;
 800282c:	f06f 0306 	mvn.w	r3, #6
 8002830:	e042      	b.n	80028b8 <http_send_headers_response+0x13c>
    }

    /* Send sensor header response */
  case HTTP_HEADER_SENSOR_ID:
    {
      if (webserver_http_encode_sensor_response(headers_buff, data_size) != WEBSERVER_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fb16 	bl	8001e68 <webserver_http_encode_sensor_response>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d025      	beq.n	800288e <http_send_headers_response+0x112>
      {
        return HTTP_ERROR;
 8002842:	f06f 0306 	mvn.w	r3, #6
 8002846:	e037      	b.n	80028b8 <http_send_headers_response+0x13c>
    }

    /* Send JSON header response */
  case HTTP_HEADER_JSON_ID:
    {
      if (webserver_http_encode_json_response(headers_buff, data_size) != WEBSERVER_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fbcb 	bl	8001fe8 <webserver_http_encode_json_response>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01c      	beq.n	8002892 <http_send_headers_response+0x116>
      {
        return HTTP_ERROR;
 8002858:	f06f 0306 	mvn.w	r3, #6
 800285c:	e02c      	b.n	80028b8 <http_send_headers_response+0x13c>
    }

    /* Send image header response */
  case HTTP_HEADER_IMAGE_ID:
    {
      if (webserver_http_encode_image_response(headers_buff, data_size) != WEBSERVER_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fc28 	bl	80020b8 <webserver_http_encode_image_response>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d013      	beq.n	8002896 <http_send_headers_response+0x11a>
      {
        return HTTP_ERROR;
 800286e:	f06f 0306 	mvn.w	r3, #6
 8002872:	e021      	b.n	80028b8 <http_send_headers_response+0x13c>
      break;
    }

    /* Invalid header ID */
  default:
    return HTTP_ERROR;
 8002874:	f06f 0306 	mvn.w	r3, #6
 8002878:	e01e      	b.n	80028b8 <http_send_headers_response+0x13c>
      break;
 800287a:	bf00      	nop
 800287c:	e00c      	b.n	8002898 <http_send_headers_response+0x11c>
      break;
 800287e:	bf00      	nop
 8002880:	e00a      	b.n	8002898 <http_send_headers_response+0x11c>
      break;
 8002882:	bf00      	nop
 8002884:	e008      	b.n	8002898 <http_send_headers_response+0x11c>
      break;
 8002886:	bf00      	nop
 8002888:	e006      	b.n	8002898 <http_send_headers_response+0x11c>
      break;
 800288a:	bf00      	nop
 800288c:	e004      	b.n	8002898 <http_send_headers_response+0x11c>
      break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <http_send_headers_response+0x11c>
      break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <http_send_headers_response+0x11c>
      break;
 8002896:	bf00      	nop
    break;
  }

  /* Send HTTP built response */
  if (http_send(socket, (const char *)headers_buff, strlen((char*)headers_buff)) != WEBSERVER_OK)
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7fd fcf7 	bl	800028c <strlen>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f80b 	bl	80028c0 <http_send>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <http_send_headers_response+0x13a>
  {
    return HTTP_ERROR;
 80028b0:	f06f 0306 	mvn.w	r3, #6
 80028b4:	e000      	b.n	80028b8 <http_send_headers_response+0x13c>
  }

  return WEBSERVER_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <http_send>:
  * @retval Web Server status
  */
static WebServer_StatusTypeDef http_send(uint32_t socket,
                                         const char *frame,
                                         uint32_t frame_size)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  /* Setup send information */
  uint32_t data_size = frame_size;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t data_idx  = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]

  /* Check remaining data */
  while (data_size > 0U)
 80028d4:	e02b      	b.n	800292e <http_send+0x6e>
  {
    if (data_size >= MAX_SOCKET_DATASIZE)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80028dc:	d317      	bcc.n	800290e <http_send+0x4e>
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], MAX_SOCKET_DATASIZE, 0) <= 0U)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	18d1      	adds	r1, r2, r3
 80028e6:	2300      	movs	r3, #0
 80028e8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80028ec:	f00f fd0d 	bl	801230a <net_send>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <http_send+0x3c>
      {
        return HTTP_ERROR;
 80028f6:	f06f 0306 	mvn.w	r3, #6
 80028fa:	e01c      	b.n	8002936 <http_send+0x76>
      }

      /* Update send information */
      data_size -= MAX_SOCKET_DATASIZE;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8002902:	617b      	str	r3, [r7, #20]
      data_idx += MAX_SOCKET_DATASIZE;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e00f      	b.n	800292e <http_send+0x6e>
    }
    else
    {
      /* Send data */
      if (net_send(socket, (uint8_t*)&frame[data_idx], data_size, 0) <= 0U)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	18d1      	adds	r1, r2, r3
 8002916:	2300      	movs	r3, #0
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	f00f fcf6 	bl	801230a <net_send>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <http_send+0x6a>
      {
        return HTTP_ERROR;
 8002924:	f06f 0306 	mvn.w	r3, #6
 8002928:	e005      	b.n	8002936 <http_send+0x76>
      }

      /* Update send information */
      data_size = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  while (data_size > 0U)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1d0      	bne.n	80028d6 <http_send+0x16>
    }
  }

  return WEBSERVER_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <webserver_sensors_start>:
  * @brief  Start temperature, pressure and humidity sensors acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_sensors_start(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
  int   status = BSP_ERROR_NONE;
 8002944:	2300      	movs	r3, #0
 8002946:	607b      	str	r3, [r7, #4]

  /* De-Initialize function */
  status |= BSP_ENV_SENSOR_DeInit(0);
 8002948:	2000      	movs	r0, #0
 800294a:	f001 ff01 	bl	8004750 <BSP_ENV_SENSOR_DeInit>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4313      	orrs	r3, r2
 8002954:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_DeInit(1);
 8002956:	2001      	movs	r0, #1
 8002958:	f001 fefa 	bl	8004750 <BSP_ENV_SENSOR_DeInit>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4313      	orrs	r3, r2
 8002962:	607b      	str	r3, [r7, #4]

  /* Start sensors */
  status |= webserver_press_sensor_start();
 8002964:	f000 f888 	bl	8002a78 <webserver_press_sensor_start>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4313      	orrs	r3, r2
 800296e:	607b      	str	r3, [r7, #4]
  status |= webserver_humid_sensor_start();
 8002970:	f000 f8fa 	bl	8002b68 <webserver_humid_sensor_start>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4313      	orrs	r3, r2
 800297a:	607b      	str	r3, [r7, #4]
  status |= webserver_temp_sensor_start();
 800297c:	f000 f809 	bl	8002992 <webserver_temp_sensor_start>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4313      	orrs	r3, r2
 8002986:	607b      	str	r3, [r7, #4]

  return status;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <webserver_temp_sensor_start>:
  * @brief  Start temperature sensor acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_temp_sensor_start(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
  float outputDataRate = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
  int   status         = BSP_ERROR_NONE;
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]

  /* Initialize function */
  status |= BSP_ENV_SENSOR_Init(0, ENV_TEMPERATURE);
 80029a2:	2101      	movs	r1, #1
 80029a4:	2000      	movs	r0, #0
 80029a6:	f001 fe83 	bl	80046b0 <BSP_ENV_SENSOR_Init>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	607b      	str	r3, [r7, #4]

  /* Enable function */
  status |= BSP_ENV_SENSOR_Enable(0, ENV_TEMPERATURE);
 80029b2:	2101      	movs	r1, #1
 80029b4:	2000      	movs	r0, #0
 80029b6:	f001 ff01 	bl	80047bc <BSP_ENV_SENSOR_Enable>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	607b      	str	r3, [r7, #4]

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_TEMPERATURE, 12.5f);
 80029c2:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 80029c6:	2101      	movs	r1, #1
 80029c8:	2000      	movs	r0, #0
 80029ca:	f001 ffb3 	bl	8004934 <BSP_ENV_SENSOR_SetOutputDataRate>
 80029ce:	4602      	mov	r2, r0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_TEMPERATURE, &outputDataRate);
 80029d6:	463b      	mov	r3, r7
 80029d8:	461a      	mov	r2, r3
 80029da:	2101      	movs	r1, #1
 80029dc:	2000      	movs	r0, #0
 80029de:	f001 ff49 	bl	8004874 <BSP_ENV_SENSOR_GetOutputDataRate>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 12.5f)
 80029ea:	edd7 7a00 	vldr	s15, [r7]
 80029ee:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80029f2:	eef4 7a47 	vcmp.f32	s15, s14
 80029f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fa:	d003      	beq.n	8002a04 <webserver_temp_sensor_start+0x72>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f063 0305 	orn	r3, r3, #5
 8002a02:	607b      	str	r3, [r7, #4]
  }

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_TEMPERATURE, 7.0f);
 8002a04:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f001 ff92 	bl	8004934 <BSP_ENV_SENSOR_SetOutputDataRate>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_TEMPERATURE, &outputDataRate);
 8002a18:	463b      	mov	r3, r7
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f001 ff28 	bl	8004874 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 7.0f)
 8002a2c:	edd7 7a00 	vldr	s15, [r7]
 8002a30:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002a34:	eef4 7a47 	vcmp.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	d003      	beq.n	8002a46 <webserver_temp_sensor_start+0xb4>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f063 0305 	orn	r3, r3, #5
 8002a44:	607b      	str	r3, [r7, #4]
  }

  return status;
 8002a46:	687b      	ldr	r3, [r7, #4]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <webserver_temp_sensor_read>:
  * @brief  Read temperature sensor acquisition value.
  * @param  None
  * @retval BSP status
  */
int webserver_temp_sensor_read(float *value)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  int   status = BSP_ERROR_NONE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Get value function */
  status |= BSP_ENV_SENSOR_GetValue(0, ENV_TEMPERATURE, value);
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2000      	movs	r0, #0
 8002a62:	f001 ffc7 	bl	80049f4 <BSP_ENV_SENSOR_GetValue>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  return status;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <webserver_press_sensor_start>:
  * @brief  Start pressure sensor acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_press_sensor_start(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  float outputDataRate = 0;
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	603b      	str	r3, [r7, #0]
  int   status         = BSP_ERROR_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	607b      	str	r3, [r7, #4]

  /* Initialize function */
  status |= BSP_ENV_SENSOR_Init(1, ENV_PRESSURE);
 8002a88:	2102      	movs	r1, #2
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f001 fe10 	bl	80046b0 <BSP_ENV_SENSOR_Init>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	607b      	str	r3, [r7, #4]

  /* Enable function */
  status |= BSP_ENV_SENSOR_Enable(1, ENV_PRESSURE);
 8002a98:	2102      	movs	r1, #2
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f001 fe8e 	bl	80047bc <BSP_ENV_SENSOR_Enable>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	607b      	str	r3, [r7, #4]

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_PRESSURE, 75.0f);
 8002aa8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002b38 <webserver_press_sensor_start+0xc0>
 8002aac:	2102      	movs	r1, #2
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f001 ff40 	bl	8004934 <BSP_ENV_SENSOR_SetOutputDataRate>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_PRESSURE, &outputDataRate);
 8002abc:	463b      	mov	r3, r7
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f001 fed6 	bl	8004874 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 75.0f)
 8002ad0:	edd7 7a00 	vldr	s15, [r7]
 8002ad4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002b38 <webserver_press_sensor_start+0xc0>
 8002ad8:	eef4 7a47 	vcmp.f32	s15, s14
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	d003      	beq.n	8002aea <webserver_press_sensor_start+0x72>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f063 0305 	orn	r3, r3, #5
 8002ae8:	607b      	str	r3, [r7, #4]
  }

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_PRESSURE, 50.0f);
 8002aea:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002b3c <webserver_press_sensor_start+0xc4>
 8002aee:	2102      	movs	r1, #2
 8002af0:	2001      	movs	r0, #1
 8002af2:	f001 ff1f 	bl	8004934 <BSP_ENV_SENSOR_SetOutputDataRate>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_PRESSURE, &outputDataRate);
 8002afe:	463b      	mov	r3, r7
 8002b00:	461a      	mov	r2, r3
 8002b02:	2102      	movs	r1, #2
 8002b04:	2001      	movs	r0, #1
 8002b06:	f001 feb5 	bl	8004874 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 50.0f)
 8002b12:	edd7 7a00 	vldr	s15, [r7]
 8002b16:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002b3c <webserver_press_sensor_start+0xc4>
 8002b1a:	eef4 7a47 	vcmp.f32	s15, s14
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	d003      	beq.n	8002b2c <webserver_press_sensor_start+0xb4>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f063 0305 	orn	r3, r3, #5
 8002b2a:	607b      	str	r3, [r7, #4]
  }

  return status;
 8002b2c:	687b      	ldr	r3, [r7, #4]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	42960000 	.word	0x42960000
 8002b3c:	42480000 	.word	0x42480000

08002b40 <webserver_press_sensor_read>:
  * @brief  Read pressure sensor acquisition value.
  * @param  None
  * @retval BSP status
  */
int webserver_press_sensor_read(float *value)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  int   status = BSP_ERROR_NONE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get value function */
  status |= BSP_ENV_SENSOR_GetValue(1, ENV_PRESSURE, value);
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	2102      	movs	r1, #2
 8002b50:	2001      	movs	r0, #1
 8002b52:	f001 ff4f 	bl	80049f4 <BSP_ENV_SENSOR_GetValue>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  return status;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <webserver_humid_sensor_start>:
  * @brief  Start humidity sensor acquisition.
  * @param  None
  * @retval BSP status
  */
int webserver_humid_sensor_start(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  float outputDataRate = 0;
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	603b      	str	r3, [r7, #0]
  int   status         = BSP_ERROR_NONE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]

  /* Initialize function */
  status |= BSP_ENV_SENSOR_Init(0, ENV_HUMIDITY);
 8002b78:	2104      	movs	r1, #4
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f001 fd98 	bl	80046b0 <BSP_ENV_SENSOR_Init>
 8002b80:	4602      	mov	r2, r0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	607b      	str	r3, [r7, #4]

  /* Enable function */
  status |= BSP_ENV_SENSOR_Enable(0, ENV_HUMIDITY);
 8002b88:	2104      	movs	r1, #4
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f001 fe16 	bl	80047bc <BSP_ENV_SENSOR_Enable>
 8002b90:	4602      	mov	r2, r0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	607b      	str	r3, [r7, #4]

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_HUMIDITY, 12.5f);
 8002b98:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f001 fec8 	bl	8004934 <BSP_ENV_SENSOR_SetOutputDataRate>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	607b      	str	r3, [r7, #4]

  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_HUMIDITY, &outputDataRate);
 8002bac:	463b      	mov	r3, r7
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f001 fe5e 	bl	8004874 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 12.5f)
 8002bc0:	edd7 7a00 	vldr	s15, [r7]
 8002bc4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002bc8:	eef4 7a47 	vcmp.f32	s15, s14
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d003      	beq.n	8002bda <webserver_humid_sensor_start+0x72>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f063 0305 	orn	r3, r3, #5
 8002bd8:	607b      	str	r3, [r7, #4]
  }

  /* GetOutputDataRate and SetOutputDataRate functions */
  status |= BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_HUMIDITY, 7.0f);
 8002bda:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8002bde:	2104      	movs	r1, #4
 8002be0:	2000      	movs	r0, #0
 8002be2:	f001 fea7 	bl	8004934 <BSP_ENV_SENSOR_SetOutputDataRate>
 8002be6:	4602      	mov	r2, r0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	607b      	str	r3, [r7, #4]
  status |= BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_HUMIDITY, &outputDataRate);
 8002bee:	463b      	mov	r3, r7
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f001 fe3d 	bl	8004874 <BSP_ENV_SENSOR_GetOutputDataRate>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	607b      	str	r3, [r7, #4]
  if (outputDataRate != 7.0f)
 8002c02:	edd7 7a00 	vldr	s15, [r7]
 8002c06:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002c0a:	eef4 7a47 	vcmp.f32	s15, s14
 8002c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c12:	d003      	beq.n	8002c1c <webserver_humid_sensor_start+0xb4>
  {
    status |= BSP_ERROR_UNKNOWN_FAILURE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f063 0305 	orn	r3, r3, #5
 8002c1a:	607b      	str	r3, [r7, #4]
  }

  return status;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <webserver_humid_sensor_read>:
  * @brief  Read humidity sensor acquisition value.
  * @param  None
  * @retval BSP status
  */
int webserver_humid_sensor_read(float *value)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  int   status = BSP_ERROR_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Get value function */
  status |= BSP_ENV_SENSOR_GetValue(0, ENV_HUMIDITY, value);
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	2104      	movs	r1, #4
 8002c36:	2000      	movs	r0, #0
 8002c38:	f001 fedc 	bl	80049f4 <BSP_ENV_SENSOR_GetValue>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

  return status;
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <app_entry>:
  * @brief  App main program
  * @param  None
  * @retval None
  */
void app_entry(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
  /* Initialize web server system */
  if (system_init() != WEBSERVER_OK)
 8002c52:	f7fe fe1b 	bl	800188c <system_init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <app_entry+0x12>
  {
    webserver_process_error();
 8002c5c:	f000 f820 	bl	8002ca0 <webserver_process_error>
  }

  /* Initialize wifi connection */
  if (webserver_wifi_init() != WEBSERVER_OK)
 8002c60:	f000 f829 	bl	8002cb6 <webserver_wifi_init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <app_entry+0x20>
  {
    webserver_process_error();
 8002c6a:	f000 f819 	bl	8002ca0 <webserver_process_error>
  }

  /* Print web server header in hyperterminal */
  webserver_console_print_header();
 8002c6e:	f7fe fa35 	bl	80010dc <webserver_console_print_header>

  /* Connect to available wifi */
  if (webserver_wifi_connect() != WEBSERVER_OK)
 8002c72:	f000 f84f 	bl	8002d14 <webserver_wifi_connect>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <app_entry+0x32>
  {
    webserver_process_error();
 8002c7c:	f000 f810 	bl	8002ca0 <webserver_process_error>
  }

  /* Start sensors */
  if (webserver_sensors_start() != BSP_ERROR_NONE)
 8002c80:	f7ff fe5d 	bl	800293e <webserver_sensors_start>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <app_entry+0x40>
  {
    webserver_process_error();
 8002c8a:	f000 f809 	bl	8002ca0 <webserver_process_error>
  }

  /* Start web server */
  if (webserver_http_start() != WEBSERVER_OK)
 8002c8e:	f7ff fa7b 	bl	8002188 <webserver_http_start>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <app_entry+0x4e>
  {
    webserver_process_error();
 8002c98:	f000 f802 	bl	8002ca0 <webserver_process_error>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <webserver_process_error>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void webserver_process_error(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	bf00      	nop
  /* Disable all interrupts */
  __disable_irq();

  /* De-Initialize GREEN led */
  BSP_LED_DeInit(LED_GREEN);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f001 f84b 	bl	8003d44 <BSP_LED_DeInit>

  /* Turn ON RED led */
  BSP_LED_On(LED_RED);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f001 f874 	bl	8003d9c <BSP_LED_On>

  while(1)
 8002cb4:	e7fe      	b.n	8002cb4 <webserver_process_error+0x14>

08002cb6 <webserver_wifi_init>:
  * @brief  Initialize wifi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_init(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	af00      	add	r7, sp, #0
  /* Wifi IO configuration */
  Wifi_IO_Init();
 8002cba:	f000 f95f 	bl	8002f7c <Wifi_IO_Init>

  /* Wifi SPI initialization and configuration */
  if (Wifi_SPI_Config() != WEBSERVER_OK)
 8002cbe:	f000 f8ff 	bl	8002ec0 <Wifi_SPI_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <webserver_wifi_init+0x18>
  {
    return WIFI_ERROR;
 8002cc8:	f06f 0305 	mvn.w	r3, #5
 8002ccc:	e000      	b.n	8002cd0 <webserver_wifi_init+0x1a>
  }

  return WEBSERVER_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <wifi_get_credentials>:
  * @brief  Get wifi credentials
  * @param  None
  * @retval Web Server status
  */
static WebServer_StatusTypeDef wifi_get_credentials(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get user SSID */
  if (webserver_console_get_ssid(net_wifi_registred_hotspot, SSID) != WEBSERVER_OK)
 8002cd8:	490b      	ldr	r1, [pc, #44]	; (8002d08 <wifi_get_credentials+0x34>)
 8002cda:	480c      	ldr	r0, [pc, #48]	; (8002d0c <wifi_get_credentials+0x38>)
 8002cdc:	f7fe fa14 	bl	8001108 <webserver_console_get_ssid>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <wifi_get_credentials+0x18>
  {
    return CONSOLE_ERROR;
 8002ce6:	f06f 0302 	mvn.w	r3, #2
 8002cea:	e00a      	b.n	8002d02 <wifi_get_credentials+0x2e>
  }

  /* Get user PWD */
  if (webserver_console_get_password(net_wifi_registred_hotspot, PassWord) != WEBSERVER_OK)
 8002cec:	4908      	ldr	r1, [pc, #32]	; (8002d10 <wifi_get_credentials+0x3c>)
 8002cee:	4807      	ldr	r0, [pc, #28]	; (8002d0c <wifi_get_credentials+0x38>)
 8002cf0:	f7fe fa30 	bl	8001154 <webserver_console_get_password>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <wifi_get_credentials+0x2c>
  {
    return CONSOLE_ERROR;
 8002cfa:	f06f 0302 	mvn.w	r3, #2
 8002cfe:	e000      	b.n	8002d02 <wifi_get_credentials+0x2e>
  }

  return WEBSERVER_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200007e0 	.word	0x200007e0
 8002d0c:	20000840 	.word	0x20000840
 8002d10:	20000800 	.word	0x20000800

08002d14 <webserver_wifi_connect>:
  * @brief  Connect wifi interface
  * @param  None
  * @retval Web Server status
  */
WebServer_StatusTypeDef webserver_wifi_connect(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  net_if_handle_t                *netif;
  static net_wifi_credentials_t  WifiCredentials = {0};

  /* start network interface */
  netif = NetInterfaceOn(mx_wifi_driver, hnet_notify);
 8002d1a:	4910      	ldr	r1, [pc, #64]	; (8002d5c <webserver_wifi_connect+0x48>)
 8002d1c:	4810      	ldr	r0, [pc, #64]	; (8002d60 <webserver_wifi_connect+0x4c>)
 8002d1e:	f000 fed1 	bl	8003ac4 <NetInterfaceOn>
 8002d22:	6078      	str	r0, [r7, #4]

  /* Check if a valid WIFI interface is initialized */
  if (NET_INTERFACE_IS_WIFI(netif))
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f00e fcfa 	bl	801171e <net_wifi_get_class>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10f      	bne.n	8002d50 <webserver_wifi_connect+0x3c>
  {
    /* Scan available WIFIs */
    scan_cmd(0, NULL);
 8002d30:	2100      	movs	r1, #0
 8002d32:	2000      	movs	r0, #0
 8002d34:	f000 fe0a 	bl	800394c <scan_cmd>

    /* Get user credentials */
    wifi_get_credentials();
 8002d38:	f7ff ffcc 	bl	8002cd4 <wifi_get_credentials>

    /* Scan available WIFIs */
    NetWifiGetDefaultStation(&WifiCredentials, net_wifi_registred_hotspot);
 8002d3c:	4909      	ldr	r1, [pc, #36]	; (8002d64 <webserver_wifi_connect+0x50>)
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <webserver_wifi_connect+0x54>)
 8002d40:	f000 fd1e 	bl	8003780 <NetWifiGetDefaultStation>

    /* Connect to selected WIFI */
    NetInterfaceConnect(netif, true, &WifiCredentials, NET_WIFI_MODE_STA);
 8002d44:	2300      	movs	r3, #0
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <webserver_wifi_connect+0x54>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 ff02 	bl	8003b54 <NetInterfaceConnect>
  }

  return WEBSERVER_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08012915 	.word	0x08012915
 8002d64:	20000840 	.word	0x20000840
 8002d68:	20000850 	.word	0x20000850

08002d6c <hnet_notify>:
  * @brief  Handles net notifications
  * @param  None
  * @retval None
  */
static void hnet_notify(void *context, uint32_t event_class, uint32_t event_id, void  *event_data)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  net_if_handle_t *netif = context;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	617b      	str	r3, [r7, #20]

  if (NET_EVENT_STATE_CHANGE == event_class)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d179      	bne.n	8002e78 <hnet_notify+0x10c>
  {
    net_state_t new_state = (net_state_t) event_id;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	74fb      	strb	r3, [r7, #19]
    switch (new_state)
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d876      	bhi.n	8002e7c <hnet_notify+0x110>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <hnet_notify+0x28>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002e69 	.word	0x08002e69
 8002d98:	08002db9 	.word	0x08002db9
 8002d9c:	08002dc1 	.word	0x08002dc1
 8002da0:	08002dc9 	.word	0x08002dc9
 8002da4:	08002e35 	.word	0x08002e35
 8002da8:	08002e3d 	.word	0x08002e3d
 8002dac:	08002e61 	.word	0x08002e61
 8002db0:	08002e59 	.word	0x08002e59
 8002db4:	08002e71 	.word	0x08002e71
    {
      /* Initialized state */
    case NET_STATE_INITIALIZED:
      {
        printf("- Network Interface initialized: \r\n");
 8002db8:	4833      	ldr	r0, [pc, #204]	; (8002e88 <hnet_notify+0x11c>)
 8002dba:	f011 fceb 	bl	8014794 <puts>
        break;
 8002dbe:	e05e      	b.n	8002e7e <hnet_notify+0x112>
      }

      /* Started state */
    case NET_STATE_STARTING:
      {
        printf("- Network Interface starting: \r\n");
 8002dc0:	4832      	ldr	r0, [pc, #200]	; (8002e8c <hnet_notify+0x120>)
 8002dc2:	f011 fce7 	bl	8014794 <puts>
        break;
 8002dc6:	e05a      	b.n	8002e7e <hnet_notify+0x112>
      }

      /* Ready state */
    case NET_STATE_READY:
      {
        printf("- Network Interface ready: \r\n");
 8002dc8:	4831      	ldr	r0, [pc, #196]	; (8002e90 <hnet_notify+0x124>)
 8002dca:	f011 fce3 	bl	8014794 <puts>
        printf("   - Device Name : %s. \r\n", netif->DeviceName);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3325      	adds	r3, #37	; 0x25
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	482f      	ldr	r0, [pc, #188]	; (8002e94 <hnet_notify+0x128>)
 8002dd6:	f011 fc57 	bl	8014688 <iprintf>
        printf("   - Device ID   : %s. \r\n", netif->DeviceID);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3365      	adds	r3, #101	; 0x65
 8002dde:	4619      	mov	r1, r3
 8002de0:	482d      	ldr	r0, [pc, #180]	; (8002e98 <hnet_notify+0x12c>)
 8002de2:	f011 fc51 	bl	8014688 <iprintf>
        printf("   - Device Version : %s. \r\n", netif->DeviceVer);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	33a5      	adds	r3, #165	; 0xa5
 8002dea:	4619      	mov	r1, r3
 8002dec:	482b      	ldr	r0, [pc, #172]	; (8002e9c <hnet_notify+0x130>)
 8002dee:	f011 fc4b 	bl	8014688 <iprintf>
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n", netif->macaddr.mac[0],
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8002df8:	4618      	mov	r0, r3
               netif->macaddr.mac[1], netif->macaddr.mac[2],
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n", netif->macaddr.mac[0],
 8002e00:	461c      	mov	r4, r3
               netif->macaddr.mac[1], netif->macaddr.mac[2],
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n", netif->macaddr.mac[0],
 8002e08:	461d      	mov	r5, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n", netif->macaddr.mac[0],
 8002e10:	461a      	mov	r2, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n", netif->macaddr.mac[0],
 8002e18:	4619      	mov	r1, r3
               netif->macaddr.mac[3], netif->macaddr.mac[4], netif->macaddr.mac[5]);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
        printf("   - MAC address: %x.%x.%x.%x.%x.%x\r\n", netif->macaddr.mac[0],
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	9101      	str	r1, [sp, #4]
 8002e24:	9200      	str	r2, [sp, #0]
 8002e26:	462b      	mov	r3, r5
 8002e28:	4622      	mov	r2, r4
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	481c      	ldr	r0, [pc, #112]	; (8002ea0 <hnet_notify+0x134>)
 8002e2e:	f011 fc2b 	bl	8014688 <iprintf>
        break;
 8002e32:	e024      	b.n	8002e7e <hnet_notify+0x112>
      }

      /* Connecting state */
    case NET_STATE_CONNECTING:
      {
        printf("- Network Interface connecting: \r\n");
 8002e34:	481b      	ldr	r0, [pc, #108]	; (8002ea4 <hnet_notify+0x138>)
 8002e36:	f011 fcad 	bl	8014794 <puts>
        break;
 8002e3a:	e020      	b.n	8002e7e <hnet_notify+0x112>
      }

      /* Connected state */
    case NET_STATE_CONNECTED:
      {
        printf("- Network Interface connected: \r\n");
 8002e3c:	481a      	ldr	r0, [pc, #104]	; (8002ea8 <hnet_notify+0x13c>)
 8002e3e:	f011 fca9 	bl	8014794 <puts>
        printf("   - IP address :  %s. \r\n", NET_NTOA(&netif->ipaddr));
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3304      	adds	r3, #4
 8002e46:	4618      	mov	r0, r3
 8002e48:	f00e fc38 	bl	80116bc <net_ntoa>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4816      	ldr	r0, [pc, #88]	; (8002eac <hnet_notify+0x140>)
 8002e52:	f011 fc19 	bl	8014688 <iprintf>
        break;
 8002e56:	e012      	b.n	8002e7e <hnet_notify+0x112>
      }

      /* Disconnecting state */
    case NET_STATE_DISCONNECTING:
      printf("- Network Interface disconnecting\r\n");
 8002e58:	4815      	ldr	r0, [pc, #84]	; (8002eb0 <hnet_notify+0x144>)
 8002e5a:	f011 fc9b 	bl	8014794 <puts>
      break;
 8002e5e:	e00e      	b.n	8002e7e <hnet_notify+0x112>

      /* Stopping state */
    case NET_STATE_STOPPING:
      {
        printf("- Network Interface stopping\r\n");
 8002e60:	4814      	ldr	r0, [pc, #80]	; (8002eb4 <hnet_notify+0x148>)
 8002e62:	f011 fc97 	bl	8014794 <puts>
        break;
 8002e66:	e00a      	b.n	8002e7e <hnet_notify+0x112>
      }

      /* De-Initialized state */
    case NET_STATE_DEINITIALIZED:
      {
        printf("- Network Interface de-initialized\r\n");
 8002e68:	4813      	ldr	r0, [pc, #76]	; (8002eb8 <hnet_notify+0x14c>)
 8002e6a:	f011 fc93 	bl	8014794 <puts>
        break;
 8002e6e:	e006      	b.n	8002e7e <hnet_notify+0x112>
      }

      /* Lost state */
    case NET_STATE_CONNECTION_LOST:
      {
        printf("- Network Interface connection lost\r\n");
 8002e70:	4812      	ldr	r0, [pc, #72]	; (8002ebc <hnet_notify+0x150>)
 8002e72:	f011 fc8f 	bl	8014794 <puts>
        break;
 8002e76:	e002      	b.n	8002e7e <hnet_notify+0x112>
    default:
      {
        break;
      }
    }
  }
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <hnet_notify+0x112>
        break;
 8002e7c:	bf00      	nop
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdb0      	pop	{r4, r5, r7, pc}
 8002e86:	bf00      	nop
 8002e88:	080186f4 	.word	0x080186f4
 8002e8c:	08018718 	.word	0x08018718
 8002e90:	08018738 	.word	0x08018738
 8002e94:	08018758 	.word	0x08018758
 8002e98:	08018774 	.word	0x08018774
 8002e9c:	08018790 	.word	0x08018790
 8002ea0:	080187b0 	.word	0x080187b0
 8002ea4:	080187d8 	.word	0x080187d8
 8002ea8:	080187fc 	.word	0x080187fc
 8002eac:	08018820 	.word	0x08018820
 8002eb0:	0801883c 	.word	0x0801883c
 8002eb4:	08018860 	.word	0x08018860
 8002eb8:	08018880 	.word	0x08018880
 8002ebc:	080188a4 	.word	0x080188a4

08002ec0 <Wifi_SPI_Config>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static WebServer_StatusTypeDef Wifi_SPI_Config(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Set SPI instance */
  Wifi_SPIHandle.Instance                        = SPI2;
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <Wifi_SPI_Config+0xb8>)
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Set parameter to be configured */
  Wifi_SPIHandle.Init.Mode                       = SPI_MODE_MASTER;
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002ecc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ed0:	605a      	str	r2, [r3, #4]
  Wifi_SPIHandle.Init.Direction                  = SPI_DIRECTION_2LINES;
 8002ed2:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  Wifi_SPIHandle.Init.DataSize                   = SPI_DATASIZE_8BIT;
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002eda:	2207      	movs	r2, #7
 8002edc:	60da      	str	r2, [r3, #12]
  Wifi_SPIHandle.Init.CLKPolarity                = SPI_POLARITY_LOW;
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  Wifi_SPIHandle.Init.CLKPhase                   = SPI_PHASE_1EDGE;
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
  Wifi_SPIHandle.Init.NSS                        = SPI_NSS_SOFT;
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002eec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ef0:	619a      	str	r2, [r3, #24]
  Wifi_SPIHandle.Init.BaudRatePrescaler          = SPI_BAUDRATEPRESCALER_4;
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef8:	61da      	str	r2, [r3, #28]
  Wifi_SPIHandle.Init.FirstBit                   = SPI_FIRSTBIT_MSB;
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
  Wifi_SPIHandle.Init.TIMode                     = SPI_TIMODE_DISABLE;
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
  Wifi_SPIHandle.Init.CRCCalculation             = SPI_CRCCALCULATION_DISABLE;
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
  Wifi_SPIHandle.Init.CRCPolynomial              = 0x0;
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	62da      	str	r2, [r3, #44]	; 0x2c
  Wifi_SPIHandle.Init.NSSPMode                   = SPI_NSS_PULSE_DISABLE;
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34
  Wifi_SPIHandle.Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
  Wifi_SPIHandle.Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
  Wifi_SPIHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  Wifi_SPIHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
  Wifi_SPIHandle.Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	649a      	str	r2, [r3, #72]	; 0x48
  Wifi_SPIHandle.Init.MasterInterDataIdleness    = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  Wifi_SPIHandle.Init.MasterReceiverAutoSusp     = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50
  Wifi_SPIHandle.Init.MasterKeepIOState          = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
  Wifi_SPIHandle.Init.IOSwap                     = SPI_IO_SWAP_DISABLE;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	659a      	str	r2, [r3, #88]	; 0x58
  Wifi_SPIHandle.Init.ReadyMasterManagement      = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	65da      	str	r2, [r3, #92]	; 0x5c
  Wifi_SPIHandle.Init.ReadyPolarity              = SPI_RDY_POLARITY_HIGH;
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60

  /* SPI initialization */
  if (HAL_SPI_Init(&Wifi_SPIHandle) != HAL_OK)
 8002f5a:	4806      	ldr	r0, [pc, #24]	; (8002f74 <Wifi_SPI_Config+0xb4>)
 8002f5c:	f00c fb3a 	bl	800f5d4 <HAL_SPI_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <Wifi_SPI_Config+0xac>
  {
    return PERIPH_ERROR;
 8002f66:	f06f 0304 	mvn.w	r3, #4
 8002f6a:	e000      	b.n	8002f6e <Wifi_SPI_Config+0xae>
  }

  return WEBSERVER_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000660 	.word	0x20000660
 8002f78:	40003800 	.word	0x40003800

08002f7c <Wifi_IO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void Wifi_IO_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f82:	f107 031c 	add.w	r3, r7, #28
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f92:	4b63      	ldr	r3, [pc, #396]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f98:	4a61      	ldr	r2, [pc, #388]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fa2:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb6:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fc0:	4b57      	ldr	r3, [pc, #348]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fd6:	f043 0308 	orr.w	r3, r3, #8
 8002fda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff2:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ffc:	4b48      	ldr	r3, [pc, #288]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8002ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <Wifi_IO_Init+0x1a4>)
 800300c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003010:	4a43      	ldr	r2, [pc, #268]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8003012:	f043 0302 	orr.w	r3, r3, #2
 8003016:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <Wifi_IO_Init+0x1a4>)
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <Wifi_IO_Init+0x1a4>)
 800302a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302e:	4a3c      	ldr	r2, [pc, #240]	; (8003120 <Wifi_IO_Init+0x1a4>)
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003038:	4b39      	ldr	r3, [pc, #228]	; (8003120 <Wifi_IO_Init+0x1a4>)
 800303a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_RESET_GPIO_Port, MXCHIP_RESET_Pin, GPIO_PIN_RESET);
 8003046:	2200      	movs	r2, #0
 8003048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800304c:	4835      	ldr	r0, [pc, #212]	; (8003124 <Wifi_IO_Init+0x1a8>)
 800304e:	f006 fe5d 	bl	8009d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003052:	2200      	movs	r2, #0
 8003054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003058:	4833      	ldr	r0, [pc, #204]	; (8003128 <Wifi_IO_Init+0x1ac>)
 800305a:	f006 fe57 	bl	8009d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_NSS_GPIO_Port, MXCHIP_NSS_Pin, GPIO_PIN_SET);
 800305e:	2201      	movs	r2, #1
 8003060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003064:	4831      	ldr	r0, [pc, #196]	; (800312c <Wifi_IO_Init+0x1b0>)
 8003066:	f006 fe51 	bl	8009d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MXCHIP_FLOW_Pin */
  GPIO_InitStruct.Pin = MXCHIP_FLOW_Pin;
 800306a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003070:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <Wifi_IO_Init+0x1b4>)
 8003072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MXCHIP_FLOW_GPIO_Port, &GPIO_InitStruct);
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	4619      	mov	r1, r3
 800307e:	482d      	ldr	r0, [pc, #180]	; (8003134 <Wifi_IO_Init+0x1b8>)
 8003080:	f006 fb76 	bl	8009770 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_RESET_Pin */
  GPIO_InitStruct.Pin = MXCHIP_RESET_Pin;
 8003084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308a:	2301      	movs	r3, #1
 800308c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MXCHIP_RESET_GPIO_Port, &GPIO_InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	4821      	ldr	r0, [pc, #132]	; (8003124 <Wifi_IO_Init+0x1a8>)
 800309e:	f006 fb67 	bl	8009770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a8:	2301      	movs	r3, #1
 80030aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	4619      	mov	r1, r3
 80030ba:	481b      	ldr	r0, [pc, #108]	; (8003128 <Wifi_IO_Init+0x1ac>)
 80030bc:	f006 fb58 	bl	8009770 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NSS_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NSS_Pin;
 80030c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MXCHIP_NSS_GPIO_Port, &GPIO_InitStruct);
 80030d2:	f107 031c 	add.w	r3, r7, #28
 80030d6:	4619      	mov	r1, r3
 80030d8:	4814      	ldr	r0, [pc, #80]	; (800312c <Wifi_IO_Init+0x1b0>)
 80030da:	f006 fb49 	bl	8009770 <HAL_GPIO_Init>

  /*Configure GPIO pin : MXCHIP_NOTIFY_Pin */
  GPIO_InitStruct.Pin = MXCHIP_NOTIFY_Pin;
 80030de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <Wifi_IO_Init+0x1b4>)
 80030e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MXCHIP_NOTIFY_GPIO_Port, &GPIO_InitStruct);
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	4619      	mov	r1, r3
 80030f2:	480d      	ldr	r0, [pc, #52]	; (8003128 <Wifi_IO_Init+0x1ac>)
 80030f4:	f006 fb3c 	bl	8009770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI14_IRQn, 5, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2105      	movs	r1, #5
 80030fc:	2019      	movs	r0, #25
 80030fe:	f005 fcd2 	bl	8008aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8003102:	2019      	movs	r0, #25
 8003104:	f005 fce9 	bl	8008ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 5, 0);
 8003108:	2200      	movs	r2, #0
 800310a:	2105      	movs	r1, #5
 800310c:	201a      	movs	r0, #26
 800310e:	f005 fcca 	bl	8008aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 8003112:	201a      	movs	r0, #26
 8003114:	f005 fce1 	bl	8008ada <HAL_NVIC_EnableIRQ>
}
 8003118:	bf00      	nop
 800311a:	3730      	adds	r7, #48	; 0x30
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	46020c00 	.word	0x46020c00
 8003124:	42021400 	.word	0x42021400
 8003128:	42020c00 	.word	0x42020c00
 800312c:	42020400 	.word	0x42020400
 8003130:	10110000 	.word	0x10110000
 8003134:	42021800 	.word	0x42021800

08003138 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief GPIO EXTI callback function
  * @param None
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003148:	d007      	beq.n	800315a <HAL_GPIO_EXTI_Rising_Callback+0x22>
 800314a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314e:	d109      	bne.n	8003164 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
  {
    /* MXCHIP flow pin notification */
  case MXCHIP_FLOW_Pin:
    {
      mxchip_WIFI_ISR(MXCHIP_FLOW_Pin);
 8003150:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003154:	f000 f8b0 	bl	80032b8 <mxchip_WIFI_ISR>
      break;
 8003158:	e005      	b.n	8003166 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

    /* MXCHIP notify pin notification */
  case (MXCHIP_NOTIFY_Pin):
    {
      mxchip_WIFI_ISR(MXCHIP_NOTIFY_Pin);
 800315a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800315e:	f000 f8ab 	bl	80032b8 <mxchip_WIFI_ISR>
      break;
 8003162:	e000      	b.n	8003166 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
    }

  default:
    {
      break;
 8003164:	bf00      	nop
    }
  }
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_SPI_RxCpltCallback>:
  * @param SpiHandle : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <HAL_SPI_RxCpltCallback+0x20>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d102      	bne.n	8003186 <HAL_SPI_RxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f881 	bl	8003288 <HAL_SPI_TransferCallback>
  }
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000660 	.word	0x20000660

08003194 <HAL_SPI_TxCpltCallback>:
  * @param SpiHandle : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_SPI_TxCpltCallback+0x20>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d102      	bne.n	80031aa <HAL_SPI_TxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f86f 	bl	8003288 <HAL_SPI_TransferCallback>
  }
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000660 	.word	0x20000660

080031b8 <HAL_SPI_TxRxCpltCallback>:
  * @param SpiHandle : pointer to a SPI_HandleTypeDef structure that contains the configuration information for SPI
  *                    module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if (hspi == &Wifi_SPIHandle)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <HAL_SPI_TxRxCpltCallback+0x20>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d102      	bne.n	80031ce <HAL_SPI_TxRxCpltCallback+0x16>
  {
    HAL_SPI_TransferCallback(hspi);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f85d 	bl	8003288 <HAL_SPI_TransferCallback>
  }
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000660 	.word	0x20000660

080031dc <mx_buf_alloc>:
  uint32_t header_len;
  uint8_t  data[1];
} mx_buf_t;

static inline mx_buf_t *mx_buf_alloc(uint32_t len)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  mx_buf_t *p = (mx_buf_t *) MX_WIFI_MALLOC(len + sizeof(mx_buf_t) -1U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	330b      	adds	r3, #11
 80031e8:	4618      	mov	r0, r3
 80031ea:	f010 fab9 	bl	8013760 <malloc>
 80031ee:	4603      	mov	r3, r0
 80031f0:	60fb      	str	r3, [r7, #12]
  if (NULL != p)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <mx_buf_alloc+0x28>
  {
    p->len = len;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
    p->header_len = 0;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	605a      	str	r2, [r3, #4]
  }
  return p;
 8003204:	68fb      	ldr	r3, [r7, #12]

}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <MX_WIFI_IO_DELAY>:
THREAD_DECLARE(MX_WIFI_TxRxThreadId);
static int8_t mx_wifi_spi_txrx_start(void);
static int8_t mx_wifi_spi_txrx_stop(void);

static void MX_WIFI_IO_DELAY(uint32_t ms)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  DELAYms(ms);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f005 fb46 	bl	80088a8 <HAL_Delay>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <MX_WIFI_SPI_Init>:
  * @brief  Initialize the SPI1
  * @param  None
  * @retval None
  */
int8_t MX_WIFI_SPI_Init(uint16_t mode)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  int8_t ret = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]

  if (MX_WIFI_RESET == mode)
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d113      	bne.n	8003260 <MX_WIFI_SPI_Init+0x3c>
  {
    MX_WIFI_HW_RESET();
 8003238:	2200      	movs	r2, #0
 800323a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800323e:	480d      	ldr	r0, [pc, #52]	; (8003274 <MX_WIFI_SPI_Init+0x50>)
 8003240:	f006 fd64 	bl	8009d0c <HAL_GPIO_WritePin>
 8003244:	2064      	movs	r0, #100	; 0x64
 8003246:	f005 fb2f 	bl	80088a8 <HAL_Delay>
 800324a:	2201      	movs	r2, #1
 800324c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003250:	4808      	ldr	r0, [pc, #32]	; (8003274 <MX_WIFI_SPI_Init+0x50>)
 8003252:	f006 fd5b 	bl	8009d0c <HAL_GPIO_WritePin>
 8003256:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800325a:	f005 fb25 	bl	80088a8 <HAL_Delay>
 800325e:	e003      	b.n	8003268 <MX_WIFI_SPI_Init+0x44>
  }
  else
  {
    ret = mx_wifi_spi_txrx_start();
 8003260:	f000 fa38 	bl	80036d4 <mx_wifi_spi_txrx_start>
 8003264:	4603      	mov	r3, r0
 8003266:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	42021400 	.word	0x42021400

08003278 <MX_WIFI_SPI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
static int8_t MX_WIFI_SPI_DeInit(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  mx_wifi_spi_txrx_stop();
 800327c:	f000 fa46 	bl	800370c <mx_wifi_spi_txrx_stop>
  return 0;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_SPI_TransferCallback>:

void HAL_SPI_TransferCallback(SPI_HandleTypeDef *hspi)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  SEM_SIGNAL(spi_transfer_done_sem);
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_SPI_TransferCallback+0x20>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <HAL_SPI_TransferCallback+0x20>)
 8003298:	6013      	str	r3, [r2, #0]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000125c 	.word	0x2000125c

080032ac <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  while (1);
 80032b4:	e7fe      	b.n	80032b4 <HAL_SPI_ErrorCallback+0x8>
	...

080032b8 <mxchip_WIFI_ISR>:
  * @brief  Interrupt handler for IRQ and FLOW pin
  * @param  None
  * @retval None
  */
void mxchip_WIFI_ISR(uint16_t isr_source)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  if (MX_WIFI_SPI_IRQ_PIN == isr_source)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c8:	d104      	bne.n	80032d4 <mxchip_WIFI_ISR+0x1c>
  {
      SEM_SIGNAL(spi_txrx_sem);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <mxchip_WIFI_ISR+0x3c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <mxchip_WIFI_ISR+0x3c>)
 80032d2:	6013      	str	r3, [r2, #0]
  }
  if (MX_WIFI_SPI_FLOW_PIN == isr_source)
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032da:	d104      	bne.n	80032e6 <mxchip_WIFI_ISR+0x2e>
  {
      SEM_SIGNAL(spi_flow_rise_sem);
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <mxchip_WIFI_ISR+0x40>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <mxchip_WIFI_ISR+0x40>)
 80032e4:	6013      	str	r3, [r2, #0]
  }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20001254 	.word	0x20001254
 80032f8:	20001258 	.word	0x20001258

080032fc <wait_flow_high>:


static int8_t wait_flow_high(uint32_t timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  int8_t        ret = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  if (SEM_WAIT(spi_flow_rise_sem, timeout, NULL) != SEM_OK)
 8003308:	2200      	movs	r2, #0
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	480d      	ldr	r0, [pc, #52]	; (8003344 <wait_flow_high+0x48>)
 800330e:	f003 f931 	bl	8006574 <noos_sem_wait>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <wait_flow_high+0x20>
  {
    ret = -1;
 8003318:	23ff      	movs	r3, #255	; 0xff
 800331a:	73fb      	strb	r3, [r7, #15]
  }
  if (MX_WIFI_SPI_FLOW_IS_LOW())
 800331c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003320:	4809      	ldr	r0, [pc, #36]	; (8003348 <wait_flow_high+0x4c>)
 8003322:	f006 fcdb 	bl	8009cdc <HAL_GPIO_ReadPin>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <wait_flow_high+0x3c>
  {
    printf("flow is low\r\n");
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <wait_flow_high+0x50>)
 800332e:	f011 fa31 	bl	8014794 <puts>
    return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003336:	e001      	b.n	800333c <wait_flow_high+0x40>
  }
  return ret;
 8003338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20001258 	.word	0x20001258
 8003348:	42021800 	.word	0x42021800
 800334c:	080188cc 	.word	0x080188cc

08003350 <MX_WIFI_SPI_Write>:


uint16_t MX_WIFI_SPI_Write(uint8_t *data, uint16_t len)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]

  if ((NULL == data) || (0 == len) || (len > SPI_DATA_SIZE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <MX_WIFI_SPI_Write+0x22>
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <MX_WIFI_SPI_Write+0x22>
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <MX_WIFI_SPI_Write+0x26>
  {
    return 0;
 8003372:	2300      	movs	r3, #0
 8003374:	e00b      	b.n	800338e <MX_WIFI_SPI_Write+0x3e>
  }

  spi_tx_data = data;
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <MX_WIFI_SPI_Write+0x4c>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6013      	str	r3, [r2, #0]
  spi_tx_len  = len;
 800337c:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <MX_WIFI_SPI_Write+0x50>)
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	8013      	strh	r3, [r2, #0]

  if (SEM_SIGNAL(spi_txrx_sem) != SEM_OK)
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <MX_WIFI_SPI_Write+0x54>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <MX_WIFI_SPI_Write+0x54>)
 800338a:	6013      	str	r3, [r2, #0]
  {
    /* Happen if received thread did not has a chance to run on time, need to increase priority */
    DEBUG_WARNING("Warning , spi semaphore has been already notified\r\n");
  }

  return len;
 800338c:	887b      	ldrh	r3, [r7, #2]
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20001260 	.word	0x20001260
 80033a0:	20001264 	.word	0x20001264
 80033a4:	20001254 	.word	0x20001254

080033a8 <MX_WIFI_SPI_Read>:

static uint16_t MX_WIFI_SPI_Read(uint8_t *buffer, uint16_t buff_size)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  return 0;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <TransmitReceive>:
}
#else

static int32_t   TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint8_t *rxdata, uint32_t datalen,
                                 uint32_t timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b088      	sub	sp, #32
 80033c6:	af02      	add	r7, sp, #8
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
  int32_t       ret;
  DEBUG_LOG("Spi Tx Rx %d\n", datalen);
  ret = HAL_SPI_TransmitReceive(hspi, txdata, rxdata, datalen, timeout);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f00c fdc0 	bl	800ff64 <HAL_SPI_TransmitReceive>
 80033e4:	4603      	mov	r3, r0
 80033e6:	617b      	str	r3, [r7, #20]
  return ret;
 80033e8:	697b      	ldr	r3, [r7, #20]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <Transmit>:

static int32_t   Transmit(SPI_HandleTypeDef *hspi, uint8_t *txdata, uint32_t datalen, uint32_t timeout)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	603b      	str	r3, [r7, #0]
  int32_t       ret;
  DEBUG_LOG("Spi Tx %d\n", datalen);
  ret = HAL_SPI_Transmit(hspi, txdata, datalen, timeout);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	b29a      	uxth	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f00c f9db 	bl	800f7c4 <HAL_SPI_Transmit>
 800340e:	4603      	mov	r3, r0
 8003410:	617b      	str	r3, [r7, #20]
  return ret;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <Receive>:

static int32_t   Receive(SPI_HandleTypeDef *hspi, uint8_t *rxdata, uint32_t datalen, uint32_t timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  int32_t       ret;
  DEBUG_LOG("Spi Rx %d\n", datalen);
  ret = HAL_SPI_Receive(hspi, rxdata, datalen, timeout);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	b29a      	uxth	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f00c fbd8 	bl	800fbe8 <HAL_SPI_Receive>
 8003438:	4603      	mov	r3, r0
 800343a:	617b      	str	r3, [r7, #20]
  return ret;
 800343c:	697b      	ldr	r3, [r7, #20]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <process_txrx_poll>:
#endif /* DMA_ON_USE */

void process_txrx_poll(uint32_t timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	; 0x30
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
  spi_header_t mheader, sheader;
  int ret;
  uint8_t *txdata, *p = NULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
  uint16_t datalen;
  static mx_buf_t      *netb = NULL;
  bool                first_miss = true;
 8003454:	2301      	movs	r3, #1
 8003456:	767b      	strb	r3, [r7, #25]
  MX_WIFI_SPI_CS_HIGH();
 8003458:	2201      	movs	r2, #1
 800345a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800345e:	4896      	ldr	r0, [pc, #600]	; (80036b8 <process_txrx_poll+0x270>)
 8003460:	f006 fc54 	bl	8009d0c <HAL_GPIO_WritePin>

  while (netb == NULL)
 8003464:	e012      	b.n	800348c <process_txrx_poll+0x44>
  {
    netb = MX_NET_BUFFER_ALLOC(MX_WIFI_BUFFER_SIZE);
 8003466:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800346a:	f7ff feb7 	bl	80031dc <mx_buf_alloc>
 800346e:	4603      	mov	r3, r0
 8003470:	4a92      	ldr	r2, [pc, #584]	; (80036bc <process_txrx_poll+0x274>)
 8003472:	6013      	str	r3, [r2, #0]
    if (netb == NULL)
 8003474:	4b91      	ldr	r3, [pc, #580]	; (80036bc <process_txrx_poll+0x274>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <process_txrx_poll+0x44>
    {
      DELAYms(1);
 800347c:	2001      	movs	r0, #1
 800347e:	f005 fa13 	bl	80088a8 <HAL_Delay>
      if (true == first_miss)
 8003482:	7e7b      	ldrb	r3, [r7, #25]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <process_txrx_poll+0x44>
      {
        first_miss = false;
 8003488:	2300      	movs	r3, #0
 800348a:	767b      	strb	r3, [r7, #25]
  while (netb == NULL)
 800348c:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <process_txrx_poll+0x274>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0e8      	beq.n	8003466 <process_txrx_poll+0x1e>
      }
    }
  }

  /* waiting for data to be sent or to be received */
  if (SEM_WAIT(spi_txrx_sem, timeout, NULL) == SEM_OK)
 8003494:	2200      	movs	r2, #0
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4889      	ldr	r0, [pc, #548]	; (80036c0 <process_txrx_poll+0x278>)
 800349a:	f003 f86b 	bl	8006574 <noos_sem_wait>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 8105 	bne.w	80036b0 <process_txrx_poll+0x268>
  {
    if (spi_tx_data == NULL)
 80034a6:	4b87      	ldr	r3, [pc, #540]	; (80036c4 <process_txrx_poll+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <process_txrx_poll+0x86>
    {
      if (!MX_WIFI_SPI_IRQ_IS_HIGH())
 80034ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034b2:	4885      	ldr	r0, [pc, #532]	; (80036c8 <process_txrx_poll+0x280>)
 80034b4:	f006 fc12 	bl	8009cdc <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	f040 80f7 	bne.w	80036ae <process_txrx_poll+0x266>
      {
        /* tx data null means no data to send , IRQ low means no data to received */
        return;
      }
      txdata = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	623b      	str	r3, [r7, #32]
      mheader.len = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	747b      	strb	r3, [r7, #17]
 80034c8:	2300      	movs	r3, #0
 80034ca:	74bb      	strb	r3, [r7, #18]
 80034cc:	e006      	b.n	80034dc <process_txrx_poll+0x94>
    }
    else
    {

      mheader.len = spi_tx_len;
 80034ce:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <process_txrx_poll+0x284>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	f8a7 3011 	strh.w	r3, [r7, #17]
      txdata = spi_tx_data;
 80034d6:	4b7b      	ldr	r3, [pc, #492]	; (80036c4 <process_txrx_poll+0x27c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	623b      	str	r3, [r7, #32]
    }

    mheader.type = SPI_WRITE;
 80034dc:	230a      	movs	r3, #10
 80034de:	743b      	strb	r3, [r7, #16]
    mheader.lenx = ~mheader.len;
 80034e0:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f8a7 3013 	strh.w	r3, [r7, #19]

    MX_WIFI_SPI_CS_LOW();
 80034ee:	2200      	movs	r2, #0
 80034f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034f4:	4870      	ldr	r0, [pc, #448]	; (80036b8 <process_txrx_poll+0x270>)
 80034f6:	f006 fc09 	bl	8009d0c <HAL_GPIO_WritePin>

    /* wait EMW to be ready */
    if (wait_flow_high(20) != 0)
 80034fa:	2014      	movs	r0, #20
 80034fc:	f7ff fefe 	bl	80032fc <wait_flow_high>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <process_txrx_poll+0xcc>
    {
      MX_WIFI_SPI_CS_HIGH();
 8003506:	2201      	movs	r2, #1
 8003508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800350c:	486a      	ldr	r0, [pc, #424]	; (80036b8 <process_txrx_poll+0x270>)
 800350e:	f006 fbfd 	bl	8009d0c <HAL_GPIO_WritePin>
      DEBUG_ERROR("wait flow timeout 0\r\n");
      return;
 8003512:	e0cd      	b.n	80036b0 <process_txrx_poll+0x268>
    }

    /* transmit only header part */
    if (HAL_OK != TransmitReceive(hspi_mx, (uint8_t *)&mheader, (uint8_t *)&sheader, sizeof(mheader), timeout))
 8003514:	4b6e      	ldr	r3, [pc, #440]	; (80036d0 <process_txrx_poll+0x288>)
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	f107 0208 	add.w	r2, r7, #8
 800351c:	f107 0110 	add.w	r1, r7, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2308      	movs	r3, #8
 8003526:	f7ff ff4c 	bl	80033c2 <TransmitReceive>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <process_txrx_poll+0xf6>
    {
      MX_WIFI_SPI_CS_HIGH();
 8003530:	2201      	movs	r2, #1
 8003532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003536:	4860      	ldr	r0, [pc, #384]	; (80036b8 <process_txrx_poll+0x270>)
 8003538:	f006 fbe8 	bl	8009d0c <HAL_GPIO_WritePin>
      DEBUG_ERROR("Send mheader error\r\n");
      return;
 800353c:	e0b8      	b.n	80036b0 <process_txrx_poll+0x268>
    }

    if (sheader.type != SPI_READ)
 800353e:	7a3b      	ldrb	r3, [r7, #8]
 8003540:	2b0b      	cmp	r3, #11
 8003542:	d006      	beq.n	8003552 <process_txrx_poll+0x10a>
    {
      DEBUG_ERROR("Invalid SPI type %02x\r\n", sheader.type);
      MX_WIFI_SPI_CS_HIGH();
 8003544:	2201      	movs	r2, #1
 8003546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800354a:	485b      	ldr	r0, [pc, #364]	; (80036b8 <process_txrx_poll+0x270>)
 800354c:	f006 fbde 	bl	8009d0c <HAL_GPIO_WritePin>
      return;
 8003550:	e0ae      	b.n	80036b0 <process_txrx_poll+0x268>
    }
    if ((sheader.len ^ sheader.lenx) != 0xFFFF)
 8003552:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 8003556:	b29a      	uxth	r2, r3
 8003558:	f8b7 300b 	ldrh.w	r3, [r7, #11]
 800355c:	b29b      	uxth	r3, r3
 800355e:	4053      	eors	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003566:	4293      	cmp	r3, r2
 8003568:	d006      	beq.n	8003578 <process_txrx_poll+0x130>
    {
      MX_WIFI_SPI_CS_HIGH();
 800356a:	2201      	movs	r2, #1
 800356c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003570:	4851      	ldr	r0, [pc, #324]	; (80036b8 <process_txrx_poll+0x270>)
 8003572:	f006 fbcb 	bl	8009d0c <HAL_GPIO_WritePin>
      DEBUG_ERROR("Invalid len %04x-%04x\r\n", sheader.len, sheader.lenx);
      return;
 8003576:	e09b      	b.n	80036b0 <process_txrx_poll+0x268>
    }

    /* send or received header must be not null */
    if ((sheader.len == 0) && (mheader.len == 0))
 8003578:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <process_txrx_poll+0x152>
 8003582:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <process_txrx_poll+0x152>
    {
      MX_WIFI_SPI_CS_HIGH();
 800358c:	2201      	movs	r2, #1
 800358e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003592:	4849      	ldr	r0, [pc, #292]	; (80036b8 <process_txrx_poll+0x270>)
 8003594:	f006 fbba 	bl	8009d0c <HAL_GPIO_WritePin>
      return;
 8003598:	e08a      	b.n	80036b0 <process_txrx_poll+0x268>
    }

    if ((sheader.len > SPI_DATA_SIZE) || (mheader.len > SPI_DATA_SIZE))
 800359a:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d806      	bhi.n	80035b6 <process_txrx_poll+0x16e>
 80035a8:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d906      	bls.n	80035c4 <process_txrx_poll+0x17c>
    {
      MX_WIFI_SPI_CS_HIGH();
 80035b6:	2201      	movs	r2, #1
 80035b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035bc:	483e      	ldr	r0, [pc, #248]	; (80036b8 <process_txrx_poll+0x270>)
 80035be:	f006 fba5 	bl	8009d0c <HAL_GPIO_WritePin>
      DEBUG_ERROR("SPI length invalid: %d-%d\r\n", sheader.len, mheader.len);
      return;
 80035c2:	e075      	b.n	80036b0 <process_txrx_poll+0x268>
    }

    /* keep max length */
    if (mheader.len > sheader.len)
 80035c4:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d904      	bls.n	80035de <process_txrx_poll+0x196>
    {
      datalen = mheader.len;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80035da:	837b      	strh	r3, [r7, #26]
 80035dc:	e003      	b.n	80035e6 <process_txrx_poll+0x19e>
    }
    else
    {
      datalen = sheader.len;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80035e4:	837b      	strh	r3, [r7, #26]
    }

    /* allocate a buffer */
    if (sheader.len > 0)
 80035e6:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <process_txrx_poll+0x1ba>
    {
      /* get payload */
      p = MX_NET_BUFFER_PAYLOAD(netb);
 80035f0:	4b32      	ldr	r3, [pc, #200]	; (80036bc <process_txrx_poll+0x274>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <process_txrx_poll+0x274>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	3308      	adds	r3, #8
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e001      	b.n	8003606 <process_txrx_poll+0x1be>
    }
    else
    {
      p = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
    }

    /* flow must be high */
    if (wait_flow_high(20) != 0)
 8003606:	2014      	movs	r0, #20
 8003608:	f7ff fe78 	bl	80032fc <wait_flow_high>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <process_txrx_poll+0x1d8>
    {
      MX_WIFI_SPI_CS_HIGH();
 8003612:	2201      	movs	r2, #1
 8003614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003618:	4827      	ldr	r0, [pc, #156]	; (80036b8 <process_txrx_poll+0x270>)
 800361a:	f006 fb77 	bl	8009d0c <HAL_GPIO_WritePin>
      DEBUG_ERROR("wait flow timeout 1\r\n");
      return;
 800361e:	e047      	b.n	80036b0 <process_txrx_poll+0x268>
    }

    /* transmit and received */
    if (NULL != txdata)
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01d      	beq.n	8003662 <process_txrx_poll+0x21a>
    {
      spi_tx_data = NULL;
 8003626:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <process_txrx_poll+0x27c>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
      spi_tx_len = 0;
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <process_txrx_poll+0x284>)
 800362e:	2200      	movs	r2, #0
 8003630:	801a      	strh	r2, [r3, #0]
      if (NULL != p)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <process_txrx_poll+0x208>
      {
        ret = TransmitReceive(hspi_mx, txdata, p, datalen, timeout);
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <process_txrx_poll+0x288>)
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	8b7a      	ldrh	r2, [r7, #26]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	6a39      	ldr	r1, [r7, #32]
 8003648:	f7ff febb 	bl	80033c2 <TransmitReceive>
 800364c:	6278      	str	r0, [r7, #36]	; 0x24
 800364e:	e010      	b.n	8003672 <process_txrx_poll+0x22a>
      }
      else
      {
        ret = Transmit(hspi_mx, txdata, datalen, timeout);
 8003650:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <process_txrx_poll+0x288>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	8b7a      	ldrh	r2, [r7, #26]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	f7ff feca 	bl	80033f2 <Transmit>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24
 8003660:	e007      	b.n	8003672 <process_txrx_poll+0x22a>
      }
    }
    else
    {
      ret = Receive(hspi_mx, p, datalen, timeout);
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <process_txrx_poll+0x288>)
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	8b7a      	ldrh	r2, [r7, #26]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69f9      	ldr	r1, [r7, #28]
 800366c:	f7ff fed6 	bl	800341c <Receive>
 8003670:	6278      	str	r0, [r7, #36]	; 0x24
    }

    if (HAL_OK != ret)
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <process_txrx_poll+0x23e>
    {
      MX_WIFI_SPI_CS_HIGH();
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800367e:	480e      	ldr	r0, [pc, #56]	; (80036b8 <process_txrx_poll+0x270>)
 8003680:	f006 fb44 	bl	8009d0c <HAL_GPIO_WritePin>
      DEBUG_ERROR("Transmit/Receive data timeout\r\n");
      return;
 8003684:	e014      	b.n	80036b0 <process_txrx_poll+0x268>
    }

    /* resize the input buffer and sent it back to processing thread */
    if (sheader.len > 0)
 8003686:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00f      	beq.n	80036b0 <process_txrx_poll+0x268>
    {
      MX_NET_BUFFER_SET_PAYLOAD_SIZE(netb, sheader.len);
 8003690:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 8003694:	b29a      	uxth	r2, r3
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <process_txrx_poll+0x274>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	601a      	str	r2, [r3, #0]
      mx_wifi_hci_input(netb);
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <process_txrx_poll+0x274>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 f90f 	bl	80068c4 <mx_wifi_hci_input>
      netb = NULL;
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <process_txrx_poll+0x274>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e000      	b.n	80036b0 <process_txrx_poll+0x268>
        return;
 80036ae:	bf00      	nop
    }
  }
}
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	42020400 	.word	0x42020400
 80036bc:	20001268 	.word	0x20001268
 80036c0:	20001254 	.word	0x20001254
 80036c4:	20001260 	.word	0x20001260
 80036c8:	42020c00 	.word	0x42020c00
 80036cc:	20001264 	.word	0x20001264
 80036d0:	2000004c 	.word	0x2000004c

080036d4 <mx_wifi_spi_txrx_start>:

static int8_t mx_wifi_spi_txrx_start(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
  int8_t ret = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	71fb      	strb	r3, [r7, #7]
  SEM_INIT(spi_txrx_sem, 2);
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <mx_wifi_spi_txrx_start+0x2c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
  SEM_INIT(spi_flow_rise_sem, 1);
 80036e4:	4b07      	ldr	r3, [pc, #28]	; (8003704 <mx_wifi_spi_txrx_start+0x30>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
  SEM_INIT(spi_transfer_done_sem, 1);
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <mx_wifi_spi_txrx_start+0x34>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
  if (THREAD_OK != THREAD_INIT(MX_WIFI_TxRxThreadId, mx_wifi_spi_txrx_task, NULL, MX_WIFI_SPI_THREAD_STACK_SIZE,
                               MX_WIFI_SPI_THREAD_PRIORITY))
  {
    ret = -1;
  }
  return ret;
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20001254 	.word	0x20001254
 8003704:	20001258 	.word	0x20001258
 8003708:	2000125c 	.word	0x2000125c

0800370c <mx_wifi_spi_txrx_stop>:

static int8_t mx_wifi_spi_txrx_stop(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  THREAD_DEINIT(MX_WIFI_TxRxThreadId);
  SEM_DEINIT(spi_txrx_sem);
  SEM_DEINIT(spi_flow_rise_sem);
  return 0;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <mxwifi_probe>:
  * @brief  probe function to register wifi to connectivity framework
  * @param  None
  * @retval None
  */
int32_t mxwifi_probe(void **ll_drv_context)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af02      	add	r7, sp, #8
 8003722:	6078      	str	r0, [r7, #4]
  if (MX_WIFI_RegisterBusIO(&MxWifiObj,
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <mxwifi_probe+0x38>)
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <mxwifi_probe+0x3c>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <mxwifi_probe+0x40>)
 800372e:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <mxwifi_probe+0x44>)
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <mxwifi_probe+0x48>)
 8003732:	480d      	ldr	r0, [pc, #52]	; (8003768 <mxwifi_probe+0x4c>)
 8003734:	f003 fca1 	bl	800707a <MX_WIFI_RegisterBusIO>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <mxwifi_probe+0x2c>
                            MX_WIFI_SPI_DeInit,
                            MX_WIFI_IO_DELAY,
                            MX_WIFI_SPI_Write,
                            MX_WIFI_SPI_Read) == 0)
  {
    *ll_drv_context = &MxWifiObj;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <mxwifi_probe+0x4c>)
 8003742:	601a      	str	r2, [r3, #0]
    return 0;
 8003744:	2300      	movs	r3, #0
 8003746:	e001      	b.n	800374c <mxwifi_probe+0x30>
  }

  return -1;
 8003748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	080033a9 	.word	0x080033a9
 8003758:	08003351 	.word	0x08003351
 800375c:	0800320f 	.word	0x0800320f
 8003760:	08003279 	.word	0x08003279
 8003764:	08003225 	.word	0x08003225
 8003768:	2000085c 	.word	0x2000085c

0800376c <wifi_obj_get>:

MX_WIFIObject_t *wifi_obj_get(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return &MxWifiObj;
 8003770:	4b02      	ldr	r3, [pc, #8]	; (800377c <wifi_obj_get+0x10>)
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	2000085c 	.word	0x2000085c

08003780 <NetWifiGetDefaultStation>:
{
  return NET_TICK();
}

void NetWifiGetDefaultStation(net_wifi_credentials_t *WifiCreds, ap_t net_wifi_registred_hotspot[])
{
 8003780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003784:	b093      	sub	sp, #76	; 0x4c
 8003786:	af08      	add	r7, sp, #32
 8003788:	6178      	str	r0, [r7, #20]
 800378a:	6139      	str	r1, [r7, #16]
  int32_t ret;

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	2000      	movs	r0, #0
 8003792:	f00e f8ab 	bl	80118ec <net_wifi_scan>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == NET_OK)
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <NetWifiGetDefaultStation+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 800379e:	2264      	movs	r2, #100	; 0x64
 80037a0:	4967      	ldr	r1, [pc, #412]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 80037a2:	2000      	movs	r0, #0
 80037a4:	f00e f8d4 	bl	8011950 <net_wifi_get_scan_results>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (ret > 0)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f340 80c1 	ble.w	8003934 <NetWifiGetDefaultStation+0x1b4>
  {
    for (uint32_t i = 0; i < ret; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	e0b8      	b.n	800392a <NetWifiGetDefaultStation+0x1aa>
    {
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e0aa      	b.n	8003914 <NetWifiGetDefaultStation+0x194>
      {
        if (strcmp((const char *)APs[i].ssid.value, net_wifi_registred_hotspot[j].ssid) == 0)
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2234      	movs	r2, #52	; 0x34
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a5e      	ldr	r2, [pc, #376]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 80037c8:	4413      	add	r3, r2
 80037ca:	1c58      	adds	r0, r3, #1
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fc fd4e 	bl	8000278 <strcmp>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 8095 	bne.w	800390e <NetWifiGetDefaultStation+0x18e>
        {
          WifiCreds->ssid = net_wifi_registred_hotspot[j].ssid;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	601a      	str	r2, [r3, #0]
          WifiCreds->psk = net_wifi_registred_hotspot[j].pwd;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4413      	add	r3, r2
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	605a      	str	r2, [r3, #4]
          WifiCreds->security_mode = APs[i].security;
 8003800:	4a4f      	ldr	r2, [pc, #316]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	2134      	movs	r1, #52	; 0x34
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	3328      	adds	r3, #40	; 0x28
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	609a      	str	r2, [r3, #8]
          printf("\r\n");
 8003816:	484b      	ldr	r0, [pc, #300]	; (8003944 <NetWifiGetDefaultStation+0x1c4>)
 8003818:	f010 ffbc 	bl	8014794 <puts>
          printf("\r\n");
 800381c:	4849      	ldr	r0, [pc, #292]	; (8003944 <NetWifiGetDefaultStation+0x1c4>)
 800381e:	f010 ffb9 	bl	8014794 <puts>
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2234      	movs	r2, #52	; 0x34
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	4a45      	ldr	r2, [pc, #276]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 800382c:	4413      	add	r3, r2
 800382e:	1c5c      	adds	r4, r3, #1
 8003830:	4a43      	ldr	r2, [pc, #268]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2134      	movs	r1, #52	; 0x34
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	332c      	adds	r3, #44	; 0x2c
 800383e:	781b      	ldrb	r3, [r3, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003840:	4698      	mov	r8, r3
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8003842:	4a3f      	ldr	r2, [pc, #252]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	2134      	movs	r1, #52	; 0x34
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3331      	adds	r3, #49	; 0x31
 8003850:	f993 3000 	ldrsb.w	r3, [r3]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003854:	4699      	mov	r9, r3
 8003856:	4a3a      	ldr	r2, [pc, #232]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2134      	movs	r1, #52	; 0x34
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3328      	adds	r3, #40	; 0x28
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f00d ff68 	bl	801173c <net_wifi_security_to_string>
 800386c:	4601      	mov	r1, r0
                 APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2234      	movs	r2, #52	; 0x34
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	3328      	adds	r3, #40	; 0x28
 8003878:	4a31      	ldr	r2, [pc, #196]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 800387a:	4413      	add	r3, r2
 800387c:	3305      	adds	r3, #5
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 800387e:	4830      	ldr	r0, [pc, #192]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	2534      	movs	r5, #52	; 0x34
 8003884:	fb05 f202 	mul.w	r2, r5, r2
 8003888:	4402      	add	r2, r0
 800388a:	3221      	adds	r2, #33	; 0x21
 800388c:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 800388e:	4616      	mov	r6, r2
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003890:	482b      	ldr	r0, [pc, #172]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	2534      	movs	r5, #52	; 0x34
 8003896:	fb05 f202 	mul.w	r2, r5, r2
 800389a:	4402      	add	r2, r0
 800389c:	3222      	adds	r2, #34	; 0x22
 800389e:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80038a0:	60fa      	str	r2, [r7, #12]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80038a2:	4827      	ldr	r0, [pc, #156]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	2534      	movs	r5, #52	; 0x34
 80038a8:	fb05 f202 	mul.w	r2, r5, r2
 80038ac:	4402      	add	r2, r0
 80038ae:	3223      	adds	r2, #35	; 0x23
 80038b0:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80038b2:	60ba      	str	r2, [r7, #8]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80038b4:	4822      	ldr	r0, [pc, #136]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 80038b6:	6a3a      	ldr	r2, [r7, #32]
 80038b8:	2534      	movs	r5, #52	; 0x34
 80038ba:	fb05 f202 	mul.w	r2, r5, r2
 80038be:	4402      	add	r2, r0
 80038c0:	3224      	adds	r2, #36	; 0x24
 80038c2:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80038c4:	607a      	str	r2, [r7, #4]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80038c6:	481e      	ldr	r0, [pc, #120]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	2534      	movs	r5, #52	; 0x34
 80038cc:	fb05 f202 	mul.w	r2, r5, r2
 80038d0:	4402      	add	r2, r0
 80038d2:	3225      	adds	r2, #37	; 0x25
 80038d4:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80038d6:	603a      	str	r2, [r7, #0]
                 APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80038d8:	4819      	ldr	r0, [pc, #100]	; (8003940 <NetWifiGetDefaultStation+0x1c0>)
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	2534      	movs	r5, #52	; 0x34
 80038de:	fb05 f202 	mul.w	r2, r5, r2
 80038e2:	4402      	add	r2, r0
 80038e4:	3226      	adds	r2, #38	; 0x26
 80038e6:	7812      	ldrb	r2, [r2, #0]
          printf("Selected Access Point\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80038e8:	9207      	str	r2, [sp, #28]
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	9006      	str	r0, [sp, #24]
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	9005      	str	r0, [sp, #20]
 80038f2:	68b8      	ldr	r0, [r7, #8]
 80038f4:	9004      	str	r0, [sp, #16]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	9203      	str	r2, [sp, #12]
 80038fa:	9602      	str	r6, [sp, #8]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	9100      	str	r1, [sp, #0]
 8003900:	464b      	mov	r3, r9
 8003902:	4642      	mov	r2, r8
 8003904:	4621      	mov	r1, r4
 8003906:	4810      	ldr	r0, [pc, #64]	; (8003948 <NetWifiGetDefaultStation+0x1c8>)
 8003908:	f010 febe 	bl	8014688 <iprintf>
          return;
 800390c:	e013      	b.n	8003936 <NetWifiGetDefaultStation+0x1b6>
      for (uint32_t j = 0; net_wifi_registred_hotspot[j].ssid != 0 ; j++)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f47f af4d 	bne.w	80037be <NetWifiGetDefaultStation+0x3e>
    for (uint32_t i = 0; i < ret; i++)
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	3301      	adds	r3, #1
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	429a      	cmp	r2, r3
 8003930:	f4ff af42 	bcc.w	80037b8 <NetWifiGetDefaultStation+0x38>
        }
      }
    }
  }
  return;
 8003934:	bf00      	nop
}
 8003936:	372c      	adds	r7, #44	; 0x2c
 8003938:	46bd      	mov	sp, r7
 800393a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800393e:	bf00      	nop
 8003940:	2000126c 	.word	0x2000126c
 8003944:	080188dc 	.word	0x080188dc
 8003948:	080188e0 	.word	0x080188e0

0800394c <scan_cmd>:

int32_t scan_cmd(int32_t argc, char **argv)
{
 800394c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003950:	b094      	sub	sp, #80	; 0x50
 8003952:	af0a      	add	r7, sp, #40	; 0x28
 8003954:	61f8      	str	r0, [r7, #28]
 8003956:	61b9      	str	r1, [r7, #24]
  int32_t ret;

  ret = net_wifi_scan(0, NET_WIFI_SCAN_PASSIVE, NULL);
 8003958:	2200      	movs	r2, #0
 800395a:	2100      	movs	r1, #0
 800395c:	2000      	movs	r0, #0
 800395e:	f00d ffc5 	bl	80118ec <net_wifi_scan>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == NET_OK)
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <scan_cmd+0x2a>
  {
    ret = net_wifi_get_scan_results(0, APs, MAX_SCAN_AP);
 800396a:	2264      	movs	r2, #100	; 0x64
 800396c:	4950      	ldr	r1, [pc, #320]	; (8003ab0 <scan_cmd+0x164>)
 800396e:	2000      	movs	r0, #0
 8003970:	f00d ffee 	bl	8011950 <net_wifi_get_scan_results>
 8003974:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (ret > 0)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	f340 8093 	ble.w	8003aa4 <scan_cmd+0x158>
  {
    printf("\r\n");
 800397e:	484d      	ldr	r0, [pc, #308]	; (8003ab4 <scan_cmd+0x168>)
 8003980:	f010 ff08 	bl	8014794 <puts>
    printf("*** Start wifi scan \r\n");
 8003984:	484c      	ldr	r0, [pc, #304]	; (8003ab8 <scan_cmd+0x16c>)
 8003986:	f010 ff05 	bl	8014794 <puts>
    printf("\r\n");
 800398a:	484a      	ldr	r0, [pc, #296]	; (8003ab4 <scan_cmd+0x168>)
 800398c:	f010 ff02 	bl	8014794 <puts>
    for (int i = 0; i < ret; i++)
 8003990:	2300      	movs	r3, #0
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	e079      	b.n	8003a8a <scan_cmd+0x13e>
    {
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2234      	movs	r2, #52	; 0x34
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	4a44      	ldr	r2, [pc, #272]	; (8003ab0 <scan_cmd+0x164>)
 80039a0:	4413      	add	r3, r2
 80039a2:	1c5c      	adds	r4, r3, #1
 80039a4:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <scan_cmd+0x164>)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	2134      	movs	r1, #52	; 0x34
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	332c      	adds	r3, #44	; 0x2c
 80039b2:	781b      	ldrb	r3, [r3, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80039b4:	4698      	mov	r8, r3
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80039b6:	4a3e      	ldr	r2, [pc, #248]	; (8003ab0 <scan_cmd+0x164>)
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	2134      	movs	r1, #52	; 0x34
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3331      	adds	r3, #49	; 0x31
 80039c4:	f993 3000 	ldrsb.w	r3, [r3]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 80039c8:	461e      	mov	r6, r3
 80039ca:	4a39      	ldr	r2, [pc, #228]	; (8003ab0 <scan_cmd+0x164>)
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	2134      	movs	r1, #52	; 0x34
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	3328      	adds	r3, #40	; 0x28
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f00d feae 	bl	801173c <net_wifi_security_to_string>
 80039e0:	4601      	mov	r1, r0
             i, APs[i].ssid.value, APs[i].channel, APs[i].rssi, net_wifi_security_to_string(APs[i].security), APs[i].country,
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2234      	movs	r2, #52	; 0x34
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	3328      	adds	r3, #40	; 0x28
 80039ec:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <scan_cmd+0x164>)
 80039ee:	4413      	add	r3, r2
 80039f0:	3305      	adds	r3, #5
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 80039f2:	482f      	ldr	r0, [pc, #188]	; (8003ab0 <scan_cmd+0x164>)
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	2534      	movs	r5, #52	; 0x34
 80039f8:	fb05 f202 	mul.w	r2, r5, r2
 80039fc:	4402      	add	r2, r0
 80039fe:	3221      	adds	r2, #33	; 0x21
 8003a00:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003a02:	617a      	str	r2, [r7, #20]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003a04:	482a      	ldr	r0, [pc, #168]	; (8003ab0 <scan_cmd+0x164>)
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	2534      	movs	r5, #52	; 0x34
 8003a0a:	fb05 f202 	mul.w	r2, r5, r2
 8003a0e:	4402      	add	r2, r0
 8003a10:	3222      	adds	r2, #34	; 0x22
 8003a12:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003a14:	613a      	str	r2, [r7, #16]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003a16:	4826      	ldr	r0, [pc, #152]	; (8003ab0 <scan_cmd+0x164>)
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	2534      	movs	r5, #52	; 0x34
 8003a1c:	fb05 f202 	mul.w	r2, r5, r2
 8003a20:	4402      	add	r2, r0
 8003a22:	3223      	adds	r2, #35	; 0x23
 8003a24:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003a26:	60fa      	str	r2, [r7, #12]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003a28:	4821      	ldr	r0, [pc, #132]	; (8003ab0 <scan_cmd+0x164>)
 8003a2a:	6a3a      	ldr	r2, [r7, #32]
 8003a2c:	2534      	movs	r5, #52	; 0x34
 8003a2e:	fb05 f202 	mul.w	r2, r5, r2
 8003a32:	4402      	add	r2, r0
 8003a34:	3224      	adds	r2, #36	; 0x24
 8003a36:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003a38:	60ba      	str	r2, [r7, #8]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003a3a:	481d      	ldr	r0, [pc, #116]	; (8003ab0 <scan_cmd+0x164>)
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	2534      	movs	r5, #52	; 0x34
 8003a40:	fb05 f202 	mul.w	r2, r5, r2
 8003a44:	4402      	add	r2, r0
 8003a46:	3225      	adds	r2, #37	; 0x25
 8003a48:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003a4a:	607a      	str	r2, [r7, #4]
             APs[i].bssid[0], APs[i].bssid[1], APs[i].bssid[2], APs[i].bssid[3], APs[i].bssid[4], APs[i].bssid[5]);
 8003a4c:	4818      	ldr	r0, [pc, #96]	; (8003ab0 <scan_cmd+0x164>)
 8003a4e:	6a3a      	ldr	r2, [r7, #32]
 8003a50:	2534      	movs	r5, #52	; 0x34
 8003a52:	fb05 f202 	mul.w	r2, r5, r2
 8003a56:	4402      	add	r2, r0
 8003a58:	3226      	adds	r2, #38	; 0x26
 8003a5a:	7812      	ldrb	r2, [r2, #0]
      printf("\t%d\t%32s ch %2d rss %d Security %10s country %4s bssid %02x.%02x.%02x.%02x.%02x.%02x\r\n",
 8003a5c:	9208      	str	r2, [sp, #32]
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	9007      	str	r0, [sp, #28]
 8003a62:	68b8      	ldr	r0, [r7, #8]
 8003a64:	9006      	str	r0, [sp, #24]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	9005      	str	r0, [sp, #20]
 8003a6a:	6938      	ldr	r0, [r7, #16]
 8003a6c:	9004      	str	r0, [sp, #16]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	9203      	str	r2, [sp, #12]
 8003a72:	9302      	str	r3, [sp, #8]
 8003a74:	9101      	str	r1, [sp, #4]
 8003a76:	9600      	str	r6, [sp, #0]
 8003a78:	4643      	mov	r3, r8
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	6a39      	ldr	r1, [r7, #32]
 8003a7e:	480f      	ldr	r0, [pc, #60]	; (8003abc <scan_cmd+0x170>)
 8003a80:	f010 fe02 	bl	8014688 <iprintf>
    for (int i = 0; i < ret; i++)
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	3301      	adds	r3, #1
 8003a88:	623b      	str	r3, [r7, #32]
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	db81      	blt.n	8003996 <scan_cmd+0x4a>
    }
    printf("\r\n");
 8003a92:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <scan_cmd+0x168>)
 8003a94:	f010 fe7e 	bl	8014794 <puts>
    printf("*** End of wifi scan \r\n");
 8003a98:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <scan_cmd+0x174>)
 8003a9a:	f010 fe7b 	bl	8014794 <puts>
    printf("\r\n");
 8003a9e:	4805      	ldr	r0, [pc, #20]	; (8003ab4 <scan_cmd+0x168>)
 8003aa0:	f010 fe78 	bl	8014794 <puts>
  }

  return 0;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3728      	adds	r7, #40	; 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab0:	2000126c 	.word	0x2000126c
 8003ab4:	080188dc 	.word	0x080188dc
 8003ab8:	0801894c 	.word	0x0801894c
 8003abc:	08018964 	.word	0x08018964
 8003ac0:	080189bc 	.word	0x080189bc

08003ac4 <NetInterfaceOn>:

net_if_handle_t *NetInterfaceOn(net_if_driver_init_func registred_driver, net_if_notify_func hnet_notify)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  net_if_handle_t *netif;
  net_event_handler_t *net_handler;
  int32_t ret;

  netif = NET_MALLOC(sizeof(net_if_handle_t));
 8003ace:	20f8      	movs	r0, #248	; 0xf8
 8003ad0:	f00f fe46 	bl	8013760 <malloc>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	613b      	str	r3, [r7, #16]

  if (netif == NULL)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <NetInterfaceOn+0x20>
  {
    printf("Unable to allocate network interface");
 8003ade:	481a      	ldr	r0, [pc, #104]	; (8003b48 <NetInterfaceOn+0x84>)
 8003ae0:	f010 fdd2 	bl	8014688 <iprintf>
  }
  memset(netif, 0, sizeof(net_if_handle_t));
 8003ae4:	22f8      	movs	r2, #248	; 0xf8
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	6938      	ldr	r0, [r7, #16]
 8003aea:	f00f fe66 	bl	80137ba <memset>

  net_handler = NET_MALLOC(sizeof(net_event_handler_t));
 8003aee:	2008      	movs	r0, #8
 8003af0:	f00f fe36 	bl	8013760 <malloc>
 8003af4:	4603      	mov	r3, r0
 8003af6:	60fb      	str	r3, [r7, #12]
  if (net_handler == NULL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <NetInterfaceOn+0x40>
  {
    printf("Unable to allocate net_handler");
 8003afe:	4813      	ldr	r0, [pc, #76]	; (8003b4c <NetInterfaceOn+0x88>)
 8003b00:	f010 fdc2 	bl	8014688 <iprintf>
  }

  net_handler->callback = hnet_notify;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	601a      	str	r2, [r3, #0]
  net_handler->context = netif;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Initialize the network stack */
  ret = net_if_init(netif, registred_driver, net_handler);
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	6938      	ldr	r0, [r7, #16]
 8003b16:	f00e f8b5 	bl	8011c84 <net_if_init>
 8003b1a:	6178      	str	r0, [r7, #20]
  if (NET_OK == ret)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <NetInterfaceOn+0x6c>
  {
    ret = net_if_wait_state(netif, NET_STATE_INITIALIZED, NET_STATE_TRANSITION_TIMEOUT);
 8003b22:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003b26:	2101      	movs	r1, #1
 8003b28:	6938      	ldr	r0, [r7, #16]
 8003b2a:	f00e f853 	bl	8011bd4 <net_if_wait_state>
 8003b2e:	6178      	str	r0, [r7, #20]
  }
  if (ret)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <NetInterfaceOn+0x78>
  {
    printf("Network interface initialization failed\r\n");
 8003b36:	4806      	ldr	r0, [pc, #24]	; (8003b50 <NetInterfaceOn+0x8c>)
 8003b38:	f010 fe2c 	bl	8014794 <puts>
  }
  return netif;
 8003b3c:	693b      	ldr	r3, [r7, #16]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	080189d4 	.word	0x080189d4
 8003b4c:	080189fc 	.word	0x080189fc
 8003b50:	08018a1c 	.word	0x08018a1c

08003b54 <NetInterfaceConnect>:
  }
  return;
}

void NetInterfaceConnect(net_if_handle_t *netif, bool dhcp_mode, void *credential, net_wifi_mode_t mode)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	460b      	mov	r3, r1
 8003b62:	72fb      	strb	r3, [r7, #11]
 8003b64:	4613      	mov	r3, r2
 8003b66:	72bb      	strb	r3, [r7, #10]
  int32_t ret = NET_ERROR_GENERIC;
 8003b68:	f06f 031c 	mvn.w	r3, #28
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set credentials for Wifi modules*/
  if (NET_INTERFACE_IS_WIFI(netif))
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f00d fdd5 	bl	801171e <net_wifi_get_class>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d127      	bne.n	8003bca <NetInterfaceConnect+0x76>
  {
    net_wifi_credentials_t *wifi_credential = (net_wifi_credentials_t *) credential;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	623b      	str	r3, [r7, #32]
    if (wifi_credential->psk == NULL)
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <NetInterfaceConnect+0x38>
    {
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
    }
    if (NET_WIFI_MODE_AP == mode)
 8003b8c:	7abb      	ldrb	r3, [r7, #10]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10a      	bne.n	8003ba8 <NetInterfaceConnect+0x54>
    {
      dhcp_mode = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	72fb      	strb	r3, [r7, #11]
      wifi_credential->ssid = "MyHotSpot";
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	4a3a      	ldr	r2, [pc, #232]	; (8003c84 <NetInterfaceConnect+0x130>)
 8003b9a:	601a      	str	r2, [r3, #0]
      wifi_credential->psk = " ";
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	4a3a      	ldr	r2, [pc, #232]	; (8003c88 <NetInterfaceConnect+0x134>)
 8003ba0:	605a      	str	r2, [r3, #4]
      wifi_credential->security_mode = NET_WIFI_SM_OPEN;;
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
    }

    net_wifi_set_credentials(netif, wifi_credential);
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f00d fefb 	bl	80119a6 <net_wifi_set_credentials>
    net_wifi_set_access_mode(netif, mode);
 8003bb0:	7abb      	ldrb	r3, [r7, #10]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f00d ff08 	bl	80119ca <net_wifi_set_access_mode>
    net_wifi_set_access_channel(netif, 8u);
 8003bba:	2108      	movs	r1, #8
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f00d ff17 	bl	80119f0 <net_wifi_set_access_channel>
    net_wifi_set_ap_max_connections(netif, 4u);
 8003bc2:	2104      	movs	r1, #4
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f00d ff26 	bl	8011a16 <net_wifi_set_ap_max_connections>
    NET_DBG_PRINT("main ... %p %p %s\r\n", wifi_credential, wifi_credential->ssid, wifi_credential->ssid);
  }

  /* Set credentials for Cellular modules*/
  if (NET_INTERFACE_IS_CELLULAR(netif))
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f00d fda7 	bl	801171e <net_wifi_get_class>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <NetInterfaceConnect+0x8e>
  {
    net_cellular_credentials_t *cellular_credential = (net_cellular_credentials_t *) credential;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	61fb      	str	r3, [r7, #28]
    net_cellular_set_credentials(netif, cellular_credential);
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f00d ff2d 	bl	8011a3c <net_cellular_set_credentials>
    NET_DBG_PRINT("main ... %p %p %s\r\n", cellular_credential, cellular_credential->apn, cellular_credential->apn);
  }

  ret = net_if_start(netif);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f00e f87e 	bl	8011ce4 <net_if_start>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24
  if (NET_OK == ret)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d13c      	bne.n	8003c6a <NetInterfaceConnect+0x116>
  {
    ret = net_if_wait_state(netif, NET_STATE_READY, NET_STATE_TRANSITION_TIMEOUT);
 8003bf0:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003bf4:	2103      	movs	r1, #3
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f00d ffec 	bl	8011bd4 <net_if_wait_state>
 8003bfc:	6278      	str	r0, [r7, #36]	; 0x24
    if (NET_OK == ret)
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d129      	bne.n	8003c58 <NetInterfaceConnect+0x104>
    {
      if (dhcp_mode)
 8003c04:	7afb      	ldrb	r3, [r7, #11]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <NetInterfaceConnect+0xc0>
      {
        net_if_set_dhcp_mode(netif, true);
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f00e f8a2 	bl	8011d56 <net_if_set_dhcp_mode>
 8003c12:	e013      	b.n	8003c3c <NetInterfaceConnect+0xe8>
      }
      else
      {
        net_ip_addr_t ip = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <NetInterfaceConnect+0x138>)
 8003c16:	61bb      	str	r3, [r7, #24]
        net_ip_addr_t gw = NET_IPADDR4_INIT_BYTES(192, 168, 1, 1);
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <NetInterfaceConnect+0x138>)
 8003c1a:	617b      	str	r3, [r7, #20]
        net_ip_addr_t msk = NET_IPADDR4_INIT_BYTES(255, 255, 254, 0);
 8003c1c:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <NetInterfaceConnect+0x13c>)
 8003c1e:	613b      	str	r3, [r7, #16]
        net_if_set_dhcp_mode(netif, false);
 8003c20:	2100      	movs	r1, #0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f00e f897 	bl	8011d56 <net_if_set_dhcp_mode>
        net_if_set_dhcp_server_mode(netif, true);
 8003c28:	2101      	movs	r1, #1
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f00e f8ae 	bl	8011d8c <net_if_set_dhcp_server_mode>
        net_if_set_ipaddr(netif, ip, gw, msk);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	69b9      	ldr	r1, [r7, #24]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f00e f8c3 	bl	8011dc2 <net_if_set_ipaddr>
      }

      ret = net_if_connect(netif);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f00e f85e 	bl	8011cfe <net_if_connect>
 8003c42:	6278      	str	r0, [r7, #36]	; 0x24
      if (NET_OK == ret)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <NetInterfaceConnect+0x104>
      {
        ret = net_if_wait_state(netif, NET_STATE_CONNECTED, NET_STATE_TRANSITION_TIMEOUT);
 8003c4a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003c4e:	2105      	movs	r1, #5
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f00d ffbf 	bl	8011bd4 <net_if_wait_state>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }
    if (NET_OK != ret)
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <NetInterfaceConnect+0x116>
    {
      printf("ERROR: Cannot connect interface\r\n");
 8003c5e:	480d      	ldr	r0, [pc, #52]	; (8003c94 <NetInterfaceConnect+0x140>)
 8003c60:	f010 fd98 	bl	8014794 <puts>
      printf("  If not done , Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot) !\r\n");
 8003c64:	480c      	ldr	r0, [pc, #48]	; (8003c98 <NetInterfaceConnect+0x144>)
 8003c66:	f010 fd95 	bl	8014794 <puts>
    }
  }
  if (NET_OK != ret)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <NetInterfaceConnect+0x128>
  {
    printf("ERROR: Cannot connect interface !\r\n");
 8003c70:	480a      	ldr	r0, [pc, #40]	; (8003c9c <NetInterfaceConnect+0x148>)
 8003c72:	f010 fd8f 	bl	8014794 <puts>
    printf("  If not done , Please set your connection parameter in main_app.c (net_wifi_net_wifi_registred_hotspot) !\r\n");
 8003c76:	4808      	ldr	r0, [pc, #32]	; (8003c98 <NetInterfaceConnect+0x144>)
 8003c78:	f010 fd8c 	bl	8014794 <puts>
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	3728      	adds	r7, #40	; 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	08018a7c 	.word	0x08018a7c
 8003c88:	08018a88 	.word	0x08018a88
 8003c8c:	0101a8c0 	.word	0x0101a8c0
 8003c90:	00feffff 	.word	0x00feffff
 8003c94:	08018a8c 	.word	0x08018a8c
 8003c98:	08018ab0 	.word	0x08018ab0
 8003c9c:	08018b1c 	.word	0x08018b1c

08003ca0 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8003cae:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <BSP_LED_Init+0x98>)
 8003cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <BSP_LED_Init+0x98>)
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <BSP_LED_Init+0x98>)
 8003cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <BSP_LED_Init+0x98>)
 8003cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd2:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <BSP_LED_Init+0x98>)
 8003cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cdc:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <BSP_LED_Init+0x98>)
 8003cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003cea:	2301      	movs	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	4a10      	ldr	r2, [pc, #64]	; (8003d3c <BSP_LED_Init+0x9c>)
 8003cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <BSP_LED_Init+0xa0>)
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	f107 0210 	add.w	r2, r7, #16
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f005 fd2e 	bl	8009770 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <BSP_LED_Init+0xa0>)
 8003d18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <BSP_LED_Init+0x9c>)
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2201      	movs	r2, #1
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f005 ffef 	bl	8009d0c <HAL_GPIO_WritePin>

  return ret;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3728      	adds	r7, #40	; 0x28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	46020c00 	.word	0x46020c00
 8003d3c:	0818aa74 	.word	0x0818aa74
 8003d40:	20000050 	.word	0x20000050

08003d44 <BSP_LED_DeInit>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_DeInit(Led_TypeDef Led)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <BSP_LED_DeInit+0x50>)
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(LED_PORT[Led], (uint16_t)LED_PIN[Led], GPIO_PIN_RESET);
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <BSP_LED_DeInit+0x54>)
 8003d60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <BSP_LED_DeInit+0x50>)
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4619      	mov	r1, r3
 8003d72:	f005 ffcb 	bl	8009d0c <HAL_GPIO_WritePin>
  HAL_GPIO_DeInit(LED_PORT[Led], gpio_init_structure.Pin);
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <BSP_LED_DeInit+0x54>)
 8003d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f005 fecc 	bl	8009b20 <HAL_GPIO_DeInit>

  return ret;
 8003d88:	69fb      	ldr	r3, [r7, #28]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	0818aa74 	.word	0x0818aa74
 8003d98:	20000050 	.word	0x20000050

08003d9c <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <BSP_LED_On+0x34>)
 8003daa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <BSP_LED_On+0x38>)
 8003db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f005 ffa6 	bl	8009d0c <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

  return ret;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000050 	.word	0x20000050
 8003dd4:	0818aa74 	.word	0x0818aa74

08003dd8 <BSP_LED_Toggle>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <BSP_LED_Toggle+0x34>)
 8003de6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	4908      	ldr	r1, [pc, #32]	; (8003e10 <BSP_LED_Toggle+0x38>)
 8003dee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f005 ffa0 	bl	8009d3c <HAL_GPIO_TogglePin>
  ret = BSP_ERROR_NONE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

  return ret;
 8003e00:	68fb      	ldr	r3, [r7, #12]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000050 	.word	0x20000050
 8003e10:	0818aa74 	.word	0x0818aa74

08003e14 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <BSP_I2C2_Init+0x64>)
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <BSP_I2C2_Init+0x68>)
 8003e22:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <BSP_I2C2_Init+0x6c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11f      	bne.n	8003e6c <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <BSP_I2C2_Init+0x6c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <BSP_I2C2_Init+0x6c>)
 8003e34:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8003e36:	4810      	ldr	r0, [pc, #64]	; (8003e78 <BSP_I2C2_Init+0x64>)
 8003e38:	f006 facc 	bl	800a3d4 <HAL_I2C_GetState>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d114      	bne.n	8003e6c <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8003e42:	480d      	ldr	r0, [pc, #52]	; (8003e78 <BSP_I2C2_Init+0x64>)
 8003e44:	f000 fb60 	bl	8004508 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8003e48:	f008 feb8 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	490d      	ldr	r1, [pc, #52]	; (8003e84 <BSP_I2C2_Init+0x70>)
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f8e3 	bl	800401c <I2C_GetTiming>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4807      	ldr	r0, [pc, #28]	; (8003e78 <BSP_I2C2_Init+0x64>)
 8003e5c:	f000 f838 	bl	8003ed0 <MX_I2C2_Init>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8003e66:	f06f 0307 	mvn.w	r3, #7
 8003e6a:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8003e6c:	687b      	ldr	r3, [r7, #4]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200030c4 	.word	0x200030c4
 8003e7c:	40005800 	.word	0x40005800
 8003e80:	200026bc 	.word	0x200026bc
 8003e84:	000186a0 	.word	0x000186a0

08003e88 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <BSP_I2C2_DeInit+0x40>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <BSP_I2C2_DeInit+0x40>)
 8003e9a:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <BSP_I2C2_DeInit+0x40>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8003ea4:	4809      	ldr	r0, [pc, #36]	; (8003ecc <BSP_I2C2_DeInit+0x44>)
 8003ea6:	f000 fb95 	bl	80045d4 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8003eaa:	4808      	ldr	r0, [pc, #32]	; (8003ecc <BSP_I2C2_DeInit+0x44>)
 8003eac:	f006 f820 	bl	8009ef0 <HAL_I2C_DeInit>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003eb6:	f06f 0307 	mvn.w	r3, #7
 8003eba:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003ebc:	687b      	ldr	r3, [r7, #4]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200026bc 	.word	0x200026bc
 8003ecc:	200030c4 	.word	0x200030c4

08003ed0 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f005 ff5f 	bl	8009dd2 <HAL_I2C_Init>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e014      	b.n	8003f4a <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f006 fd14 	bl	800a954 <HAL_I2CEx_ConfigAnalogFilter>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	e008      	b.n	8003f4a <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003f38:	2100      	movs	r1, #0
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f006 fd55 	bl	800a9ea <HAL_I2CEx_ConfigDigitalFilter>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60ba      	str	r2, [r7, #8]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	81fb      	strh	r3, [r7, #14]
 8003f62:	460b      	mov	r3, r1
 8003f64:	81bb      	strh	r3, [r7, #12]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003f6a:	89b9      	ldrh	r1, [r7, #12]
 8003f6c:	89f8      	ldrh	r0, [r7, #14]
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f000 fb4f 	bl	8004618 <I2C2_WriteReg>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e00c      	b.n	8003fa0 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003f86:	4809      	ldr	r0, [pc, #36]	; (8003fac <BSP_I2C2_WriteReg+0x58>)
 8003f88:	f006 fa32 	bl	800a3f0 <HAL_I2C_GetError>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d103      	bne.n	8003f9a <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003f92:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e002      	b.n	8003fa0 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003f9a:	f06f 0303 	mvn.w	r3, #3
 8003f9e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8003fa0:	697b      	ldr	r3, [r7, #20]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200030c4 	.word	0x200030c4

08003fb0 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60ba      	str	r2, [r7, #8]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	81fb      	strh	r3, [r7, #14]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	81bb      	strh	r3, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003fc6:	89b9      	ldrh	r1, [r7, #12]
 8003fc8:	89f8      	ldrh	r0, [r7, #14]
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f000 fb47 	bl	8004664 <I2C2_ReadReg>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e00c      	b.n	8003ffc <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003fe2:	4809      	ldr	r0, [pc, #36]	; (8004008 <BSP_I2C2_ReadReg+0x58>)
 8003fe4:	f006 fa04 	bl	800a3f0 <HAL_I2C_GetError>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d103      	bne.n	8003ff6 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003fee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e002      	b.n	8003ffc <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003ff6:	f06f 0303 	mvn.w	r3, #3
 8003ffa:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8003ffc:	697b      	ldr	r3, [r7, #20]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200030c4 	.word	0x200030c4

0800400c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004010:	f004 fc3e 	bl	8008890 <HAL_GetTick>
 8004014:	4603      	mov	r3, r0
}
 8004016:	4618      	mov	r0, r3
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d06b      	beq.n	8004108 <I2C_GetTiming+0xec>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d068      	beq.n	8004108 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e060      	b.n	80040fe <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800403c:	4a35      	ldr	r2, [pc, #212]	; (8004114 <I2C_GetTiming+0xf8>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d352      	bcc.n	80040f8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004052:	4a30      	ldr	r2, [pc, #192]	; (8004114 <I2C_GetTiming+0xf8>)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	3308      	adds	r3, #8
 8004060:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d847      	bhi.n	80040f8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004068:	6939      	ldr	r1, [r7, #16]
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f856 	bl	800411c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004070:	6939      	ldr	r1, [r7, #16]
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f940 	bl	80042f8 <I2C_Compute_SCLL_SCLH>
 8004078:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b7f      	cmp	r3, #127	; 0x7f
 800407e:	d842      	bhi.n	8004106 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004080:	4925      	ldr	r1, [pc, #148]	; (8004118 <I2C_GetTiming+0xfc>)
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8004092:	4821      	ldr	r0, [pc, #132]	; (8004118 <I2C_GetTiming+0xfc>)
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4403      	add	r3, r0
 80040a0:	3304      	adds	r3, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	051b      	lsls	r3, r3, #20
 80040a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80040aa:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80040ac:	481a      	ldr	r0, [pc, #104]	; (8004118 <I2C_GetTiming+0xfc>)
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4403      	add	r3, r0
 80040ba:	3308      	adds	r3, #8
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80040c4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 80040c6:	4814      	ldr	r0, [pc, #80]	; (8004118 <I2C_GetTiming+0xfc>)
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4403      	add	r3, r0
 80040d4:	330c      	adds	r3, #12
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80040dc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80040de:	480e      	ldr	r0, [pc, #56]	; (8004118 <I2C_GetTiming+0xfc>)
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4403      	add	r3, r0
 80040ec:	3310      	adds	r3, #16
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80040f2:	430b      	orrs	r3, r1
 80040f4:	617b      	str	r3, [r7, #20]
        }
        break;
 80040f6:	e006      	b.n	8004106 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3301      	adds	r3, #1
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d99b      	bls.n	800403c <I2C_GetTiming+0x20>
 8004104:	e000      	b.n	8004108 <I2C_GetTiming+0xec>
        break;
 8004106:	bf00      	nop
      }
    }
  }

  return ret;
 8004108:	697b      	ldr	r3, [r7, #20]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	0818aa7c 	.word	0x0818aa7c
 8004118:	200026c0 	.word	0x200026c0

0800411c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800411c:	b480      	push	{r7}
 800411e:	b08f      	sub	sp, #60	; 0x3c
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004126:	2310      	movs	r3, #16
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	085a      	lsrs	r2, r3, #1
 800412e:	4b6e      	ldr	r3, [pc, #440]	; (80042e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8004130:	4413      	add	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	fbb3 f3f2 	udiv	r3, r3, r2
 8004138:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800413a:	2332      	movs	r3, #50	; 0x32
 800413c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800413e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004142:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004144:	4a69      	ldr	r2, [pc, #420]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	4a65      	ldr	r2, [pc, #404]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	330c      	adds	r3, #12
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004168:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800416a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800416c:	495f      	ldr	r1, [pc, #380]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	202c      	movs	r0, #44	; 0x2c
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	440b      	add	r3, r1
 8004178:	3328      	adds	r3, #40	; 0x28
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3303      	adds	r3, #3
 800417e:	69f9      	ldr	r1, [r7, #28]
 8004180:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3310      	adds	r3, #16
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	4a54      	ldr	r2, [pc, #336]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3320      	adds	r3, #32
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80041ac:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80041ae:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80041b0:	494e      	ldr	r1, [pc, #312]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	202c      	movs	r0, #44	; 0x2c
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	440b      	add	r3, r1
 80041bc:	3328      	adds	r3, #40	; 0x28
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3304      	adds	r3, #4
 80041c2:	69f9      	ldr	r1, [r7, #28]
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80041cc:	4a47      	ldr	r2, [pc, #284]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3320      	adds	r3, #32
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	4a43      	ldr	r2, [pc, #268]	; (80042ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3314      	adds	r3, #20
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4403      	add	r3, r0
 80041f0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dc01      	bgt.n	80041fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	dc01      	bgt.n	8004206 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004206:	2300      	movs	r3, #0
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	e062      	b.n	80042d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
 8004210:	e059      	b.n	80042c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	3301      	adds	r3, #1
 8004216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004218:	3201      	adds	r2, #1
 800421a:	fb03 f202 	mul.w	r2, r3, r2
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	429a      	cmp	r2, r3
 800422c:	d348      	bcc.n	80042c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800422e:	2300      	movs	r3, #0
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	e042      	b.n	80042ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	3301      	adds	r3, #1
 8004238:	6a3a      	ldr	r2, [r7, #32]
 800423a:	fb03 f202 	mul.w	r2, r3, r2
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	d332      	bcc.n	80042b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	d82e      	bhi.n	80042b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8004256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	429a      	cmp	r2, r3
 800425c:	d02a      	beq.n	80042b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4924      	ldr	r1, [pc, #144]	; (80042f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004270:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	491f      	ldr	r1, [pc, #124]	; (80042f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	3304      	adds	r3, #4
 8004284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004286:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4919      	ldr	r1, [pc, #100]	; (80042f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	3308      	adds	r3, #8
 800429a:	6a3a      	ldr	r2, [r7, #32]
 800429c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80042aa:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80042ac:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b7f      	cmp	r3, #127	; 0x7f
 80042b2:	d812      	bhi.n	80042da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	3301      	adds	r3, #1
 80042b8:	623b      	str	r3, [r7, #32]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	2b0f      	cmp	r3, #15
 80042be:	d9b9      	bls.n	8004234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	3301      	adds	r3, #1
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d9a2      	bls.n	8004212 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	3301      	adds	r3, #1
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d999      	bls.n	800420c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80042d8:	e000      	b.n	80042dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80042da:	bf00      	nop
          }
        }
      }
    }
  }
}
 80042dc:	373c      	adds	r7, #60	; 0x3c
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	3b9aca00 	.word	0x3b9aca00
 80042ec:	0818aa7c 	.word	0x0818aa7c
 80042f0:	200030c0 	.word	0x200030c0
 80042f4:	200026c0 	.word	0x200026c0

080042f8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b093      	sub	sp, #76	; 0x4c
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	085a      	lsrs	r2, r3, #1
 800430c:	4b7a      	ldr	r3, [pc, #488]	; (80044f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800430e:	4413      	add	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	fbb3 f3f2 	udiv	r3, r3, r2
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8004318:	4a78      	ldr	r2, [pc, #480]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	085a      	lsrs	r2, r3, #1
 8004328:	4b73      	ldr	r3, [pc, #460]	; (80044f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800432a:	4413      	add	r3, r2
 800432c:	4973      	ldr	r1, [pc, #460]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	202c      	movs	r0, #44	; 0x2c
 8004332:	fb00 f202 	mul.w	r2, r0, r2
 8004336:	440a      	add	r2, r1
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	fbb3 f3f2 	udiv	r3, r3, r2
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004340:	2332      	movs	r3, #50	; 0x32
 8004342:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8004344:	4a6d      	ldr	r2, [pc, #436]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	212c      	movs	r1, #44	; 0x2c
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	4413      	add	r3, r2
 8004350:	3328      	adds	r3, #40	; 0x28
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800435c:	4a67      	ldr	r2, [pc, #412]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a62      	ldr	r2, [pc, #392]	; (80044f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8004374:	4a61      	ldr	r2, [pc, #388]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	212c      	movs	r1, #44	; 0x2c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	3308      	adds	r3, #8
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5c      	ldr	r2, [pc, #368]	; (80044f8 <I2C_Compute_SCLL_SCLH+0x200>)
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004390:	2300      	movs	r3, #0
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
 8004394:	e0a3      	b.n	80044de <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004396:	495a      	ldr	r1, [pc, #360]	; (8004500 <I2C_Compute_SCLL_SCLH+0x208>)
 8004398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80043b0:	2300      	movs	r3, #0
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b4:	e08c      	b.n	80044d0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	441a      	add	r2, r3
 80043bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043be:	3301      	adds	r3, #1
 80043c0:	6979      	ldr	r1, [r7, #20]
 80043c2:	fb03 f101 	mul.w	r1, r3, r1
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	440b      	add	r3, r1
 80043cc:	4413      	add	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80043d0:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	212c      	movs	r1, #44	; 0x2c
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3318      	adds	r3, #24
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d971      	bls.n	80044ca <I2C_Compute_SCLL_SCLH+0x1d2>
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d268      	bcs.n	80044ca <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80043fc:	e062      	b.n	80044c4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	441a      	add	r2, r3
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	3301      	adds	r3, #1
 8004408:	6979      	ldr	r1, [r7, #20]
 800440a:	fb03 f101 	mul.w	r1, r3, r1
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	440b      	add	r3, r1
 8004414:	4413      	add	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	441a      	add	r2, r3
 800441e:	4937      	ldr	r1, [pc, #220]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	202c      	movs	r0, #44	; 0x2c
 8004424:	fb00 f303 	mul.w	r3, r0, r3
 8004428:	440b      	add	r3, r1
 800442a:	3320      	adds	r3, #32
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	441a      	add	r2, r3
 8004430:	4932      	ldr	r1, [pc, #200]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	202c      	movs	r0, #44	; 0x2c
 8004436:	fb00 f303 	mul.w	r3, r0, r3
 800443a:	440b      	add	r3, r1
 800443c:	3324      	adds	r3, #36	; 0x24
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4413      	add	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	d338      	bcc.n	80044be <I2C_Compute_SCLL_SCLH+0x1c6>
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	429a      	cmp	r2, r3
 8004452:	d834      	bhi.n	80044be <I2C_Compute_SCLL_SCLH+0x1c6>
 8004454:	4a29      	ldr	r2, [pc, #164]	; (80044fc <I2C_Compute_SCLL_SCLH+0x204>)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	331c      	adds	r3, #28
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	429a      	cmp	r2, r3
 8004468:	d329      	bcc.n	80044be <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800446a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	429a      	cmp	r2, r3
 8004470:	d225      	bcs.n	80044be <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2b00      	cmp	r3, #0
 800447e:	da02      	bge.n	8004486 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	425b      	negs	r3, r3
 8004484:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800448a:	429a      	cmp	r2, r3
 800448c:	d917      	bls.n	80044be <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8004492:	491b      	ldr	r1, [pc, #108]	; (8004500 <I2C_Compute_SCLL_SCLH+0x208>)
 8004494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3310      	adds	r3, #16
 80044a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80044a6:	4916      	ldr	r1, [pc, #88]	; (8004500 <I2C_Compute_SCLL_SCLH+0x208>)
 80044a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	330c      	adds	r3, #12
 80044b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b8:	601a      	str	r2, [r3, #0]
              ret = count;
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	3301      	adds	r3, #1
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	2bff      	cmp	r3, #255	; 0xff
 80044c8:	d999      	bls.n	80043fe <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80044ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044cc:	3301      	adds	r3, #1
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d2:	2bff      	cmp	r3, #255	; 0xff
 80044d4:	f67f af6f 	bls.w	80043b6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	3301      	adds	r3, #1
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <I2C_Compute_SCLL_SCLH+0x20c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e4:	429a      	cmp	r2, r3
 80044e6:	f4ff af56 	bcc.w	8004396 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80044ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	374c      	adds	r7, #76	; 0x4c
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	3b9aca00 	.word	0x3b9aca00
 80044fc:	0818aa7c 	.word	0x0818aa7c
 8004500:	200026c0 	.word	0x200026c0
 8004504:	200030c0 	.word	0x200030c0

08004508 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8004510:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <I2C2_MspInit+0xc4>)
 8004512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004516:	4a2d      	ldr	r2, [pc, #180]	; (80045cc <I2C2_MspInit+0xc4>)
 8004518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <I2C2_MspInit+0xc4>)
 8004522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 800452e:	4b27      	ldr	r3, [pc, #156]	; (80045cc <I2C2_MspInit+0xc4>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004534:	4a25      	ldr	r2, [pc, #148]	; (80045cc <I2C2_MspInit+0xc4>)
 8004536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <I2C2_MspInit+0xc4>)
 8004540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 800454c:	2310      	movs	r3, #16
 800454e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8004550:	2312      	movs	r3, #18
 8004552:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8004554:	2301      	movs	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8004558:	2302      	movs	r3, #2
 800455a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 800455c:	2304      	movs	r3, #4
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8004560:	f107 0314 	add.w	r3, r7, #20
 8004564:	4619      	mov	r1, r3
 8004566:	481a      	ldr	r0, [pc, #104]	; (80045d0 <I2C2_MspInit+0xc8>)
 8004568:	f005 f902 	bl	8009770 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 800456c:	2320      	movs	r3, #32
 800456e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8004570:	2312      	movs	r3, #18
 8004572:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8004574:	2301      	movs	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8004578:	2302      	movs	r3, #2
 800457a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 800457c:	2304      	movs	r3, #4
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4619      	mov	r1, r3
 8004586:	4812      	ldr	r0, [pc, #72]	; (80045d0 <I2C2_MspInit+0xc8>)
 8004588:	f005 f8f2 	bl	8009770 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <I2C2_MspInit+0xc4>)
 800458e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004592:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <I2C2_MspInit+0xc4>)
 8004594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004598:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <I2C2_MspInit+0xc4>)
 800459e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <I2C2_MspInit+0xc4>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <I2C2_MspInit+0xc4>)
 80045b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045b4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <I2C2_MspInit+0xc4>)
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	4a04      	ldr	r2, [pc, #16]	; (80045cc <I2C2_MspInit+0xc4>)
 80045bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80045c0:	6753      	str	r3, [r2, #116]	; 0x74
}
 80045c2:	bf00      	nop
 80045c4:	3728      	adds	r7, #40	; 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	46020c00 	.word	0x46020c00
 80045d0:	42021c00 	.word	0x42021c00

080045d4 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 80045dc:	2310      	movs	r3, #16
 80045de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4619      	mov	r1, r3
 80045e4:	480a      	ldr	r0, [pc, #40]	; (8004610 <I2C2_MspDeInit+0x3c>)
 80045e6:	f005 fa9b 	bl	8009b20 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 80045ea:	2320      	movs	r3, #32
 80045ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4619      	mov	r1, r3
 80045f2:	4807      	ldr	r0, [pc, #28]	; (8004610 <I2C2_MspDeInit+0x3c>)
 80045f4:	f005 fa94 	bl	8009b20 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <I2C2_MspDeInit+0x40>)
 80045fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045fe:	4a05      	ldr	r2, [pc, #20]	; (8004614 <I2C2_MspDeInit+0x40>)
 8004600:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004604:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8004608:	bf00      	nop
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	42021c00 	.word	0x42021c00
 8004614:	46020c00 	.word	0x46020c00

08004618 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af04      	add	r7, sp, #16
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	4603      	mov	r3, r0
 8004622:	81fb      	strh	r3, [r7, #14]
 8004624:	460b      	mov	r3, r1
 8004626:	81bb      	strh	r3, [r7, #12]
 8004628:	4613      	mov	r3, r2
 800462a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800462c:	8978      	ldrh	r0, [r7, #10]
 800462e:	89ba      	ldrh	r2, [r7, #12]
 8004630:	89f9      	ldrh	r1, [r7, #14]
 8004632:	f242 7310 	movw	r3, #10000	; 0x2710
 8004636:	9302      	str	r3, [sp, #8]
 8004638:	8b3b      	ldrh	r3, [r7, #24]
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4603      	mov	r3, r0
 8004642:	4807      	ldr	r0, [pc, #28]	; (8004660 <I2C2_WriteReg+0x48>)
 8004644:	f005 fc98 	bl	8009f78 <HAL_I2C_Mem_Write>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800464e:	2300      	movs	r3, #0
 8004650:	e001      	b.n	8004656 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004652:	f06f 0307 	mvn.w	r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200030c4 	.word	0x200030c4

08004664 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af04      	add	r7, sp, #16
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	4603      	mov	r3, r0
 800466e:	81fb      	strh	r3, [r7, #14]
 8004670:	460b      	mov	r3, r1
 8004672:	81bb      	strh	r3, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8004678:	8978      	ldrh	r0, [r7, #10]
 800467a:	89ba      	ldrh	r2, [r7, #12]
 800467c:	89f9      	ldrh	r1, [r7, #14]
 800467e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	8b3b      	ldrh	r3, [r7, #24]
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	4603      	mov	r3, r0
 800468e:	4807      	ldr	r0, [pc, #28]	; (80046ac <I2C2_ReadReg+0x48>)
 8004690:	f005 fd86 	bl	800a1a0 <HAL_I2C_Mem_Read>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800469a:	2300      	movs	r3, #0
 800469c:	e001      	b.n	80046a2 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800469e:	f06f 0307 	mvn.w	r3, #7
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200030c4 	.word	0x200030c4

080046b0 <BSP_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d903      	bls.n	80046cc <BSP_ENV_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80046c4:	f06f 0301 	mvn.w	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e03a      	b.n	8004742 <BSP_ENV_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & ENV_PRESSURE) != 0U))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d108      	bne.n	80046e4 <BSP_ENV_SENSOR_Init+0x34>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <BSP_ENV_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80046dc:	f06f 030a 	mvn.w	r3, #10
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e02e      	b.n	8004742 <BSP_ENV_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & ENV_HUMIDITY) != 0U))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d108      	bne.n	80046fc <BSP_ENV_SENSOR_Init+0x4c>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <BSP_ENV_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80046f4:	f06f 030a 	mvn.w	r3, #10
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e022      	b.n	8004742 <BSP_ENV_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <BSP_ENV_SENSOR_Init+0x66>
    {
      if (HTS221_Probe(Functions) != BSP_ERROR_NONE)
 8004702:	6838      	ldr	r0, [r7, #0]
 8004704:	f000 f9d6 	bl	8004ab4 <HTS221_Probe>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <BSP_ENV_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800470e:	f06f 0304 	mvn.w	r3, #4
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e008      	b.n	8004728 <BSP_ENV_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      if (LPS22HH_Probe(Functions) != BSP_ERROR_NONE)
 8004716:	6838      	ldr	r0, [r7, #0]
 8004718:	f000 fa42 	bl	8004ba0 <LPS22HH_Probe>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <BSP_ENV_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8004722:	f06f 0304 	mvn.w	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <BSP_ENV_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Env_Sensor_Ctx[Instance].Functions |= Functions;
 800472e:	4a07      	ldr	r2, [pc, #28]	; (800474c <BSP_ENV_SENSOR_Init+0x9c>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	431a      	orrs	r2, r3
 800473a:	4904      	ldr	r1, [pc, #16]	; (800474c <BSP_ENV_SENSOR_Init+0x9c>)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 8004742:	68fb      	ldr	r3, [r7, #12]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20003110 	.word	0x20003110

08004750 <BSP_ENV_SENSOR_DeInit>:
  * @brief  De-initialize environmental sensor.
  * @param  Instance Environmental sensor instance.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_DeInit(uint32_t Instance)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d903      	bls.n	800476a <BSP_ENV_SENSOR_DeInit+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004762:	f06f 0301 	mvn.w	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e01c      	b.n	80047a4 <BSP_ENV_SENSOR_DeInit+0x54>
  }
  else if (Env_Sensor_Ctx[Instance].Functions != 0U)
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <BSP_ENV_SENSOR_DeInit+0x60>)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <BSP_ENV_SENSOR_DeInit+0x54>
  {
    /* De-initialize the sensor */
    if (Env_Sensor_Drv[Instance]->DeInit(Env_Sensor_CompObj[Instance]) < 0)
 8004776:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <BSP_ENV_SENSOR_DeInit+0x64>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	490d      	ldr	r1, [pc, #52]	; (80047b8 <BSP_ENV_SENSOR_DeInit+0x68>)
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004788:	4610      	mov	r0, r2
 800478a:	4798      	blx	r3
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	da03      	bge.n	800479a <BSP_ENV_SENSOR_DeInit+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004792:	f06f 0304 	mvn.w	r3, #4
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e004      	b.n	80047a4 <BSP_ENV_SENSOR_DeInit+0x54>
    }
    else
    {
      /* Reset current initialized functions */
      Env_Sensor_Ctx[Instance].Functions = 0U;
 800479a:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <BSP_ENV_SENSOR_DeInit+0x60>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2100      	movs	r1, #0
 80047a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  else
  {
    /* Nothing to do (not initialized) */
  }
  return status;
 80047a4:	68fb      	ldr	r3, [r7, #12]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20003110 	.word	0x20003110
 80047b4:	20003120 	.word	0x20003120
 80047b8:	20003118 	.word	0x20003118

080047bc <BSP_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d903      	bls.n	80047d8 <BSP_ENV_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80047d0:	f06f 0301 	mvn.w	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e041      	b.n	800485c <BSP_ENV_SENSOR_Enable+0xa0>
  }
  else if ((Instance == 0U) && (Function == ENV_PRESSURE))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <BSP_ENV_SENSOR_Enable+0x30>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d103      	bne.n	80047ec <BSP_ENV_SENSOR_Enable+0x30>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80047e4:	f06f 030a 	mvn.w	r3, #10
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e037      	b.n	800485c <BSP_ENV_SENSOR_Enable+0xa0>
  }
  else if ((Instance == 1U) && (Function == ENV_HUMIDITY))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d106      	bne.n	8004800 <BSP_ENV_SENSOR_Enable+0x44>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d103      	bne.n	8004800 <BSP_ENV_SENSOR_Enable+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80047f8:	f06f 030a 	mvn.w	r3, #10
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	e02d      	b.n	800485c <BSP_ENV_SENSOR_Enable+0xa0>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <BSP_ENV_SENSOR_Enable+0xac>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <BSP_ENV_SENSOR_Enable+0x5c>
  {
    status = BSP_ERROR_NO_INIT;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e021      	b.n	800485c <BSP_ENV_SENSOR_Enable+0xa0>
  }
  else
  {
    /* Enable the environmental sensor function */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d006      	beq.n	800482c <BSP_ENV_SENSOR_Enable+0x70>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d101      	bne.n	8004828 <BSP_ENV_SENSOR_Enable+0x6c>
 8004824:	2301      	movs	r3, #1
 8004826:	e002      	b.n	800482e <BSP_ENV_SENSOR_Enable+0x72>
 8004828:	2302      	movs	r3, #2
 800482a:	e000      	b.n	800482e <BSP_ENV_SENSOR_Enable+0x72>
 800482c:	2300      	movs	r3, #0
 800482e:	72fb      	strb	r3, [r7, #11]
    if (Env_Sensor_FuncDrv[Instance][index]->Enable(Env_Sensor_CompObj[Instance]) < 0)
 8004830:	7af9      	ldrb	r1, [r7, #11]
 8004832:	480e      	ldr	r0, [pc, #56]	; (800486c <BSP_ENV_SENSOR_Enable+0xb0>)
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	440b      	add	r3, r1
 800483e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	490a      	ldr	r1, [pc, #40]	; (8004870 <BSP_ENV_SENSOR_Enable+0xb4>)
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800484c:	4610      	mov	r0, r2
 800484e:	4798      	blx	r3
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	da02      	bge.n	800485c <BSP_ENV_SENSOR_Enable+0xa0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004856:	f06f 0304 	mvn.w	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20003110 	.word	0x20003110
 800486c:	20003128 	.word	0x20003128
 8004870:	20003118 	.word	0x20003118

08004874 <BSP_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d802      	bhi.n	8004890 <BSP_ENV_SENSOR_GetOutputDataRate+0x1c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <BSP_ENV_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004890:	f06f 0301 	mvn.w	r3, #1
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e042      	b.n	800491e <BSP_ENV_SENSOR_GetOutputDataRate+0xaa>
  }
  else if ((Instance == 0U) && (Function == ENV_PRESSURE))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <BSP_ENV_SENSOR_GetOutputDataRate+0x38>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d103      	bne.n	80048ac <BSP_ENV_SENSOR_GetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80048a4:	f06f 030a 	mvn.w	r3, #10
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e038      	b.n	800491e <BSP_ENV_SENSOR_GetOutputDataRate+0xaa>
  }
  else if ((Instance == 1U) && (Function == ENV_HUMIDITY))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d106      	bne.n	80048c0 <BSP_ENV_SENSOR_GetOutputDataRate+0x4c>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d103      	bne.n	80048c0 <BSP_ENV_SENSOR_GetOutputDataRate+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80048b8:	f06f 030a 	mvn.w	r3, #10
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e02e      	b.n	800491e <BSP_ENV_SENSOR_GetOutputDataRate+0xaa>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <BSP_ENV_SENSOR_GetOutputDataRate+0xb4>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <BSP_ENV_SENSOR_GetOutputDataRate+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e022      	b.n	800491e <BSP_ENV_SENSOR_GetOutputDataRate+0xaa>
  }
  else
  {
    /* Get the environmental sensor output data rate */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d006      	beq.n	80048ec <BSP_ENV_SENSOR_GetOutputDataRate+0x78>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d101      	bne.n	80048e8 <BSP_ENV_SENSOR_GetOutputDataRate+0x74>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e002      	b.n	80048ee <BSP_ENV_SENSOR_GetOutputDataRate+0x7a>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e000      	b.n	80048ee <BSP_ENV_SENSOR_GetOutputDataRate+0x7a>
 80048ec:	2300      	movs	r3, #0
 80048ee:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Env_Sensor_CompObj[Instance], Odr) < 0)
 80048f0:	7cf9      	ldrb	r1, [r7, #19]
 80048f2:	480e      	ldr	r0, [pc, #56]	; (800492c <BSP_ENV_SENSOR_GetOutputDataRate+0xb8>)
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	440b      	add	r3, r1
 80048fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	490a      	ldr	r1, [pc, #40]	; (8004930 <BSP_ENV_SENSOR_GetOutputDataRate+0xbc>)
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4610      	mov	r0, r2
 8004910:	4798      	blx	r3
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	da02      	bge.n	800491e <BSP_ENV_SENSOR_GetOutputDataRate+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004918:	f06f 0304 	mvn.w	r3, #4
 800491c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800491e:	697b      	ldr	r3, [r7, #20]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20003110 	.word	0x20003110
 800492c:	20003128 	.word	0x20003128
 8004930:	20003118 	.word	0x20003118

08004934 <BSP_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d903      	bls.n	8004954 <BSP_ENV_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800494c:	f06f 0301 	mvn.w	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e043      	b.n	80049dc <BSP_ENV_SENSOR_SetOutputDataRate+0xa8>
  }
  else if ((Instance == 0U) && (Function == ENV_PRESSURE))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <BSP_ENV_SENSOR_SetOutputDataRate+0x34>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d103      	bne.n	8004968 <BSP_ENV_SENSOR_SetOutputDataRate+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004960:	f06f 030a 	mvn.w	r3, #10
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e039      	b.n	80049dc <BSP_ENV_SENSOR_SetOutputDataRate+0xa8>
  }
  else if ((Instance == 1U) && (Function == ENV_HUMIDITY))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d106      	bne.n	800497c <BSP_ENV_SENSOR_SetOutputDataRate+0x48>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d103      	bne.n	800497c <BSP_ENV_SENSOR_SetOutputDataRate+0x48>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004974:	f06f 030a 	mvn.w	r3, #10
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e02f      	b.n	80049dc <BSP_ENV_SENSOR_SetOutputDataRate+0xa8>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 800497c:	4a1a      	ldr	r2, [pc, #104]	; (80049e8 <BSP_ENV_SENSOR_SetOutputDataRate+0xb4>)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <BSP_ENV_SENSOR_SetOutputDataRate+0x60>
  {
    status = BSP_ERROR_NO_INIT;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e023      	b.n	80049dc <BSP_ENV_SENSOR_SetOutputDataRate+0xa8>
  }
  else
  {
    /* Set the environmental sensor output data rate */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d006      	beq.n	80049a8 <BSP_ENV_SENSOR_SetOutputDataRate+0x74>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d101      	bne.n	80049a4 <BSP_ENV_SENSOR_SetOutputDataRate+0x70>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e002      	b.n	80049aa <BSP_ENV_SENSOR_SetOutputDataRate+0x76>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e000      	b.n	80049aa <BSP_ENV_SENSOR_SetOutputDataRate+0x76>
 80049a8:	2300      	movs	r3, #0
 80049aa:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Env_Sensor_CompObj[Instance], Odr) < 0)
 80049ac:	7cf9      	ldrb	r1, [r7, #19]
 80049ae:	480f      	ldr	r0, [pc, #60]	; (80049ec <BSP_ENV_SENSOR_SetOutputDataRate+0xb8>)
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	440b      	add	r3, r1
 80049ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	490b      	ldr	r1, [pc, #44]	; (80049f0 <BSP_ENV_SENSOR_SetOutputDataRate+0xbc>)
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80049c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80049cc:	4610      	mov	r0, r2
 80049ce:	4798      	blx	r3
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da02      	bge.n	80049dc <BSP_ENV_SENSOR_SetOutputDataRate+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80049d6:	f06f 0304 	mvn.w	r3, #4
 80049da:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20003110 	.word	0x20003110
 80049ec:	20003128 	.word	0x20003128
 80049f0:	20003118 	.word	0x20003118

080049f4 <BSP_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value Pointer to environmental sensor value.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Value == NULL))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d802      	bhi.n	8004a10 <BSP_ENV_SENSOR_GetValue+0x1c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <BSP_ENV_SENSOR_GetValue+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004a10:	f06f 0301 	mvn.w	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e042      	b.n	8004a9e <BSP_ENV_SENSOR_GetValue+0xaa>
  }
  else if ((Instance == 0U) && (Function == ENV_PRESSURE))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <BSP_ENV_SENSOR_GetValue+0x38>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d103      	bne.n	8004a2c <BSP_ENV_SENSOR_GetValue+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004a24:	f06f 030a 	mvn.w	r3, #10
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e038      	b.n	8004a9e <BSP_ENV_SENSOR_GetValue+0xaa>
  }
  else if ((Instance == 1U) && (Function == ENV_HUMIDITY))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d106      	bne.n	8004a40 <BSP_ENV_SENSOR_GetValue+0x4c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d103      	bne.n	8004a40 <BSP_ENV_SENSOR_GetValue+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004a38:	f06f 030a 	mvn.w	r3, #10
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e02e      	b.n	8004a9e <BSP_ENV_SENSOR_GetValue+0xaa>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <BSP_ENV_SENSOR_GetValue+0xb4>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <BSP_ENV_SENSOR_GetValue+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e022      	b.n	8004a9e <BSP_ENV_SENSOR_GetValue+0xaa>
  }
  else
  {
    /* Get environmental sensor value */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d006      	beq.n	8004a6c <BSP_ENV_SENSOR_GetValue+0x78>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d101      	bne.n	8004a68 <BSP_ENV_SENSOR_GetValue+0x74>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e002      	b.n	8004a6e <BSP_ENV_SENSOR_GetValue+0x7a>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e000      	b.n	8004a6e <BSP_ENV_SENSOR_GetValue+0x7a>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->GetValue(Env_Sensor_CompObj[Instance], Value) < 0)
 8004a70:	7cf9      	ldrb	r1, [r7, #19]
 8004a72:	480e      	ldr	r0, [pc, #56]	; (8004aac <BSP_ENV_SENSOR_GetValue+0xb8>)
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	490a      	ldr	r1, [pc, #40]	; (8004ab0 <BSP_ENV_SENSOR_GetValue+0xbc>)
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4798      	blx	r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	da02      	bge.n	8004a9e <BSP_ENV_SENSOR_GetValue+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004a98:	f06f 0304 	mvn.w	r3, #4
 8004a9c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004a9e:	697b      	ldr	r3, [r7, #20]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20003110 	.word	0x20003110
 8004aac:	20003128 	.word	0x20003128
 8004ab0:	20003118 	.word	0x20003118

08004ab4 <HTS221_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status.
  */
static int32_t HTS221_Probe(uint32_t Functions)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	; 0x30
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  int32_t                status = BSP_ERROR_NONE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HTS221_IO_t            IOCtx;
  uint8_t                hts221_id;
  static HTS221_Object_t HTS221_Obj;

  /* Configure the environmental sensor driver */
  IOCtx.BusType     = HTS221_I2C_BUS;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = HTS221_I2C_ADDRESS;
 8004ac4:	23bf      	movs	r3, #191	; 0xbf
 8004ac6:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8004ac8:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <HTS221_Probe+0xbc>)
 8004aca:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <HTS221_Probe+0xc0>)
 8004ace:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HTS221_Probe+0xc4>)
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <HTS221_Probe+0xc8>)
 8004ad6:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8004ad8:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <HTS221_Probe+0xcc>)
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (HTS221_RegisterBusIO(&HTS221_Obj, &IOCtx) != HTS221_OK)
 8004adc:	f107 0310 	add.w	r3, r7, #16
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4828      	ldr	r0, [pc, #160]	; (8004b84 <HTS221_Probe+0xd0>)
 8004ae4:	f000 f8d2 	bl	8004c8c <HTS221_RegisterBusIO>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HTS221_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004aee:	f06f 0307 	mvn.w	r3, #7
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af4:	e037      	b.n	8004b66 <HTS221_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (HTS221_ReadID(&HTS221_Obj, &hts221_id) != HTS221_OK)
 8004af6:	f107 030f 	add.w	r3, r7, #15
 8004afa:	4619      	mov	r1, r3
 8004afc:	4821      	ldr	r0, [pc, #132]	; (8004b84 <HTS221_Probe+0xd0>)
 8004afe:	f000 f94a 	bl	8004d96 <HTS221_ReadID>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HTS221_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004b08:	f06f 0304 	mvn.w	r3, #4
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0e:	e02a      	b.n	8004b66 <HTS221_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (hts221_id != HTS221_ID)
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2bbc      	cmp	r3, #188	; 0xbc
 8004b14:	d003      	beq.n	8004b1e <HTS221_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b16:	f06f 0306 	mvn.w	r3, #6
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1c:	e023      	b.n	8004b66 <HTS221_Probe+0xb2>
  }
  else
  {
    Env_Sensor_CompObj[0] = &HTS221_Obj;
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <HTS221_Probe+0xd4>)
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HTS221_Probe+0xd0>)
 8004b22:	601a      	str	r2, [r3, #0]
    Env_Sensor_Drv[0]     = (ENV_SENSOR_CommonDrv_t *) &HTS221_COMMON_Driver;
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HTS221_Probe+0xd8>)
 8004b26:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HTS221_Probe+0xdc>)
 8004b28:	601a      	str	r2, [r3, #0]
    if (Env_Sensor_Drv[0]->Init(Env_Sensor_CompObj[0]) < 0)
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HTS221_Probe+0xd8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <HTS221_Probe+0xd4>)
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	da03      	bge.n	8004b46 <HTS221_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004b3e:	f06f 0304 	mvn.w	r3, #4
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b44:	e00f      	b.n	8004b66 <HTS221_Probe+0xb2>
    }
    else
    {
      if ((Functions & ENV_TEMPERATURE) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HTS221_Probe+0xa2>
      {
        Env_Sensor_FuncDrv[0][TEMPERATURE_ID] = (ENV_SENSOR_FuncDrv_t *) &HTS221_TEMP_Driver;
 8004b50:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HTS221_Probe+0xe0>)
 8004b52:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <HTS221_Probe+0xe4>)
 8004b54:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & ENV_HUMIDITY) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HTS221_Probe+0xb2>
      {
        Env_Sensor_FuncDrv[0][HUMIDITY_ID] = (ENV_SENSOR_FuncDrv_t *) &HTS221_HUM_Driver;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HTS221_Probe+0xe0>)
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HTS221_Probe+0xe8>)
 8004b64:	609a      	str	r2, [r3, #8]
      }
    }
  }

  return status;
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3730      	adds	r7, #48	; 0x30
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	08003e15 	.word	0x08003e15
 8004b74:	08003e89 	.word	0x08003e89
 8004b78:	08003fb1 	.word	0x08003fb1
 8004b7c:	08003f55 	.word	0x08003f55
 8004b80:	0800400d 	.word	0x0800400d
 8004b84:	20003140 	.word	0x20003140
 8004b88:	20003118 	.word	0x20003118
 8004b8c:	20003120 	.word	0x20003120
 8004b90:	20000058 	.word	0x20000058
 8004b94:	20003128 	.word	0x20003128
 8004b98:	2000007c 	.word	0x2000007c
 8004b9c:	20000068 	.word	0x20000068

08004ba0 <LPS22HH_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status.
  */
static int32_t LPS22HH_Probe(uint32_t Functions)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPS22HH_IO_t            IOCtx;
  uint8_t                 lps22hh_id;
  static LPS22HH_Object_t LPS22HH_Obj;

  /* Configure the environmental sensor driver */
  IOCtx.BusType     = LPS22HH_I2C_BUS;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LPS22HH_I2C_ADD_H;
 8004bb0:	23bb      	movs	r3, #187	; 0xbb
 8004bb2:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8004bb4:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <LPS22HH_Probe+0xbc>)
 8004bb6:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004bb8:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <LPS22HH_Probe+0xc0>)
 8004bba:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004bbc:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <LPS22HH_Probe+0xc4>)
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004bc0:	4b29      	ldr	r3, [pc, #164]	; (8004c68 <LPS22HH_Probe+0xc8>)
 8004bc2:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <LPS22HH_Probe+0xcc>)
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (LPS22HH_RegisterBusIO(&LPS22HH_Obj, &IOCtx) != LPS22HH_OK)
 8004bc8:	f107 0310 	add.w	r3, r7, #16
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4828      	ldr	r0, [pc, #160]	; (8004c70 <LPS22HH_Probe+0xd0>)
 8004bd0:	f000 fe7a 	bl	80058c8 <LPS22HH_RegisterBusIO>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <LPS22HH_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004bda:	f06f 0307 	mvn.w	r3, #7
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be0:	e037      	b.n	8004c52 <LPS22HH_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (LPS22HH_ReadID(&LPS22HH_Obj, &lps22hh_id) != LPS22HH_OK)
 8004be2:	f107 030f 	add.w	r3, r7, #15
 8004be6:	4619      	mov	r1, r3
 8004be8:	4821      	ldr	r0, [pc, #132]	; (8004c70 <LPS22HH_Probe+0xd0>)
 8004bea:	f000 ff12 	bl	8005a12 <LPS22HH_ReadID>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <LPS22HH_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004bf4:	f06f 0304 	mvn.w	r3, #4
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfa:	e02a      	b.n	8004c52 <LPS22HH_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (lps22hh_id != LPS22HH_ID)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2bb3      	cmp	r3, #179	; 0xb3
 8004c00:	d003      	beq.n	8004c0a <LPS22HH_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004c02:	f06f 0306 	mvn.w	r3, #6
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c08:	e023      	b.n	8004c52 <LPS22HH_Probe+0xb2>
  }
  else
  {
    Env_Sensor_CompObj[1] = &LPS22HH_Obj;
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <LPS22HH_Probe+0xd4>)
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <LPS22HH_Probe+0xd0>)
 8004c0e:	605a      	str	r2, [r3, #4]
    Env_Sensor_Drv[1]     = (ENV_SENSOR_CommonDrv_t *) &LPS22HH_COMMON_Driver;
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <LPS22HH_Probe+0xd8>)
 8004c12:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <LPS22HH_Probe+0xdc>)
 8004c14:	605a      	str	r2, [r3, #4]
    if (Env_Sensor_Drv[1]->Init(Env_Sensor_CompObj[1]) < 0)
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <LPS22HH_Probe+0xd8>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <LPS22HH_Probe+0xd4>)
 8004c1e:	6852      	ldr	r2, [r2, #4]
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da03      	bge.n	8004c32 <LPS22HH_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004c2a:	f06f 0304 	mvn.w	r3, #4
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c30:	e00f      	b.n	8004c52 <LPS22HH_Probe+0xb2>
    }
    else
    {
      if ((Functions & ENV_TEMPERATURE) != 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <LPS22HH_Probe+0xa2>
      {
        Env_Sensor_FuncDrv[1][TEMPERATURE_ID] = (ENV_SENSOR_FuncDrv_t *) &LPS22HH_TEMP_Driver;
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <LPS22HH_Probe+0xe0>)
 8004c3e:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <LPS22HH_Probe+0xe4>)
 8004c40:	60da      	str	r2, [r3, #12]
      }
      if ((Functions & ENV_PRESSURE) != 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <LPS22HH_Probe+0xb2>
      {
        Env_Sensor_FuncDrv[1][PRESSURE_ID] = (ENV_SENSOR_FuncDrv_t *) &LPS22HH_PRESS_Driver;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <LPS22HH_Probe+0xe0>)
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <LPS22HH_Probe+0xe8>)
 8004c50:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return status;
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3730      	adds	r7, #48	; 0x30
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	08003e15 	.word	0x08003e15
 8004c60:	08003e89 	.word	0x08003e89
 8004c64:	08003fb1 	.word	0x08003fb1
 8004c68:	08003f55 	.word	0x08003f55
 8004c6c:	0800400d 	.word	0x0800400d
 8004c70:	2000316c 	.word	0x2000316c
 8004c74:	20003118 	.word	0x20003118
 8004c78:	20003120 	.word	0x20003120
 8004c7c:	20000090 	.word	0x20000090
 8004c80:	20003128 	.word	0x20003128
 8004c84:	200000b4 	.word	0x200000b4
 8004c88:	200000a0 	.word	0x200000a0

08004c8c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e030      	b.n	8004d06 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	7b1a      	ldrb	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <HTS221_RegisterBusIO+0x84>)
 8004ce0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a0b      	ldr	r2, [pc, #44]	; (8004d14 <HTS221_RegisterBusIO+0x88>)
 8004ce6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4798      	blx	r3
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	e002      	b.n	8004d06 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8004d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d04:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004d06:	68fb      	ldr	r3, [r7, #12]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	08005343 	.word	0x08005343
 8004d14:	080053a5 	.word	0x080053a5

08004d18 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d108      	bne.n	8004d3c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 faa4 	bl	8005278 <HTS221_Initialize>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d3a:	e004      	b.n	8004d46 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d111      	bne.n	8004d84 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f878 	bl	8004e56 <HTS221_HUM_Disable>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8004d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d70:	e00d      	b.n	8004d8e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f95f 	bl	8005036 <HTS221_TEMP_Disable>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d82:	e004      	b.n	8004d8e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	331c      	adds	r3, #28
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fc28 	bl	80055fc <hts221_device_id_get>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004db6:	e000      	b.n	8004dba <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <HTS221_GetCapabilities+0x44>)
 8004dea:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <HTS221_GetCapabilities+0x44>)
 8004df0:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	41480000 	.word	0x41480000

08004e0c <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e015      	b.n	8004e4e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	331c      	adds	r3, #28
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fbf3 	bl	800561e <hts221_power_on_set>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e42:	e004      	b.n	8004e4e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e015      	b.n	8004e98 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	331c      	adds	r3, #28
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fbce 	bl	800561e <hts221_power_on_set>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8004e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e8c:	e004      	b.n	8004e98 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f96f 	bl	8005190 <HTS221_GetOutputDataRate>
 8004eb2:	4603      	mov	r3, r0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8004ec8:	ed97 0a00 	vldr	s0, [r7]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f9a3 	bl	8005218 <HTS221_SetOutputDataRate>
 8004ed2:	4603      	mov	r3, r0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	331c      	adds	r3, #28
 8004eea:	f107 020c 	add.w	r2, r7, #12
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fc58 	bl	80057a6 <hts221_hum_adc_point_0_get>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f00:	e06b      	b.n	8004fda <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f103 021c 	add.w	r2, r3, #28
 8004f08:	f107 030c 	add.w	r3, r7, #12
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f000 fbaa 	bl	800566a <hts221_hum_rh_point_0_get>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f20:	e05b      	b.n	8004fda <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f103 021c 	add.w	r2, r3, #28
 8004f28:	f107 030c 	add.w	r3, r7, #12
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f000 fc5c 	bl	80057ee <hts221_hum_adc_point_1_get>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f40:	e04b      	b.n	8004fda <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f103 021c 	add.w	r2, r3, #28
 8004f48:	f107 030c 	add.w	r3, r7, #12
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 fba8 	bl	80056a6 <hts221_hum_rh_point_1_get>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f60:	e03b      	b.n	8004fda <HTS221_HUM_GetHumidity+0xfe>
 8004f62:	2300      	movs	r3, #0
 8004f64:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	331c      	adds	r3, #28
 8004f6a:	f107 021c 	add.w	r2, r7, #28
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fafd 	bl	8005570 <hts221_humidity_raw_get>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8004f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f80:	e02b      	b.n	8004fda <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004f82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	eeb0 0a67 	vmov.f32	s0, s15
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 f99a 	bl	80052d0 <Linear_Interpolation>
 8004f9c:	eef0 7a40 	vmov.f32	s15, s0
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	edd3 7a00 	vldr	s15, [r3]
 8004fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb4:	d503      	bpl.n	8004fbe <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	edd3 7a00 	vldr	s15, [r3]
 8004fc4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004fe4 <HTS221_HUM_GetHumidity+0x108>
 8004fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd0:	dd02      	ble.n	8004fd8 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	4a04      	ldr	r2, [pc, #16]	; (8004fe8 <HTS221_HUM_GetHumidity+0x10c>)
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	42c80000 	.word	0x42c80000
 8004fe8:	42c80000 	.word	0x42c80000

08004fec <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e015      	b.n	800502e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	331c      	adds	r3, #28
 8005010:	2101      	movs	r1, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fb03 	bl	800561e <hts221_power_on_set>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800501e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005022:	e004      	b.n	800502e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e015      	b.n	8005078 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10b      	bne.n	800506e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	331c      	adds	r3, #28
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fade 	bl	800561e <hts221_power_on_set>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8005068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800506c:	e004      	b.n	8005078 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f87f 	bl	8005190 <HTS221_GetOutputDataRate>
 8005092:	4603      	mov	r3, r0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80050a8:	ed97 0a00 	vldr	s0, [r7]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f8b3 	bl	8005218 <HTS221_SetOutputDataRate>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	331c      	adds	r3, #28
 80050ca:	f107 020c 	add.w	r2, r7, #12
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fbb0 	bl	8005836 <hts221_temp_adc_point_0_get>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050e0:	e052      	b.n	8005188 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 021c 	add.w	r2, r3, #28
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 faf6 	bl	80056e2 <hts221_temp_deg_point_0_get>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005100:	e042      	b.n	8005188 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f103 021c 	add.w	r2, r3, #28
 8005108:	f107 030c 	add.w	r3, r7, #12
 800510c:	3308      	adds	r3, #8
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f000 fbb4 	bl	800587e <hts221_temp_adc_point_1_get>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005120:	e032      	b.n	8005188 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f103 021c 	add.w	r2, r3, #28
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	330c      	adds	r3, #12
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f000 fb07 	bl	8005744 <hts221_temp_deg_point_1_get>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005140:	e022      	b.n	8005188 <HTS221_TEMP_GetTemperature+0xcc>
 8005142:	2300      	movs	r3, #0
 8005144:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	331c      	adds	r3, #28
 800514a:	f107 021c 	add.w	r2, r7, #28
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fa30 	bl	80055b6 <hts221_temperature_raw_get>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005160:	e012      	b.n	8005188 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8005162:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800516e:	f107 030c 	add.w	r3, r7, #12
 8005172:	eeb0 0a67 	vmov.f32	s0, s15
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f8aa 	bl	80052d0 <Linear_Interpolation>
 800517c:	eef0 7a40 	vmov.f32	s15, s0
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	331c      	adds	r3, #28
 80051a2:	f107 020b 	add.w	r2, r7, #11
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f983 	bl	80054b4 <hts221_data_rate_get>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80051b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b8:	e025      	b.n	8005206 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d81d      	bhi.n	80051fc <HTS221_GetOutputDataRate+0x6c>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <HTS221_GetOutputDataRate+0x38>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051e3 	.word	0x080051e3
 80051d0:	080051ed 	.word	0x080051ed
 80051d4:	080051f5 	.word	0x080051f5
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
      break;
 80051e0:	e010      	b.n	8005204 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80051e8:	601a      	str	r2, [r3, #0]
      break;
 80051ea:	e00b      	b.n	8005204 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <HTS221_GetOutputDataRate+0x80>)
 80051f0:	601a      	str	r2, [r3, #0]
      break;
 80051f2:	e007      	b.n	8005204 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4a07      	ldr	r2, [pc, #28]	; (8005214 <HTS221_GetOutputDataRate+0x84>)
 80051f8:	601a      	str	r2, [r3, #0]
      break;
 80051fa:	e003      	b.n	8005204 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005200:	60fb      	str	r3, [r7, #12]
      break;
 8005202:	bf00      	nop
  }

  return ret;
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40e00000 	.word	0x40e00000
 8005214:	41480000 	.word	0x41480000

08005218 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8005224:	edd7 7a00 	vldr	s15, [r7]
 8005228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800522c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005234:	d801      	bhi.n	800523a <HTS221_SetOutputDataRate+0x22>
 8005236:	2301      	movs	r3, #1
 8005238:	e00b      	b.n	8005252 <HTS221_SetOutputDataRate+0x3a>
 800523a:	edd7 7a00 	vldr	s15, [r7]
 800523e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8005242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	d801      	bhi.n	8005250 <HTS221_SetOutputDataRate+0x38>
 800524c:	2302      	movs	r3, #2
 800524e:	e000      	b.n	8005252 <HTS221_SetOutputDataRate+0x3a>
 8005250:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8005252:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	331c      	adds	r3, #28
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f902 	bl	8005466 <hts221_data_rate_set>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8005268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526c:	e000      	b.n	8005270 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	331c      	adds	r3, #28
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f9c9 	bl	800561e <hts221_power_on_set>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005296:	e017      	b.n	80052c8 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	331c      	adds	r3, #28
 800529c:	2101      	movs	r1, #1
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f940 	bl	8005524 <hts221_block_data_update_set>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ae:	e00b      	b.n	80052c8 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80052b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ffaf 	bl	8005218 <HTS221_SetOutputDataRate>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052c4:	e000      	b.n	80052c8 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	ed93 7a03 	vldr	s14, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80052e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052ec:	edd7 7a00 	vldr	s15, [r7]
 80052f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005300:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	ed93 6a00 	vldr	s12, [r3]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005310:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005314:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	edd3 7a00 	vldr	s15, [r3]
 8005328:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800532c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005330:	eef0 7a66 	vmov.f32	s15, s13
}
 8005334:	eeb0 0a67 	vmov.f32	s0, s15
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005342:	b590      	push	{r4, r7, lr}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	461a      	mov	r2, r3
 800534e:	460b      	mov	r3, r1
 8005350:	72fb      	strb	r3, [r7, #11]
 8005352:	4613      	mov	r3, r2
 8005354:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10e      	bne.n	8005380 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	695c      	ldr	r4, [r3, #20]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	7b1b      	ldrb	r3, [r3, #12]
 800536a:	b298      	uxth	r0, r3
 800536c:	7afb      	ldrb	r3, [r7, #11]
 800536e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005372:	b2db      	uxtb	r3, r3
 8005374:	b299      	uxth	r1, r3
 8005376:	893b      	ldrh	r3, [r7, #8]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	47a0      	blx	r4
 800537c:	4603      	mov	r3, r0
 800537e:	e00d      	b.n	800539c <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	695c      	ldr	r4, [r3, #20]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	7b1b      	ldrb	r3, [r3, #12]
 8005388:	b298      	uxth	r0, r3
 800538a:	7afb      	ldrb	r3, [r7, #11]
 800538c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005390:	b2db      	uxtb	r3, r3
 8005392:	b299      	uxth	r1, r3
 8005394:	893b      	ldrh	r3, [r7, #8]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	47a0      	blx	r4
 800539a:	4603      	mov	r3, r0
  }
}
 800539c:	4618      	mov	r0, r3
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd90      	pop	{r4, r7, pc}

080053a4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	461a      	mov	r2, r3
 80053b0:	460b      	mov	r3, r1
 80053b2:	72fb      	strb	r3, [r7, #11]
 80053b4:	4613      	mov	r3, r2
 80053b6:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10e      	bne.n	80053e2 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	691c      	ldr	r4, [r3, #16]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	7b1b      	ldrb	r3, [r3, #12]
 80053cc:	b298      	uxth	r0, r3
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	b299      	uxth	r1, r3
 80053d8:	893b      	ldrh	r3, [r7, #8]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	47a0      	blx	r4
 80053de:	4603      	mov	r3, r0
 80053e0:	e00d      	b.n	80053fe <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	691c      	ldr	r4, [r3, #16]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	b298      	uxth	r0, r3
 80053ec:	7afb      	ldrb	r3, [r7, #11]
 80053ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	b299      	uxth	r1, r3
 80053f6:	893b      	ldrh	r3, [r7, #8]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	47a0      	blx	r4
 80053fc:	4603      	mov	r3, r0
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd90      	pop	{r4, r7, pc}

08005406 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8005406:	b590      	push	{r4, r7, lr}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	461a      	mov	r2, r3
 8005412:	460b      	mov	r3, r1
 8005414:	72fb      	strb	r3, [r7, #11]
 8005416:	4613      	mov	r3, r2
 8005418:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685c      	ldr	r4, [r3, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6898      	ldr	r0, [r3, #8]
 8005422:	893b      	ldrh	r3, [r7, #8]
 8005424:	7af9      	ldrb	r1, [r7, #11]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	47a0      	blx	r4
 800542a:	6178      	str	r0, [r7, #20]
  return ret;
 800542c:	697b      	ldr	r3, [r7, #20]
}
 800542e:	4618      	mov	r0, r3
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd90      	pop	{r4, r7, pc}

08005436 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005436:	b590      	push	{r4, r7, lr}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	461a      	mov	r2, r3
 8005442:	460b      	mov	r3, r1
 8005444:	72fb      	strb	r3, [r7, #11]
 8005446:	4613      	mov	r3, r2
 8005448:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681c      	ldr	r4, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6898      	ldr	r0, [r3, #8]
 8005452:	893b      	ldrh	r3, [r7, #8]
 8005454:	7af9      	ldrb	r1, [r7, #11]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	47a0      	blx	r4
 800545a:	6178      	str	r0, [r7, #20]
  return ret;
 800545c:	697b      	ldr	r3, [r7, #20]
}
 800545e:	4618      	mov	r0, r3
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd90      	pop	{r4, r7, pc}

08005466 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005472:	f107 0208 	add.w	r2, r7, #8
 8005476:	2301      	movs	r3, #1
 8005478:	2120      	movs	r1, #32
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff ffc3 	bl	8005406 <hts221_read_reg>
 8005480:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	b2da      	uxtb	r2, r3
 8005490:	7a3b      	ldrb	r3, [r7, #8]
 8005492:	f362 0301 	bfi	r3, r2, #0, #2
 8005496:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005498:	f107 0208 	add.w	r2, r7, #8
 800549c:	2301      	movs	r3, #1
 800549e:	2120      	movs	r1, #32
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff ffc8 	bl	8005436 <hts221_write_reg>
 80054a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054a8:	68fb      	ldr	r3, [r7, #12]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80054be:	f107 0208 	add.w	r2, r7, #8
 80054c2:	2301      	movs	r3, #1
 80054c4:	2120      	movs	r1, #32
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ff9d 	bl	8005406 <hts221_read_reg>
 80054cc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80054ce:	7a3b      	ldrb	r3, [r7, #8]
 80054d0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d81a      	bhi.n	8005510 <hts221_data_rate_get+0x5c>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <hts221_data_rate_get+0x2c>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	080054f1 	.word	0x080054f1
 80054e4:	080054f9 	.word	0x080054f9
 80054e8:	08005501 	.word	0x08005501
 80054ec:	08005509 	.word	0x08005509
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
      break;
 80054f6:	e00f      	b.n	8005518 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
      break;
 80054fe:	e00b      	b.n	8005518 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2202      	movs	r2, #2
 8005504:	701a      	strb	r2, [r3, #0]
      break;
 8005506:	e007      	b.n	8005518 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2203      	movs	r2, #3
 800550c:	701a      	strb	r2, [r3, #0]
      break;
 800550e:	e003      	b.n	8005518 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2204      	movs	r2, #4
 8005514:	701a      	strb	r2, [r3, #0]
      break;
 8005516:	bf00      	nop
  }

  return ret;
 8005518:	68fb      	ldr	r3, [r7, #12]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop

08005524 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005530:	f107 0208 	add.w	r2, r7, #8
 8005534:	2301      	movs	r3, #1
 8005536:	2120      	movs	r1, #32
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff64 	bl	8005406 <hts221_read_reg>
 800553e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	b2da      	uxtb	r2, r3
 800554e:	7a3b      	ldrb	r3, [r7, #8]
 8005550:	f362 0382 	bfi	r3, r2, #2, #1
 8005554:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005556:	f107 0208 	add.w	r2, r7, #8
 800555a:	2301      	movs	r3, #1
 800555c:	2120      	movs	r1, #32
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff ff69 	bl	8005436 <hts221_write_reg>
 8005564:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005566:	68fb      	ldr	r3, [r7, #12]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800557a:	f107 0208 	add.w	r2, r7, #8
 800557e:	2302      	movs	r3, #2
 8005580:	2128      	movs	r1, #40	; 0x28
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff ff3f 	bl	8005406 <hts221_read_reg>
 8005588:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800558a:	7a7b      	ldrb	r3, [r7, #9]
 800558c:	b21a      	sxth	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005598:	b29b      	uxth	r3, r3
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	b29a      	uxth	r2, r3
 800559e:	7a3b      	ldrb	r3, [r7, #8]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	4413      	add	r3, r2
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	b21a      	sxth	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	801a      	strh	r2, [r3, #0]
  return ret;
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80055c0:	f107 0208 	add.w	r2, r7, #8
 80055c4:	2302      	movs	r3, #2
 80055c6:	212a      	movs	r1, #42	; 0x2a
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff1c 	bl	8005406 <hts221_read_reg>
 80055ce:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80055d0:	7a7b      	ldrb	r3, [r7, #9]
 80055d2:	b21a      	sxth	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	7a3b      	ldrb	r3, [r7, #8]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4413      	add	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	b21a      	sxth	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	801a      	strh	r2, [r3, #0]
  return ret;
 80055f2:	68fb      	ldr	r3, [r7, #12]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8005606:	2301      	movs	r3, #1
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	210f      	movs	r1, #15
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fefa 	bl	8005406 <hts221_read_reg>
 8005612:	60f8      	str	r0, [r7, #12]
  return ret;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800562a:	f107 0208 	add.w	r2, r7, #8
 800562e:	2301      	movs	r3, #1
 8005630:	2120      	movs	r1, #32
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fee7 	bl	8005406 <hts221_read_reg>
 8005638:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <hts221_power_on_set+0x42>
    reg.pd = val;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	7a3b      	ldrb	r3, [r7, #8]
 800564a:	f362 13c7 	bfi	r3, r2, #7, #1
 800564e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8005650:	f107 0208 	add.w	r2, r7, #8
 8005654:	2301      	movs	r3, #1
 8005656:	2120      	movs	r1, #32
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff feec 	bl	8005436 <hts221_write_reg>
 800565e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005660:	68fb      	ldr	r3, [r7, #12]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8005674:	f107 020b 	add.w	r2, r7, #11
 8005678:	2301      	movs	r3, #1
 800567a:	2130      	movs	r1, #48	; 0x30
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff fec2 	bl	8005406 <hts221_read_reg>
 8005682:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800568e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80056b0:	f107 020b 	add.w	r2, r7, #11
 80056b4:	2301      	movs	r3, #1
 80056b6:	2131      	movs	r1, #49	; 0x31
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fea4 	bl	8005406 <hts221_read_reg>
 80056be:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80056c0:	7afb      	ldrb	r3, [r7, #11]
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80056ec:	f107 020f 	add.w	r2, r7, #15
 80056f0:	2301      	movs	r3, #1
 80056f2:	2132      	movs	r1, #50	; 0x32
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fe86 	bl	8005406 <hts221_read_reg>
 80056fa:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11b      	bne.n	800573a <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8005702:	f107 0210 	add.w	r2, r7, #16
 8005706:	2301      	movs	r3, #1
 8005708:	2135      	movs	r1, #53	; 0x35
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fe7b 	bl	8005406 <hts221_read_reg>
 8005710:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8005712:	7c3b      	ldrb	r3, [r7, #16]
 8005714:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005718:	b2db      	uxtb	r3, r3
 800571a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	4413      	add	r3, r2
 8005724:	ee07 3a90 	vmov	s15, r3
 8005728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800572c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800574e:	f107 020f 	add.w	r2, r7, #15
 8005752:	2301      	movs	r3, #1
 8005754:	2133      	movs	r1, #51	; 0x33
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fe55 	bl	8005406 <hts221_read_reg>
 800575c:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11b      	bne.n	800579c <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8005764:	f107 0210 	add.w	r2, r7, #16
 8005768:	2301      	movs	r3, #1
 800576a:	2135      	movs	r1, #53	; 0x35
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fe4a 	bl	8005406 <hts221_read_reg>
 8005772:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8005774:	7c3b      	ldrb	r3, [r7, #16]
 8005776:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800577a:	b2db      	uxtb	r3, r3
 800577c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	7bfa      	ldrb	r2, [r7, #15]
 8005784:	4413      	add	r3, r2
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800578e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800579c:	697b      	ldr	r3, [r7, #20]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80057b0:	f107 0208 	add.w	r2, r7, #8
 80057b4:	2302      	movs	r3, #2
 80057b6:	2136      	movs	r1, #54	; 0x36
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fe24 	bl	8005406 <hts221_read_reg>
 80057be:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80057c0:	7a7b      	ldrb	r3, [r7, #9]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	7a3b      	ldrb	r3, [r7, #8]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80057d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80057f8:	f107 0208 	add.w	r2, r7, #8
 80057fc:	2302      	movs	r3, #2
 80057fe:	213a      	movs	r1, #58	; 0x3a
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fe00 	bl	8005406 <hts221_read_reg>
 8005806:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005808:	7a7b      	ldrb	r3, [r7, #9]
 800580a:	b29b      	uxth	r3, r3
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	b29a      	uxth	r2, r3
 8005810:	7a3b      	ldrb	r3, [r7, #8]
 8005812:	b29b      	uxth	r3, r3
 8005814:	4413      	add	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800581a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800582c:	68fb      	ldr	r3, [r7, #12]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8005840:	f107 0208 	add.w	r2, r7, #8
 8005844:	2302      	movs	r3, #2
 8005846:	213c      	movs	r1, #60	; 0x3c
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff fddc 	bl	8005406 <hts221_read_reg>
 800584e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005850:	7a7b      	ldrb	r3, [r7, #9]
 8005852:	b29b      	uxth	r3, r3
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	b29a      	uxth	r2, r3
 8005858:	7a3b      	ldrb	r3, [r7, #8]
 800585a:	b29b      	uxth	r3, r3
 800585c:	4413      	add	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8005862:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8005874:	68fb      	ldr	r3, [r7, #12]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8005888:	f107 0208 	add.w	r2, r7, #8
 800588c:	2302      	movs	r3, #2
 800588e:	213e      	movs	r1, #62	; 0x3e
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fdb8 	bl	8005406 <hts221_read_reg>
 8005896:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8005898:	7a7b      	ldrb	r3, [r7, #9]
 800589a:	b29b      	uxth	r3, r3
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	b29a      	uxth	r2, r3
 80058a0:	7a3b      	ldrb	r3, [r7, #8]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80058aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80058bc:	68fb      	ldr	r3, [r7, #12]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <LPS22HH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e04d      	b.n	8005980 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	7b1a      	ldrb	r2, [r3, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1b      	ldr	r2, [pc, #108]	; (800598c <LPS22HH_RegisterBusIO+0xc4>)
 8005920:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <LPS22HH_RegisterBusIO+0xc8>)
 8005926:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e020      	b.n	8005980 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4798      	blx	r3
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 800594a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e016      	b.n	8005980 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d112      	bne.n	8005980 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10d      	bne.n	8005980 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8005964:	2301      	movs	r3, #1
 8005966:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	461a      	mov	r2, r3
 800596c:	2110      	movs	r1, #16
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f9df 	bl	8005d32 <LPS22HH_Write_Reg>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800597e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005980:	68fb      	ldr	r3, [r7, #12]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	0800605b 	.word	0x0800605b
 8005990:	08006091 	.word	0x08006091

08005994 <LPS22HH_Init>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fb0e 	bl	8005fc8 <LPS22HH_Initialize>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059b6:	e004      	b.n	80059c2 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <LPS22HH_DeInit>:
 * @brief  Deinitialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d111      	bne.n	8005a00 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f877 	bl	8005ad0 <LPS22HH_PRESS_Disable>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 80059e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ec:	e00d      	b.n	8005a0a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f918 	bl	8005c24 <LPS22HH_TEMP_Disable>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059fe:	e004      	b.n	8005a0a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <LPS22HH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	331c      	adds	r3, #28
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fd1a 	bl	800645c <lps22hh_device_id_get>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a32:	e000      	b.n	8005a36 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <LPS22HH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2201      	movs	r2, #1
 8005a54:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <LPS22HH_GetCapabilities+0x44>)
 8005a6e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <LPS22HH_GetCapabilities+0x44>)
 8005a74:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	43480000 	.word	0x43480000

08005a88 <LPS22HH_PRESS_Enable>:
 * @brief  Enable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e014      	b.n	8005ac8 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f103 021c 	add.w	r2, r3, #28
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f000 fb93 	bl	80061d8 <lps22hh_data_rate_set>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005abc:	e004      	b.n	8005ac8 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <LPS22HH_PRESS_Disable>:
 * @brief  Disable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e024      	b.n	8005b30 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11a      	bne.n	8005b26 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f103 021c 	add.w	r2, r3, #28
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	332b      	adds	r3, #43	; 0x2b
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f000 fbb9 	bl	8006274 <lps22hh_data_rate_get>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b0c:	e010      	b.n	8005b30 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	331c      	adds	r3, #28
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fb5f 	bl	80061d8 <lps22hh_data_rate_set>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b24:	e004      	b.n	8005b30 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <LPS22HH_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f90f 	bl	8005d68 <LPS22HH_GetOutputDataRate>
 8005b4a:	4603      	mov	r3, r0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <LPS22HH_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d106      	bne.n	8005b78 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005b6a:	ed97 0a00 	vldr	s0, [r7]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f95e 	bl	8005e30 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005b74:	4603      	mov	r3, r0
 8005b76:	e005      	b.n	8005b84 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005b78:	ed97 0a00 	vldr	s0, [r7]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9c9 	bl	8005f14 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005b82:	4603      	mov	r3, r0
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <LPS22HH_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f00d fe0b 	bl	80137ba <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	331c      	adds	r3, #28
 8005ba8:	f107 020c 	add.w	r2, r7, #12
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fc08 	bl	80063c4 <lps22hh_pressure_raw_get>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bbe:	e009      	b.n	8005bd4 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fab0 	bl	8006128 <lps22hh_from_lsb_to_hpa>
 8005bc8:	eef0 7a40 	vmov.f32	s15, s0
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <LPS22HH_TEMP_Enable>:
 * @brief  Enable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e014      	b.n	8005c1c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f103 021c 	add.w	r2, r3, #28
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f000 fae9 	bl	80061d8 <lps22hh_data_rate_set>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c10:	e004      	b.n	8005c1c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <LPS22HH_TEMP_Disable>:
 * @brief  Disable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e024      	b.n	8005c84 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11a      	bne.n	8005c7a <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f103 021c 	add.w	r2, r3, #28
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	332b      	adds	r3, #43	; 0x2b
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f000 fb0f 	bl	8006274 <lps22hh_data_rate_get>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c60:	e010      	b.n	8005c84 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	331c      	adds	r3, #28
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fab5 	bl	80061d8 <lps22hh_data_rate_set>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c78:	e004      	b.n	8005c84 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <LPS22HH_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f865 	bl	8005d68 <LPS22HH_GetOutputDataRate>
 8005c9e:	4603      	mov	r3, r0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <LPS22HH_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d106      	bne.n	8005ccc <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005cbe:	ed97 0a00 	vldr	s0, [r7]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8b4 	bl	8005e30 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	e005      	b.n	8005cd8 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005ccc:	ed97 0a00 	vldr	s0, [r7]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f91f 	bl	8005f14 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005cd6:	4603      	mov	r3, r0
  }
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <LPS22HH_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	2202      	movs	r2, #2
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00d fd61 	bl	80137ba <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	331c      	adds	r3, #28
 8005cfc:	f107 020c 	add.w	r2, r7, #12
 8005d00:	4611      	mov	r1, r2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fb87 	bl	8006416 <lps22hh_temperature_raw_get>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d12:	e00a      	b.n	8005d2a <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005d14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fa1d 	bl	8006158 <lps22hh_from_lsb_to_celsius>
 8005d1e:	eef0 7a40 	vmov.f32	s15, s0
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <LPS22HH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f103 001c 	add.w	r0, r3, #28
 8005d48:	1cba      	adds	r2, r7, #2
 8005d4a:	78f9      	ldrb	r1, [r7, #3]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f000 f9d2 	bl	80060f6 <lps22hh_write_reg>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5c:	e000      	b.n	8005d60 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <LPS22HH_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	331c      	adds	r3, #28
 8005d7a:	f107 020b 	add.w	r2, r7, #11
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fa77 	bl	8006274 <lps22hh_data_rate_get>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8005d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d90:	e03d      	b.n	8005e0e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	2b07      	cmp	r3, #7
 8005d96:	d835      	bhi.n	8005e04 <LPS22HH_GetOutputDataRate+0x9c>
 8005d98:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <LPS22HH_GetOutputDataRate+0x38>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dc1 	.word	0x08005dc1
 8005da4:	08005dcb 	.word	0x08005dcb
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	08005ddd 	.word	0x08005ddd
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005ded 	.word	0x08005ded
 8005db8:	08005df5 	.word	0x08005df5
 8005dbc:	08005dfd 	.word	0x08005dfd
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
      break;
 8005dc8:	e020      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005dd0:	601a      	str	r2, [r3, #0]
      break;
 8005dd2:	e01b      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <LPS22HH_GetOutputDataRate+0xb0>)
 8005dd8:	601a      	str	r2, [r3, #0]
      break;
 8005dda:	e017      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	4a0f      	ldr	r2, [pc, #60]	; (8005e1c <LPS22HH_GetOutputDataRate+0xb4>)
 8005de0:	601a      	str	r2, [r3, #0]
      break;
 8005de2:	e013      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	4a0e      	ldr	r2, [pc, #56]	; (8005e20 <LPS22HH_GetOutputDataRate+0xb8>)
 8005de8:	601a      	str	r2, [r3, #0]
      break;
 8005dea:	e00f      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <LPS22HH_GetOutputDataRate+0xbc>)
 8005df0:	601a      	str	r2, [r3, #0]
      break;
 8005df2:	e00b      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4a0c      	ldr	r2, [pc, #48]	; (8005e28 <LPS22HH_GetOutputDataRate+0xc0>)
 8005df8:	601a      	str	r2, [r3, #0]
      break;
 8005dfa:	e007      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4a0b      	ldr	r2, [pc, #44]	; (8005e2c <LPS22HH_GetOutputDataRate+0xc4>)
 8005e00:	601a      	str	r2, [r3, #0]
      break;
 8005e02:	e003      	b.n	8005e0c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e08:	60fb      	str	r3, [r7, #12]
      break;
 8005e0a:	bf00      	nop
  }

  return ret;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	41200000 	.word	0x41200000
 8005e1c:	41c80000 	.word	0x41c80000
 8005e20:	42480000 	.word	0x42480000
 8005e24:	42960000 	.word	0x42960000
 8005e28:	42c80000 	.word	0x42c80000
 8005e2c:	43480000 	.word	0x43480000

08005e30 <LPS22HH_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005e3c:	edd7 7a00 	vldr	s15, [r7]
 8005e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	d801      	bhi.n	8005e52 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e037      	b.n	8005ec2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005e52:	edd7 7a00 	vldr	s15, [r7]
 8005e56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	d801      	bhi.n	8005e68 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e02c      	b.n	8005ec2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005e68:	edd7 7a00 	vldr	s15, [r7]
 8005e6c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e78:	d801      	bhi.n	8005e7e <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e021      	b.n	8005ec2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005e7e:	edd7 7a00 	vldr	s15, [r7]
 8005e82:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005f08 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8e:	d801      	bhi.n	8005e94 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005e90:	2304      	movs	r3, #4
 8005e92:	e016      	b.n	8005ec2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005e94:	edd7 7a00 	vldr	s15, [r7]
 8005e98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005f0c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8005e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	d801      	bhi.n	8005eaa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005ea6:	2305      	movs	r3, #5
 8005ea8:	e00b      	b.n	8005ec2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005eaa:	edd7 7a00 	vldr	s15, [r7]
 8005eae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005f10 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eba:	d801      	bhi.n	8005ec0 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8005ebc:	2306      	movs	r3, #6
 8005ebe:	e000      	b.n	8005ec2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005ec0:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005ec2:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  50.0f) ? LPS22HH_50_Hz
          : (Odr <=  75.0f) ? LPS22HH_75_Hz
          : (Odr <= 100.0f) ? LPS22HH_100_Hz
          :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	331c      	adds	r3, #28
 8005ec8:	7bfa      	ldrb	r2, [r7, #15]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f983 	bl	80061d8 <lps22hh_data_rate_set>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005edc:	e00f      	b.n	8005efe <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f103 021c 	add.w	r2, r3, #28
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	332b      	adds	r3, #43	; 0x2b
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f000 f9c2 	bl	8006274 <lps22hh_data_rate_get>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005efa:	e000      	b.n	8005efe <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	42480000 	.word	0x42480000
 8005f0c:	42960000 	.word	0x42960000
 8005f10:	42c80000 	.word	0x42c80000

08005f14 <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005f20:	edd7 7a00 	vldr	s15, [r7]
 8005f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f30:	d801      	bhi.n	8005f36 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e037      	b.n	8005fa6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f36:	edd7 7a00 	vldr	s15, [r7]
 8005f3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f46:	d801      	bhi.n	8005f4c <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e02c      	b.n	8005fa6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f4c:	edd7 7a00 	vldr	s15, [r7]
 8005f50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5c:	d801      	bhi.n	8005f62 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e021      	b.n	8005fa6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f62:	edd7 7a00 	vldr	s15, [r7]
 8005f66:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005fbc <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8005f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f72:	d801      	bhi.n	8005f78 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8005f74:	2304      	movs	r3, #4
 8005f76:	e016      	b.n	8005fa6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f78:	edd7 7a00 	vldr	s15, [r7]
 8005f7c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005fc0 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8005f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f88:	d801      	bhi.n	8005f8e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005f8a:	2305      	movs	r3, #5
 8005f8c:	e00b      	b.n	8005fa6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f8e:	edd7 7a00 	vldr	s15, [r7]
 8005f92:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005fc4 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8005f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9e:	d801      	bhi.n	8005fa4 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8005fa0:	2306      	movs	r3, #6
 8005fa2:	e000      	b.n	8005fa6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005fa4:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                 : (Odr <=  50.0f) ? LPS22HH_50_Hz
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	42480000 	.word	0x42480000
 8005fc0:	42960000 	.word	0x42960000
 8005fc4:	42c80000 	.word	0x42c80000

08005fc8 <LPS22HH_Initialize>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	331c      	adds	r3, #28
 8005fd4:	2111      	movs	r1, #17
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fa9d 	bl	8006516 <lps22hh_i3c_interface_set>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe6:	e034      	b.n	8006052 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	331c      	adds	r3, #28
 8005fec:	2110      	movs	r1, #16
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f8f2 	bl	80061d8 <lps22hh_data_rate_set>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8005ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ffe:	e028      	b.n	8006052 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	331c      	adds	r3, #28
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fa5f 	bl	80064ca <lps22hh_lp_bandwidth_set>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006016:	e01c      	b.n	8006052 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	331c      	adds	r3, #28
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f8b4 	bl	800618c <lps22hh_block_data_update_set>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 800602a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800602e:	e010      	b.n	8006052 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	331c      	adds	r3, #28
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fa21 	bl	800647e <lps22hh_auto_increment_set>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8006042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006046:	e004      	b.n	8006052 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2203      	movs	r2, #3
 800604c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800605a:	b590      	push	{r4, r7, lr}
 800605c:	b087      	sub	sp, #28
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	461a      	mov	r2, r3
 8006066:	460b      	mov	r3, r1
 8006068:	72fb      	strb	r3, [r7, #11]
 800606a:	4613      	mov	r3, r2
 800606c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	695c      	ldr	r4, [r3, #20]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	7b1b      	ldrb	r3, [r3, #12]
 800607a:	b298      	uxth	r0, r3
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	b299      	uxth	r1, r3
 8006080:	893b      	ldrh	r3, [r7, #8]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	47a0      	blx	r4
 8006086:	4603      	mov	r3, r0
}
 8006088:	4618      	mov	r0, r3
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd90      	pop	{r4, r7, pc}

08006090 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	461a      	mov	r2, r3
 800609c:	460b      	mov	r3, r1
 800609e:	72fb      	strb	r3, [r7, #11]
 80060a0:	4613      	mov	r3, r2
 80060a2:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	691c      	ldr	r4, [r3, #16]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	7b1b      	ldrb	r3, [r3, #12]
 80060b0:	b298      	uxth	r0, r3
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	b299      	uxth	r1, r3
 80060b6:	893b      	ldrh	r3, [r7, #8]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	47a0      	blx	r4
 80060bc:	4603      	mov	r3, r0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}

080060c6 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80060c6:	b590      	push	{r4, r7, lr}
 80060c8:	b087      	sub	sp, #28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	461a      	mov	r2, r3
 80060d2:	460b      	mov	r3, r1
 80060d4:	72fb      	strb	r3, [r7, #11]
 80060d6:	4613      	mov	r3, r2
 80060d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685c      	ldr	r4, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6898      	ldr	r0, [r3, #8]
 80060e2:	893b      	ldrh	r3, [r7, #8]
 80060e4:	7af9      	ldrb	r1, [r7, #11]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	47a0      	blx	r4
 80060ea:	6178      	str	r0, [r7, #20]
  return ret;
 80060ec:	697b      	ldr	r3, [r7, #20]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd90      	pop	{r4, r7, pc}

080060f6 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80060f6:	b590      	push	{r4, r7, lr}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	461a      	mov	r2, r3
 8006102:	460b      	mov	r3, r1
 8006104:	72fb      	strb	r3, [r7, #11]
 8006106:	4613      	mov	r3, r2
 8006108:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681c      	ldr	r4, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6898      	ldr	r0, [r3, #8]
 8006112:	893b      	ldrh	r3, [r7, #8]
 8006114:	7af9      	ldrb	r1, [r7, #11]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	47a0      	blx	r4
 800611a:	6178      	str	r0, [r7, #20]
  return ret;
 800611c:	697b      	ldr	r3, [r7, #20]
}
 800611e:	4618      	mov	r0, r3
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd90      	pop	{r4, r7, pc}
	...

08006128 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006154 <lps22hh_from_lsb_to_hpa+0x2c>
 800613e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006142:	eef0 7a66 	vmov.f32	s15, s13
}
 8006146:	eeb0 0a67 	vmov.f32	s0, s15
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	49800000 	.word	0x49800000

08006158 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8006162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800616e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006188 <lps22hh_from_lsb_to_celsius+0x30>
 8006172:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006176:	eef0 7a66 	vmov.f32	s15, s13
}
 800617a:	eeb0 0a67 	vmov.f32	s0, s15
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	42c80000 	.word	0x42c80000

0800618c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006198:	f107 0208 	add.w	r2, r7, #8
 800619c:	2301      	movs	r3, #1
 800619e:	2110      	movs	r1, #16
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ff90 	bl	80060c6 <lps22hh_read_reg>
 80061a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	7a3b      	ldrb	r3, [r7, #8]
 80061b8:	f362 0341 	bfi	r3, r2, #1, #1
 80061bc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80061be:	f107 0208 	add.w	r2, r7, #8
 80061c2:	2301      	movs	r3, #1
 80061c4:	2110      	movs	r1, #16
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff ff95 	bl	80060f6 <lps22hh_write_reg>
 80061cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80061e4:	f107 0210 	add.w	r2, r7, #16
 80061e8:	2301      	movs	r3, #1
 80061ea:	2110      	movs	r1, #16
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ff6a 	bl	80060c6 <lps22hh_read_reg>
 80061f2:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d107      	bne.n	800620a <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80061fa:	f107 020c 	add.w	r2, r7, #12
 80061fe:	2301      	movs	r3, #1
 8006200:	2111      	movs	r1, #17
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff ff5f 	bl	80060c6 <lps22hh_read_reg>
 8006208:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10f      	bne.n	8006230 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	b2da      	uxtb	r2, r3
 8006218:	7c3b      	ldrb	r3, [r7, #16]
 800621a:	f362 1306 	bfi	r3, r2, #4, #3
 800621e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8006220:	f107 0210 	add.w	r2, r7, #16
 8006224:	2301      	movs	r3, #1
 8006226:	2110      	movs	r1, #16
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff64 	bl	80060f6 <lps22hh_write_reg>
 800622e:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d119      	bne.n	800626a <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	b2da      	uxtb	r2, r3
 8006240:	7b3b      	ldrb	r3, [r7, #12]
 8006242:	f362 0341 	bfi	r3, r2, #1, #1
 8006246:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	08db      	lsrs	r3, r3, #3
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	b2da      	uxtb	r2, r3
 8006252:	7b3b      	ldrb	r3, [r7, #12]
 8006254:	f362 0300 	bfi	r3, r2, #0, #1
 8006258:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800625a:	f107 020c 	add.w	r2, r7, #12
 800625e:	2301      	movs	r3, #1
 8006260:	2111      	movs	r1, #17
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff ff47 	bl	80060f6 <lps22hh_write_reg>
 8006268:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 800626a:	697b      	ldr	r3, [r7, #20]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800627e:	f107 0210 	add.w	r2, r7, #16
 8006282:	2301      	movs	r3, #1
 8006284:	2110      	movs	r1, #16
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ff1d 	bl	80060c6 <lps22hh_read_reg>
 800628c:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d107      	bne.n	80062a4 <lps22hh_data_rate_get+0x30>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8006294:	f107 020c 	add.w	r2, r7, #12
 8006298:	2301      	movs	r3, #1
 800629a:	2111      	movs	r1, #17
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff ff12 	bl	80060c6 <lps22hh_read_reg>
 80062a2:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f040 8086 	bne.w	80063b8 <lps22hh_data_rate_get+0x144>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80062ac:	f107 020c 	add.w	r2, r7, #12
 80062b0:	2301      	movs	r3, #1
 80062b2:	2111      	movs	r1, #17
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ff06 	bl	80060c6 <lps22hh_read_reg>
 80062ba:	6178      	str	r0, [r7, #20]
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80062bc:	7b3b      	ldrb	r3, [r7, #12]
 80062be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	011a      	lsls	r2, r3, #4
 80062c6:	7b3b      	ldrb	r3, [r7, #12]
 80062c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
             ctrl_reg1.odr )) {
 80062d2:	7c3a      	ldrb	r2, [r7, #16]
 80062d4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80062d8:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80062da:	4413      	add	r3, r2
 80062dc:	2b15      	cmp	r3, #21
 80062de:	d867      	bhi.n	80063b0 <lps22hh_data_rate_get+0x13c>
 80062e0:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <lps22hh_data_rate_get+0x74>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	08006341 	.word	0x08006341
 80062ec:	08006351 	.word	0x08006351
 80062f0:	08006359 	.word	0x08006359
 80062f4:	08006361 	.word	0x08006361
 80062f8:	08006369 	.word	0x08006369
 80062fc:	08006371 	.word	0x08006371
 8006300:	080063a1 	.word	0x080063a1
 8006304:	080063a9 	.word	0x080063a9
 8006308:	08006349 	.word	0x08006349
 800630c:	080063b1 	.word	0x080063b1
 8006310:	080063b1 	.word	0x080063b1
 8006314:	080063b1 	.word	0x080063b1
 8006318:	080063b1 	.word	0x080063b1
 800631c:	080063b1 	.word	0x080063b1
 8006320:	080063b1 	.word	0x080063b1
 8006324:	080063b1 	.word	0x080063b1
 8006328:	080063b1 	.word	0x080063b1
 800632c:	08006379 	.word	0x08006379
 8006330:	08006381 	.word	0x08006381
 8006334:	08006389 	.word	0x08006389
 8006338:	08006391 	.word	0x08006391
 800633c:	08006399 	.word	0x08006399
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
        break;
 8006346:	e038      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2208      	movs	r2, #8
 800634c:	701a      	strb	r2, [r3, #0]
        break;
 800634e:	e034      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
        break;
 8006356:	e030      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2202      	movs	r2, #2
 800635c:	701a      	strb	r2, [r3, #0]
        break;
 800635e:	e02c      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2203      	movs	r2, #3
 8006364:	701a      	strb	r2, [r3, #0]
        break;
 8006366:	e028      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2204      	movs	r2, #4
 800636c:	701a      	strb	r2, [r3, #0]
        break;
 800636e:	e024      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2205      	movs	r2, #5
 8006374:	701a      	strb	r2, [r3, #0]
        break;
 8006376:	e020      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2211      	movs	r2, #17
 800637c:	701a      	strb	r2, [r3, #0]
        break;
 800637e:	e01c      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2212      	movs	r2, #18
 8006384:	701a      	strb	r2, [r3, #0]
        break;
 8006386:	e018      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2213      	movs	r2, #19
 800638c:	701a      	strb	r2, [r3, #0]
        break;
 800638e:	e014      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2214      	movs	r2, #20
 8006394:	701a      	strb	r2, [r3, #0]
        break;
 8006396:	e010      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2215      	movs	r2, #21
 800639c:	701a      	strb	r2, [r3, #0]
        break;
 800639e:	e00c      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2206      	movs	r2, #6
 80063a4:	701a      	strb	r2, [r3, #0]
        break;
 80063a6:	e008      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2207      	movs	r2, #7
 80063ac:	701a      	strb	r2, [r3, #0]
        break;
 80063ae:	e004      	b.n	80063ba <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
        break;
 80063b6:	e000      	b.n	80063ba <lps22hh_data_rate_get+0x146>
    }
  }
 80063b8:	bf00      	nop

  return ret;
 80063ba:	697b      	ldr	r3, [r7, #20]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80063ce:	f107 0208 	add.w	r2, r7, #8
 80063d2:	2303      	movs	r3, #3
 80063d4:	2128      	movs	r1, #40	; 0x28
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fe75 	bl	80060c6 <lps22hh_read_reg>
 80063dc:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80063de:	7abb      	ldrb	r3, [r7, #10]
 80063e0:	461a      	mov	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	7a7a      	ldrb	r2, [r7, #9]
 80063ee:	441a      	add	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	7a3a      	ldrb	r2, [r7, #8]
 80063fc:	441a      	add	r2, r3
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	601a      	str	r2, [r3, #0]
  return ret;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006420:	f107 0208 	add.w	r2, r7, #8
 8006424:	2302      	movs	r3, #2
 8006426:	212b      	movs	r1, #43	; 0x2b
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fe4c 	bl	80060c6 <lps22hh_read_reg>
 800642e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006430:	7a7b      	ldrb	r3, [r7, #9]
 8006432:	b21a      	sxth	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800643e:	b29b      	uxth	r3, r3
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	b29a      	uxth	r2, r3
 8006444:	7a3b      	ldrb	r3, [r7, #8]
 8006446:	b29b      	uxth	r3, r3
 8006448:	4413      	add	r3, r2
 800644a:	b29b      	uxth	r3, r3
 800644c:	b21a      	sxth	r2, r3
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	801a      	strh	r2, [r3, #0]
  return ret;
 8006452:	68fb      	ldr	r3, [r7, #12]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006466:	2301      	movs	r3, #1
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	210f      	movs	r1, #15
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fe2a 	bl	80060c6 <lps22hh_read_reg>
 8006472:	60f8      	str	r0, [r7, #12]
  return ret;
 8006474:	68fb      	ldr	r3, [r7, #12]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800648a:	f107 0208 	add.w	r2, r7, #8
 800648e:	2301      	movs	r3, #1
 8006490:	2111      	movs	r1, #17
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fe17 	bl	80060c6 <lps22hh_read_reg>
 8006498:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10f      	bne.n	80064c0 <lps22hh_auto_increment_set+0x42>
    reg.if_add_inc = val;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	7a3b      	ldrb	r3, [r7, #8]
 80064aa:	f362 1304 	bfi	r3, r2, #4, #1
 80064ae:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80064b0:	f107 0208 	add.w	r2, r7, #8
 80064b4:	2301      	movs	r3, #1
 80064b6:	2111      	movs	r1, #17
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fe1c 	bl	80060f6 <lps22hh_write_reg>
 80064be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064c0:	68fb      	ldr	r3, [r7, #12]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80064d6:	f107 0208 	add.w	r2, r7, #8
 80064da:	2301      	movs	r3, #1
 80064dc:	2110      	movs	r1, #16
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fdf1 	bl	80060c6 <lps22hh_read_reg>
 80064e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10f      	bne.n	800650c <lps22hh_lp_bandwidth_set+0x42>
    reg.lpfp_cfg = (uint8_t)val;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	7a3b      	ldrb	r3, [r7, #8]
 80064f6:	f362 0383 	bfi	r3, r2, #2, #2
 80064fa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80064fc:	f107 0208 	add.w	r2, r7, #8
 8006500:	2301      	movs	r3, #1
 8006502:	2110      	movs	r1, #16
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fdf6 	bl	80060f6 <lps22hh_write_reg>
 800650a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006522:	f107 0208 	add.w	r2, r7, #8
 8006526:	2301      	movs	r3, #1
 8006528:	210e      	movs	r1, #14
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fdcb 	bl	80060c6 <lps22hh_read_reg>
 8006530:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d118      	bne.n	800656a <lps22hh_i3c_interface_set+0x54>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	7a3b      	ldrb	r3, [r7, #8]
 8006542:	f362 0341 	bfi	r3, r2, #1, #1
 8006546:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	091b      	lsrs	r3, r3, #4
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	7a3b      	ldrb	r3, [r7, #8]
 8006554:	f362 13c7 	bfi	r3, r2, #7, #1
 8006558:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800655a:	f107 0208 	add.w	r2, r7, #8
 800655e:	2301      	movs	r3, #1
 8006560:	210e      	movs	r1, #14
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fdc7 	bl	80060f6 <lps22hh_write_reg>
 8006568:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800656a:	68fb      	ldr	r3, [r7, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <noos_sem_wait>:

/* Declare HAL Tick based on a period of 1 ms. */
extern uint32_t HAL_GetTick(void);

int32_t noos_sem_wait(volatile uint32_t *sem, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006584:	f002 f984 	bl	8008890 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]


  while ((*sem < 1U))
 800658a:	e018      	b.n	80065be <noos_sem_wait+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 800658c:	f002 f980 	bl	8008890 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	429a      	cmp	r2, r3
 800659a:	d203      	bcs.n	80065a4 <noos_sem_wait+0x30>
    {
      rc = -1;
 800659c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065a0:	617b      	str	r3, [r7, #20]
      break;
 80065a2:	e010      	b.n	80065c6 <noos_sem_wait+0x52>
    }
    if (idle_func != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <noos_sem_wait+0x4a>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 80065aa:	f002 f971 	bl	8008890 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1a9a      	subs	r2, r3, r2
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	441a      	add	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4610      	mov	r0, r2
 80065bc:	4798      	blx	r3
  while ((*sem < 1U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0e2      	beq.n	800658c <noos_sem_wait+0x18>
    }
  }
  /* no timeout */
  if (rc == 0)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d104      	bne.n	80065d6 <noos_sem_wait+0x62>
  {
    *sem = *sem - 1U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	1e5a      	subs	r2, r3, #1
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]
  }
  return rc;
 80065d6:	697b      	ldr	r3, [r7, #20]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <noos_fifo_init>:

int32_t noos_fifo_init(noos_queue_t **qret, uint16_t len)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	807b      	strh	r3, [r7, #2]
  int32_t rc = -1;
 80065ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065f0:	60fb      	str	r3, [r7, #12]
  noos_queue_t *q;
  if (len > 0U)
 80065f2:	887b      	ldrh	r3, [r7, #2]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d030      	beq.n	800665a <noos_fifo_init+0x7a>
  {
    q = (noos_queue_t *)MX_WIFI_MALLOC(sizeof(noos_queue_t));
 80065f8:	2014      	movs	r0, #20
 80065fa:	f00d f8b1 	bl	8013760 <malloc>
 80065fe:	4603      	mov	r3, r0
 8006600:	60bb      	str	r3, [r7, #8]
    if (q != NULL)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d028      	beq.n	800665a <noos_fifo_init+0x7a>
    {
      q->in = 0U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	805a      	strh	r2, [r3, #2]
      q->len = len;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	887a      	ldrh	r2, [r7, #2]
 8006612:	801a      	strh	r2, [r3, #0]
      q->idx = 0;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
      q->rd = 0;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2200      	movs	r2, #0
 800661e:	60da      	str	r2, [r3, #12]
      q->wr = 0;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	611a      	str	r2, [r3, #16]
      q->fifo = (void **) MX_WIFI_MALLOC(sizeof(void *) * (len + 1));
 8006626:	887b      	ldrh	r3, [r7, #2]
 8006628:	3301      	adds	r3, #1
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4618      	mov	r0, r3
 800662e:	f00d f897 	bl	8013760 <malloc>
 8006632:	4603      	mov	r3, r0
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	605a      	str	r2, [r3, #4]
      if (q->fifo != NULL)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <noos_fifo_init+0x6e>
      {
        rc = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
        *qret = q;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e005      	b.n	800665a <noos_fifo_init+0x7a>
      }
      else
      {
        MX_WIFI_FREE(q);
 800664e:	68b8      	ldr	r0, [r7, #8]
 8006650:	f00d f88e 	bl	8013770 <free>
        *qret = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return rc;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <noos_fifo_deinit>:

void noos_fifo_deinit(noos_queue_t *q)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  if (q != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <noos_fifo_deinit+0x1e>
  {
    MX_WIFI_FREE(q->fifo);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	4618      	mov	r0, r3
 8006678:	f00d f87a 	bl	8013770 <free>
    MX_WIFI_FREE(q);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f00d f877 	bl	8013770 <free>
  }
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <noos_fifo_push>:

int32_t noos_fifo_push(noos_queue_t *q, void *p, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	603b      	str	r3, [r7, #0]
  int32_t rc = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800669c:	f002 f8f8 	bl	8008890 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

  while (q->in == q->len)
 80066a2:	e018      	b.n	80066d6 <noos_fifo_push+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 80066a4:	f002 f8f4 	bl	8008890 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d203      	bcs.n	80066bc <noos_fifo_push+0x32>
    {
      rc = -1;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066b8:	617b      	str	r3, [r7, #20]
      break;
 80066ba:	e012      	b.n	80066e2 <noos_fifo_push+0x58>
    }
    if (NULL != idle_func)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <noos_fifo_push+0x4c>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 80066c2:	f002 f8e5 	bl	8008890 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1a9a      	subs	r2, r3, r2
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	441a      	add	r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	4610      	mov	r0, r2
 80066d4:	4798      	blx	r3
  while (q->in == q->len)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	885a      	ldrh	r2, [r3, #2]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d0e0      	beq.n	80066a4 <noos_fifo_push+0x1a>
    }
  }
  if (0 == rc)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d119      	bne.n	800671c <noos_fifo_push+0x92>
  {
    q->in++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	885b      	ldrh	r3, [r3, #2]
 80066ec:	3301      	adds	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	805a      	strh	r2, [r3, #2]
    q->fifo[q->wr] = p;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	601a      	str	r2, [r3, #0]
    q->wr = (q->wr + 1U) % q->len;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	8812      	ldrh	r2, [r2, #0]
 800670e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006712:	fb01 f202 	mul.w	r2, r1, r2
 8006716:	1a9a      	subs	r2, r3, r2
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	611a      	str	r2, [r3, #16]
  }
  return rc;
 800671c:	697b      	ldr	r3, [r7, #20]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <noos_fifo_pop>:


void *noos_fifo_pop(noos_queue_t *q, uint32_t timeout, void (*idle_func)(uint32_t duration))
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b088      	sub	sp, #32
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart = HAL_GetTick();
 8006736:	f002 f8ab 	bl	8008890 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]
  void *p = NULL;
 800673c:	2300      	movs	r3, #0
 800673e:	61bb      	str	r3, [r7, #24]

  while (0U == q->in)
 8006740:	e018      	b.n	8006774 <noos_fifo_pop+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > timeout)
 8006742:	f002 f8a5 	bl	8008890 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	d203      	bcs.n	800675a <noos_fifo_pop+0x34>
    {
      rc = -1;
 8006752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006756:	61fb      	str	r3, [r7, #28]
      break;
 8006758:	e010      	b.n	800677c <noos_fifo_pop+0x56>
    }
    if (NULL != idle_func)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d009      	beq.n	8006774 <noos_fifo_pop+0x4e>
    {
      (*idle_func)(timeout - (HAL_GetTick() - tickstart));
 8006760:	f002 f896 	bl	8008890 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	1a9a      	subs	r2, r3, r2
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
  while (0U == q->in)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	885b      	ldrh	r3, [r3, #2]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0e2      	beq.n	8006742 <noos_fifo_pop+0x1c>
    }
  }

  if (0 == rc)
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d119      	bne.n	80067b6 <noos_fifo_pop+0x90>
  {
    p = q->fifo[q->rd];
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	61bb      	str	r3, [r7, #24]
    q->rd = (q->rd + 1U) % q->len;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	8812      	ldrh	r2, [r2, #0]
 800679c:	fbb3 f1f2 	udiv	r1, r3, r2
 80067a0:	fb01 f202 	mul.w	r2, r1, r2
 80067a4:	1a9a      	subs	r2, r3, r2
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	60da      	str	r2, [r3, #12]
    q->in--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	885b      	ldrh	r3, [r3, #2]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	805a      	strh	r2, [r3, #2]
  }
  return p;
 80067b6:	69bb      	ldr	r3, [r7, #24]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <mx_wifi_hci_pkt_verify>:
static bool mx_wifi_hci_pkt_verify(uint8_t *data, uint16_t len);


/* Private functions ---------------------------------------------------------*/
static bool mx_wifi_hci_pkt_verify(uint8_t *data, uint16_t len)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	807b      	strh	r3, [r7, #2]
  /* here each uart slip frame or spi frame as a hci packet */
  return true;
 80067cc:	2301      	movs	r3, #1
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
	...

080067dc <mx_wifi_hci_init>:


/* Global functions ----------------------------------------------------------*/
int32_t mx_wifi_hci_init(hci_send_func_t low_level_send)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  tcl_output = low_level_send;
 80067e8:	4a07      	ldr	r2, [pc, #28]	; (8006808 <mx_wifi_hci_init+0x2c>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6013      	str	r3, [r2, #0]

  if (0 == ret)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <mx_wifi_hci_init+0x20>
  {
    FIFO_INIT(hci_pkt_fifo, MX_WIFI_MAX_RX_BUFFER_COUNT);
 80067f4:	2102      	movs	r1, #2
 80067f6:	4805      	ldr	r0, [pc, #20]	; (800680c <mx_wifi_hci_init+0x30>)
 80067f8:	f7ff fef2 	bl	80065e0 <noos_fifo_init>
  }

  return ret;
 80067fc:	68fb      	ldr	r3, [r7, #12]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20003198 	.word	0x20003198
 800680c:	2000319c 	.word	0x2000319c

08006810 <mx_wifi_hci_deinit>:

int32_t mx_wifi_hci_deinit(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  FIFO_DEINIT(hci_pkt_fifo);
 8006814:	4b03      	ldr	r3, [pc, #12]	; (8006824 <mx_wifi_hci_deinit+0x14>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff ff23 	bl	8006664 <noos_fifo_deinit>
  return 0;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	bd80      	pop	{r7, pc}
 8006824:	2000319c 	.word	0x2000319c

08006828 <mx_wifi_hci_send>:

int32_t mx_wifi_hci_send(uint8_t *payload, uint16_t len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	807b      	strh	r3, [r7, #2]
  int32_t ret = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
  uint16_t sent = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	817b      	strh	r3, [r7, #10]

#if MX_WIFI_USE_SPI
  sent = tcl_output(payload, len);
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <mx_wifi_hci_send+0x4c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	887a      	ldrh	r2, [r7, #2]
 8006842:	4611      	mov	r1, r2
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
 8006848:	4603      	mov	r3, r0
 800684a:	817b      	strh	r3, [r7, #10]
  if (len != sent)
 800684c:	887a      	ldrh	r2, [r7, #2]
 800684e:	897b      	ldrh	r3, [r7, #10]
 8006850:	429a      	cmp	r2, r3
 8006852:	d008      	beq.n	8006866 <mx_wifi_hci_send+0x3e>
  {
    DEBUG_ERROR("tcl_output(spi) error sent=%d !\n", sent);
 8006854:	897b      	ldrh	r3, [r7, #10]
 8006856:	4619      	mov	r1, r3
 8006858:	4807      	ldr	r0, [pc, #28]	; (8006878 <mx_wifi_hci_send+0x50>)
 800685a:	f00d ff15 	bl	8014688 <iprintf>
    ret = -1;
 800685e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e001      	b.n	800686a <mx_wifi_hci_send+0x42>
  }
  else
  {
    ret = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
    DEBUG_ERROR("create slip frame error!\r\n");
    ret = -2;
  }
#endif /* MX_WIFI_USE_SPI */

  return ret;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20003198 	.word	0x20003198
 8006878:	08018b68 	.word	0x08018b68

0800687c <mx_wifi_hci_recv>:

void process_txrx_poll(uint32_t timeout);

mx_buf_t *mx_wifi_hci_recv(uint32_t timeout)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  mx_buf_t *nbuf;
  nbuf = (mx_buf_t *)FIFO_POP(hci_pkt_fifo, timeout, process_txrx_poll);
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <mx_wifi_hci_recv+0x24>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a06      	ldr	r2, [pc, #24]	; (80068a4 <mx_wifi_hci_recv+0x28>)
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff ff4a 	bl	8006726 <noos_fifo_pop>
 8006892:	60f8      	str	r0, [r7, #12]
  if (nbuf != NULL)
  {
    MX_STAT(out_fifo);
  }
  return nbuf;
 8006894:	68fb      	ldr	r3, [r7, #12]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	2000319c 	.word	0x2000319c
 80068a4:	08003449 	.word	0x08003449

080068a8 <mx_wifi_hci_free>:

void mx_wifi_hci_free(mx_buf_t *nbuf)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  if (NULL != nbuf)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <mx_wifi_hci_free+0x14>
  {
    (void) MX_NET_BUFFER_FREE(nbuf);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f00c ff5a 	bl	8013770 <free>
  }
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <mx_wifi_hci_input>:

/**
  * @brief LOW LEVEL INTERFACE
  */
void mx_wifi_hci_input(mx_buf_t *netbuf)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  if (NULL != netbuf)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02c      	beq.n	800692c <mx_wifi_hci_input+0x68>
  {
    uint8_t  *data = MX_NET_BUFFER_PAYLOAD(netbuf);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	3308      	adds	r3, #8
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4413      	add	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
    uint32_t  len  = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60bb      	str	r3, [r7, #8]

    if ((NULL != data) && (len > 0))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <mx_wifi_hci_input+0x68>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01d      	beq.n	800692c <mx_wifi_hci_input+0x68>
    {
      if (mx_wifi_hci_pkt_verify(data, len))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff ff62 	bl	80067c0 <mx_wifi_hci_pkt_verify>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <mx_wifi_hci_input+0x62>
      {
        if (FIFO_OK != FIFO_PUSH(hci_pkt_fifo, netbuf, WAIT_FOREVER, NULL))
 8006902:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <mx_wifi_hci_input+0x70>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	2300      	movs	r3, #0
 8006908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	f7ff febc 	bl	800668a <noos_fifo_push>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <mx_wifi_hci_input+0x68>
        {
          DEBUG_ERROR("push tcl input queue err!\n");
 8006918:	4807      	ldr	r0, [pc, #28]	; (8006938 <mx_wifi_hci_input+0x74>)
 800691a:	f00d ff3b 	bl	8014794 <puts>
          MX_NET_BUFFER_FREE(netbuf);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f00c ff26 	bl	8013770 <free>
        DEBUG_LOG("input bad tcl pkt!\n");
        MX_NET_BUFFER_FREE(netbuf);
      }
    }
  }
}
 8006924:	e002      	b.n	800692c <mx_wifi_hci_input+0x68>
        MX_NET_BUFFER_FREE(netbuf);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f00c ff22 	bl	8013770 <free>
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	2000319c 	.word	0x2000319c
 8006938:	08018b8c 	.word	0x08018b8c

0800693c <get_new_req_id>:
static uint16_t mpic_get_api_id(uint8_t *buffer_in);
static uint32_t mipc_event(mx_buf_t *netbuf);

/* unique sequence number */
static uint32_t get_new_req_id(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  static uint32_t id = 1;
  return id++;
 8006940:	4b04      	ldr	r3, [pc, #16]	; (8006954 <get_new_req_id+0x18>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	4903      	ldr	r1, [pc, #12]	; (8006954 <get_new_req_id+0x18>)
 8006948:	600a      	str	r2, [r1, #0]
}
 800694a:	4618      	mov	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	200000e0 	.word	0x200000e0

08006958 <mpic_get_req_id>:

static uint32_t mpic_get_req_id(uint8_t *buffer_in)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  return *((uint32_t *) & (buffer_in[MIPC_PKT_REQ_ID_OFFSET]));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <mpic_get_api_id>:

static uint16_t mpic_get_api_id(uint8_t *buffer_in)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  return *((uint16_t *) & (buffer_in[MIPC_PKT_API_ID_OFFSET]));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	889b      	ldrh	r3, [r3, #4]
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <mipc_event>:

static uint32_t mipc_event(mx_buf_t *netbuf)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t req_id = MIPC_REQ_ID_NONE;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
  uint16_t api_id = MIPC_API_ID_NONE;
 8006994:	2300      	movs	r3, #0
 8006996:	82fb      	strh	r3, [r7, #22]
  uint32_t i;
  event_callback_t callback;

  if (NULL != netbuf)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8089 	beq.w	8006ab2 <mipc_event+0x12a>
  {
    uint8_t *buffer_in = MX_NET_BUFFER_PAYLOAD(netbuf);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	3308      	adds	r3, #8
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4413      	add	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
    uint32_t buffer_size = MX_NET_BUFFER_GET_PAYLOAD_SIZE(netbuf);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]

    if ((NULL != buffer_in) && (buffer_size >= MIPC_PKT_MIN_SIZE))
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d077      	beq.n	8006aa8 <mipc_event+0x120>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d974      	bls.n	8006aa8 <mipc_event+0x120>
    {
      req_id = mpic_get_req_id(buffer_in);
 80069be:	6938      	ldr	r0, [r7, #16]
 80069c0:	f7ff ffca 	bl	8006958 <mpic_get_req_id>
 80069c4:	61f8      	str	r0, [r7, #28]
      api_id = mpic_get_api_id(buffer_in);
 80069c6:	6938      	ldr	r0, [r7, #16]
 80069c8:	f7ff ffd2 	bl	8006970 <mpic_get_api_id>
 80069cc:	4603      	mov	r3, r0
 80069ce:	82fb      	strh	r3, [r7, #22]
      DEBUG_LOG("req_id: 0x%08"PRIx32", api_id: 0x%04x\n", req_id, api_id);
      if ((0 == (api_id & MIPC_API_EVENT_BASE)) && (MIPC_REQ_ID_NONE != req_id))
 80069d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db3e      	blt.n	8006a56 <mipc_event+0xce>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d03b      	beq.n	8006a56 <mipc_event+0xce>
      {
        /* cmd response must match pending req id */
        MX_ASSERT(pending_request.req_id == req_id);
 80069de:	bf00      	nop
 80069e0:	4b36      	ldr	r3, [pc, #216]	; (8006abc <mipc_event+0x134>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d1fa      	bne.n	80069e0 <mipc_event+0x58>
        {
          /* return params */
          if ((pending_request.rbuffer_size != NULL) && (*(pending_request.rbuffer_size) > 0)
 80069ea:	4b34      	ldr	r3, [pc, #208]	; (8006abc <mipc_event+0x134>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01e      	beq.n	8006a30 <mipc_event+0xa8>
 80069f2:	4b32      	ldr	r3, [pc, #200]	; (8006abc <mipc_event+0x134>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d019      	beq.n	8006a30 <mipc_event+0xa8>
              && (NULL != pending_request.rbuffer))
 80069fc:	4b2f      	ldr	r3, [pc, #188]	; (8006abc <mipc_event+0x134>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <mipc_event+0xa8>
          {
            *(pending_request.rbuffer_size) = *(pending_request.rbuffer_size) < (buffer_size - MIPC_PKT_MIN_SIZE) ? \
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3b06      	subs	r3, #6
 8006a08:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <mipc_event+0x134>)
 8006a0a:	6892      	ldr	r2, [r2, #8]
 8006a0c:	8812      	ldrh	r2, [r2, #0]
                                              *(pending_request.rbuffer_size) : (buffer_size - MIPC_PKT_MIN_SIZE);
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	bf28      	it	cs
 8006a12:	461a      	movcs	r2, r3
            *(pending_request.rbuffer_size) = *(pending_request.rbuffer_size) < (buffer_size - MIPC_PKT_MIN_SIZE) ? \
 8006a14:	4b29      	ldr	r3, [pc, #164]	; (8006abc <mipc_event+0x134>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	b292      	uxth	r2, r2
 8006a1a:	801a      	strh	r2, [r3, #0]
            memcpy(pending_request.rbuffer, buffer_in + MIPC_PKT_PARAMS_OFFSET, *(pending_request.rbuffer_size));
 8006a1c:	4b27      	ldr	r3, [pc, #156]	; (8006abc <mipc_event+0x134>)
 8006a1e:	68d8      	ldr	r0, [r3, #12]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1d99      	adds	r1, r3, #6
 8006a24:	4b25      	ldr	r3, [pc, #148]	; (8006abc <mipc_event+0x134>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f00c feb8 	bl	80137a0 <memcpy>
          }
          /* printf("Signal for %d\n",pending_request.req_id); */
          pending_request.req_id = 0xFFFFFFFF;
 8006a30:	4b22      	ldr	r3, [pc, #136]	; (8006abc <mipc_event+0x134>)
 8006a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a36:	601a      	str	r2, [r3, #0]
          if (SEM_OK != SEM_SIGNAL(pending_request.resp_flag))
 8006a38:	4b20      	ldr	r3, [pc, #128]	; (8006abc <mipc_event+0x134>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	491f      	ldr	r1, [pc, #124]	; (8006abc <mipc_event+0x134>)
 8006a40:	604a      	str	r2, [r1, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <mipc_event+0xc6>
          {
            DEBUG_ERROR("Failed to signal command response\n");
 8006a46:	481e      	ldr	r0, [pc, #120]	; (8006ac0 <mipc_event+0x138>)
 8006a48:	f00d fea4 	bl	8014794 <puts>
            while (1);
 8006a4c:	e7fe      	b.n	8006a4c <mipc_event+0xc4>
          }
          MX_STAT(cmd_get_answer);
          mx_wifi_hci_free(netbuf);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff ff2a 	bl	80068a8 <mx_wifi_hci_free>
      if ((0 == (api_id & MIPC_API_EVENT_BASE)) && (MIPC_REQ_ID_NONE != req_id))
 8006a54:	e02c      	b.n	8006ab0 <mipc_event+0x128>
        }
      }
      else /* event callback */
      {
        for (i = 0; i < sizeof(event_table) / sizeof(event_item_t); i++)
 8006a56:	2300      	movs	r3, #0
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	e016      	b.n	8006a8a <mipc_event+0x102>
        {
          if (event_table[i].api_id == api_id)
 8006a5c:	4a19      	ldr	r2, [pc, #100]	; (8006ac4 <mipc_event+0x13c>)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8006a64:	8afa      	ldrh	r2, [r7, #22]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d10c      	bne.n	8006a84 <mipc_event+0xfc>
          {
            callback = event_table[i].callback;
 8006a6a:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <mipc_event+0x13c>)
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	4413      	add	r3, r2
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	60bb      	str	r3, [r7, #8]
            if (NULL != callback)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <mipc_event+0xfc>
            {
              DEBUG_LOG("callback with %p\n", buffer_in);
              callback(netbuf);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
              break;
 8006a82:	e005      	b.n	8006a90 <mipc_event+0x108>
        for (i = 0; i < sizeof(event_table) / sizeof(event_item_t); i++)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d9e5      	bls.n	8006a5c <mipc_event+0xd4>
            }
          }
        }
        if (i == sizeof(event_table) / sizeof(event_item_t))
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d10c      	bne.n	8006ab0 <mipc_event+0x128>
        {
          DEBUG_ERROR("unknown event: 0x%04x !\n", api_id);
 8006a96:	8afb      	ldrh	r3, [r7, #22]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	480b      	ldr	r0, [pc, #44]	; (8006ac8 <mipc_event+0x140>)
 8006a9c:	f00d fdf4 	bl	8014688 <iprintf>
          mx_wifi_hci_free(netbuf);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ff01 	bl	80068a8 <mx_wifi_hci_free>
      if ((0 == (api_id & MIPC_API_EVENT_BASE)) && (MIPC_REQ_ID_NONE != req_id))
 8006aa6:	e003      	b.n	8006ab0 <mipc_event+0x128>
      }
    }
    else
    {
      DEBUG_LOG("unknown buffer content\n");
      mx_wifi_hci_free(netbuf);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fefd 	bl	80068a8 <mx_wifi_hci_free>
 8006aae:	e000      	b.n	8006ab2 <mipc_event+0x12a>
      if ((0 == (api_id & MIPC_API_EVENT_BASE)) && (MIPC_REQ_ID_NONE != req_id))
 8006ab0:	bf00      	nop
    }
  }
  return req_id;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	200031a0 	.word	0x200031a0
 8006ac0:	08018ba8 	.word	0x08018ba8
 8006ac4:	200000c8 	.word	0x200000c8
 8006ac8:	08018bcc 	.word	0x08018bcc

08006acc <mipc_init>:
  * @brief                   mxchip ipc protocol init
  * @param  ipc_send         low level send function
  * @return int32_t          status code
  */
int32_t mipc_init(mipc_send_func_t ipc_send)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  pending_request.req_id = 0xFFFFFFFF;
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <mipc_init+0x28>)
 8006ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ada:	601a      	str	r2, [r3, #0]
  SEM_INIT(pending_request.resp_flag, 1);
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <mipc_init+0x28>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	605a      	str	r2, [r3, #4]

  ret = mx_wifi_hci_init(ipc_send);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fe7a 	bl	80067dc <mx_wifi_hci_init>
 8006ae8:	60f8      	str	r0, [r7, #12]

  return ret;
 8006aea:	68fb      	ldr	r3, [r7, #12]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	200031a0 	.word	0x200031a0

08006af8 <mipc_deinit>:


int32_t mipc_deinit(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
  int32_t ret;
  SEM_DEINIT(pending_request.resp_flag);
  ret = mx_wifi_hci_deinit();
 8006afe:	f7ff fe87 	bl	8006810 <mx_wifi_hci_deinit>
 8006b02:	6078      	str	r0, [r7, #4]

  return ret;
 8006b04:	687b      	ldr	r3, [r7, #4]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <mipc_request>:


int32_t mipc_request(uint16_t api_id, uint8_t *cparams, uint16_t cparams_size,
                     uint8_t *rbuffer, uint16_t *rbuffer_size, uint32_t timeout_ms)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	81fb      	strh	r3, [r7, #14]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	81bb      	strh	r3, [r7, #12]
  int32_t ret = MIPC_CODE_ERROR;
 8006b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t *cbuf;
  uint8_t *pos;
  uint16_t cbuf_size;
  uint32_t req_id;
  bool copy_buffer = true;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	77fb      	strb	r3, [r7, #31]

  LOCK(wifi_obj_get()->lockcmd);
 8006b2c:	bf00      	nop
 8006b2e:	f7fc fe1d 	bl	800376c <wifi_obj_get>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f893 39f4 	ldrb.w	r3, [r3, #2548]	; 0x9f4
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f7      	bne.n	8006b2e <mipc_request+0x1e>
 8006b3e:	f7fc fe15 	bl	800376c <wifi_obj_get>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
  if (cparams_size <= MX_WIFI_IPC_PAYLOAD_SIZE)
 8006b4a:	89bb      	ldrh	r3, [r7, #12]
 8006b4c:	f640 12be 	movw	r2, #2494	; 0x9be
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d86d      	bhi.n	8006c30 <mipc_request+0x120>
  {
    /* create cmd data */
    cbuf_size = sizeof(req_id) + sizeof(api_id) + cparams_size;
 8006b54:	89bb      	ldrh	r3, [r7, #12]
 8006b56:	3306      	adds	r3, #6
 8006b58:	83bb      	strh	r3, [r7, #28]

#if MX_WIFI_TX_BUFFER_NO_COPY
    if (api_id == MIPC_API_WIFI_BYPASS_OUT_CMD)
 8006b5a:	89fb      	ldrh	r3, [r7, #14]
 8006b5c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006b60:	d105      	bne.n	8006b6e <mipc_request+0x5e>
    {
      cbuf = cparams - sizeof(req_id) - sizeof(api_id);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3b06      	subs	r3, #6
 8006b66:	623b      	str	r3, [r7, #32]
      copy_buffer = false;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e005      	b.n	8006b7a <mipc_request+0x6a>
    }
    else
#endif /* MX_WIFI_TX_BUFFER_NO_COPY */
    {
      cbuf = (uint8_t *)MX_WIFI_MALLOC(cbuf_size);
 8006b6e:	8bbb      	ldrh	r3, [r7, #28]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f00c fdf5 	bl	8013760 <malloc>
 8006b76:	4603      	mov	r3, r0
 8006b78:	623b      	str	r3, [r7, #32]
    }

    if (NULL != cbuf)
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d057      	beq.n	8006c30 <mipc_request+0x120>
    {
      /* get an uniq identifier */
      req_id = get_new_req_id();
 8006b80:	f7ff fedc 	bl	800693c <get_new_req_id>
 8006b84:	4603      	mov	r3, r0
 8006b86:	617b      	str	r3, [r7, #20]
      /* copy the protocol parameter to the head part of the buffer */
      pos = cbuf;
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	697a      	ldr	r2, [r7, #20]
      memcpy(pos, &req_id, sizeof(req_id));
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	601a      	str	r2, [r3, #0]
      pos += sizeof(req_id);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	3304      	adds	r3, #4
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	89fa      	ldrh	r2, [r7, #14]
      memcpy(pos, &api_id, sizeof(api_id));
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	801a      	strh	r2, [r3, #0]
      pos += sizeof(api_id);
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	61bb      	str	r3, [r7, #24]

      if ((true == copy_buffer) && (cparams_size > 0))
 8006ba4:	7ffb      	ldrb	r3, [r7, #31]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <mipc_request+0xac>
 8006baa:	89bb      	ldrh	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <mipc_request+0xac>
      {
        memcpy(pos, cparams, cparams_size);
 8006bb0:	89bb      	ldrh	r3, [r7, #12]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	69b8      	ldr	r0, [r7, #24]
 8006bb8:	f00c fdf2 	bl	80137a0 <memcpy>
      }

      /* a single pending request due to LOCK usage on command */
      if (pending_request.req_id != 0xFFFFFFFF)
 8006bbc:	4b22      	ldr	r3, [pc, #136]	; (8006c48 <mipc_request+0x138>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc4:	d000      	beq.n	8006bc8 <mipc_request+0xb8>
      {
        DEBUG_LOG("Error req_id must be 0xffffffff here %"PRIu32"\n", pending_request.req_id);
        while (1);
 8006bc6:	e7fe      	b.n	8006bc6 <mipc_request+0xb6>
      }
      pending_request.req_id = req_id;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <mipc_request+0x138>)
 8006bcc:	6013      	str	r3, [r2, #0]
      pending_request.rbuffer = rbuffer;
 8006bce:	4a1e      	ldr	r2, [pc, #120]	; (8006c48 <mipc_request+0x138>)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60d3      	str	r3, [r2, #12]
      pending_request.rbuffer_size = rbuffer_size;
 8006bd4:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <mipc_request+0x138>)
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	6093      	str	r3, [r2, #8]
      /* static int iter=0;                       */
      /* printf("%d push %d\n",iter++,cbuf_size); */

      /* send the command */
      DEBUG_LOG("cmd %"PRIu32"\n", req_id);
      ret = mx_wifi_hci_send(cbuf, cbuf_size);
 8006bda:	8bbb      	ldrh	r3, [r7, #28]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6a38      	ldr	r0, [r7, #32]
 8006be0:	f7ff fe22 	bl	8006828 <mx_wifi_hci_send>
 8006be4:	6278      	str	r0, [r7, #36]	; 0x24
      if (ret == 0)
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d117      	bne.n	8006c1c <mipc_request+0x10c>
      {
        /* wait for command answer */
        if (SEM_WAIT(pending_request.resp_flag, timeout_ms, mipc_poll) != SEM_OK)
 8006bec:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <mipc_request+0x13c>)
 8006bee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bf0:	4817      	ldr	r0, [pc, #92]	; (8006c50 <mipc_request+0x140>)
 8006bf2:	f7ff fcbf 	bl	8006574 <noos_sem_wait>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d013      	beq.n	8006c24 <mipc_request+0x114>
        {
          DEBUG_ERROR("Error: command 0x%04x timeout(%" PRIu32 " ms) waiting answer %" PRIu32 "\n",
 8006bfc:	89fb      	ldrh	r3, [r7, #14]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <mipc_request+0x138>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c06:	4813      	ldr	r0, [pc, #76]	; (8006c54 <mipc_request+0x144>)
 8006c08:	f00d fd3e 	bl	8014688 <iprintf>
                      api_id, timeout_ms, pending_request.req_id);
          pending_request.req_id = 0xFFFFFFFF;
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <mipc_request+0x138>)
 8006c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c12:	601a      	str	r2, [r3, #0]
          ret = MIPC_CODE_ERROR;
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1a:	e003      	b.n	8006c24 <mipc_request+0x114>
        }
      }
      else
      {
        DEBUG_ERROR("Failed to send command to Hci\n");
 8006c1c:	480e      	ldr	r0, [pc, #56]	; (8006c58 <mipc_request+0x148>)
 8006c1e:	f00d fdb9 	bl	8014794 <puts>
        while (1);
 8006c22:	e7fe      	b.n	8006c22 <mipc_request+0x112>
      }
      DEBUG_LOG("done %"PRIu32"\n", req_id);
      if (true == copy_buffer)
 8006c24:	7ffb      	ldrb	r3, [r7, #31]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <mipc_request+0x120>
      {
        MX_WIFI_FREE(cbuf);
 8006c2a:	6a38      	ldr	r0, [r7, #32]
 8006c2c:	f00c fda0 	bl	8013770 <free>
      }
    }
  }
  UNLOCK(wifi_obj_get()->lockcmd);
 8006c30:	f7fc fd9c 	bl	800376c <wifi_obj_get>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4

  return ret;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3728      	adds	r7, #40	; 0x28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	200031a0 	.word	0x200031a0
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	200031a4 	.word	0x200031a4
 8006c54:	08018be8 	.word	0x08018be8
 8006c58:	08018c24 	.word	0x08018c24

08006c5c <mipc_poll>:
  * @brief                   mipc poll
  * @param  timeout_ms       timeout in ms
  * @return int32_t          0 if success, otherwise failed
  */
void mipc_poll(uint32_t timeout)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  mx_buf_t *nbuf;

  /* process the received data inside RX buffer */
  nbuf = mx_wifi_hci_recv(timeout);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff fe09 	bl	800687c <mx_wifi_hci_recv>
 8006c6a:	60f8      	str	r0, [r7, #12]

  if (NULL != nbuf)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00c      	beq.n	8006c8c <mipc_poll+0x30>
  {
    uint32_t len = MX_NET_BUFFER_GET_PAYLOAD_SIZE(nbuf);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60bb      	str	r3, [r7, #8]
    DEBUG_LOG("\nhci recv len %"PRIu32"\n", len);
    if (len > 0)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <mipc_poll+0x2a>
    {
      mipc_event(nbuf);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff fe82 	bl	8006988 <mipc_event>
    else
    {
      MX_NET_BUFFER_FREE(nbuf);
    }
  }
}
 8006c84:	e002      	b.n	8006c8c <mipc_poll+0x30>
      MX_NET_BUFFER_FREE(nbuf);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f00c fd72 	bl	8013770 <free>
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <mapi_reboot_event_callback>:
  ******************************************************************************/

/* system */

void mapi_reboot_event_callback(mx_buf_t *buff)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  if (buff != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <mapi_reboot_event_callback+0x14>
  {
    mx_wifi_hci_free(buff);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fe00 	bl	80068a8 <mx_wifi_hci_free>
  }
  DEBUG_LOG("\nEVENT: reboot done.\n");
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <mapi_wifi_status_event_callback>:

/* wifi */

void mapi_wifi_status_event_callback(mx_buf_t *nbuf)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint8_t cate;
  mwifi_status_t status;
  mx_wifi_status_callback_t status_cb = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
  void *cb_args = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	617b      	str	r3, [r7, #20]

  if (NULL != nbuf)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d03e      	beq.n	8006d44 <mapi_wifi_status_event_callback+0x94>
  {
    uint8_t *payload = MX_NET_BUFFER_PAYLOAD(nbuf);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4413      	add	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
    status = *((mwifi_status_t *)(payload + MIPC_PKT_PARAMS_OFFSET));
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	799b      	ldrb	r3, [r3, #6]
 8006cd6:	73fb      	strb	r3, [r7, #15]
    DEBUG_LOG("\nEVENT: wifi status: %02x\r\n", status);
    mx_wifi_hci_free(nbuf);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fde5 	bl	80068a8 <mx_wifi_hci_free>

    switch (status)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	dc02      	bgt.n	8006cea <mapi_wifi_status_event_callback+0x3a>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dc04      	bgt.n	8006cf2 <mapi_wifi_status_event_callback+0x42>
 8006ce8:	e021      	b.n	8006d2e <mapi_wifi_status_event_callback+0x7e>
 8006cea:	3b04      	subs	r3, #4
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d81e      	bhi.n	8006d2e <mapi_wifi_status_event_callback+0x7e>
 8006cf0:	e00e      	b.n	8006d10 <mapi_wifi_status_event_callback+0x60>
    {
      case MWIFI_EVENT_STA_UP:
      case MWIFI_EVENT_STA_DOWN:
      case MWIFI_EVENT_STA_GOT_IP:
        cate = MC_STATION;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[0];
 8006cf6:	f7fc fd39 	bl	800376c <wifi_obj_get>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d00:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[0];
 8006d02:	f7fc fd33 	bl	800376c <wifi_obj_get>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006d0c:	617b      	str	r3, [r7, #20]
        break;
 8006d0e:	e011      	b.n	8006d34 <mapi_wifi_status_event_callback+0x84>

      case MWIFI_EVENT_AP_UP:
      case MWIFI_EVENT_AP_DOWN:
        cate = MC_SOFTAP;
 8006d10:	2300      	movs	r3, #0
 8006d12:	77fb      	strb	r3, [r7, #31]
        status_cb = wifi_obj_get()->Runtime.status_cb[0];
 8006d14:	f7fc fd2a 	bl	800376c <wifi_obj_get>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d1e:	61bb      	str	r3, [r7, #24]
        cb_args = wifi_obj_get()->Runtime.callback_arg[0];
 8006d20:	f7fc fd24 	bl	800376c <wifi_obj_get>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006d2a:	617b      	str	r3, [r7, #20]
        break;
 8006d2c:	e002      	b.n	8006d34 <mapi_wifi_status_event_callback+0x84>

      default:
        cate = MC_SOFTAP;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	77fb      	strb	r3, [r7, #31]
        MX_ASSERT(false);
 8006d32:	e7fe      	b.n	8006d32 <mapi_wifi_status_event_callback+0x82>
        break;
    }

    if (NULL != status_cb)
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <mapi_wifi_status_event_callback+0x94>
    {
      status_cb(cate, status, cb_args);
 8006d3a:	7bf9      	ldrb	r1, [r7, #15]
 8006d3c:	7ff8      	ldrb	r0, [r7, #31]
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4798      	blx	r3
    }
  }
}
 8006d44:	bf00      	nop
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <mapi_wifi_netlink_input_callback>:

void mapi_wifi_netlink_input_callback(mx_buf_t *nbuf)
{
 8006d4c:	b590      	push	{r4, r7, lr}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  wifi_bypass_in_rparams_t *in_rprarams;
  /* DEBUG_LOG("IP stack in %d\n",len); */
  if (NULL != nbuf)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02b      	beq.n	8006db2 <mapi_wifi_netlink_input_callback+0x66>
  {
    uint8_t     *buffer_in = MX_NET_BUFFER_PAYLOAD(nbuf);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4413      	add	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
    MX_STAT(callback);

    in_rprarams = (wifi_bypass_in_rparams_t *)(buffer_in + MIPC_PKT_PARAMS_OFFSET);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3306      	adds	r3, #6
 8006d6a:	60bb      	str	r3, [r7, #8]
    MX_NET_BUFFER_HIDE_HEADER(nbuf, MIPC_PKT_PARAMS_OFFSET + sizeof(wifi_bypass_in_rparams_t));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f103 021c 	add.w	r2, r3, #28
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	605a      	str	r2, [r3, #4]
    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 8006d78:	f7fc fcf8 	bl	800376c <wifi_obj_get>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d012      	beq.n	8006dac <mapi_wifi_netlink_input_callback+0x60>
        (in_rprarams->tot_len > 0))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	8a9b      	ldrh	r3, [r3, #20]
 8006d8a:	b29b      	uxth	r3, r3
    if ((NULL != wifi_obj_get()->Runtime.netlink_input_cb) && \
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <mapi_wifi_netlink_input_callback+0x60>
    {
      wifi_obj_get()->Runtime.netlink_input_cb(nbuf,
 8006d90:	f7fc fcec 	bl	800376c <wifi_obj_get>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
                                               wifi_obj_get()->Runtime.netlink_user_args);
 8006d9a:	f7fc fce7 	bl	800376c <wifi_obj_get>
 8006d9e:	4603      	mov	r3, r0
      wifi_obj_get()->Runtime.netlink_input_cb(nbuf,
 8006da0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	47a0      	blx	r4
    else
    {
      MX_NET_BUFFER_FREE(nbuf);
    }
  }
}
 8006daa:	e002      	b.n	8006db2 <mapi_wifi_netlink_input_callback+0x66>
      MX_NET_BUFFER_FREE(nbuf);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f00c fcdf 	bl	8013770 <free>
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd90      	pop	{r4, r7, pc}
	...

08006dbc <mx_aton>:
  * @param  Params
  * @retval socket status
  */

static int32_t mx_aton(const int8_t *ptr, mx_ip_addr_t *addr)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b08f      	sub	sp, #60	; 0x3c
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t val = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t base;
  int8_t c0;
  const int8_t *cp = ptr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t parts[4];
  uint32_t *pp = parts;
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t ret = 1;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	623b      	str	r3, [r7, #32]
  int32_t done;

  c0 = *cp;
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  done = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61fb      	str	r3, [r7, #28]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (done == 1)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	f000 809f 	beq.w	8006f2a <mx_aton+0x16e>
    {
      break;
    }

    if (!MX_ISDIGIT(c0))
 8006dec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006df0:	2b2f      	cmp	r3, #47	; 0x2f
 8006df2:	dd03      	ble.n	8006dfc <mx_aton+0x40>
 8006df4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006df8:	2b39      	cmp	r3, #57	; 0x39
 8006dfa:	dd04      	ble.n	8006e06 <mx_aton+0x4a>
    {
      ret = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	623b      	str	r3, [r7, #32]
      done = 1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	e090      	b.n	8006f28 <mx_aton+0x16c>
    }
    else
    {
      val = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
      base = 10;
 8006e0a:	230a      	movs	r3, #10
 8006e0c:	633b      	str	r3, [r7, #48]	; 0x30
      if (c0 == '0')
 8006e0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e12:	2b30      	cmp	r3, #48	; 0x30
 8006e14:	d11a      	bne.n	8006e4c <mx_aton+0x90>
      {
        ++cp;
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	3301      	adds	r3, #1
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
        c0 = (int8_t) * cp;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if ((c0 == (int8_t) 'x') || (c0 == (int8_t) 'X'))
 8006e24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e28:	2b78      	cmp	r3, #120	; 0x78
 8006e2a:	d003      	beq.n	8006e34 <mx_aton+0x78>
 8006e2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e30:	2b58      	cmp	r3, #88	; 0x58
 8006e32:	d109      	bne.n	8006e48 <mx_aton+0x8c>
        {
          base = 16;
 8006e34:	2310      	movs	r3, #16
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
          ++cp;
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (int8_t) * cp;
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006e46:	e001      	b.n	8006e4c <mx_aton+0x90>
        }
        else
        {
          base = 8;
 8006e48:	2308      	movs	r3, #8
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
        }
      }

      for (;;)
      {
        if (MX_ISDIGIT(c0))
 8006e4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e50:	2b2f      	cmp	r3, #47	; 0x2f
 8006e52:	dd14      	ble.n	8006e7e <mx_aton+0xc2>
 8006e54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e58:	2b39      	cmp	r3, #57	; 0x39
 8006e5a:	dc10      	bgt.n	8006e7e <mx_aton+0xc2>
        {
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e60:	fb03 f202 	mul.w	r2, r3, r2
 8006e64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e68:	4413      	add	r3, r2
 8006e6a:	3b30      	subs	r3, #48	; 0x30
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
          ++cp;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	3301      	adds	r3, #1
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (int8_t) * cp;
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006e7c:	e034      	b.n	8006ee8 <mx_aton+0x12c>
        }
        else if ((base == 16U) && MX_ISXDIGIT(c0))
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d132      	bne.n	8006eea <mx_aton+0x12e>
 8006e84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e88:	2b2f      	cmp	r3, #47	; 0x2f
 8006e8a:	dd03      	ble.n	8006e94 <mx_aton+0xd8>
 8006e8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e90:	2b39      	cmp	r3, #57	; 0x39
 8006e92:	dd0f      	ble.n	8006eb4 <mx_aton+0xf8>
 8006e94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e98:	2b60      	cmp	r3, #96	; 0x60
 8006e9a:	dd03      	ble.n	8006ea4 <mx_aton+0xe8>
 8006e9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ea0:	2b66      	cmp	r3, #102	; 0x66
 8006ea2:	dd07      	ble.n	8006eb4 <mx_aton+0xf8>
 8006ea4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	dd1e      	ble.n	8006eea <mx_aton+0x12e>
 8006eac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006eb0:	2b46      	cmp	r3, #70	; 0x46
 8006eb2:	dc1a      	bgt.n	8006eea <mx_aton+0x12e>
        {
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(MX_ISLOWER(c0) ? 'a' : 'A'));
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb6:	011a      	lsls	r2, r3, #4
 8006eb8:	f997 102f 	ldrsb.w	r1, [r7, #47]	; 0x2f
 8006ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ec0:	2b60      	cmp	r3, #96	; 0x60
 8006ec2:	dd05      	ble.n	8006ed0 <mx_aton+0x114>
 8006ec4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ec8:	2b7a      	cmp	r3, #122	; 0x7a
 8006eca:	dc01      	bgt.n	8006ed0 <mx_aton+0x114>
 8006ecc:	2361      	movs	r3, #97	; 0x61
 8006ece:	e000      	b.n	8006ed2 <mx_aton+0x116>
 8006ed0:	2341      	movs	r3, #65	; 0x41
 8006ed2:	1acb      	subs	r3, r1, r3
 8006ed4:	330a      	adds	r3, #10
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34
          ++cp;
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	3301      	adds	r3, #1
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (int8_t) * cp;
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (MX_ISDIGIT(c0))
 8006ee8:	e7b0      	b.n	8006e4c <mx_aton+0x90>
        {
          break;
        }
      }

      if (c0 == '.')
 8006eea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006eee:	2b2e      	cmp	r3, #46	; 0x2e
 8006ef0:	d118      	bne.n	8006f24 <mx_aton+0x168>
         * Internet format:
         *  a.b.c.d
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
 8006ef2:	f107 030c 	add.w	r3, r7, #12
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d304      	bcc.n	8006f08 <mx_aton+0x14c>
        {
          ret = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	623b      	str	r3, [r7, #32]
          done = 1;
 8006f02:	2301      	movs	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	e76d      	b.n	8006de4 <mx_aton+0x28>
        }
        else
        {
          *pp = val;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f0c:	601a      	str	r2, [r3, #0]
          pp++;
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	3304      	adds	r3, #4
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
          ++cp;
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	3301      	adds	r3, #1
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
          c0 = (int8_t) * cp;
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f22:	e75f      	b.n	8006de4 <mx_aton+0x28>
        }
      }
      else
      {
        done = 1;
 8006f24:	2301      	movs	r3, #1
 8006f26:	61fb      	str	r3, [r7, #28]
    if (done == 1)
 8006f28:	e75c      	b.n	8006de4 <mx_aton+0x28>
      break;
 8006f2a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (int8_t)'\0') && (MX_ISSPACE((c0)) == false))
 8006f2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01f      	beq.n	8006f74 <mx_aton+0x1b8>
 8006f34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d013      	beq.n	8006f64 <mx_aton+0x1a8>
 8006f3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f40:	2b0c      	cmp	r3, #12
 8006f42:	d00f      	beq.n	8006f64 <mx_aton+0x1a8>
 8006f44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f48:	2b0a      	cmp	r3, #10
 8006f4a:	d00b      	beq.n	8006f64 <mx_aton+0x1a8>
 8006f4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f50:	2b0d      	cmp	r3, #13
 8006f52:	d007      	beq.n	8006f64 <mx_aton+0x1a8>
 8006f54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	d003      	beq.n	8006f64 <mx_aton+0x1a8>
 8006f5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f60:	2b0b      	cmp	r3, #11
 8006f62:	d101      	bne.n	8006f68 <mx_aton+0x1ac>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <mx_aton+0x1ae>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <mx_aton+0x1b8>
  {
    ret = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	623b      	str	r3, [r7, #32]
 8006f72:	e04a      	b.n	800700a <mx_aton+0x24e>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	109b      	asrs	r3, r3, #2
 8006f7e:	3301      	adds	r3, #1
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d83e      	bhi.n	8007002 <mx_aton+0x246>
 8006f84:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <mx_aton+0x1d0>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08006fa1 	.word	0x08006fa1
 8006f90:	08007009 	.word	0x08007009
 8006f94:	08006fa7 	.word	0x08006fa7
 8006f98:	08006fbf 	.word	0x08006fbf
 8006f9c:	08006fdf 	.word	0x08006fdf
    {
      case 0:
        ret = 0;          /* initial nondigit */
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	623b      	str	r3, [r7, #32]
        break;
 8006fa4:	e031      	b.n	800700a <mx_aton+0x24e>

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fac:	d301      	bcc.n	8006fb2 <mx_aton+0x1f6>
        {
          ret = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	623b      	str	r3, [r7, #32]
        }
        val |= parts[0] << 24;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	061b      	lsls	r3, r3, #24
 8006fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fbc:	e025      	b.n	800700a <mx_aton+0x24e>

      case 3:             /* a.b.c -- 8.8.16 bits */
        if (val > 0xffffU)
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc4:	d302      	bcc.n	8006fcc <mx_aton+0x210>
        {
          ret = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	623b      	str	r3, [r7, #32]
          break;
 8006fca:	e01e      	b.n	800700a <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	061a      	lsls	r2, r3, #24
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	041b      	lsls	r3, r3, #16
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fdc:	e015      	b.n	800700a <mx_aton+0x24e>

      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xffU)
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe0:	2bff      	cmp	r3, #255	; 0xff
 8006fe2:	d902      	bls.n	8006fea <mx_aton+0x22e>
        {
          ret = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	623b      	str	r3, [r7, #32]
          break;
 8006fe8:	e00f      	b.n	800700a <mx_aton+0x24e>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	061a      	lsls	r2, r3, #24
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	041b      	lsls	r3, r3, #16
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007000:	e003      	b.n	800700a <mx_aton+0x24e>

      default:
        ret = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	623b      	str	r3, [r7, #32]
        break;
 8007006:	e000      	b.n	800700a <mx_aton+0x24e>
        break;
 8007008:	bf00      	nop
    }
  }

  if (ret == 1)
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d113      	bne.n	8007038 <mx_aton+0x27c>
  {
    if (addr != NULL)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d010      	beq.n	8007038 <mx_aton+0x27c>
    {
      addr->addr = MX_HTONL(val);
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	0e1a      	lsrs	r2, r3, #24
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007022:	431a      	orrs	r2, r3
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800702c:	431a      	orrs	r2, r3
 800702e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	431a      	orrs	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 8007038:	6a3b      	ldr	r3, [r7, #32]
}
 800703a:	4618      	mov	r0, r3
 800703c:	373c      	adds	r7, #60	; 0x3c
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop

08007048 <mx_aton_r>:




static int32_t mx_aton_r(const int8_t *cp)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  mx_ip_addr_t val;
  int32_t       ret;
  val.addr = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	60bb      	str	r3, [r7, #8]
  if (mx_aton(cp, &val) != 0)
 8007054:	f107 0308 	add.w	r3, r7, #8
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff feae 	bl	8006dbc <mx_aton>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <mx_aton_r+0x24>
  {
    ret = (int32_t) val.addr;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e001      	b.n	8007070 <mx_aton_r+0x28>
  }
  else
  {
    ret = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
  }
  return (ret);
 8007070:	68fb      	ldr	r3, [r7, #12]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <MX_WIFI_RegisterBusIO>:
                                       IO_Init_Func IO_Init,
                                       IO_DeInit_Func IO_DeInit,
                                       IO_Delay_Func IO_Delay,
                                       IO_Send_Func IO_Send,
                                       IO_Receive_Func IO_Receive)
{
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
  MX_WIFI_STATUS_T rc;

  if ((NULL == Obj) || (NULL == IO_Init) || (NULL == IO_DeInit) || (NULL == IO_Send) || \
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00e      	beq.n	80070ac <MX_WIFI_RegisterBusIO+0x32>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <MX_WIFI_RegisterBusIO+0x32>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <MX_WIFI_RegisterBusIO+0x32>
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <MX_WIFI_RegisterBusIO+0x32>
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <MX_WIFI_RegisterBusIO+0x32>
      (NULL == IO_Receive) || (NULL == IO_Delay))
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d103      	bne.n	80070b4 <MX_WIFI_RegisterBusIO+0x3a>
  {
    rc = MX_WIFI_STATUS_ERROR;
 80070ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e010      	b.n	80070d6 <MX_WIFI_RegisterBusIO+0x5c>
  }
  else
  {
    Obj->fops.IO_Init = IO_Init;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	601a      	str	r2, [r3, #0]
    Obj->fops.IO_DeInit = IO_DeInit;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
    Obj->fops.IO_Send = IO_Send;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a3a      	ldr	r2, [r7, #32]
 80070c4:	60da      	str	r2, [r3, #12]
    Obj->fops.IO_Receive = IO_Receive;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ca:	611a      	str	r2, [r3, #16]
    Obj->fops.IO_Delay = IO_Delay;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	609a      	str	r2, [r3, #8]
    rc = MX_WIFI_STATUS_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
  }
  return rc;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <MX_WIFI_HardResetModule>:
  * @brief                   reset wifi module by hardware
  * @param  Obj              wifi object
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_HardResetModule(MX_WIFIObject_t *Obj)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  int32_t ret;


  MX_STAT_INIT();

  if (NULL == Obj)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <MX_WIFI_HardResetModule+0x16>
  {
    rc = MX_WIFI_STATUS_ERROR;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e00e      	b.n	8007118 <MX_WIFI_HardResetModule+0x34>
  }
  else
  {
    /* reset Wi-Fi by reset pin */
    ret = Obj->fops.IO_Init(MX_WIFI_RESET);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2001      	movs	r0, #1
 8007100:	4798      	blx	r3
 8007102:	4603      	mov	r3, r0
 8007104:	60bb      	str	r3, [r7, #8]
    if ((int32_t)0 == ret)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <MX_WIFI_HardResetModule+0x2e>
    {
      rc = MX_WIFI_STATUS_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e002      	b.n	8007118 <MX_WIFI_HardResetModule+0x34>
    }
    else
    {
      rc = MX_WIFI_STATUS_ERROR;
 8007112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007116:	60fb      	str	r3, [r7, #12]
    }
  }

  return rc;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <MX_WIFI_Init>:
  * @brief                   wifi init
  * @param  Obj              wifi object
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_Init(MX_WIFIObject_t *Obj)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800712c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007130:	60fb      	str	r3, [r7, #12]
  uint16_t rparams_size;

  if (NULL == Obj)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <MX_WIFI_Init+0x1c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007138:	f06f 0303 	mvn.w	r3, #3
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e073      	b.n	8007228 <MX_WIFI_Init+0x104>
  }
  else
  {
    if (Obj->Runtime.interfaces == 0u)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d164      	bne.n	8007214 <MX_WIFI_Init+0xf0>
    {
      LOCK_INIT(Obj->lockcmd);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4

      /* 0. set cmd timeout */
      Obj->Runtime.Timeout = MX_WIFI_CMD_TIMEOUT;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007158:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

      /* 1. init wifi low level IO(UART/SPI) */
      (void)(Obj->fops.IO_Init(MX_WIFI_INIT));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2000      	movs	r0, #0
 8007162:	4798      	blx	r3
      {
        /* 2. init wifi ipc */
        if (MIPC_CODE_SUCCESS == mipc_init(Obj->fops.IO_Send))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fcaf 	bl	8006acc <mipc_init>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d159      	bne.n	8007228 <MX_WIFI_Init+0x104>
            ret = MX_WIFI_STATUS_ERROR;
          }
          else
          {
            /* 3. get version */
            (void)memset(&(Obj->SysInfo.FW_Rev[0]), 0, MX_WIFI_FW_REV_SIZE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3354      	adds	r3, #84	; 0x54
 8007178:	2218      	movs	r2, #24
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f00c fb1c 	bl	80137ba <memset>
            rparams_size = MX_WIFI_FW_REV_SIZE;
 8007182:	2318      	movs	r3, #24
 8007184:	817b      	strh	r3, [r7, #10]
            if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SYS_VERSION_CMD,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800718c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	f107 030a 	add.w	r3, r7, #10
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	2003      	movs	r0, #3
 80071a0:	f7ff fcb6 	bl	8006b10 <mipc_request>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d13e      	bne.n	8007228 <MX_WIFI_Init+0x104>
                                                  NULL, 0,
                                                  &(Obj->SysInfo.FW_Rev[0]),
                                                  &rparams_size,
                                                  MX_WIFI_CMD_TIMEOUT))
            {
              (void)strncpy((char *)(Obj->SysInfo.Product_Name),
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3314      	adds	r3, #20
 80071ae:	2220      	movs	r2, #32
 80071b0:	4920      	ldr	r1, [pc, #128]	; (8007234 <MX_WIFI_Init+0x110>)
 80071b2:	4618      	mov	r0, r3
 80071b4:	f00d fb57 	bl	8014866 <strncpy>
                            MX_WIFI_PRODUCT_NAME, MX_WIFI_PRODUCT_NAME_SIZE);
              (void)strncpy((char *)(Obj->SysInfo.Product_ID),
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3334      	adds	r3, #52	; 0x34
 80071bc:	2220      	movs	r2, #32
 80071be:	491e      	ldr	r1, [pc, #120]	; (8007238 <MX_WIFI_Init+0x114>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	f00d fb50 	bl	8014866 <strncpy>
                            MX_WIFI_PRODUCT_ID, MX_WIFI_PRODUCT_ID_SIZE);

              /* 4. get MAC */
              (void)memset(&(Obj->SysInfo.MAC[0]), 0, MX_WIFI_MAC_SIZE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	336c      	adds	r3, #108	; 0x6c
 80071ca:	2206      	movs	r2, #6
 80071cc:	2100      	movs	r1, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f00c faf3 	bl	80137ba <memset>
              rparams_size = MX_WIFI_MAC_SIZE;
 80071d4:	2306      	movs	r3, #6
 80071d6:	817b      	strh	r3, [r7, #10]
              if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_MAC_CMD,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80071de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	f107 030a 	add.w	r3, r7, #10
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	f240 1001 	movw	r0, #257	; 0x101
 80071f4:	f7ff fc8c 	bl	8006b10 <mipc_request>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d114      	bne.n	8007228 <MX_WIFI_Init+0x104>
                                                    NULL, 0,
                                                    &(Obj->SysInfo.MAC[0]),
                                                    &rparams_size,
                                                    MX_WIFI_CMD_TIMEOUT))
              {
                ret = MX_WIFI_STATUS_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
                Obj->Runtime.interfaces++;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 8007208:	3301      	adds	r3, #1
 800720a:	b2da      	uxtb	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f883 29f1 	strb.w	r2, [r3, #2545]	; 0x9f1
 8007212:	e009      	b.n	8007228 <MX_WIFI_Init+0x104>
        }
      }
    }
    else
    {
      Obj->Runtime.interfaces++;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 800721a:	3301      	adds	r3, #1
 800721c:	b2da      	uxtb	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f883 29f1 	strb.w	r2, [r3, #2545]	; 0x9f1
      ret = MX_WIFI_STATUS_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007228:	68fb      	ldr	r3, [r7, #12]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	08018c44 	.word	0x08018c44
 8007238:	08018c50 	.word	0x08018c50

0800723c <MX_WIFI_DeInit>:
  * @brief                   wifi deinit
  * @param  Obj              wifi object
  * @return MX_WIFI_STATUS_T
  */
MX_WIFI_STATUS_T MX_WIFI_DeInit(MX_WIFIObject_t *Obj)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret;

  if (NULL == Obj)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <MX_WIFI_DeInit+0x16>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 800724a:	f06f 0303 	mvn.w	r3, #3
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e023      	b.n	800729a <MX_WIFI_DeInit+0x5e>
  }
  else
  {
    if (Obj->Runtime.interfaces == 1u)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10f      	bne.n	800727c <MX_WIFI_DeInit+0x40>
    {
      (void) THREAD_DEINIT(MX_WIFI_RecvThreadId);
      (void)mipc_deinit();
 800725c:	f7ff fc4c 	bl	8006af8 <mipc_deinit>
      Obj->fops.IO_DeInit();
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4798      	blx	r3
      ret = MX_WIFI_STATUS_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
      Obj->Runtime.interfaces--;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 8007270:	3b01      	subs	r3, #1
 8007272:	b2da      	uxtb	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f883 29f1 	strb.w	r2, [r3, #2545]	; 0x9f1
 800727a:	e00e      	b.n	800729a <MX_WIFI_DeInit+0x5e>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
      if (Obj->Runtime.interfaces > 0u)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <MX_WIFI_DeInit+0x5e>
      {
        Obj->Runtime.interfaces--;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 8007290:	3b01      	subs	r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f883 29f1 	strb.w	r2, [r3, #2545]	; 0x9f1
      }
    }
  }

  return ret;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <MX_WIFI_IO_YIELD>:
  * @param  Obj              wifi object
  * @param  timeout          timetou in ms
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_IO_YIELD(MX_WIFIObject_t *Obj, uint32_t timeout)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
  if (NULL != Obj)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <MX_WIFI_IO_YIELD+0x1a>
  {
    mipc_poll(timeout);
 80072b8:	6838      	ldr	r0, [r7, #0]
 80072ba:	f7ff fccf 	bl	8006c5c <mipc_poll>
  }
  return ret;
 80072be:	68fb      	ldr	r3, [r7, #12]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <MX_WIFI_GetMACAddress>:
  * @param  Obj              wifi object
  * @param  mac              buffer to get MAC address (6 bytes)
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_GetMACAddress(MX_WIFIObject_t *Obj, uint8_t *mac)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret;

  if ((NULL == Obj) || (NULL == mac))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <MX_WIFI_GetMACAddress+0x16>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <MX_WIFI_GetMACAddress+0x1e>
  {
    ret = MX_WIFI_STATUS_ERROR;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e008      	b.n	80072f8 <MX_WIFI_GetMACAddress+0x30>
  }
  else
  {
    (void)memcpy(mac, Obj->SysInfo.MAC, MX_WIFI_MAC_SIZE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	336c      	adds	r3, #108	; 0x6c
 80072ea:	2206      	movs	r2, #6
 80072ec:	4619      	mov	r1, r3
 80072ee:	6838      	ldr	r0, [r7, #0]
 80072f0:	f00c fa56 	bl	80137a0 <memcpy>
    ret = MX_WIFI_STATUS_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <MX_WIFI_Scan>:
  * @param  len              max number to scan
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_Scan(MX_WIFIObject_t *Obj, mc_wifi_scan_mode_t scan_mode,
                              char *ssid, int32_t len)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b092      	sub	sp, #72	; 0x48
 8007306:	af02      	add	r7, sp, #8
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	460b      	mov	r3, r1
 8007310:	72fb      	strb	r3, [r7, #11]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
  wifi_scan_cparams_t cparams;
  wifi_scan_rparams_t *rparams_p = (wifi_scan_rparams_t *)(&(Obj->Runtime.scan_result[0]));
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800731e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint16_t rparams_size;

  if ((NULL == Obj) || (((mc_wifi_scan_mode_t)MC_SCAN_ACTIVE == scan_mode) &&
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00b      	beq.n	800733e <MX_WIFI_Scan+0x3c>
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d10c      	bne.n	8007346 <MX_WIFI_Scan+0x44>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <MX_WIFI_Scan+0x3c>
                        ((NULL == ssid) || (len <= 0) || (len > 32))))
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	dd02      	ble.n	800733e <MX_WIFI_Scan+0x3c>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b20      	cmp	r3, #32
 800733c:	dd03      	ble.n	8007346 <MX_WIFI_Scan+0x44>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 800733e:	f06f 0303 	mvn.w	r3, #3
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007344:	e038      	b.n	80073b8 <MX_WIFI_Scan+0xb6>
  }
  else
  {
    memset(&cparams, 0, sizeof(cparams));
 8007346:	f107 0314 	add.w	r3, r7, #20
 800734a:	2221      	movs	r2, #33	; 0x21
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f00c fa33 	bl	80137ba <memset>
    memcpy(&(cparams.ssid[0]), ssid, len);
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	f107 0314 	add.w	r3, r7, #20
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4618      	mov	r0, r3
 800735e:	f00c fa1f 	bl	80137a0 <memcpy>
    rparams_size = MX_WIFI_SCAN_BUF_SIZE;
 8007362:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007366:	827b      	strh	r3, [r7, #18]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SCAN_CMD,
 8007368:	f107 0114 	add.w	r1, r7, #20
 800736c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	f107 0312 	add.w	r3, r7, #18
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	2221      	movs	r2, #33	; 0x21
 800737c:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007380:	f7ff fbc6 	bl	8006b10 <mipc_request>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d116      	bne.n	80073b8 <MX_WIFI_Scan+0xb6>
                                          (uint8_t *)&cparams, sizeof(cparams),
                                          (uint8_t *)rparams_p, &rparams_size,
                                          MX_WIFI_SCAN_TIMEOUT))
    {
      Obj->Runtime.scan_number = rparams_p->num;
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	781a      	ldrb	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
      memcpy(&(Obj->Runtime.scan_result[0]), &(rparams_p->ap[0]),
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	1c59      	adds	r1, r3, #1
             Obj->Runtime.scan_number * sizeof(mwifi_ap_info_t));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 39f0 	ldrb.w	r3, [r3, #2544]	; 0x9f0
 80073a4:	461a      	mov	r2, r3
      memcpy(&(Obj->Runtime.scan_result[0]), &(rparams_p->ap[0]),
 80073a6:	4613      	mov	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	461a      	mov	r2, r3
 80073b0:	f00c f9f6 	bl	80137a0 <memcpy>
      ret = MX_WIFI_STATUS_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3740      	adds	r7, #64	; 0x40
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <MX_WIFI_Get_scan_result>:
  * @param  results          buffer to get scan result
  * @param  number           max ap number to get
  * @return int8_t           ap number got
  */
int8_t MX_WIFI_Get_scan_result(MX_WIFIObject_t *Obj, uint8_t *results, uint8_t number)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b086      	sub	sp, #24
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71fb      	strb	r3, [r7, #7]
  int8_t copy_number;

  if ((NULL == Obj) || (NULL == results) || ((uint8_t)0 == number))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <MX_WIFI_Get_scan_result+0x20>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <MX_WIFI_Get_scan_result+0x20>
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <MX_WIFI_Get_scan_result+0x26>
  {
    copy_number = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]
 80073e6:	e015      	b.n	8007414 <MX_WIFI_Get_scan_result+0x52>
  }
  else
  {
    copy_number = (int8_t)(MIN(Obj->Runtime.scan_number, number));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 39f0 	ldrb.w	r3, [r3, #2544]	; 0x9f0
 80073ee:	79fa      	ldrb	r2, [r7, #7]
 80073f0:	4293      	cmp	r3, r2
 80073f2:	bf28      	it	cs
 80073f4:	4613      	movcs	r3, r2
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	75fb      	strb	r3, [r7, #23]
    (void)memcpy(results, Obj->Runtime.scan_result, (size_t)copy_number * sizeof(mwifi_ap_info_t));
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 7108 	add.w	r1, r3, #544	; 0x220
 8007400:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007404:	4613      	mov	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	4413      	add	r3, r2
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	461a      	mov	r2, r3
 800740e:	68b8      	ldr	r0, [r7, #8]
 8007410:	f00c f9c6 	bl	80137a0 <memcpy>
  }
  return copy_number;
 8007414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <MX_WIFI_RegisterStatusCallback>:
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_RegisterStatusCallback(MX_WIFIObject_t *Obj,
                                                mx_wifi_status_callback_t cb,
                                                void *arg)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  MX_WIFI_STATUS_T rc;

  if (NULL == Obj)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d103      	bne.n	800743a <MX_WIFI_RegisterStatusCallback+0x1a>
  {
    rc = MX_WIFI_STATUS_ERROR;
 8007432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e009      	b.n	800744e <MX_WIFI_RegisterStatusCallback+0x2e>
  }
  else
  {
    Obj->Runtime.status_cb[0] = cb;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    Obj->Runtime.callback_arg[0] = arg;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    rc = MX_WIFI_STATUS_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  }
  return rc;
 800744e:	697b      	ldr	r3, [r7, #20]
}
 8007450:	4618      	mov	r0, r3
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <mx_ntoa>:
  return rc;
}


static int8_t *mx_ntoa(const mx_ip4_addr_t *addr)
{
 800745c:	b480      	push	{r7}
 800745e:	b08b      	sub	sp, #44	; 0x2c
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint8_t val;
  int8_t inv[3];
  uint8_t *ap;
  uint8_t rem;
  uint8_t i;
  int32_t len = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	623b      	str	r3, [r7, #32]
  int8_t *buf_ret;
  static int8_t buf[16];

  MX_S_ADDR = addr->addr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60fb      	str	r3, [r7, #12]

  ap = (uint8_t *)&MX_S_ADDR;
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	617b      	str	r3, [r7, #20]
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 8007474:	2300      	movs	r3, #0
 8007476:	76fb      	strb	r3, [r7, #27]
 8007478:	e05b      	b.n	8007532 <mx_ntoa+0xd6>
  {
    i = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    val = ap[n];
 8007480:	7efb      	ldrb	r3, [r7, #27]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    do
    {
      rem = val % 10U;
 800748c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007490:	4b33      	ldr	r3, [pc, #204]	; (8007560 <mx_ntoa+0x104>)
 8007492:	fba3 1302 	umull	r1, r3, r3, r2
 8007496:	08d9      	lsrs	r1, r3, #3
 8007498:	460b      	mov	r3, r1
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	74fb      	strb	r3, [r7, #19]
      val /=  10U;
 80074a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a8:	4a2d      	ldr	r2, [pc, #180]	; (8007560 <mx_ntoa+0x104>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	08db      	lsrs	r3, r3, #3
 80074b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      inv[i] = (int8_t)'0' + rem;
 80074b4:	7cfb      	ldrb	r3, [r7, #19]
 80074b6:	3330      	adds	r3, #48	; 0x30
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074be:	b252      	sxtb	r2, r2
 80074c0:	3328      	adds	r3, #40	; 0x28
 80074c2:	443b      	add	r3, r7
 80074c4:	f803 2c20 	strb.w	r2, [r3, #-32]
      i++;
 80074c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074cc:	3301      	adds	r3, #1
 80074ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    } while (val != 0U);
 80074d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1d8      	bne.n	800748c <mx_ntoa+0x30>

    while (i != 0U)
 80074da:	e015      	b.n	8007508 <mx_ntoa+0xac>
    {
      i--;
 80074dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074e0:	3b01      	subs	r3, #1
 80074e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      if (len < 16)
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	2b0f      	cmp	r3, #15
 80074ea:	dc0d      	bgt.n	8007508 <mx_ntoa+0xac>
      {
        buf[len] = inv[i];
 80074ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074f0:	3328      	adds	r3, #40	; 0x28
 80074f2:	443b      	add	r3, r7
 80074f4:	f913 1c20 	ldrsb.w	r1, [r3, #-32]
 80074f8:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <mx_ntoa+0x108>)
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	4413      	add	r3, r2
 80074fe:	460a      	mov	r2, r1
 8007500:	701a      	strb	r2, [r3, #0]
        len++;
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	3301      	adds	r3, #1
 8007506:	623b      	str	r3, [r7, #32]
    while (i != 0U)
 8007508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e5      	bne.n	80074dc <mx_ntoa+0x80>
      }
    }

    if ((n < 3U) && (len < 16))
 8007510:	7efb      	ldrb	r3, [r7, #27]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d80a      	bhi.n	800752c <mx_ntoa+0xd0>
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	2b0f      	cmp	r3, #15
 800751a:	dc07      	bgt.n	800752c <mx_ntoa+0xd0>
    {
      buf[len] = (int8_t) '.';
 800751c:	4a11      	ldr	r2, [pc, #68]	; (8007564 <mx_ntoa+0x108>)
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	4413      	add	r3, r2
 8007522:	222e      	movs	r2, #46	; 0x2e
 8007524:	701a      	strb	r2, [r3, #0]
      len++;
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	3301      	adds	r3, #1
 800752a:	623b      	str	r3, [r7, #32]
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 800752c:	7efb      	ldrb	r3, [r7, #27]
 800752e:	3301      	adds	r3, #1
 8007530:	76fb      	strb	r3, [r7, #27]
 8007532:	7efb      	ldrb	r3, [r7, #27]
 8007534:	2b03      	cmp	r3, #3
 8007536:	d9a0      	bls.n	800747a <mx_ntoa+0x1e>
    }
  }

  if (len < 16)
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2b0f      	cmp	r3, #15
 800753c:	dc07      	bgt.n	800754e <mx_ntoa+0xf2>
  {
    buf[len] = (int8_t) '\0';
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <mx_ntoa+0x108>)
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	4413      	add	r3, r2
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
    buf_ret = buf;
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <mx_ntoa+0x108>)
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	e001      	b.n	8007552 <mx_ntoa+0xf6>

  }
  else
  {
    buf_ret = (int8_t *) "000.000.000.000";
 800754e:	4b06      	ldr	r3, [pc, #24]	; (8007568 <mx_ntoa+0x10c>)
 8007550:	61fb      	str	r3, [r7, #28]
  }

  return buf_ret;
 8007552:	69fb      	ldr	r3, [r7, #28]
}
 8007554:	4618      	mov	r0, r3
 8007556:	372c      	adds	r7, #44	; 0x2c
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	cccccccd 	.word	0xcccccccd
 8007564:	200031b0 	.word	0x200031b0
 8007568:	08018c5c 	.word	0x08018c5c

0800756c <MX_WIFI_Connect>:
  * @param  SecType          security type (not used, auto)
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_Connect(MX_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password, MX_WIFI_SecurityType_t SecType)
{
 800756c:	b5b0      	push	{r4, r5, r7, lr}
 800756e:	b0c6      	sub	sp, #280	; 0x118
 8007570:	af02      	add	r7, sp, #8
 8007572:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8007576:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800757a:	6020      	str	r0, [r4, #0]
 800757c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8007580:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8007584:	6001      	str	r1, [r0, #0]
 8007586:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800758a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800758e:	600a      	str	r2, [r1, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007596:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800759a:	701a      	strb	r2, [r3, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  wifi_connect_cparams_t cparams;
  int32_t status =  MIPC_CODE_ERROR;
 80075a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a8:	65bb      	str	r3, [r7, #88]	; 0x58
  mwifi_ip_attr_t ip_attr;
  mx_ip4_addr_t net_ipaddr;

  (void)SecType;

  if ((NULL == Obj) || (NULL == SSID) || (strlen(SSID) > (uint32_t)MX_MAX_SSID_LEN)
 80075aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d021      	beq.n	80075fc <MX_WIFI_Connect+0x90>
 80075b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01a      	beq.n	80075fc <MX_WIFI_Connect+0x90>
 80075c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	f7f8 fe5c 	bl	800028c <strlen>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d810      	bhi.n	80075fc <MX_WIFI_Connect+0x90>
      || (NULL == Password) || (strlen(Password) > (uint32_t)MX_MAX_KEY_LEN))
 80075da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d009      	beq.n	80075fc <MX_WIFI_Connect+0x90>
 80075e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	f7f8 fe4b 	bl	800028c <strlen>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d904      	bls.n	8007606 <MX_WIFI_Connect+0x9a>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80075fc:	f06f 0303 	mvn.w	r3, #3
 8007600:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007604:	e0ca      	b.n	800779c <MX_WIFI_Connect+0x230>
  }
  else
  {
    strncpy((char *)cparams.ssid, SSID, MX_MAX_SSID_LEN);
 8007606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8007612:	2220      	movs	r2, #32
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	f00d f926 	bl	8014866 <strncpy>
    strncpy((char *)cparams.key, Password, MX_MAX_KEY_LEN);
 800761a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800761e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007622:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007626:	f102 0021 	add.w	r0, r2, #33	; 0x21
 800762a:	2240      	movs	r2, #64	; 0x40
 800762c:	6819      	ldr	r1, [r3, #0]
 800762e:	f00d f91a 	bl	8014866 <strncpy>
    cparams.key_len = strlen(Password);
 8007632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007636:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	f7f8 fe26 	bl	800028c <strlen>
 8007640:	4603      	mov	r3, r0
 8007642:	f8c7 30be 	str.w	r3, [r7, #190]	; 0xbe
    cparams.use_attr = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
    cparams.use_ip = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((uint8_t)0 == Obj->NetSettings.DHCP_IsEnabled)
 8007652:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8007660:	2b00      	cmp	r3, #0
 8007662:	d17f      	bne.n	8007764 <MX_WIFI_Connect+0x1f8>
    {
      (void)memset(&ip_attr, 0, sizeof(mwifi_ip_attr_t));
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	2240      	movs	r2, #64	; 0x40
 800766a:	2100      	movs	r1, #0
 800766c:	4618      	mov	r0, r3
 800766e:	f00c f8a4 	bl	80137ba <memset>
      (void)memcpy(&net_ipaddr, Obj->NetSettings.IP_Addr, 4);
 8007672:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	33d9      	adds	r3, #217	; 0xd9
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007686:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800768a:	601a      	str	r2, [r3, #0]
      (void)memcpy(ip_attr.localip, mx_ntoa(&net_ipaddr), MX_MAX_IP_LEN);
 800768c:	f107 0310 	add.w	r3, r7, #16
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fee3 	bl	800745c <mx_ntoa>
 8007696:	4603      	mov	r3, r0
 8007698:	f107 0414 	add.w	r4, r7, #20
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	6859      	ldr	r1, [r3, #4]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      (void)memcpy(&net_ipaddr, Obj->NetSettings.IP_Mask, 4);
 80076a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	33dd      	adds	r3, #221	; 0xdd
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80076be:	601a      	str	r2, [r3, #0]
      (void)memcpy(ip_attr.netmask, mx_ntoa(&net_ipaddr), MX_MAX_IP_LEN);
 80076c0:	f107 0310 	add.w	r3, r7, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff fec9 	bl	800745c <mx_ntoa>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      (void)memcpy(&net_ipaddr, Obj->NetSettings.Gateway_Addr, 4);
 80076da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	33e1      	adds	r3, #225	; 0xe1
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80076f2:	601a      	str	r2, [r3, #0]
      (void)memcpy(ip_attr.gateway, mx_ntoa(&net_ipaddr), MX_MAX_IP_LEN);
 80076f4:	f107 0310 	add.w	r3, r7, #16
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff feaf 	bl	800745c <mx_ntoa>
 80076fe:	4603      	mov	r3, r0
 8007700:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	6859      	ldr	r1, [r3, #4]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      (void)memcpy(&net_ipaddr, Obj->NetSettings.DNS1, 4);
 800770e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	33e5      	adds	r3, #229	; 0xe5
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007722:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007726:	601a      	str	r2, [r3, #0]
      (void)memcpy(ip_attr.dnserver, mx_ntoa(&net_ipaddr), MX_MAX_IP_LEN);
 8007728:	f107 0310 	add.w	r3, r7, #16
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fe95 	bl	800745c <mx_ntoa>
 8007732:	4603      	mov	r3, r0
 8007734:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	6859      	ldr	r1, [r3, #4]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      cparams.use_ip = 1;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
      memcpy(&(cparams.ip), &ip_attr, sizeof(cparams.ip));
 8007748:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 800774c:	f107 0514 	add.w	r5, r7, #20
 8007750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800775a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800775c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    rparams_size = sizeof(status);
 8007764:	2304      	movs	r3, #4
 8007766:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_CONNECT_CMD,
 800776a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800776e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8007772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	4613      	mov	r3, r2
 8007780:	22b0      	movs	r2, #176	; 0xb0
 8007782:	f240 1003 	movw	r0, #259	; 0x103
 8007786:	f7ff f9c3 	bl	8006b10 <mipc_request>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <MX_WIFI_Connect+0x230>
                                          (uint8_t *)&cparams, sizeof(cparams),
                                          (uint8_t *)&status, &rparams_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 8007790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <MX_WIFI_Connect+0x230>
      {
        ret = MX_WIFI_STATUS_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      }
    }

  }
  return ret;
 800779c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bdb0      	pop	{r4, r5, r7, pc}

080077aa <MX_WIFI_Disconnect>:
  * @brief                   wifi station disconnect
  * @param  Obj              wifi object
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_Disconnect(MX_WIFIObject_t *Obj)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b088      	sub	sp, #32
 80077ae:	af02      	add	r7, sp, #8
 80077b0:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077b6:	617b      	str	r3, [r7, #20]
  int32_t status =  MIPC_CODE_ERROR;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077bc:	613b      	str	r3, [r7, #16]
  uint16_t rparams_size;

  if (NULL == Obj)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <MX_WIFI_Disconnect+0x22>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80077c4:	f06f 0303 	mvn.w	r3, #3
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	e018      	b.n	80077fe <MX_WIFI_Disconnect+0x54>
  }
  else
  {
    rparams_size = sizeof(status);
 80077cc:	2304      	movs	r3, #4
 80077ce:	81fb      	strh	r3, [r7, #14]
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_DISCONNECT_CMD, NULL, 0,
 80077d0:	f107 0210 	add.w	r2, r7, #16
 80077d4:	f643 2398 	movw	r3, #15000	; 0x3a98
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	f107 030e 	add.w	r3, r7, #14
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	f44f 7082 	mov.w	r0, #260	; 0x104
 80077ea:	f7ff f991 	bl	8006b10 <mipc_request>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <MX_WIFI_Disconnect+0x54>
                                          (uint8_t *)&status, &rparams_size,
                                          15000))  /* disconnect max timeout 15s */
    {
      if (MIPC_CODE_SUCCESS == status)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <MX_WIFI_Disconnect+0x54>
      {
        ret = MX_WIFI_STATUS_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return ret;
 80077fe:	697b      	ldr	r3, [r7, #20]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <MX_WIFI_WPS_Connect>:
  * @brief                   connect AP with WPS
  * @param  Obj              wifi object
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_WPS_Connect(MX_WIFIObject_t *Obj)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007814:	60fb      	str	r3, [r7, #12]
      }
    }
  }
#endif /* 0 */

  return ret;
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <MX_WIFI_WPS_Stop>:
  * @brief                   stop connecting to an AP with WPS
  * @param  Obj              wifi object
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_WPS_Stop(MX_WIFIObject_t *Obj)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800782c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007830:	60fb      	str	r3, [r7, #12]
      }
    }
  }
#endif /* 0 */

  return ret;
 8007832:	68fb      	ldr	r3, [r7, #12]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <MX_WIFI_GetIPAddress>:
  * @param  ipaddr           address buffer
  * @param  wifi_if          wifi interface
  * @return MX_WIFI_STATUS_T status
  */
MX_WIFI_STATUS_T MX_WIFI_GetIPAddress(MX_WIFIObject_t *Obj, uint8_t *ipaddr, mwifi_if_t wifi_if)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b09e      	sub	sp, #120	; 0x78
 8007844:	af02      	add	r7, sp, #8
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 800784e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007852:	66fb      	str	r3, [r7, #108]	; 0x6c
  wifi_get_ip_rparams_t rparams;
  uint16_t rparams_size = sizeof(rparams);
 8007854:	2344      	movs	r3, #68	; 0x44
 8007856:	84fb      	strh	r3, [r7, #38]	; 0x26
  int32_t ip;
  int32_t netmask;
  int32_t gw;
  int32_t dns;

  rparams.status = MIPC_CODE_ERROR;
 8007858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800785c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL != Obj)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d04c      	beq.n	80078fe <MX_WIFI_GetIPAddress+0xbe>
  {
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_GET_IP_CMD,
 8007864:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007868:	1df9      	adds	r1, r7, #7
 800786a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	4613      	mov	r3, r2
 8007878:	2201      	movs	r2, #1
 800787a:	f240 1007 	movw	r0, #263	; 0x107
 800787e:	f7ff f947 	bl	8006b10 <mipc_request>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d13a      	bne.n	80078fe <MX_WIFI_GetIPAddress+0xbe>
                                          (uint8_t *)&wifi_if, sizeof(wifi_if),
                                          (uint8_t *)&rparams, &rparams_size,
                                          1000))
    {
      if (MIPC_CODE_SUCCESS == rparams.status)
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d137      	bne.n	80078fe <MX_WIFI_GetIPAddress+0xbe>
      {
        ip = mx_aton_r((int8_t const *) & (rparams.ip.localip[0]));
 800788e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fbd7 	bl	8007048 <mx_aton_r>
 800789a:	4603      	mov	r3, r0
 800789c:	623b      	str	r3, [r7, #32]
        memcpy(&(Obj->NetSettings.IP_Addr[0]), &ip, 4);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	33d9      	adds	r3, #217	; 0xd9
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	601a      	str	r2, [r3, #0]

        netmask = mx_aton_r((int8_t const *) & (rparams.ip.netmask[0]));
 80078a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078aa:	3314      	adds	r3, #20
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fbcb 	bl	8007048 <mx_aton_r>
 80078b2:	4603      	mov	r3, r0
 80078b4:	61fb      	str	r3, [r7, #28]
        memcpy(&(Obj->NetSettings.IP_Mask[0]), &netmask, 4);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	33dd      	adds	r3, #221	; 0xdd
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	601a      	str	r2, [r3, #0]

        gw = mx_aton_r((int8_t const *) & (rparams.ip.gateway[0]));
 80078be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078c2:	3324      	adds	r3, #36	; 0x24
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fbbf 	bl	8007048 <mx_aton_r>
 80078ca:	4603      	mov	r3, r0
 80078cc:	61bb      	str	r3, [r7, #24]
        memcpy(&(Obj->NetSettings.Gateway_Addr[0]), &gw, 4);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	33e1      	adds	r3, #225	; 0xe1
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	601a      	str	r2, [r3, #0]

        dns = mx_aton_r((int8_t const *) & (rparams.ip.dnserver[0]));
 80078d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078da:	3334      	adds	r3, #52	; 0x34
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fbb3 	bl	8007048 <mx_aton_r>
 80078e2:	4603      	mov	r3, r0
 80078e4:	617b      	str	r3, [r7, #20]
        memcpy(&(Obj->NetSettings.DNS1[0]), &dns, 4);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	33e5      	adds	r3, #229	; 0xe5
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	601a      	str	r2, [r3, #0]

        (void)memcpy(ipaddr, Obj->NetSettings.IP_Addr, 4);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	33d9      	adds	r3, #217	; 0xd9
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
    }
  }
  return ret;
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8007900:	4618      	mov	r0, r3
 8007902:	3770      	adds	r7, #112	; 0x70
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <MX_WIFI_StartAP>:
  * @param  Obj: pointer to module handle
  * @param  ap_settings: softAP settings.
  * @retval Operation Status.
  */
MX_WIFI_STATUS_T MX_WIFI_StartAP(MX_WIFIObject_t *Obj, MX_WIFI_APSettings_t *ap_settings)
{
 8007908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790a:	b0b1      	sub	sp, #196	; 0xc4
 800790c:	af02      	add	r7, sp, #8
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 8007912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  wifi_softap_start_cparams_t cparams;
  int32_t status = MIPC_CODE_ERROR;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800791e:	60fb      	str	r3, [r7, #12]
  uint16_t rparams_size = sizeof(status);
 8007920:	2304      	movs	r3, #4
 8007922:	817b      	strh	r3, [r7, #10]

  if ((NULL == Obj) || (NULL == ap_settings))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <MX_WIFI_StartAP+0x28>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d104      	bne.n	800793a <MX_WIFI_StartAP+0x32>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007930:	f06f 0303 	mvn.w	r3, #3
 8007934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007938:	e04e      	b.n	80079d8 <MX_WIFI_StartAP+0xd0>
  }
  else
  {
    memcpy((char *)cparams.ssid, ap_settings->SSID, sizeof(cparams.ssid));
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f107 0410 	add.w	r4, r7, #16
 8007940:	461d      	mov	r5, r3
 8007942:	6828      	ldr	r0, [r5, #0]
 8007944:	6869      	ldr	r1, [r5, #4]
 8007946:	68aa      	ldr	r2, [r5, #8]
 8007948:	68eb      	ldr	r3, [r5, #12]
 800794a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800794c:	6928      	ldr	r0, [r5, #16]
 800794e:	6969      	ldr	r1, [r5, #20]
 8007950:	69aa      	ldr	r2, [r5, #24]
 8007952:	69eb      	ldr	r3, [r5, #28]
 8007954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    memcpy((char *)cparams.key, ap_settings->pswd, sizeof(cparams.key));
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	3321      	adds	r3, #33	; 0x21
 800795a:	461c      	mov	r4, r3
 800795c:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8007960:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8007964:	4635      	mov	r5, r6
 8007966:	4623      	mov	r3, r4
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	6859      	ldr	r1, [r3, #4]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007972:	3410      	adds	r4, #16
 8007974:	3610      	adds	r6, #16
 8007976:	4564      	cmp	r4, ip
 8007978:	d1f4      	bne.n	8007964 <MX_WIFI_StartAP+0x5c>
    cparams.channel = ap_settings->channel;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007980:	673b      	str	r3, [r7, #112]	; 0x70
    memcpy(&(cparams.ip), &(ap_settings->ip), sizeof(cparams.ip));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	3363      	adds	r3, #99	; 0x63
 8007986:	461c      	mov	r4, r3
 8007988:	f107 0674 	add.w	r6, r7, #116	; 0x74
 800798c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8007990:	4635      	mov	r5, r6
 8007992:	4623      	mov	r3, r4
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	6859      	ldr	r1, [r3, #4]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800799e:	3410      	adds	r4, #16
 80079a0:	3610      	adds	r6, #16
 80079a2:	4564      	cmp	r4, ip
 80079a4:	d1f4      	bne.n	8007990 <MX_WIFI_StartAP+0x88>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_START_CMD,
 80079a6:	f107 020c 	add.w	r2, r7, #12
 80079aa:	f107 0110 	add.w	r1, r7, #16
 80079ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	f107 030a 	add.w	r3, r7, #10
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4613      	mov	r3, r2
 80079bc:	22a4      	movs	r2, #164	; 0xa4
 80079be:	f240 1005 	movw	r0, #261	; 0x105
 80079c2:	f7ff f8a5 	bl	8006b10 <mipc_request>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d105      	bne.n	80079d8 <MX_WIFI_StartAP+0xd0>
                                          (uint8_t *)&cparams, sizeof(cparams),
                                          (uint8_t *)&status, &rparams_size,
                                          3000))
    {
      if (MIPC_CODE_SUCCESS == status)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d102      	bne.n	80079d8 <MX_WIFI_StartAP+0xd0>
      {
        ret = MX_WIFI_STATUS_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
    }
  }
  return ret;
 80079d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
}
 80079dc:	4618      	mov	r0, r3
 80079de:	37bc      	adds	r7, #188	; 0xbc
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079e4 <MX_WIFI_StopAP>:
  * @brief  Stop softAP(miniAP) mode
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
MX_WIFI_STATUS_T MX_WIFI_StopAP(MX_WIFIObject_t *Obj)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	6078      	str	r0, [r7, #4]
  MX_WIFI_STATUS_T ret = MX_WIFI_STATUS_ERROR;
 80079ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f0:	617b      	str	r3, [r7, #20]
  int32_t status = MIPC_CODE_ERROR;
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f6:	613b      	str	r3, [r7, #16]
  uint16_t out_size = sizeof(status);
 80079f8:	2304      	movs	r3, #4
 80079fa:	81fb      	strh	r3, [r7, #14]

  if (NULL != Obj)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d016      	beq.n	8007a30 <MX_WIFI_StopAP+0x4c>
  {
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_SOFTAP_STOP_CMD, NULL, 0,
 8007a02:	f107 0210 	add.w	r2, r7, #16
 8007a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	f107 030e 	add.w	r3, r7, #14
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	4613      	mov	r3, r2
 8007a14:	2200      	movs	r2, #0
 8007a16:	2100      	movs	r1, #0
 8007a18:	f44f 7083 	mov.w	r0, #262	; 0x106
 8007a1c:	f7ff f878 	bl	8006b10 <mipc_request>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <MX_WIFI_StopAP+0x4c>
                                          (uint8_t *)&status, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == status)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <MX_WIFI_StopAP+0x4c>
      {
        ret = MX_WIFI_STATUS_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return ret;
 8007a30:	697b      	ldr	r3, [r7, #20]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <MX_WIFI_Socket_create>:
  * @param  type: socket type
  * @param  protocol: socket protocol
  * @retval Socket file descriptor, return < 1 if failed.
  */
int32_t MX_WIFI_Socket_create(MX_WIFIObject_t *Obj, int32_t domain, int32_t type, int32_t protocol)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b08c      	sub	sp, #48	; 0x30
 8007a3e:	af02      	add	r7, sp, #8
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
 8007a46:	603b      	str	r3, [r7, #0]
  int32_t ret_fd = -1;
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
  socket_create_cparams_t cp;
  socket_create_rparams_t rp;
  uint16_t out_size = sizeof(rp);
 8007a4e:	2304      	movs	r3, #4
 8007a50:	827b      	strh	r3, [r7, #18]

  if (NULL != Obj)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d021      	beq.n	8007a9c <MX_WIFI_Socket_create+0x62>
  {
    cp.domain = domain;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	61bb      	str	r3, [r7, #24]
    cp.type = type;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	61fb      	str	r3, [r7, #28]
    cp.protocol = protocol;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	623b      	str	r3, [r7, #32]
    memset(&rp, 0, sizeof(rp));
 8007a64:	f107 0314 	add.w	r3, r7, #20
 8007a68:	2204      	movs	r2, #4
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f00b fea4 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CREATE_CMD,
 8007a72:	f107 0214 	add.w	r2, r7, #20
 8007a76:	f107 0118 	add.w	r1, r7, #24
 8007a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	f107 0312 	add.w	r3, r7, #18
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4613      	mov	r3, r2
 8007a88:	220c      	movs	r2, #12
 8007a8a:	f240 2001 	movw	r0, #513	; 0x201
 8007a8e:	f7ff f83f 	bl	8006b10 <mipc_request>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <MX_WIFI_Socket_create+0x62>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      ret_fd = rp.fd;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret_fd;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3728      	adds	r7, #40	; 0x28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <MX_WIFI_Socket_setsockopt>:
  * @param  optlen: length of the option value
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_setsockopt(MX_WIFIObject_t *Obj, int32_t sockfd, int32_t level,
                                  int32_t optname, const void *optvalue, int32_t optlen)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b092      	sub	sp, #72	; 0x48
 8007aaa:	af02      	add	r7, sp, #8
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8007ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  socket_setsockopt_cparams_t cp;
  socket_setsockopt_rparams_t rp;
  uint16_t out_size = sizeof(rp);
 8007aba:	2304      	movs	r3, #4
 8007abc:	82fb      	strh	r3, [r7, #22]

  rp.status =  MIPC_CODE_ERROR;
 8007abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ac2:	61bb      	str	r3, [r7, #24]
  if ((NULL == Obj) || (sockfd < 0) || (NULL == optvalue) || (optlen <= 0))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <MX_WIFI_Socket_setsockopt+0x36>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	db05      	blt.n	8007adc <MX_WIFI_Socket_setsockopt+0x36>
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <MX_WIFI_Socket_setsockopt+0x36>
 8007ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dc03      	bgt.n	8007ae4 <MX_WIFI_Socket_setsockopt+0x3e>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007adc:	f06f 0303 	mvn.w	r3, #3
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae2:	e031      	b.n	8007b48 <MX_WIFI_Socket_setsockopt+0xa2>
  }
  else
  {
    cp.socket = sockfd;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	61fb      	str	r3, [r7, #28]
    cp.level = level;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	623b      	str	r3, [r7, #32]
    cp.optname = optname;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
    cp.optlen = optlen > sizeof(cp.optval) ? sizeof(cp.optval) : optlen;
 8007af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	bf28      	it	cs
 8007af6:	2310      	movcs	r3, #16
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(&(cp.optval[0]), optvalue, cp.optlen);
 8007afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007afc:	f107 031c 	add.w	r3, r7, #28
 8007b00:	3310      	adds	r3, #16
 8007b02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b04:	4618      	mov	r0, r3
 8007b06:	f00b fe4b 	bl	80137a0 <memcpy>
    memset(&rp, 0, sizeof(rp));
 8007b0a:	f107 0318 	add.w	r3, r7, #24
 8007b0e:	2204      	movs	r2, #4
 8007b10:	2100      	movs	r1, #0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f00b fe51 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SETSOCKOPT_CMD,
 8007b18:	f107 0218 	add.w	r2, r7, #24
 8007b1c:	f107 011c 	add.w	r1, r7, #28
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	f107 0316 	add.w	r3, r7, #22
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f240 200a 	movw	r0, #522	; 0x20a
 8007b34:	f7fe ffec 	bl	8006b10 <mipc_request>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <MX_WIFI_Socket_setsockopt+0xa2>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <MX_WIFI_Socket_setsockopt+0xa2>
      {
        ret = MX_WIFI_STATUS_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }
  return ret;
 8007b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3740      	adds	r7, #64	; 0x40
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <MX_WIFI_Socket_getsockopt>:
  * @param  optlen: buffer pointer of length of the option value
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_getsockopt(MX_WIFIObject_t *Obj, int32_t sockfd, int32_t level,
                                  int32_t optname, void *optvalue, uint32_t *optlen)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b092      	sub	sp, #72	; 0x48
 8007b56:	af02      	add	r7, sp, #8
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  socket_getsockopt_cparams_t cp;
  socket_getsockopt_rparams_t rp;
  uint16_t out_size = sizeof(rp);
 8007b66:	2318      	movs	r3, #24
 8007b68:	82fb      	strh	r3, [r7, #22]
  rp.status =  MIPC_CODE_ERROR;
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b6e:	61bb      	str	r3, [r7, #24]

  if ((NULL == Obj) || (sockfd < 0) || (NULL == optvalue) || (NULL == optlen))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d008      	beq.n	8007b88 <MX_WIFI_Socket_getsockopt+0x36>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	db05      	blt.n	8007b88 <MX_WIFI_Socket_getsockopt+0x36>
 8007b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <MX_WIFI_Socket_getsockopt+0x36>
 8007b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <MX_WIFI_Socket_getsockopt+0x3e>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007b88:	f06f 0303 	mvn.w	r3, #3
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b8e:	e035      	b.n	8007bfc <MX_WIFI_Socket_getsockopt+0xaa>
  }
  else
  {
    cp.socket = sockfd;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	633b      	str	r3, [r7, #48]	; 0x30
    cp.level = level;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
    cp.optname = optname;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	63bb      	str	r3, [r7, #56]	; 0x38
    memset(&rp, 0, sizeof(rp));
 8007b9c:	f107 0318 	add.w	r3, r7, #24
 8007ba0:	2218      	movs	r2, #24
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f00b fe08 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKOPT_CMD,
 8007baa:	f107 0218 	add.w	r2, r7, #24
 8007bae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	f107 0316 	add.w	r3, r7, #22
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	220c      	movs	r2, #12
 8007bc2:	f240 2009 	movw	r0, #521	; 0x209
 8007bc6:	f7fe ffa3 	bl	8006b10 <mipc_request>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d115      	bne.n	8007bfc <MX_WIFI_Socket_getsockopt+0xaa>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d112      	bne.n	8007bfc <MX_WIFI_Socket_getsockopt+0xaa>
      {
        *optlen = (rp.optlen > (*optlen)) ? (*optlen) : rp.optlen;
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	bf28      	it	cs
 8007be0:	461a      	movcs	r2, r3
 8007be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be4:	601a      	str	r2, [r3, #0]
        memcpy(optvalue, &(rp.optval[0]), *optlen);
 8007be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	f107 0318 	add.w	r3, r7, #24
 8007bee:	3308      	adds	r3, #8
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007bf4:	f00b fdd4 	bl	80137a0 <memcpy>
        ret = MX_WIFI_STATUS_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }
  return ret;
 8007bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3740      	adds	r7, #64	; 0x40
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <MX_WIFI_Socket_bind>:
  * @param  addrlen: address length
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_bind(MX_WIFIObject_t *Obj, int32_t sockfd,
                            const struct sockaddr *addr, int32_t addrlen)
{
 8007c06:	b590      	push	{r4, r7, lr}
 8007c08:	b091      	sub	sp, #68	; 0x44
 8007c0a:	af02      	add	r7, sp, #8
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8007c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
  socket_bind_cparams_t cp;
  socket_bind_rparams_t rp;
  uint16_t out_size = sizeof(rp);
 8007c1a:	2304      	movs	r3, #4
 8007c1c:	82fb      	strh	r3, [r7, #22]
  rp.status =  MIPC_CODE_ERROR;
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c22:	61bb      	str	r3, [r7, #24]

  if ((NULL == Obj) || (sockfd < 0) || (NULL == addr) || (addrlen <= 0))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <MX_WIFI_Socket_bind+0x36>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	db05      	blt.n	8007c3c <MX_WIFI_Socket_bind+0x36>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <MX_WIFI_Socket_bind+0x36>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dc03      	bgt.n	8007c44 <MX_WIFI_Socket_bind+0x3e>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007c3c:	f06f 0303 	mvn.w	r3, #3
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
 8007c42:	e02a      	b.n	8007c9a <MX_WIFI_Socket_bind+0x94>
  }
  else
  {
    cp.socket = sockfd;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	61fb      	str	r3, [r7, #28]
    memcpy(&(cp.addr), addr, sizeof(cp.addr));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f107 0420 	add.w	r4, r7, #32
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cp.length = addrlen;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	633b      	str	r3, [r7, #48]	; 0x30
    memset(&rp, 0, sizeof(rp));
 8007c5c:	f107 0318 	add.w	r3, r7, #24
 8007c60:	2204      	movs	r2, #4
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f00b fda8 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_BIND_CMD,
 8007c6a:	f107 0218 	add.w	r2, r7, #24
 8007c6e:	f107 011c 	add.w	r1, r7, #28
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	f107 0316 	add.w	r3, r7, #22
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	2218      	movs	r2, #24
 8007c82:	f240 200b 	movw	r0, #523	; 0x20b
 8007c86:	f7fe ff43 	bl	8006b10 <mipc_request>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <MX_WIFI_Socket_bind+0x94>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <MX_WIFI_Socket_bind+0x94>
      {
        ret = MX_WIFI_STATUS_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
  }
  return ret;
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	373c      	adds	r7, #60	; 0x3c
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd90      	pop	{r4, r7, pc}

08007ca4 <MX_WIFI_Socket_listen>:
  * @param  sockfd: socket fd
  * @param  backlog: max number to queued.
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_listen(MX_WIFIObject_t *Obj, int32_t sockfd, int32_t backlog)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08c      	sub	sp, #48	; 0x30
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8007cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
  socket_listen_cparams_t cp;
  socket_listen_rparams_t rp;
  uint16_t rp_size = sizeof(rp);
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	82fb      	strh	r3, [r7, #22]
  rp.status =  MIPC_CODE_ERROR;
 8007cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cbe:	61bb      	str	r3, [r7, #24]

  if ((NULL == Obj) || (sockfd < 0))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <MX_WIFI_Socket_listen+0x28>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	da03      	bge.n	8007cd4 <MX_WIFI_Socket_listen+0x30>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007ccc:	f06f 0303 	mvn.w	r3, #3
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd2:	e022      	b.n	8007d1a <MX_WIFI_Socket_listen+0x76>
  }
  else
  {
    cp.socket = sockfd;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	61fb      	str	r3, [r7, #28]
    cp.n = backlog;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	623b      	str	r3, [r7, #32]
    memset(&rp, 0, sizeof(rp));
 8007cdc:	f107 0318 	add.w	r3, r7, #24
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f00b fd68 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_LISTEN_CMD,
 8007cea:	f107 0218 	add.w	r2, r7, #24
 8007cee:	f107 011c 	add.w	r1, r7, #28
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	f107 0316 	add.w	r3, r7, #22
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	2208      	movs	r2, #8
 8007d02:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8007d06:	f7fe ff03 	bl	8006b10 <mipc_request>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d104      	bne.n	8007d1a <MX_WIFI_Socket_listen+0x76>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <MX_WIFI_Socket_listen+0x76>
      {
        ret = MX_WIFI_STATUS_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }
  return ret;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3728      	adds	r7, #40	; 0x28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <MX_WIFI_Socket_accept>:
  * @param  addrlen: length of client address
  * @retval Accepted client socket fd, return < 0 if failed.
  */
int32_t MX_WIFI_Socket_accept(MX_WIFIObject_t *Obj, int32_t sockfd,
                              struct sockaddr *addr, uint32_t *addrlen)
{
 8007d24:	b5b0      	push	{r4, r5, r7, lr}
 8007d26:	b090      	sub	sp, #64	; 0x40
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
  int32_t ret_fd = -1;
 8007d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
  socket_accept_cparams_t cp;
  socket_accept_rparams_t rp;
  uint16_t rp_size = sizeof(rp);
 8007d38:	2318      	movs	r3, #24
 8007d3a:	82fb      	strh	r3, [r7, #22]
  rp.socket =  -1;
 8007d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d40:	61bb      	str	r3, [r7, #24]

  if ((NULL == Obj) || (sockfd < 0) || (NULL == addr) || (NULL == addrlen))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <MX_WIFI_Socket_accept+0x36>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	db05      	blt.n	8007d5a <MX_WIFI_Socket_accept+0x36>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <MX_WIFI_Socket_accept+0x36>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <MX_WIFI_Socket_accept+0x3e>
  {
    ret_fd = MX_WIFI_STATUS_PARAM_ERROR;
 8007d5a:	f06f 0303 	mvn.w	r3, #3
 8007d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d60:	e02c      	b.n	8007dbc <MX_WIFI_Socket_accept+0x98>
  }
  else
  {
    cp.socket = sockfd;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	633b      	str	r3, [r7, #48]	; 0x30
    memset(&rp, 0, sizeof(rp));
 8007d66:	f107 0318 	add.w	r3, r7, #24
 8007d6a:	2218      	movs	r2, #24
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f00b fd23 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_ACCEPT_CMD,
 8007d74:	f107 0218 	add.w	r2, r7, #24
 8007d78:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	f107 0316 	add.w	r3, r7, #22
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	f240 200d 	movw	r0, #525	; 0x20d
 8007d90:	f7fe febe 	bl	8006b10 <mipc_request>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d110      	bne.n	8007dbc <MX_WIFI_Socket_accept+0x98>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.socket >= 0)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	db0d      	blt.n	8007dbc <MX_WIFI_Socket_accept+0x98>
      {
        memcpy(addr, &(rp.addr), sizeof(rp.addr));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	461d      	mov	r5, r3
 8007da4:	f107 041c 	add.w	r4, r7, #28
 8007da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007daa:	6028      	str	r0, [r5, #0]
 8007dac:	6069      	str	r1, [r5, #4]
 8007dae:	60aa      	str	r2, [r5, #8]
 8007db0:	60eb      	str	r3, [r5, #12]
        *addrlen = rp.length;
 8007db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	601a      	str	r2, [r3, #0]
        ret_fd = rp.socket;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
  }
  return ret_fd;
 8007dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3738      	adds	r7, #56	; 0x38
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bdb0      	pop	{r4, r5, r7, pc}

08007dc6 <MX_WIFI_Socket_connect>:
  * @param  addrlen: length of client address
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_connect(MX_WIFIObject_t *Obj, int32_t sockfd,
                               const struct sockaddr *addr, int32_t addrlen)
{
 8007dc6:	b590      	push	{r4, r7, lr}
 8007dc8:	b091      	sub	sp, #68	; 0x44
 8007dca:	af02      	add	r7, sp, #8
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
  socket_connect_cparams_t cp;
  socket_connect_rparams_t rp;
  uint16_t out_size = sizeof(rp);
 8007dda:	2304      	movs	r3, #4
 8007ddc:	82fb      	strh	r3, [r7, #22]
  rp.status =  MIPC_CODE_ERROR;
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007de2:	61bb      	str	r3, [r7, #24]

  if ((NULL == Obj) || (sockfd < 0) || (NULL == addr) || (addrlen <= 0))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d008      	beq.n	8007dfc <MX_WIFI_Socket_connect+0x36>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	db05      	blt.n	8007dfc <MX_WIFI_Socket_connect+0x36>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <MX_WIFI_Socket_connect+0x36>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dc03      	bgt.n	8007e04 <MX_WIFI_Socket_connect+0x3e>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007dfc:	f06f 0303 	mvn.w	r3, #3
 8007e00:	637b      	str	r3, [r7, #52]	; 0x34
 8007e02:	e02a      	b.n	8007e5a <MX_WIFI_Socket_connect+0x94>
  }
  else
  {
    cp.socket = sockfd;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61fb      	str	r3, [r7, #28]
    memcpy(&(cp.addr), addr, sizeof(cp.addr));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f107 0420 	add.w	r4, r7, #32
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cp.length = addrlen;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	633b      	str	r3, [r7, #48]	; 0x30
    memset(&rp, 0, sizeof(rp));
 8007e1c:	f107 0318 	add.w	r3, r7, #24
 8007e20:	2204      	movs	r2, #4
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f00b fcc8 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CONNECT_CMD,
 8007e2a:	f107 0218 	add.w	r2, r7, #24
 8007e2e:	f107 011c 	add.w	r1, r7, #28
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	f107 0316 	add.w	r3, r7, #22
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	2218      	movs	r2, #24
 8007e42:	f240 2002 	movw	r0, #514	; 0x202
 8007e46:	f7fe fe63 	bl	8006b10 <mipc_request>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d104      	bne.n	8007e5a <MX_WIFI_Socket_connect+0x94>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <MX_WIFI_Socket_connect+0x94>
      {
        ret = MX_WIFI_STATUS_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
  }
  return ret;
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	373c      	adds	r7, #60	; 0x3c
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd90      	pop	{r4, r7, pc}

08007e64 <MX_WIFI_Socket_shutdown>:
  *        1    Stop trying to transmit data from this socket
  *        2    Stop all transmit from this socket
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_shutdown(MX_WIFIObject_t *Obj, int32_t sockfd, int32_t mode)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08c      	sub	sp, #48	; 0x30
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8007e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
  socket_shutdown_cparams_t cp;
  socket_shutdown_rparams_t rp;
  uint16_t out_size = sizeof(rp);
 8007e76:	2304      	movs	r3, #4
 8007e78:	82fb      	strh	r3, [r7, #22]
  rp.status =  MIPC_CODE_ERROR;
 8007e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e7e:	61bb      	str	r3, [r7, #24]

  if ((NULL == Obj) || (sockfd < 0))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <MX_WIFI_Socket_shutdown+0x28>
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	da03      	bge.n	8007e94 <MX_WIFI_Socket_shutdown+0x30>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007e8c:	f06f 0303 	mvn.w	r3, #3
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
 8007e92:	e022      	b.n	8007eda <MX_WIFI_Socket_shutdown+0x76>
  }
  else
  {
    cp.filedes = sockfd;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	61fb      	str	r3, [r7, #28]
    cp.how = mode;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	623b      	str	r3, [r7, #32]
    memset(&rp, 0, sizeof(rp));
 8007e9c:	f107 0318 	add.w	r3, r7, #24
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f00b fc88 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SHUTDOWN_CMD,
 8007eaa:	f107 0218 	add.w	r2, r7, #24
 8007eae:	f107 011c 	add.w	r1, r7, #28
 8007eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	f107 0316 	add.w	r3, r7, #22
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	f240 2007 	movw	r0, #519	; 0x207
 8007ec6:	f7fe fe23 	bl	8006b10 <mipc_request>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <MX_WIFI_Socket_shutdown+0x76>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <MX_WIFI_Socket_shutdown+0x76>
      {
        ret = MX_WIFI_STATUS_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }
  return ret;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3728      	adds	r7, #40	; 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <MX_WIFI_Socket_close>:
  * @param  Obj: pointer to module handle
  * @param  sockfd: socket fd
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_close(MX_WIFIObject_t *Obj, int32_t sockfd)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef2:	617b      	str	r3, [r7, #20]
  socket_close_cparams_t cp;
  socket_close_rparams_t rp;
  uint16_t out_size = sizeof(rp);
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	817b      	strh	r3, [r7, #10]
  rp.status =  MIPC_CODE_ERROR;
 8007ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007efc:	60fb      	str	r3, [r7, #12]

  if ((NULL == Obj) || (sockfd < 0))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <MX_WIFI_Socket_close+0x26>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	da03      	bge.n	8007f12 <MX_WIFI_Socket_close+0x2e>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8007f0a:	f06f 0303 	mvn.w	r3, #3
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	e020      	b.n	8007f54 <MX_WIFI_Socket_close+0x70>
  }
  else
  {
    cp.filedes = sockfd;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	613b      	str	r3, [r7, #16]
    memset(&rp, 0, sizeof(rp));
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	2204      	movs	r2, #4
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f00b fc4b 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_CLOSE_CMD,
 8007f24:	f107 020c 	add.w	r2, r7, #12
 8007f28:	f107 0110 	add.w	r1, r7, #16
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	f107 030a 	add.w	r3, r7, #10
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	f44f 7002 	mov.w	r0, #520	; 0x208
 8007f40:	f7fe fde6 	bl	8006b10 <mipc_request>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d104      	bne.n	8007f54 <MX_WIFI_Socket_close+0x70>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &out_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <MX_WIFI_Socket_close+0x70>
      {
        ret = MX_WIFI_STATUS_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return ret;
 8007f54:	697b      	ldr	r3, [r7, #20]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <MX_WIFI_Socket_send>:
  * @param  flags: zero for MXOS
  * @retval Number of bytes sent, return < 0 if failed.
  */
int32_t MX_WIFI_Socket_send(MX_WIFIObject_t *Obj, int32_t sockfd, uint8_t *buf,
                            int32_t len, int32_t flags)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b08c      	sub	sp, #48	; 0x30
 8007f62:	af02      	add	r7, sp, #8
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 8007f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f70:	627b      	str	r3, [r7, #36]	; 0x24
  socket_send_cparams_t *cp;
  uint16_t cp_size;
  socket_send_rparams_t rp;
  uint16_t rp_size = sizeof(rp);
 8007f72:	2304      	movs	r3, #4
 8007f74:	827b      	strh	r3, [r7, #18]
  int32_t datalen;

  if ((NULL == Obj) || (sockfd < 0) || (NULL == buf) || (len <= 0))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <MX_WIFI_Socket_send+0x30>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	db05      	blt.n	8007f8e <MX_WIFI_Socket_send+0x30>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <MX_WIFI_Socket_send+0x30>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dc03      	bgt.n	8007f96 <MX_WIFI_Socket_send+0x38>
  {
    ret = -1;
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
 8007f94:	e041      	b.n	800801a <MX_WIFI_Socket_send+0xbc>
  }
  else
  {
    if ((len + sizeof(socket_send_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	f640 12be 	movw	r2, #2494	; 0x9be
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d903      	bls.n	8007faa <MX_WIFI_Socket_send+0x4c>
    {
      datalen = (MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_send_cparams_t) - 1));
 8007fa2:	f640 13b2 	movw	r3, #2482	; 0x9b2
 8007fa6:	623b      	str	r3, [r7, #32]
 8007fa8:	e001      	b.n	8007fae <MX_WIFI_Socket_send+0x50>
    }
    else
    {
      datalen = len;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	623b      	str	r3, [r7, #32]
    }
    rp.sent = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
    cp_size = (sizeof(socket_send_cparams_t) - 1 + datalen);
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	83fb      	strh	r3, [r7, #30]
    cp = (socket_send_cparams_t *)MX_WIFI_MALLOC(cp_size);
 8007fba:	8bfb      	ldrh	r3, [r7, #30]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f00b fbcf 	bl	8013760 <malloc>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	61bb      	str	r3, [r7, #24]
    if (NULL != cp)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d026      	beq.n	800801a <MX_WIFI_Socket_send+0xbc>
    {
      cp->socket = sockfd;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	601a      	str	r2, [r3, #0]
      memcpy(&(cp->buffer[0]), buf, datalen);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	6a3a      	ldr	r2, [r7, #32]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f00b fbe0 	bl	80137a0 <memcpy>
      cp->size = datalen;
 8007fe0:	6a3a      	ldr	r2, [r7, #32]
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	605a      	str	r2, [r3, #4]
      cp->flags = flags;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fea:	609a      	str	r2, [r3, #8]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SEND_CMD,
 8007fec:	f107 0114 	add.w	r1, r7, #20
 8007ff0:	8bfa      	ldrh	r2, [r7, #30]
 8007ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	f107 0312 	add.w	r3, r7, #18
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	460b      	mov	r3, r1
 8008000:	69b9      	ldr	r1, [r7, #24]
 8008002:	f240 2003 	movw	r0, #515	; 0x203
 8008006:	f7fe fd83 	bl	8006b10 <mipc_request>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <MX_WIFI_Socket_send+0xb6>
                                            (uint8_t *)cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        ret = rp.sent;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      MX_WIFI_FREE(cp);
 8008014:	69b8      	ldr	r0, [r7, #24]
 8008016:	f00b fbab 	bl	8013770 <free>
    }
  }
  return ret;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800801c:	4618      	mov	r0, r3
 800801e:	3728      	adds	r7, #40	; 0x28
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <MX_WIFI_Socket_sendto>:
  * @retval Number of bytes sent, return < 0 if failed.
  */
int32_t MX_WIFI_Socket_sendto(MX_WIFIObject_t *Obj, int32_t sockfd, uint8_t *buf,
                              int32_t len, int32_t flags,
                              struct sockaddr *toaddr, int32_t toaddrlen)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08c      	sub	sp, #48	; 0x30
 8008028:	af02      	add	r7, sp, #8
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008036:	627b      	str	r3, [r7, #36]	; 0x24
  socket_sendto_cparams_t *cp;
  uint16_t cp_size;
  socket_sendto_rparams_t rp;
  uint16_t rp_size = sizeof(rp);
 8008038:	2304      	movs	r3, #4
 800803a:	827b      	strh	r3, [r7, #18]
  int32_t datalen;

  if ((NULL == Obj) || (sockfd < 0) || (NULL == buf) || (len <= 0) || (NULL == toaddr) || (toaddrlen <= 0))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00e      	beq.n	8008060 <MX_WIFI_Socket_sendto+0x3c>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	db0b      	blt.n	8008060 <MX_WIFI_Socket_sendto+0x3c>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <MX_WIFI_Socket_sendto+0x3c>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	dd05      	ble.n	8008060 <MX_WIFI_Socket_sendto+0x3c>
 8008054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <MX_WIFI_Socket_sendto+0x3c>
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	2b00      	cmp	r3, #0
 800805e:	dc03      	bgt.n	8008068 <MX_WIFI_Socket_sendto+0x44>
  {
    ret = -1;
 8008060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
 8008066:	e04b      	b.n	8008100 <MX_WIFI_Socket_sendto+0xdc>
  }
  else
  {
    if ((len + sizeof(socket_sendto_cparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	3320      	adds	r3, #32
 800806c:	f640 12be 	movw	r2, #2494	; 0x9be
 8008070:	4293      	cmp	r3, r2
 8008072:	d903      	bls.n	800807c <MX_WIFI_Socket_sendto+0x58>
    {
      datalen = (MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_sendto_cparams_t) - 1));
 8008074:	f640 139e 	movw	r3, #2462	; 0x99e
 8008078:	623b      	str	r3, [r7, #32]
 800807a:	e001      	b.n	8008080 <MX_WIFI_Socket_sendto+0x5c>
    }
    else
    {
      datalen = len;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	623b      	str	r3, [r7, #32]
    }
    cp_size = (sizeof(socket_sendto_cparams_t) - 1 + datalen);
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	b29b      	uxth	r3, r3
 8008084:	3320      	adds	r3, #32
 8008086:	83fb      	strh	r3, [r7, #30]
    cp = (socket_sendto_cparams_t *)MX_WIFI_MALLOC(cp_size);
 8008088:	8bfb      	ldrh	r3, [r7, #30]
 800808a:	4618      	mov	r0, r3
 800808c:	f00b fb68 	bl	8013760 <malloc>
 8008090:	4603      	mov	r3, r0
 8008092:	61bb      	str	r3, [r7, #24]
    if (NULL != cp)
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d032      	beq.n	8008100 <MX_WIFI_Socket_sendto+0xdc>
    {
      rp.sent = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
      cp->socket = sockfd;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	601a      	str	r2, [r3, #0]
      memcpy(&(cp->buffer[0]), buf, datalen);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	3320      	adds	r3, #32
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f00b fb77 	bl	80137a0 <memcpy>
      cp->size = datalen;
 80080b2:	6a3a      	ldr	r2, [r7, #32]
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	605a      	str	r2, [r3, #4]
      cp->flags = flags;
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080bc:	609a      	str	r2, [r3, #8]
      memcpy(&(cp->addr), toaddr, sizeof(cp->addr));
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	330c      	adds	r3, #12
 80080c2:	2210      	movs	r2, #16
 80080c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080c6:	4618      	mov	r0, r3
 80080c8:	f00b fb6a 	bl	80137a0 <memcpy>
      cp->length = toaddrlen;
 80080cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	61da      	str	r2, [r3, #28]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_SENDTO_CMD,
 80080d2:	f107 0114 	add.w	r1, r7, #20
 80080d6:	8bfa      	ldrh	r2, [r7, #30]
 80080d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	f107 0312 	add.w	r3, r7, #18
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	460b      	mov	r3, r1
 80080e6:	69b9      	ldr	r1, [r7, #24]
 80080e8:	f44f 7001 	mov.w	r0, #516	; 0x204
 80080ec:	f7fe fd10 	bl	8006b10 <mipc_request>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <MX_WIFI_Socket_sendto+0xd6>
                                            (uint8_t *)cp, cp_size,
                                            (uint8_t *)&rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        ret = rp.sent;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      MX_WIFI_FREE(cp);
 80080fa:	69b8      	ldr	r0, [r7, #24]
 80080fc:	f00b fb38 	bl	8013770 <free>
    }
  }
  return ret;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008102:	4618      	mov	r0, r3
 8008104:	3728      	adds	r7, #40	; 0x28
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <MX_WIFI_Socket_recv>:
  * @param  flags: zero for MXOS
  * @retval Number of bytes received, return < 0 if failed.
  */
int32_t MX_WIFI_Socket_recv(MX_WIFIObject_t *Obj, int32_t sockfd, uint8_t *buf,
                            int32_t len, int32_t flags)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b08e      	sub	sp, #56	; 0x38
 800810e:	af02      	add	r7, sp, #8
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 8008118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
  socket_recv_cparams_t cp;
  socket_recv_rparams_t *rp;
  uint16_t rp_size;
  int32_t datalen;

  if ((NULL == Obj) || (sockfd < 0) || (NULL == buf) || (len <= 0))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <MX_WIFI_Socket_recv+0x2c>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	db05      	blt.n	8008136 <MX_WIFI_Socket_recv+0x2c>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <MX_WIFI_Socket_recv+0x2c>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	dc03      	bgt.n	800813e <MX_WIFI_Socket_recv+0x34>
  {
    ret = -1;
 8008136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800813a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800813c:	e052      	b.n	80081e4 <MX_WIFI_Socket_recv+0xda>
  }
  else
  {
    ret = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((len + sizeof(socket_recv_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	3304      	adds	r3, #4
 8008146:	f640 12be 	movw	r2, #2494	; 0x9be
 800814a:	4293      	cmp	r3, r2
 800814c:	d903      	bls.n	8008156 <MX_WIFI_Socket_recv+0x4c>
    {
      datalen = (MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recv_rparams_t) - 1));
 800814e:	f640 13ba 	movw	r3, #2490	; 0x9ba
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
 8008154:	e001      	b.n	800815a <MX_WIFI_Socket_recv+0x50>
    }
    else
    {
      datalen = len;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    rp_size = (sizeof(socket_recv_rparams_t) - 1 + datalen);
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	b29b      	uxth	r3, r3
 800815e:	3304      	adds	r3, #4
 8008160:	b29b      	uxth	r3, r3
 8008162:	82fb      	strh	r3, [r7, #22]
    rp = (socket_recv_rparams_t *)MX_WIFI_MALLOC(rp_size);
 8008164:	8afb      	ldrh	r3, [r7, #22]
 8008166:	4618      	mov	r0, r3
 8008168:	f00b fafa 	bl	8013760 <malloc>
 800816c:	4603      	mov	r3, r0
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
    if (NULL != rp)
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d036      	beq.n	80081e4 <MX_WIFI_Socket_recv+0xda>
    {
      rp->received = 0;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	2200      	movs	r2, #0
 800817e:	705a      	strb	r2, [r3, #1]
 8008180:	2200      	movs	r2, #0
 8008182:	709a      	strb	r2, [r3, #2]
 8008184:	2200      	movs	r2, #0
 8008186:	70da      	strb	r2, [r3, #3]
      cp.socket = sockfd;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	61bb      	str	r3, [r7, #24]
      cp.size = datalen;
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	61fb      	str	r3, [r7, #28]
      cp.flags = flags;
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	623b      	str	r3, [r7, #32]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECV_CMD,
 8008194:	f107 0118 	add.w	r1, r7, #24
 8008198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	f107 0316 	add.w	r3, r7, #22
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	220c      	movs	r2, #12
 80081a8:	f240 2005 	movw	r0, #517	; 0x205
 80081ac:	f7fe fcb0 	bl	8006b10 <mipc_request>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d113      	bne.n	80081de <MX_WIFI_Socket_recv+0xd4>
                                            (uint8_t *)&cp, sizeof(cp),
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if ((rp->received <= datalen) && (rp->received > 0))
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081bc:	429a      	cmp	r2, r3
 80081be:	db0b      	blt.n	80081d8 <MX_WIFI_Socket_recv+0xce>
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dd07      	ble.n	80081d8 <MX_WIFI_Socket_recv+0xce>
        {
          memcpy(buf, &(rp->buffer[0]), rp->received);
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	1d19      	adds	r1, r3, #4
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f00b fae4 	bl	80137a0 <memcpy>
        }
        ret = rp->received;
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      MX_WIFI_FREE(rp);
 80081de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081e0:	f00b fac6 	bl	8013770 <free>
    }
  }
  return ret;
 80081e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3730      	adds	r7, #48	; 0x30
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <MX_WIFI_Socket_recvfrom>:
  * @retval Number of bytes received, return < 0 if failed.
  */
int32_t MX_WIFI_Socket_recvfrom(MX_WIFIObject_t *Obj, int32_t sockfd, uint8_t *buf,
                                int32_t len, int32_t flags,
                                struct sockaddr *fromaddr, uint32_t *fromaddrlen)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b08e      	sub	sp, #56	; 0x38
 80081f2:	af02      	add	r7, sp, #8
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
  socket_recvfrom_cparams_t cp;
  socket_recvfrom_rparams_t *rp;
  uint16_t rp_size;
  int32_t datalen;

  if ((NULL == Obj) || (sockfd < 0) || (NULL == buf) || (len <= 0) || (NULL == fromaddr) \
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00e      	beq.n	8008226 <MX_WIFI_Socket_recvfrom+0x38>
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	db0b      	blt.n	8008226 <MX_WIFI_Socket_recvfrom+0x38>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d008      	beq.n	8008226 <MX_WIFI_Socket_recvfrom+0x38>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	dd05      	ble.n	8008226 <MX_WIFI_Socket_recvfrom+0x38>
 800821a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <MX_WIFI_Socket_recvfrom+0x38>
      || (NULL == fromaddrlen))
 8008220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d103      	bne.n	800822e <MX_WIFI_Socket_recvfrom+0x40>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008226:	f06f 0303 	mvn.w	r3, #3
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800822c:	e05e      	b.n	80082ec <MX_WIFI_Socket_recvfrom+0xfe>
  }
  else
  {
    ret = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((len + sizeof(socket_recvfrom_rparams_t) - 1) > MX_WIFI_IPC_PAYLOAD_SIZE)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	3318      	adds	r3, #24
 8008236:	f640 12be 	movw	r2, #2494	; 0x9be
 800823a:	4293      	cmp	r3, r2
 800823c:	d903      	bls.n	8008246 <MX_WIFI_Socket_recvfrom+0x58>
    {
      datalen = (MX_WIFI_IPC_PAYLOAD_SIZE - (sizeof(socket_recvfrom_rparams_t) - 1));
 800823e:	f640 13a6 	movw	r3, #2470	; 0x9a6
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
 8008244:	e001      	b.n	800824a <MX_WIFI_Socket_recvfrom+0x5c>
    }
    else
    {
      datalen = len;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    rp_size = (sizeof(socket_recvfrom_rparams_t) - 1 + datalen);
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	b29b      	uxth	r3, r3
 800824e:	3318      	adds	r3, #24
 8008250:	b29b      	uxth	r3, r3
 8008252:	82fb      	strh	r3, [r7, #22]
    rp = (socket_recvfrom_rparams_t *)MX_WIFI_MALLOC(rp_size);
 8008254:	8afb      	ldrh	r3, [r7, #22]
 8008256:	4618      	mov	r0, r3
 8008258:	f00b fa82 	bl	8013760 <malloc>
 800825c:	4603      	mov	r3, r0
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
    if (NULL != rp)
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	2b00      	cmp	r3, #0
 8008264:	d042      	beq.n	80082ec <MX_WIFI_Socket_recvfrom+0xfe>
    {
      rp->received = 0;
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	2200      	movs	r2, #0
 800826e:	705a      	strb	r2, [r3, #1]
 8008270:	2200      	movs	r2, #0
 8008272:	709a      	strb	r2, [r3, #2]
 8008274:	2200      	movs	r2, #0
 8008276:	70da      	strb	r2, [r3, #3]
      cp.socket = sockfd;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	61bb      	str	r3, [r7, #24]
      cp.size = datalen;
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	61fb      	str	r3, [r7, #28]
      cp.flags = flags;
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	623b      	str	r3, [r7, #32]
      if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_RECVFROM_CMD,
 8008284:	f107 0118 	add.w	r1, r7, #24
 8008288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	f107 0316 	add.w	r3, r7, #22
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	220c      	movs	r2, #12
 8008298:	f240 2006 	movw	r0, #518	; 0x206
 800829c:	f7fe fc38 	bl	8006b10 <mipc_request>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d11f      	bne.n	80082e6 <MX_WIFI_Socket_recvfrom+0xf8>
                                            (uint8_t *)&cp, sizeof(cp),
                                            (uint8_t *)rp, &rp_size,
                                            MX_WIFI_CMD_TIMEOUT))
      {
        if ((rp->received <= datalen) && (rp->received > 0))
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ac:	429a      	cmp	r2, r3
 80082ae:	db1a      	blt.n	80082e6 <MX_WIFI_Socket_recvfrom+0xf8>
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dd16      	ble.n	80082e6 <MX_WIFI_Socket_recvfrom+0xf8>
        {
          memcpy(buf, &(rp->buffer[0]), rp->received);
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	f103 0118 	add.w	r1, r3, #24
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f00b fa6b 	bl	80137a0 <memcpy>
          ret = rp->received;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
          memcpy(fromaddr, &(rp->addr), sizeof(rp->addr));
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	3304      	adds	r3, #4
 80082d4:	2210      	movs	r2, #16
 80082d6:	4619      	mov	r1, r3
 80082d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082da:	f00b fa61 	bl	80137a0 <memcpy>
          *fromaddrlen = rp->length;
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e4:	601a      	str	r2, [r3, #0]
        }
      }
      MX_WIFI_FREE(rp);
 80082e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082e8:	f00b fa42 	bl	8013770 <free>
    }
  }
  return ret;
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3730      	adds	r7, #48	; 0x30
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <MX_WIFI_Socket_gethostbyname>:
  * @param  addr: address of the host
  * @param  name: hostname
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_gethostbyname(MX_WIFIObject_t *Obj, struct sockaddr *addr, char *name)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b0d0      	sub	sp, #320	; 0x140
 80082fa:	af02      	add	r7, sp, #8
 80082fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008304:	6018      	str	r0, [r3, #0]
 8008306:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800830a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800830e:	6019      	str	r1, [r3, #0]
 8008310:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008314:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008318:	601a      	str	r2, [r3, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 800831a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800831e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  mx_sockaddr_in_t addr_in;
  socket_gethostbyname_cparams_t cp;
  socket_gethostbyname_rparams_t rp;
  uint16_t rp_size = sizeof(rp);
 8008322:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008326:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800832a:	2208      	movs	r2, #8
 800832c:	801a      	strh	r2, [r3, #0]
  rp.status =  MIPC_CODE_ERROR;
 800832e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008332:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800833a:	601a      	str	r2, [r3, #0]

  if ((NULL == Obj) || (NULL == addr) || (NULL == name) || (strlen(name) > (uint32_t)MX_MAX_DNSNAME_LEN))
 800833c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d017      	beq.n	800837a <MX_WIFI_Socket_gethostbyname+0x84>
 800834a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800834e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d010      	beq.n	800837a <MX_WIFI_Socket_gethostbyname+0x84>
 8008358:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800835c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <MX_WIFI_Socket_gethostbyname+0x84>
 8008366:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800836a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	f7f7 ff8c 	bl	800028c <strlen>
 8008374:	4603      	mov	r3, r0
 8008376:	2bfd      	cmp	r3, #253	; 0xfd
 8008378:	d904      	bls.n	8008384 <MX_WIFI_Socket_gethostbyname+0x8e>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 800837a:	f06f 0303 	mvn.w	r3, #3
 800837e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008382:	e064      	b.n	800844e <MX_WIFI_Socket_gethostbyname+0x158>
  }
  else
  {
    uint32_t msize;
    memset(&cp, 0, sizeof(cp));
 8008384:	f107 0320 	add.w	r3, r7, #32
 8008388:	22fd      	movs	r2, #253	; 0xfd
 800838a:	2100      	movs	r1, #0
 800838c:	4618      	mov	r0, r3
 800838e:	f00b fa14 	bl	80137ba <memset>
    msize = MIN(sizeof(cp.name), strlen(name) + 1);
 8008392:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008396:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	f7f7 ff76 	bl	800028c <strlen>
 80083a0:	4603      	mov	r3, r0
 80083a2:	3301      	adds	r3, #1
 80083a4:	2bfd      	cmp	r3, #253	; 0xfd
 80083a6:	d809      	bhi.n	80083bc <MX_WIFI_Socket_gethostbyname+0xc6>
 80083a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f7f7 ff6b 	bl	800028c <strlen>
 80083b6:	4603      	mov	r3, r0
 80083b8:	3301      	adds	r3, #1
 80083ba:	e000      	b.n	80083be <MX_WIFI_Socket_gethostbyname+0xc8>
 80083bc:	23fd      	movs	r3, #253	; 0xfd
 80083be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    memcpy(&(cp.name[0]), name, msize);
 80083c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80083ca:	f107 0020 	add.w	r0, r7, #32
 80083ce:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	f00b f9e4 	bl	80137a0 <memcpy>
    memset(&rp, 0, sizeof(rp));
 80083d8:	f107 0318 	add.w	r3, r7, #24
 80083dc:	2208      	movs	r2, #8
 80083de:	2100      	movs	r1, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f00b f9ea 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETHOSTBYNAME_CMD,
 80083e6:	f107 0218 	add.w	r2, r7, #24
 80083ea:	f107 0120 	add.w	r1, r7, #32
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	f107 0316 	add.w	r3, r7, #22
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	22fd      	movs	r2, #253	; 0xfd
 80083fe:	f240 2011 	movw	r0, #529	; 0x211
 8008402:	f7fe fb85 	bl	8006b10 <mipc_request>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d120      	bne.n	800844e <MX_WIFI_Socket_gethostbyname+0x158>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp.status == MIPC_CODE_SUCCESS)
 800840c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008410:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d119      	bne.n	800844e <MX_WIFI_Socket_gethostbyname+0x158>
      {
        addr_in.sin_addr.s_addr = rp.s_addr;
 800841a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800841e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        addr_in.sin_family = AF_INET;
 8008428:	2302      	movs	r3, #2
 800842a:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
        addr_in.sin_len = sizeof(addr_in);
 800842e:	2310      	movs	r3, #16
 8008430:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
        memcpy(addr, &addr_in, sizeof(struct sockaddr));
 8008434:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8008438:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800843c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008440:	2210      	movs	r2, #16
 8008442:	6818      	ldr	r0, [r3, #0]
 8008444:	f00b f9ac 	bl	80137a0 <memcpy>
        ret = MX_WIFI_STATUS_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      }
    }
  }
  return ret;
 800844e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
}
 8008452:	4618      	mov	r0, r3
 8008454:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <MX_WIFI_Socket_ping>:
  * @param  response: response time array of ping result
  * @retval Operation Status.
  */
int32_t MX_WIFI_Socket_ping(MX_WIFIObject_t *Obj, const char *hostname,
                            int32_t count, int32_t delay, int32_t response[])
{
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b0d9      	sub	sp, #356	; 0x164
 8008460:	af02      	add	r7, sp, #8
 8008462:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8008466:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 800846a:	6020      	str	r0, [r4, #0]
 800846c:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8008470:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8008474:	6001      	str	r1, [r0, #0]
 8008476:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800847a:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 800847e:	600a      	str	r2, [r1, #0]
 8008480:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8008484:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008488:	6013      	str	r3, [r2, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 800848a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800848e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  wifi_ping_cparams_t cp;
  int32_t ping_resp[1 + MX_WIFI_PING_MAX];
  wifi_ping_rparams_t *rp;
  uint16_t rp_size = sizeof(ping_resp);
 8008492:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008496:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800849a:	222c      	movs	r2, #44	; 0x2c
 800849c:	801a      	strh	r2, [r3, #0]
  int32_t i = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

  if ((NULL == Obj) || (NULL == hostname) || (count <= 0))
 80084a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80084a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00d      	beq.n	80084ce <MX_WIFI_Socket_ping+0x72>
 80084b2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80084b6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d006      	beq.n	80084ce <MX_WIFI_Socket_ping+0x72>
 80084c0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80084c4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dc04      	bgt.n	80084d8 <MX_WIFI_Socket_ping+0x7c>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80084ce:	f06f 0303 	mvn.w	r3, #3
 80084d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80084d6:	e084      	b.n	80085e2 <MX_WIFI_Socket_ping+0x186>
  }
  else
  {
    int32_t msize;
    memset(&cp, 0, sizeof(cp));
 80084d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084dc:	f240 1207 	movw	r2, #263	; 0x107
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f00b f969 	bl	80137ba <memset>
    msize = MIN(sizeof(cp.hostname), strlen(hostname) + 1);
 80084e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80084ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	f7f7 fecb 	bl	800028c <strlen>
 80084f6:	4603      	mov	r3, r0
 80084f8:	3301      	adds	r3, #1
 80084fa:	2bff      	cmp	r3, #255	; 0xff
 80084fc:	d809      	bhi.n	8008512 <MX_WIFI_Socket_ping+0xb6>
 80084fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008502:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	f7f7 fec0 	bl	800028c <strlen>
 800850c:	4603      	mov	r3, r0
 800850e:	3301      	adds	r3, #1
 8008510:	e000      	b.n	8008514 <MX_WIFI_Socket_ping+0xb8>
 8008512:	23ff      	movs	r3, #255	; 0xff
 8008514:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    memcpy(&(cp.hostname[0]), hostname, msize);
 8008518:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800851c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008520:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008524:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8008528:	6819      	ldr	r1, [r3, #0]
 800852a:	f00b f939 	bl	80137a0 <memcpy>
    cp.count = count;
 800852e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008532:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008536:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800853a:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	f8c3 20ff 	str.w	r2, [r3, #255]	; 0xff
    cp.delay_ms = delay;
 8008544:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008548:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800854c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8008550:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	f8c3 2103 	str.w	r2, [r3, #259]	; 0x103
    memset(ping_resp, 0, sizeof(ping_resp));
 800855a:	f107 0314 	add.w	r3, r7, #20
 800855e:	222c      	movs	r2, #44	; 0x2c
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f00b f929 	bl	80137ba <memset>
    rp = (wifi_ping_rparams_t *)&ping_resp;
 8008568:	f107 0314 	add.w	r3, r7, #20
 800856c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_WIFI_PING_CMD,
 8008570:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	f107 0312 	add.w	r3, r7, #18
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008584:	f240 1207 	movw	r2, #263	; 0x107
 8008588:	f240 100b 	movw	r0, #267	; 0x10b
 800858c:	f7fe fac0 	bl	8006b10 <mipc_request>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d125      	bne.n	80085e2 <MX_WIFI_Socket_ping+0x186>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (rp->num > 0)
 8008596:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	dd20      	ble.n	80085e2 <MX_WIFI_Socket_ping+0x186>
      {
        for (i = 0; i < rp->num; i++)
 80085a0:	2300      	movs	r3, #0
 80085a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80085a6:	e012      	b.n	80085ce <MX_WIFI_Socket_ping+0x172>
        {
          response[i] = rp->delay_ms[i];
 80085a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80085b2:	441a      	add	r2, r3
 80085b4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80085b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	6013      	str	r3, [r2, #0]
        for (i = 0; i < rp->num; i++)
 80085c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80085c8:	3301      	adds	r3, #1
 80085ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80085ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80085d8:	429a      	cmp	r2, r3
 80085da:	dbe5      	blt.n	80085a8 <MX_WIFI_Socket_ping+0x14c>
        }
        ret = MX_WIFI_STATUS_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      }
    }
  }
  return ret;
 80085e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd90      	pop	{r4, r7, pc}

080085f0 <MX_WIFI_Socket_getpeername>:
  * @param  addr: address buffer
  * @param  addrlen: size of address buffer
  * @retval get address of peer socket, return < 0 if failed.
  */
int32_t MX_WIFI_Socket_getpeername(MX_WIFIObject_t *Obj, int32_t sockfd, struct sockaddr *addr, uint32_t *addrlen)
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b090      	sub	sp, #64	; 0x40
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 80085fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008602:	637b      	str	r3, [r7, #52]	; 0x34
  socket_getpeername_cparams_t cp;
  socket_getpeername_rparams_t rp;
  uint16_t rp_size = sizeof(rp);
 8008604:	2318      	movs	r3, #24
 8008606:	82fb      	strh	r3, [r7, #22]

  if ((NULL == Obj) || (sockfd < 0) || (NULL == addr) || (NULL == addrlen) || (*addrlen <= 0))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00c      	beq.n	8008628 <MX_WIFI_Socket_getpeername+0x38>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	db09      	blt.n	8008628 <MX_WIFI_Socket_getpeername+0x38>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d006      	beq.n	8008628 <MX_WIFI_Socket_getpeername+0x38>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <MX_WIFI_Socket_getpeername+0x38>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d103      	bne.n	8008630 <MX_WIFI_Socket_getpeername+0x40>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 8008628:	f06f 0303 	mvn.w	r3, #3
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
 800862e:	e02c      	b.n	800868a <MX_WIFI_Socket_getpeername+0x9a>
  }
  else
  {
    cp.s = sockfd;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	633b      	str	r3, [r7, #48]	; 0x30
    memset(&rp, 0, sizeof(rp));
 8008634:	f107 0318 	add.w	r3, r7, #24
 8008638:	2218      	movs	r2, #24
 800863a:	2100      	movs	r1, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f00b f8bc 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETPEERNAME_CMD,
 8008642:	f107 0218 	add.w	r2, r7, #24
 8008646:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800864a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	f107 0316 	add.w	r3, r7, #22
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4613      	mov	r3, r2
 8008658:	2204      	movs	r2, #4
 800865a:	f44f 7004 	mov.w	r0, #528	; 0x210
 800865e:	f7fe fa57 	bl	8006b10 <mipc_request>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d110      	bne.n	800868a <MX_WIFI_Socket_getpeername+0x9a>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10d      	bne.n	800868a <MX_WIFI_Socket_getpeername+0x9a>
      {
        memcpy(addr, &(rp.name), sizeof(rp.name));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	461d      	mov	r5, r3
 8008672:	f107 041c 	add.w	r4, r7, #28
 8008676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008678:	6028      	str	r0, [r5, #0]
 800867a:	6069      	str	r1, [r5, #4]
 800867c:	60aa      	str	r2, [r5, #8]
 800867e:	60eb      	str	r3, [r5, #12]
        *addrlen = rp.namelen;
 8008680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
  }
  return ret;
 800868a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800868c:	4618      	mov	r0, r3
 800868e:	3738      	adds	r7, #56	; 0x38
 8008690:	46bd      	mov	sp, r7
 8008692:	bdb0      	pop	{r4, r5, r7, pc}

08008694 <MX_WIFI_Socket_getsockname>:
  * @param  addr: address buffer
  * @param  addrlen: size of address buffer
  * @retval get address of local socket, return < 0 if failed.
  */
int32_t MX_WIFI_Socket_getsockname(MX_WIFIObject_t *Obj, int32_t sockfd, struct sockaddr *addr, uint32_t *addrlen)
{
 8008694:	b5b0      	push	{r4, r5, r7, lr}
 8008696:	b090      	sub	sp, #64	; 0x40
 8008698:	af02      	add	r7, sp, #8
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
  int32_t ret = -1;
 80086a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086a6:	637b      	str	r3, [r7, #52]	; 0x34
  socket_getsockname_cparams_t cp;
  socket_getsockname_rparams_t rp;
  uint16_t rp_size = sizeof(rp);
 80086a8:	2318      	movs	r3, #24
 80086aa:	82fb      	strh	r3, [r7, #22]
  rp.status =  MIPC_CODE_ERROR;
 80086ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b0:	61bb      	str	r3, [r7, #24]

  if ((NULL == Obj) || (sockfd < 0) || (NULL == addr) || (NULL == addrlen) || (*addrlen <= 0))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <MX_WIFI_Socket_getsockname+0x3e>
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	db09      	blt.n	80086d2 <MX_WIFI_Socket_getsockname+0x3e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d006      	beq.n	80086d2 <MX_WIFI_Socket_getsockname+0x3e>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <MX_WIFI_Socket_getsockname+0x3e>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <MX_WIFI_Socket_getsockname+0x46>
  {
    ret = MX_WIFI_STATUS_PARAM_ERROR;
 80086d2:	f06f 0303 	mvn.w	r3, #3
 80086d6:	637b      	str	r3, [r7, #52]	; 0x34
 80086d8:	e02c      	b.n	8008734 <MX_WIFI_Socket_getsockname+0xa0>
  }
  else
  {
    cp.s = sockfd;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	633b      	str	r3, [r7, #48]	; 0x30
    memset(&rp, 0, sizeof(rp));
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	2218      	movs	r2, #24
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f00b f867 	bl	80137ba <memset>
    if (MIPC_CODE_SUCCESS == mipc_request(MIPC_API_SOCKET_GETSOCKNAME_CMD,
 80086ec:	f107 0218 	add.w	r2, r7, #24
 80086f0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80086f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	f107 0316 	add.w	r3, r7, #22
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	4613      	mov	r3, r2
 8008702:	2204      	movs	r2, #4
 8008704:	f240 200f 	movw	r0, #527	; 0x20f
 8008708:	f7fe fa02 	bl	8006b10 <mipc_request>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d110      	bne.n	8008734 <MX_WIFI_Socket_getsockname+0xa0>
                                          (uint8_t *)&cp, sizeof(cp),
                                          (uint8_t *)&rp, &rp_size,
                                          MX_WIFI_CMD_TIMEOUT))
    {
      if (MIPC_CODE_SUCCESS == rp.status)
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10d      	bne.n	8008734 <MX_WIFI_Socket_getsockname+0xa0>
      {
        memcpy(addr, &(rp.name), sizeof(rp.name));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	461d      	mov	r5, r3
 800871c:	f107 041c 	add.w	r4, r7, #28
 8008720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008722:	6028      	str	r0, [r5, #0]
 8008724:	6069      	str	r1, [r5, #4]
 8008726:	60aa      	str	r2, [r5, #8]
 8008728:	60eb      	str	r3, [r5, #12]
        *addrlen = rp.namelen;
 800872a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	601a      	str	r2, [r3, #0]
        ret = MX_WIFI_STATUS_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
  }
  return ret;
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008736:	4618      	mov	r0, r3
 8008738:	3738      	adds	r7, #56	; 0x38
 800873a:	46bd      	mov	sp, r7
 800873c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008740 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008744:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <SystemInit+0x68>)
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <SystemInit+0x68>)
 800874c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8008754:	4b15      	ldr	r3, [pc, #84]	; (80087ac <SystemInit+0x6c>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800875a:	4b14      	ldr	r3, [pc, #80]	; (80087ac <SystemInit+0x6c>)
 800875c:	2200      	movs	r2, #0
 800875e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8008760:	4b12      	ldr	r3, [pc, #72]	; (80087ac <SystemInit+0x6c>)
 8008762:	2200      	movs	r2, #0
 8008764:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8008766:	4b11      	ldr	r3, [pc, #68]	; (80087ac <SystemInit+0x6c>)
 8008768:	2200      	movs	r2, #0
 800876a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800876c:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <SystemInit+0x6c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0e      	ldr	r2, [pc, #56]	; (80087ac <SystemInit+0x6c>)
 8008772:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008776:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800877a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800877c:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <SystemInit+0x6c>)
 800877e:	2200      	movs	r2, #0
 8008780:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <SystemInit+0x6c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a09      	ldr	r2, [pc, #36]	; (80087ac <SystemInit+0x6c>)
 8008788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800878c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <SystemInit+0x6c>)
 8008790:	2200      	movs	r2, #0
 8008792:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <SystemInit+0x68>)
 8008796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800879a:	609a      	str	r2, [r3, #8]
  #endif
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	e000ed00 	.word	0xe000ed00
 80087ac:	46020c00 	.word	0x46020c00

080087b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087b4:	2003      	movs	r0, #3
 80087b6:	f000 f96b 	bl	8008a90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80087ba:	f004 f8dd 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 80087be:	4602      	mov	r2, r0
 80087c0:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <HAL_Init+0x40>)
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	490a      	ldr	r1, [pc, #40]	; (80087f4 <HAL_Init+0x44>)
 80087ca:	5ccb      	ldrb	r3, [r1, r3]
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
 80087d0:	4a09      	ldr	r2, [pc, #36]	; (80087f8 <HAL_Init+0x48>)
 80087d2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80087d4:	2000      	movs	r0, #0
 80087d6:	f000 f811 	bl	80087fc <HAL_InitTick>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e002      	b.n	80087ea <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80087e4:	f7f8 fd0c 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	46020c00 	.word	0x46020c00
 80087f4:	0818ab00 	.word	0x0818ab00
 80087f8:	200000e4 	.word	0x200000e4

080087fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8008804:	4b15      	ldr	r3, [pc, #84]	; (800885c <HAL_InitTick+0x60>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e021      	b.n	8008854 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008810:	4b13      	ldr	r3, [pc, #76]	; (8008860 <HAL_InitTick+0x64>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	4b11      	ldr	r3, [pc, #68]	; (800885c <HAL_InitTick+0x60>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	4619      	mov	r1, r3
 800881a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800881e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008822:	fbb2 f3f3 	udiv	r3, r2, r3
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f965 	bl	8008af6 <HAL_SYSTICK_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e00e      	b.n	8008854 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b0f      	cmp	r3, #15
 800883a:	d80a      	bhi.n	8008852 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800883c:	2200      	movs	r2, #0
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008844:	f000 f92f 	bl	8008aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008848:	4a06      	ldr	r2, [pc, #24]	; (8008864 <HAL_InitTick+0x68>)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	200000ec 	.word	0x200000ec
 8008860:	200000e4 	.word	0x200000e4
 8008864:	200000e8 	.word	0x200000e8

08008868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <HAL_IncTick+0x20>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	4b06      	ldr	r3, [pc, #24]	; (800888c <HAL_IncTick+0x24>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4413      	add	r3, r2
 8008878:	4a04      	ldr	r2, [pc, #16]	; (800888c <HAL_IncTick+0x24>)
 800887a:	6013      	str	r3, [r2, #0]
}
 800887c:	bf00      	nop
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	200000ec 	.word	0x200000ec
 800888c:	200031c0 	.word	0x200031c0

08008890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008890:	b480      	push	{r7}
 8008892:	af00      	add	r7, sp, #0
  return uwTick;
 8008894:	4b03      	ldr	r3, [pc, #12]	; (80088a4 <HAL_GetTick+0x14>)
 8008896:	681b      	ldr	r3, [r3, #0]
}
 8008898:	4618      	mov	r0, r3
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	200031c0 	.word	0x200031c0

080088a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088b0:	f7ff ffee 	bl	8008890 <HAL_GetTick>
 80088b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088c0:	d005      	beq.n	80088ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80088c2:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <HAL_Delay+0x44>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80088ce:	bf00      	nop
 80088d0:	f7ff ffde 	bl	8008890 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d8f7      	bhi.n	80088d0 <HAL_Delay+0x28>
  {
  }
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200000ec 	.word	0x200000ec

080088f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008900:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <__NVIC_SetPriorityGrouping+0x44>)
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800890c:	4013      	ands	r3, r2
 800890e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800891c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008922:	4a04      	ldr	r2, [pc, #16]	; (8008934 <__NVIC_SetPriorityGrouping+0x44>)
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	60d3      	str	r3, [r2, #12]
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	e000ed00 	.word	0xe000ed00

08008938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <__NVIC_GetPriorityGrouping+0x18>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	0a1b      	lsrs	r3, r3, #8
 8008942:	f003 0307 	and.w	r3, r3, #7
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	e000ed00 	.word	0xe000ed00

08008954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800895e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008962:	2b00      	cmp	r3, #0
 8008964:	db0b      	blt.n	800897e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	f003 021f 	and.w	r2, r3, #31
 800896c:	4907      	ldr	r1, [pc, #28]	; (800898c <__NVIC_EnableIRQ+0x38>)
 800896e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	2001      	movs	r0, #1
 8008976:	fa00 f202 	lsl.w	r2, r0, r2
 800897a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	e000e100 	.word	0xe000e100

08008990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800899c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	db0a      	blt.n	80089ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	490c      	ldr	r1, [pc, #48]	; (80089dc <__NVIC_SetPriority+0x4c>)
 80089aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ae:	0112      	lsls	r2, r2, #4
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	440b      	add	r3, r1
 80089b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089b8:	e00a      	b.n	80089d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	4908      	ldr	r1, [pc, #32]	; (80089e0 <__NVIC_SetPriority+0x50>)
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	3b04      	subs	r3, #4
 80089c8:	0112      	lsls	r2, r2, #4
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	440b      	add	r3, r1
 80089ce:	761a      	strb	r2, [r3, #24]
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	e000e100 	.word	0xe000e100
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b089      	sub	sp, #36	; 0x24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f1c3 0307 	rsb	r3, r3, #7
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	bf28      	it	cs
 8008a02:	2304      	movcs	r3, #4
 8008a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	2b06      	cmp	r3, #6
 8008a0c:	d902      	bls.n	8008a14 <NVIC_EncodePriority+0x30>
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	3b03      	subs	r3, #3
 8008a12:	e000      	b.n	8008a16 <NVIC_EncodePriority+0x32>
 8008a14:	2300      	movs	r3, #0
 8008a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a22:	43da      	mvns	r2, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	401a      	ands	r2, r3
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	fa01 f303 	lsl.w	r3, r1, r3
 8008a36:	43d9      	mvns	r1, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a3c:	4313      	orrs	r3, r2
         );
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3724      	adds	r7, #36	; 0x24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
	...

08008a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a5c:	d301      	bcc.n	8008a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e00f      	b.n	8008a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a62:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <SysTick_Config+0x40>)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a6a:	210f      	movs	r1, #15
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a70:	f7ff ff8e 	bl	8008990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <SysTick_Config+0x40>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a7a:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <SysTick_Config+0x40>)
 8008a7c:	2207      	movs	r2, #7
 8008a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	e000e010 	.word	0xe000e010

08008a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff ff29 	bl	80088f0 <__NVIC_SetPriorityGrouping>
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	4603      	mov	r3, r0
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008ab4:	f7ff ff40 	bl	8008938 <__NVIC_GetPriorityGrouping>
 8008ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	6978      	ldr	r0, [r7, #20]
 8008ac0:	f7ff ff90 	bl	80089e4 <NVIC_EncodePriority>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff ff5f 	bl	8008990 <__NVIC_SetPriority>
}
 8008ad2:	bf00      	nop
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ff33 	bl	8008954 <__NVIC_EnableIRQ>
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff ffa4 	bl	8008a4c <SysTick_Config>
 8008b04:	4603      	mov	r3, r0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d844      	bhi.n	8008ba8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b47 	.word	0x08008b47
 8008b28:	08008b65 	.word	0x08008b65
 8008b2c:	08008b87 	.word	0x08008b87
 8008b30:	08008ba9 	.word	0x08008ba9
 8008b34:	08008b39 	.word	0x08008b39
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008b38:	4b1f      	ldr	r3, [pc, #124]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1e      	ldr	r2, [pc, #120]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b3e:	f043 0304 	orr.w	r3, r3, #4
 8008b42:	6013      	str	r3, [r2, #0]
      break;
 8008b44:	e031      	b.n	8008baa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008b46:	4b1c      	ldr	r3, [pc, #112]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a1b      	ldr	r2, [pc, #108]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b4c:	f023 0304 	bic.w	r3, r3, #4
 8008b50:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8008b52:	4b1a      	ldr	r3, [pc, #104]	; (8008bbc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b58:	4a18      	ldr	r2, [pc, #96]	; (8008bbc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008b5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 8008b62:	e022      	b.n	8008baa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008b64:	4b14      	ldr	r3, [pc, #80]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a13      	ldr	r2, [pc, #76]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b6a:	f023 0304 	bic.w	r3, r3, #4
 8008b6e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8008b70:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008b7a:	4a10      	ldr	r2, [pc, #64]	; (8008bbc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 8008b84:	e011      	b.n	8008baa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a0b      	ldr	r2, [pc, #44]	; (8008bb8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008b8c:	f023 0304 	bic.w	r3, r3, #4
 8008b90:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8008b92:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b98:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008b9c:	4a07      	ldr	r2, [pc, #28]	; (8008bbc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 8008ba6:	e000      	b.n	8008baa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8008ba8:	bf00      	nop
  }
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	e000e010 	.word	0xe000e010
 8008bbc:	46020c00 	.word	0x46020c00

08008bc0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8008bc8:	f7ff fe62 	bl	8008890 <HAL_GetTick>
 8008bcc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e0e0      	b.n	8008d9a <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a6f      	ldr	r2, [pc, #444]	; (8008da4 <HAL_DMA_Init+0x1e4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	f000 809f 	beq.w	8008d2a <HAL_DMA_Init+0x16a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a6d      	ldr	r2, [pc, #436]	; (8008da8 <HAL_DMA_Init+0x1e8>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f000 8099 	beq.w	8008d2a <HAL_DMA_Init+0x16a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a6b      	ldr	r2, [pc, #428]	; (8008dac <HAL_DMA_Init+0x1ec>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	f000 8093 	beq.w	8008d2a <HAL_DMA_Init+0x16a>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a69      	ldr	r2, [pc, #420]	; (8008db0 <HAL_DMA_Init+0x1f0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	f000 808d 	beq.w	8008d2a <HAL_DMA_Init+0x16a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a67      	ldr	r2, [pc, #412]	; (8008db4 <HAL_DMA_Init+0x1f4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	f000 8087 	beq.w	8008d2a <HAL_DMA_Init+0x16a>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a65      	ldr	r2, [pc, #404]	; (8008db8 <HAL_DMA_Init+0x1f8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	f000 8081 	beq.w	8008d2a <HAL_DMA_Init+0x16a>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a63      	ldr	r2, [pc, #396]	; (8008dbc <HAL_DMA_Init+0x1fc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d07b      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a62      	ldr	r2, [pc, #392]	; (8008dc0 <HAL_DMA_Init+0x200>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d076      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a60      	ldr	r2, [pc, #384]	; (8008dc4 <HAL_DMA_Init+0x204>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d071      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a5f      	ldr	r2, [pc, #380]	; (8008dc8 <HAL_DMA_Init+0x208>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d06c      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a5d      	ldr	r2, [pc, #372]	; (8008dcc <HAL_DMA_Init+0x20c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d067      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a5c      	ldr	r2, [pc, #368]	; (8008dd0 <HAL_DMA_Init+0x210>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d062      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a5a      	ldr	r2, [pc, #360]	; (8008dd4 <HAL_DMA_Init+0x214>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d05d      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a59      	ldr	r2, [pc, #356]	; (8008dd8 <HAL_DMA_Init+0x218>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d058      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a57      	ldr	r2, [pc, #348]	; (8008ddc <HAL_DMA_Init+0x21c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d053      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a56      	ldr	r2, [pc, #344]	; (8008de0 <HAL_DMA_Init+0x220>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d04e      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a54      	ldr	r2, [pc, #336]	; (8008de4 <HAL_DMA_Init+0x224>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d049      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a53      	ldr	r2, [pc, #332]	; (8008de8 <HAL_DMA_Init+0x228>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d044      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a51      	ldr	r2, [pc, #324]	; (8008dec <HAL_DMA_Init+0x22c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d03f      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a50      	ldr	r2, [pc, #320]	; (8008df0 <HAL_DMA_Init+0x230>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d03a      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a4e      	ldr	r2, [pc, #312]	; (8008df4 <HAL_DMA_Init+0x234>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d035      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a4d      	ldr	r2, [pc, #308]	; (8008df8 <HAL_DMA_Init+0x238>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d030      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a4b      	ldr	r2, [pc, #300]	; (8008dfc <HAL_DMA_Init+0x23c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d02b      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a4a      	ldr	r2, [pc, #296]	; (8008e00 <HAL_DMA_Init+0x240>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d026      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a48      	ldr	r2, [pc, #288]	; (8008e04 <HAL_DMA_Init+0x244>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d021      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a47      	ldr	r2, [pc, #284]	; (8008e08 <HAL_DMA_Init+0x248>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d01c      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a45      	ldr	r2, [pc, #276]	; (8008e0c <HAL_DMA_Init+0x24c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d017      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a44      	ldr	r2, [pc, #272]	; (8008e10 <HAL_DMA_Init+0x250>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d012      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a42      	ldr	r2, [pc, #264]	; (8008e14 <HAL_DMA_Init+0x254>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00d      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a41      	ldr	r2, [pc, #260]	; (8008e18 <HAL_DMA_Init+0x258>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d008      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a3f      	ldr	r2, [pc, #252]	; (8008e1c <HAL_DMA_Init+0x25c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <HAL_DMA_Init+0x16a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a3e      	ldr	r2, [pc, #248]	; (8008e20 <HAL_DMA_Init+0x260>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	695a      	ldr	r2, [r3, #20]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0206 	orr.w	r2, r2, #6
 8008d4a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008d4c:	e00f      	b.n	8008d6e <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008d4e:	f7ff fd9f 	bl	8008890 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	2b05      	cmp	r3, #5
 8008d5a:	d908      	bls.n	8008d6e <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2203      	movs	r2, #3
 8008d66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e015      	b.n	8008d9a <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e8      	bne.n	8008d4e <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa77 	bl	8009270 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40020050 	.word	0x40020050
 8008da8:	50020050 	.word	0x50020050
 8008dac:	400200d0 	.word	0x400200d0
 8008db0:	500200d0 	.word	0x500200d0
 8008db4:	40020150 	.word	0x40020150
 8008db8:	50020150 	.word	0x50020150
 8008dbc:	400201d0 	.word	0x400201d0
 8008dc0:	500201d0 	.word	0x500201d0
 8008dc4:	40020250 	.word	0x40020250
 8008dc8:	50020250 	.word	0x50020250
 8008dcc:	400202d0 	.word	0x400202d0
 8008dd0:	500202d0 	.word	0x500202d0
 8008dd4:	40020350 	.word	0x40020350
 8008dd8:	50020350 	.word	0x50020350
 8008ddc:	400203d0 	.word	0x400203d0
 8008de0:	500203d0 	.word	0x500203d0
 8008de4:	40020450 	.word	0x40020450
 8008de8:	50020450 	.word	0x50020450
 8008dec:	400204d0 	.word	0x400204d0
 8008df0:	500204d0 	.word	0x500204d0
 8008df4:	40020550 	.word	0x40020550
 8008df8:	50020550 	.word	0x50020550
 8008dfc:	400205d0 	.word	0x400205d0
 8008e00:	500205d0 	.word	0x500205d0
 8008e04:	40020650 	.word	0x40020650
 8008e08:	50020650 	.word	0x50020650
 8008e0c:	400206d0 	.word	0x400206d0
 8008e10:	500206d0 	.word	0x500206d0
 8008e14:	40020750 	.word	0x40020750
 8008e18:	50020750 	.word	0x50020750
 8008e1c:	400207d0 	.word	0x400207d0
 8008e20:	500207d0 	.word	0x500207d0

08008e24 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8008e2c:	f7ff fd30 	bl	8008890 <HAL_GetTick>
 8008e30:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e06b      	b.n	8008f14 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d008      	beq.n	8008e5a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e05c      	b.n	8008f14 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	695a      	ldr	r2, [r3, #20]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0204 	orr.w	r2, r2, #4
 8008e68:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8008e72:	e020      	b.n	8008eb6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008e74:	f7ff fd0c 	bl	8008890 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b05      	cmp	r3, #5
 8008e80:	d919      	bls.n	8008eb6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e86:	f043 0210 	orr.w	r2, r3, #16
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2203      	movs	r2, #3
 8008e92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e02e      	b.n	8008f14 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0d7      	beq.n	8008e74 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	695a      	ldr	r2, [r3, #20]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0202 	orr.w	r2, r2, #2
 8008ed2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2204      	movs	r2, #4
 8008ed8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008ee4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d007      	beq.n	8008f0a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008efe:	2201      	movs	r2, #1
 8008f00:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2200      	movs	r2, #0
 8008f08:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e019      	b.n	8008f62 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d004      	beq.n	8008f44 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e00e      	b.n	8008f62 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2204      	movs	r2, #4
 8008f48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f5a:	f043 0304 	orr.w	r3, r3, #4
 8008f5e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008f7e:	f023 030f 	bic.w	r3, r3, #15
 8008f82:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f8c:	3b50      	subs	r3, #80	; 0x50
 8008f8e:	09db      	lsrs	r3, r3, #7
 8008f90:	f003 031f 	and.w	r3, r3, #31
 8008f94:	2201      	movs	r2, #1
 8008f96:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9a:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8150 	beq.w	800924a <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d011      	beq.n	8008fdc <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fce:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd4:	f043 0201 	orr.w	r2, r3, #1
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00a      	beq.n	800900e <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009000:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009006:	f043 0202 	orr.w	r2, r3, #2
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d011      	beq.n	8009040 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009032:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	f043 0204 	orr.w	r2, r3, #4
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d011      	beq.n	8009072 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009064:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906a:	f043 0208 	orr.w	r2, r3, #8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800907c:	2b00      	cmp	r3, #0
 800907e:	d013      	beq.n	80090a8 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00c      	beq.n	80090a8 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009096:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d055      	beq.n	8009162 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d04e      	beq.n	8009162 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80090cc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	d137      	bne.n	800914a <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	695a      	ldr	r2, [r3, #20]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090e8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	695a      	ldr	r2, [r3, #20]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f042 0202 	orr.w	r2, r2, #2
 80090f8:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2203      	movs	r2, #3
 800910c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009110:	e003      	b.n	800911a <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800912a:	2201      	movs	r2, #1
 800912c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 8087 	beq.w	800924e <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	4798      	blx	r3
        }

        return;
 8009148:	e081      	b.n	800924e <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2205      	movs	r2, #5
 800914e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916c:	2b00      	cmp	r3, #0
 800916e:	d039      	beq.n	80091e4 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917a:	2b00      	cmp	r3, #0
 800917c:	d032      	beq.n	80091e4 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009186:	2b00      	cmp	r3, #0
 8009188:	d012      	beq.n	80091b0 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d116      	bne.n	80091c2 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919a:	2b00      	cmp	r3, #0
 800919c:	d111      	bne.n	80091c2 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091aa:	2201      	movs	r2, #1
 80091ac:	731a      	strb	r2, [r3, #12]
 80091ae:	e008      	b.n	80091c2 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80091ca:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d031      	beq.n	8009250 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695a      	ldr	r2, [r3, #20]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0202 	orr.w	r2, r2, #2
 80091fa:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d004      	beq.n	8009214 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2203      	movs	r2, #3
 800920e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009212:	e003      	b.n	800921c <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800922c:	2201      	movs	r2, #1
 800922e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	4798      	blx	r3
 8009248:	e002      	b.n	8009250 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800924a:	bf00      	nop
 800924c:	e000      	b.n	8009250 <HAL_DMA_IRQHandler+0x2e2>
        return;
 800924e:	bf00      	nop
    }
  }
}
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	430a      	orrs	r2, r1
 8009290:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695a      	ldr	r2, [r3, #20]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a53      	ldr	r2, [pc, #332]	; (80093fc <DMA_Init+0x18c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	f000 80a0 	beq.w	80093f6 <DMA_Init+0x186>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a51      	ldr	r2, [pc, #324]	; (8009400 <DMA_Init+0x190>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	f000 809a 	beq.w	80093f6 <DMA_Init+0x186>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a4f      	ldr	r2, [pc, #316]	; (8009404 <DMA_Init+0x194>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	f000 8094 	beq.w	80093f6 <DMA_Init+0x186>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a4d      	ldr	r2, [pc, #308]	; (8009408 <DMA_Init+0x198>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	f000 808e 	beq.w	80093f6 <DMA_Init+0x186>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a4b      	ldr	r2, [pc, #300]	; (800940c <DMA_Init+0x19c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	f000 8088 	beq.w	80093f6 <DMA_Init+0x186>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a49      	ldr	r2, [pc, #292]	; (8009410 <DMA_Init+0x1a0>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	f000 8082 	beq.w	80093f6 <DMA_Init+0x186>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a47      	ldr	r2, [pc, #284]	; (8009414 <DMA_Init+0x1a4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d07c      	beq.n	80093f6 <DMA_Init+0x186>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a45      	ldr	r2, [pc, #276]	; (8009418 <DMA_Init+0x1a8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d077      	beq.n	80093f6 <DMA_Init+0x186>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a44      	ldr	r2, [pc, #272]	; (800941c <DMA_Init+0x1ac>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d072      	beq.n	80093f6 <DMA_Init+0x186>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a42      	ldr	r2, [pc, #264]	; (8009420 <DMA_Init+0x1b0>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d06d      	beq.n	80093f6 <DMA_Init+0x186>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a41      	ldr	r2, [pc, #260]	; (8009424 <DMA_Init+0x1b4>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d068      	beq.n	80093f6 <DMA_Init+0x186>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a3f      	ldr	r2, [pc, #252]	; (8009428 <DMA_Init+0x1b8>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d063      	beq.n	80093f6 <DMA_Init+0x186>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a3e      	ldr	r2, [pc, #248]	; (800942c <DMA_Init+0x1bc>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d05e      	beq.n	80093f6 <DMA_Init+0x186>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a3c      	ldr	r2, [pc, #240]	; (8009430 <DMA_Init+0x1c0>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d059      	beq.n	80093f6 <DMA_Init+0x186>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a3b      	ldr	r2, [pc, #236]	; (8009434 <DMA_Init+0x1c4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d054      	beq.n	80093f6 <DMA_Init+0x186>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a39      	ldr	r2, [pc, #228]	; (8009438 <DMA_Init+0x1c8>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d04f      	beq.n	80093f6 <DMA_Init+0x186>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a38      	ldr	r2, [pc, #224]	; (800943c <DMA_Init+0x1cc>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d04a      	beq.n	80093f6 <DMA_Init+0x186>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a36      	ldr	r2, [pc, #216]	; (8009440 <DMA_Init+0x1d0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d045      	beq.n	80093f6 <DMA_Init+0x186>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a35      	ldr	r2, [pc, #212]	; (8009444 <DMA_Init+0x1d4>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d040      	beq.n	80093f6 <DMA_Init+0x186>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a33      	ldr	r2, [pc, #204]	; (8009448 <DMA_Init+0x1d8>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d03b      	beq.n	80093f6 <DMA_Init+0x186>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a32      	ldr	r2, [pc, #200]	; (800944c <DMA_Init+0x1dc>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d036      	beq.n	80093f6 <DMA_Init+0x186>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a30      	ldr	r2, [pc, #192]	; (8009450 <DMA_Init+0x1e0>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d031      	beq.n	80093f6 <DMA_Init+0x186>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a2f      	ldr	r2, [pc, #188]	; (8009454 <DMA_Init+0x1e4>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d02c      	beq.n	80093f6 <DMA_Init+0x186>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a2d      	ldr	r2, [pc, #180]	; (8009458 <DMA_Init+0x1e8>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d027      	beq.n	80093f6 <DMA_Init+0x186>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a2c      	ldr	r2, [pc, #176]	; (800945c <DMA_Init+0x1ec>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d022      	beq.n	80093f6 <DMA_Init+0x186>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a2a      	ldr	r2, [pc, #168]	; (8009460 <DMA_Init+0x1f0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d01d      	beq.n	80093f6 <DMA_Init+0x186>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a29      	ldr	r2, [pc, #164]	; (8009464 <DMA_Init+0x1f4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d018      	beq.n	80093f6 <DMA_Init+0x186>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a27      	ldr	r2, [pc, #156]	; (8009468 <DMA_Init+0x1f8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <DMA_Init+0x186>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a26      	ldr	r2, [pc, #152]	; (800946c <DMA_Init+0x1fc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00e      	beq.n	80093f6 <DMA_Init+0x186>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a24      	ldr	r2, [pc, #144]	; (8009470 <DMA_Init+0x200>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d009      	beq.n	80093f6 <DMA_Init+0x186>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a23      	ldr	r2, [pc, #140]	; (8009474 <DMA_Init+0x204>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d004      	beq.n	80093f6 <DMA_Init+0x186>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a21      	ldr	r2, [pc, #132]	; (8009478 <DMA_Init+0x208>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d142      	bne.n	800947c <DMA_Init+0x20c>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e041      	b.n	800947e <DMA_Init+0x20e>
 80093fa:	bf00      	nop
 80093fc:	40020050 	.word	0x40020050
 8009400:	50020050 	.word	0x50020050
 8009404:	400200d0 	.word	0x400200d0
 8009408:	500200d0 	.word	0x500200d0
 800940c:	40020150 	.word	0x40020150
 8009410:	50020150 	.word	0x50020150
 8009414:	400201d0 	.word	0x400201d0
 8009418:	500201d0 	.word	0x500201d0
 800941c:	40020250 	.word	0x40020250
 8009420:	50020250 	.word	0x50020250
 8009424:	400202d0 	.word	0x400202d0
 8009428:	500202d0 	.word	0x500202d0
 800942c:	40020350 	.word	0x40020350
 8009430:	50020350 	.word	0x50020350
 8009434:	400203d0 	.word	0x400203d0
 8009438:	500203d0 	.word	0x500203d0
 800943c:	40020450 	.word	0x40020450
 8009440:	50020450 	.word	0x50020450
 8009444:	400204d0 	.word	0x400204d0
 8009448:	500204d0 	.word	0x500204d0
 800944c:	40020550 	.word	0x40020550
 8009450:	50020550 	.word	0x50020550
 8009454:	400205d0 	.word	0x400205d0
 8009458:	500205d0 	.word	0x500205d0
 800945c:	40020650 	.word	0x40020650
 8009460:	50020650 	.word	0x50020650
 8009464:	400206d0 	.word	0x400206d0
 8009468:	500206d0 	.word	0x500206d0
 800946c:	40020750 	.word	0x40020750
 8009470:	50020750 	.word	0x50020750
 8009474:	400207d0 	.word	0x400207d0
 8009478:	500207d0 	.word	0x500207d0
 800947c:	2300      	movs	r3, #0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d012      	beq.n	80094a8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	3b01      	subs	r3, #1
 800948c:	051b      	lsls	r3, r3, #20
 800948e:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009492:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	3b01      	subs	r3, #1
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80094a0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094da:	f040 80b0 	bne.w	800963e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a82      	ldr	r2, [pc, #520]	; (80096ec <DMA_Init+0x47c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	f000 80a0 	beq.w	800962a <DMA_Init+0x3ba>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a80      	ldr	r2, [pc, #512]	; (80096f0 <DMA_Init+0x480>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	f000 809a 	beq.w	800962a <DMA_Init+0x3ba>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a7e      	ldr	r2, [pc, #504]	; (80096f4 <DMA_Init+0x484>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	f000 8094 	beq.w	800962a <DMA_Init+0x3ba>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a7c      	ldr	r2, [pc, #496]	; (80096f8 <DMA_Init+0x488>)
 8009508:	4293      	cmp	r3, r2
 800950a:	f000 808e 	beq.w	800962a <DMA_Init+0x3ba>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a7a      	ldr	r2, [pc, #488]	; (80096fc <DMA_Init+0x48c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	f000 8088 	beq.w	800962a <DMA_Init+0x3ba>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a78      	ldr	r2, [pc, #480]	; (8009700 <DMA_Init+0x490>)
 8009520:	4293      	cmp	r3, r2
 8009522:	f000 8082 	beq.w	800962a <DMA_Init+0x3ba>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a76      	ldr	r2, [pc, #472]	; (8009704 <DMA_Init+0x494>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d07c      	beq.n	800962a <DMA_Init+0x3ba>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a74      	ldr	r2, [pc, #464]	; (8009708 <DMA_Init+0x498>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d077      	beq.n	800962a <DMA_Init+0x3ba>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a73      	ldr	r2, [pc, #460]	; (800970c <DMA_Init+0x49c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d072      	beq.n	800962a <DMA_Init+0x3ba>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a71      	ldr	r2, [pc, #452]	; (8009710 <DMA_Init+0x4a0>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d06d      	beq.n	800962a <DMA_Init+0x3ba>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a70      	ldr	r2, [pc, #448]	; (8009714 <DMA_Init+0x4a4>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d068      	beq.n	800962a <DMA_Init+0x3ba>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a6e      	ldr	r2, [pc, #440]	; (8009718 <DMA_Init+0x4a8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d063      	beq.n	800962a <DMA_Init+0x3ba>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a6d      	ldr	r2, [pc, #436]	; (800971c <DMA_Init+0x4ac>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d05e      	beq.n	800962a <DMA_Init+0x3ba>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a6b      	ldr	r2, [pc, #428]	; (8009720 <DMA_Init+0x4b0>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d059      	beq.n	800962a <DMA_Init+0x3ba>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a6a      	ldr	r2, [pc, #424]	; (8009724 <DMA_Init+0x4b4>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d054      	beq.n	800962a <DMA_Init+0x3ba>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a68      	ldr	r2, [pc, #416]	; (8009728 <DMA_Init+0x4b8>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d04f      	beq.n	800962a <DMA_Init+0x3ba>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a67      	ldr	r2, [pc, #412]	; (800972c <DMA_Init+0x4bc>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d04a      	beq.n	800962a <DMA_Init+0x3ba>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a65      	ldr	r2, [pc, #404]	; (8009730 <DMA_Init+0x4c0>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d045      	beq.n	800962a <DMA_Init+0x3ba>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a64      	ldr	r2, [pc, #400]	; (8009734 <DMA_Init+0x4c4>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d040      	beq.n	800962a <DMA_Init+0x3ba>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a62      	ldr	r2, [pc, #392]	; (8009738 <DMA_Init+0x4c8>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d03b      	beq.n	800962a <DMA_Init+0x3ba>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a61      	ldr	r2, [pc, #388]	; (800973c <DMA_Init+0x4cc>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d036      	beq.n	800962a <DMA_Init+0x3ba>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a5f      	ldr	r2, [pc, #380]	; (8009740 <DMA_Init+0x4d0>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d031      	beq.n	800962a <DMA_Init+0x3ba>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a5e      	ldr	r2, [pc, #376]	; (8009744 <DMA_Init+0x4d4>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d02c      	beq.n	800962a <DMA_Init+0x3ba>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a5c      	ldr	r2, [pc, #368]	; (8009748 <DMA_Init+0x4d8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d027      	beq.n	800962a <DMA_Init+0x3ba>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a5b      	ldr	r2, [pc, #364]	; (800974c <DMA_Init+0x4dc>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d022      	beq.n	800962a <DMA_Init+0x3ba>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a59      	ldr	r2, [pc, #356]	; (8009750 <DMA_Init+0x4e0>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d01d      	beq.n	800962a <DMA_Init+0x3ba>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a58      	ldr	r2, [pc, #352]	; (8009754 <DMA_Init+0x4e4>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d018      	beq.n	800962a <DMA_Init+0x3ba>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a56      	ldr	r2, [pc, #344]	; (8009758 <DMA_Init+0x4e8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d013      	beq.n	800962a <DMA_Init+0x3ba>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a55      	ldr	r2, [pc, #340]	; (800975c <DMA_Init+0x4ec>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d00e      	beq.n	800962a <DMA_Init+0x3ba>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a53      	ldr	r2, [pc, #332]	; (8009760 <DMA_Init+0x4f0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d009      	beq.n	800962a <DMA_Init+0x3ba>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a52      	ldr	r2, [pc, #328]	; (8009764 <DMA_Init+0x4f4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d004      	beq.n	800962a <DMA_Init+0x3ba>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a50      	ldr	r2, [pc, #320]	; (8009768 <DMA_Init+0x4f8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d101      	bne.n	800962e <DMA_Init+0x3be>
 800962a:	2301      	movs	r3, #1
 800962c:	e000      	b.n	8009630 <DMA_Init+0x3c0>
 800962e:	2300      	movs	r3, #0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00d      	beq.n	8009650 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	e008      	b.n	8009650 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009646:	d103      	bne.n	8009650 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800964e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009656:	4b45      	ldr	r3, [pc, #276]	; (800976c <DMA_Init+0x4fc>)
 8009658:	4013      	ands	r3, r2
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6812      	ldr	r2, [r2, #0]
 800965e:	68f9      	ldr	r1, [r7, #12]
 8009660:	430b      	orrs	r3, r1
 8009662:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2200      	movs	r2, #0
 800966a:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a36      	ldr	r2, [pc, #216]	; (800974c <DMA_Init+0x4dc>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d022      	beq.n	80096bc <DMA_Init+0x44c>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a35      	ldr	r2, [pc, #212]	; (8009750 <DMA_Init+0x4e0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d01d      	beq.n	80096bc <DMA_Init+0x44c>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a33      	ldr	r2, [pc, #204]	; (8009754 <DMA_Init+0x4e4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d018      	beq.n	80096bc <DMA_Init+0x44c>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a32      	ldr	r2, [pc, #200]	; (8009758 <DMA_Init+0x4e8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d013      	beq.n	80096bc <DMA_Init+0x44c>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a30      	ldr	r2, [pc, #192]	; (800975c <DMA_Init+0x4ec>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d00e      	beq.n	80096bc <DMA_Init+0x44c>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a2f      	ldr	r2, [pc, #188]	; (8009760 <DMA_Init+0x4f0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d009      	beq.n	80096bc <DMA_Init+0x44c>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a2d      	ldr	r2, [pc, #180]	; (8009764 <DMA_Init+0x4f4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d004      	beq.n	80096bc <DMA_Init+0x44c>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a2c      	ldr	r2, [pc, #176]	; (8009768 <DMA_Init+0x4f8>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d101      	bne.n	80096c0 <DMA_Init+0x450>
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <DMA_Init+0x452>
 80096c0:	2300      	movs	r3, #0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d007      	beq.n	80096d6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2200      	movs	r2, #0
 80096d4:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2200      	movs	r2, #0
 80096dc:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40020050 	.word	0x40020050
 80096f0:	50020050 	.word	0x50020050
 80096f4:	400200d0 	.word	0x400200d0
 80096f8:	500200d0 	.word	0x500200d0
 80096fc:	40020150 	.word	0x40020150
 8009700:	50020150 	.word	0x50020150
 8009704:	400201d0 	.word	0x400201d0
 8009708:	500201d0 	.word	0x500201d0
 800970c:	40020250 	.word	0x40020250
 8009710:	50020250 	.word	0x50020250
 8009714:	400202d0 	.word	0x400202d0
 8009718:	500202d0 	.word	0x500202d0
 800971c:	40020350 	.word	0x40020350
 8009720:	50020350 	.word	0x50020350
 8009724:	400203d0 	.word	0x400203d0
 8009728:	500203d0 	.word	0x500203d0
 800972c:	40020450 	.word	0x40020450
 8009730:	50020450 	.word	0x50020450
 8009734:	400204d0 	.word	0x400204d0
 8009738:	500204d0 	.word	0x500204d0
 800973c:	40020550 	.word	0x40020550
 8009740:	50020550 	.word	0x50020550
 8009744:	400205d0 	.word	0x400205d0
 8009748:	500205d0 	.word	0x500205d0
 800974c:	40020650 	.word	0x40020650
 8009750:	50020650 	.word	0x50020650
 8009754:	400206d0 	.word	0x400206d0
 8009758:	500206d0 	.word	0x500206d0
 800975c:	40020750 	.word	0x40020750
 8009760:	50020750 	.word	0x50020750
 8009764:	400207d0 	.word	0x400207d0
 8009768:	500207d0 	.word	0x500207d0
 800976c:	3cc03180 	.word	0x3cc03180

08009770 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8009770:	b480      	push	{r7}
 8009772:	b089      	sub	sp, #36	; 0x24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009782:	e1ba      	b.n	8009afa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	2101      	movs	r1, #1
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	fa01 f303 	lsl.w	r3, r1, r3
 8009790:	4013      	ands	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 81aa 	beq.w	8009af4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a55      	ldr	r2, [pc, #340]	; (80098f8 <HAL_GPIO_Init+0x188>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d15d      	bne.n	8009864 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80097ae:	2201      	movs	r2, #1
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	43db      	mvns	r3, r3
 80097b8:	69fa      	ldr	r2, [r7, #28]
 80097ba:	4013      	ands	r3, r2
 80097bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f003 0201 	and.w	r2, r3, #1
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	fa02 f303 	lsl.w	r3, r2, r3
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80097d8:	4a48      	ldr	r2, [pc, #288]	; (80098fc <HAL_GPIO_Init+0x18c>)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097e0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80097e2:	4a46      	ldr	r2, [pc, #280]	; (80098fc <HAL_GPIO_Init+0x18c>)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	4413      	add	r3, r2
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	08da      	lsrs	r2, r3, #3
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	3208      	adds	r2, #8
 80097f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	220f      	movs	r2, #15
 8009806:	fa02 f303 	lsl.w	r3, r2, r3
 800980a:	43db      	mvns	r3, r3
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	4013      	ands	r3, r2
 8009810:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	220b      	movs	r2, #11
 800981c:	fa02 f303 	lsl.w	r3, r2, r3
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	4313      	orrs	r3, r2
 8009824:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	08da      	lsrs	r2, r3, #3
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	3208      	adds	r2, #8
 800982e:	69f9      	ldr	r1, [r7, #28]
 8009830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	2203      	movs	r2, #3
 8009840:	fa02 f303 	lsl.w	r3, r2, r3
 8009844:	43db      	mvns	r3, r3
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	4013      	ands	r3, r2
 800984a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	2202      	movs	r2, #2
 8009852:	fa02 f303 	lsl.w	r3, r2, r3
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	4313      	orrs	r3, r2
 800985a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	e067      	b.n	8009934 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d003      	beq.n	8009874 <HAL_GPIO_Init+0x104>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2b12      	cmp	r3, #18
 8009872:	d145      	bne.n	8009900 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	08da      	lsrs	r2, r3, #3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3208      	adds	r2, #8
 800987c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009880:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	220f      	movs	r2, #15
 800988c:	fa02 f303 	lsl.w	r3, r2, r3
 8009890:	43db      	mvns	r3, r3
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	4013      	ands	r3, r2
 8009896:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f003 020f 	and.w	r2, r3, #15
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	08da      	lsrs	r2, r3, #3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3208      	adds	r2, #8
 80098ba:	69f9      	ldr	r1, [r7, #28]
 80098bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	2203      	movs	r2, #3
 80098cc:	fa02 f303 	lsl.w	r3, r2, r3
 80098d0:	43db      	mvns	r3, r3
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	4013      	ands	r3, r2
 80098d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f003 0203 	and.w	r2, r3, #3
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	005b      	lsls	r3, r3, #1
 80098e4:	fa02 f303 	lsl.w	r3, r2, r3
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e01e      	b.n	8009934 <HAL_GPIO_Init+0x1c4>
 80098f6:	bf00      	nop
 80098f8:	46020000 	.word	0x46020000
 80098fc:	0818ab58 	.word	0x0818ab58
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	2203      	movs	r2, #3
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	43db      	mvns	r3, r3
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	4013      	ands	r3, r2
 8009916:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f003 0203 	and.w	r2, r3, #3
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	fa02 f303 	lsl.w	r3, r2, r3
 8009928:	69fa      	ldr	r2, [r7, #28]
 800992a:	4313      	orrs	r3, r2
 800992c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	69fa      	ldr	r2, [r7, #28]
 8009932:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d00b      	beq.n	8009954 <HAL_GPIO_Init+0x1e4>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	2b02      	cmp	r3, #2
 8009942:	d007      	beq.n	8009954 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009948:	2b11      	cmp	r3, #17
 800994a:	d003      	beq.n	8009954 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	2b12      	cmp	r3, #18
 8009952:	d130      	bne.n	80099b6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	2203      	movs	r2, #3
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	43db      	mvns	r3, r3
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	4013      	ands	r3, r2
 800996a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	4313      	orrs	r3, r2
 800997c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800998a:	2201      	movs	r2, #1
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	fa02 f303 	lsl.w	r3, r2, r3
 8009992:	43db      	mvns	r3, r3
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	4013      	ands	r3, r2
 8009998:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	091b      	lsrs	r3, r3, #4
 80099a0:	f003 0201 	and.w	r2, r3, #1
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	fa02 f303 	lsl.w	r3, r2, r3
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d017      	beq.n	80099ee <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	2203      	movs	r2, #3
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	43db      	mvns	r3, r3
 80099d0:	69fa      	ldr	r2, [r7, #28]
 80099d2:	4013      	ands	r3, r2
 80099d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	fa02 f303 	lsl.w	r3, r2, r3
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d07c      	beq.n	8009af4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80099fa:	4a47      	ldr	r2, [pc, #284]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	089b      	lsrs	r3, r3, #2
 8009a00:	3318      	adds	r3, #24
 8009a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a06:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	220f      	movs	r2, #15
 8009a12:	fa02 f303 	lsl.w	r3, r2, r3
 8009a16:	43db      	mvns	r3, r3
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	0a9a      	lsrs	r2, r3, #10
 8009a22:	4b3e      	ldr	r3, [pc, #248]	; (8009b1c <HAL_GPIO_Init+0x3ac>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	f002 0203 	and.w	r2, r2, #3
 8009a2c:	00d2      	lsls	r2, r2, #3
 8009a2e:	4093      	lsls	r3, r2
 8009a30:	69fa      	ldr	r2, [r7, #28]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8009a36:	4938      	ldr	r1, [pc, #224]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	089b      	lsrs	r3, r3, #2
 8009a3c:	3318      	adds	r3, #24
 8009a3e:	69fa      	ldr	r2, [r7, #28]
 8009a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009a44:	4b34      	ldr	r3, [pc, #208]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	43db      	mvns	r3, r3
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	4013      	ands	r3, r2
 8009a52:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8009a68:	4a2b      	ldr	r2, [pc, #172]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009a6e:	4b2a      	ldr	r3, [pc, #168]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	43db      	mvns	r3, r3
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8009a8a:	69fa      	ldr	r2, [r7, #28]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009a92:	4a21      	ldr	r2, [pc, #132]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8009a98:	4b1f      	ldr	r3, [pc, #124]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	69fa      	ldr	r2, [r7, #28]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8009abe:	4a16      	ldr	r2, [pc, #88]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8009ac6:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009acc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009ae4:	69fa      	ldr	r2, [r7, #28]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8009aec:	4a0a      	ldr	r2, [pc, #40]	; (8009b18 <HAL_GPIO_Init+0x3a8>)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	3301      	adds	r3, #1
 8009af8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	fa22 f303 	lsr.w	r3, r2, r3
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f47f ae3d 	bne.w	8009784 <HAL_GPIO_Init+0x14>
  }
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	3724      	adds	r7, #36	; 0x24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	46022000 	.word	0x46022000
 8009b1c:	002f7f7f 	.word	0x002f7f7f

08009b20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b089      	sub	sp, #36	; 0x24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009b32:	e0bc      	b.n	8009cae <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009b34:	2201      	movs	r2, #1
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 80ad 	beq.w	8009ca8 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a5e      	ldr	r2, [pc, #376]	; (8009ccc <HAL_GPIO_DeInit+0x1ac>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d115      	bne.n	8009b82 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8009b56:	4a5e      	ldr	r2, [pc, #376]	; (8009cd0 <HAL_GPIO_DeInit+0x1b0>)
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b5e:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009b60:	4a5b      	ldr	r2, [pc, #364]	; (8009cd0 <HAL_GPIO_DeInit+0x1b0>)
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	4413      	add	r3, r2
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8009b6c:	4b57      	ldr	r3, [pc, #348]	; (8009ccc <HAL_GPIO_DeInit+0x1ac>)
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	2101      	movs	r1, #1
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	fa01 f303 	lsl.w	r3, r1, r3
 8009b78:	43db      	mvns	r3, r3
 8009b7a:	4954      	ldr	r1, [pc, #336]	; (8009ccc <HAL_GPIO_DeInit+0x1ac>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	600b      	str	r3, [r1, #0]
 8009b80:	e053      	b.n	8009c2a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8009b82:	4a54      	ldr	r2, [pc, #336]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	089b      	lsrs	r3, r3, #2
 8009b88:	3318      	adds	r3, #24
 8009b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b8e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	220f      	movs	r2, #15
 8009b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	0a9a      	lsrs	r2, r3, #10
 8009ba8:	4b4b      	ldr	r3, [pc, #300]	; (8009cd8 <HAL_GPIO_DeInit+0x1b8>)
 8009baa:	4013      	ands	r3, r2
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	f002 0203 	and.w	r2, r2, #3
 8009bb2:	00d2      	lsls	r2, r2, #3
 8009bb4:	4093      	lsls	r3, r2
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d136      	bne.n	8009c2a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8009bbc:	4b45      	ldr	r3, [pc, #276]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009bbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	43db      	mvns	r3, r3
 8009bc6:	4943      	ldr	r1, [pc, #268]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8009bce:	4b41      	ldr	r3, [pc, #260]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009bd0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	43db      	mvns	r3, r3
 8009bd8:	493e      	ldr	r1, [pc, #248]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009bda:	4013      	ands	r3, r2
 8009bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8009be0:	4b3c      	ldr	r3, [pc, #240]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	43db      	mvns	r3, r3
 8009be8:	493a      	ldr	r1, [pc, #232]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009bea:	4013      	ands	r3, r2
 8009bec:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8009bee:	4b39      	ldr	r3, [pc, #228]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	43db      	mvns	r3, r3
 8009bf6:	4937      	ldr	r1, [pc, #220]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	220f      	movs	r2, #15
 8009c06:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8009c0c:	4a31      	ldr	r2, [pc, #196]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	089b      	lsrs	r3, r3, #2
 8009c12:	3318      	adds	r3, #24
 8009c14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	43da      	mvns	r2, r3
 8009c1c:	482d      	ldr	r0, [pc, #180]	; (8009cd4 <HAL_GPIO_DeInit+0x1b4>)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	089b      	lsrs	r3, r3, #2
 8009c22:	400a      	ands	r2, r1
 8009c24:	3318      	adds	r3, #24
 8009c26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	2103      	movs	r1, #3
 8009c34:	fa01 f303 	lsl.w	r3, r1, r3
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	08da      	lsrs	r2, r3, #3
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	3208      	adds	r2, #8
 8009c46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f003 0307 	and.w	r3, r3, #7
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	220f      	movs	r2, #15
 8009c54:	fa02 f303 	lsl.w	r3, r2, r3
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	08d2      	lsrs	r2, r2, #3
 8009c5e:	4019      	ands	r1, r3
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	3208      	adds	r2, #8
 8009c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	2103      	movs	r1, #3
 8009c72:	fa01 f303 	lsl.w	r3, r1, r3
 8009c76:	43db      	mvns	r3, r3
 8009c78:	401a      	ands	r2, r3
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	2101      	movs	r1, #1
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	fa01 f303 	lsl.w	r3, r1, r3
 8009c8a:	43db      	mvns	r3, r3
 8009c8c:	401a      	ands	r2, r3
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	2103      	movs	r1, #3
 8009c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f47f af3c 	bne.w	8009b34 <HAL_GPIO_DeInit+0x14>
  }
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	3724      	adds	r7, #36	; 0x24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	46020000 	.word	0x46020000
 8009cd0:	0818ab58 	.word	0x0818ab58
 8009cd4:	46022000 	.word	0x46022000
 8009cd8:	002f7f7f 	.word	0x002f7f7f

08009cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691a      	ldr	r2, [r3, #16]
 8009cec:	887b      	ldrh	r3, [r7, #2]
 8009cee:	4013      	ands	r3, r2
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	73fb      	strb	r3, [r7, #15]
 8009cf8:	e001      	b.n	8009cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	807b      	strh	r3, [r7, #2]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d1c:	787b      	ldrb	r3, [r7, #1]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d22:	887a      	ldrh	r2, [r7, #2]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8009d28:	e002      	b.n	8009d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8009d2a:	887a      	ldrh	r2, [r7, #2]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d4e:	887a      	ldrh	r2, [r7, #2]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4013      	ands	r3, r2
 8009d54:	041a      	lsls	r2, r3, #16
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	43d9      	mvns	r1, r3
 8009d5a:	887b      	ldrh	r3, [r7, #2]
 8009d5c:	400b      	ands	r3, r1
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	619a      	str	r2, [r3, #24]
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	88fb      	ldrh	r3, [r7, #6]
 8009d80:	4013      	ands	r3, r2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d006      	beq.n	8009d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009d86:	4a0c      	ldr	r2, [pc, #48]	; (8009db8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009d88:	88fb      	ldrh	r3, [r7, #6]
 8009d8a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009d8c:	88fb      	ldrh	r3, [r7, #6]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7f9 f9d2 	bl	8003138 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8009d94:	4b08      	ldr	r3, [pc, #32]	; (8009db8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009d96:	691a      	ldr	r2, [r3, #16]
 8009d98:	88fb      	ldrh	r3, [r7, #6]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d006      	beq.n	8009dae <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009da0:	4a05      	ldr	r2, [pc, #20]	; (8009db8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009da2:	88fb      	ldrh	r3, [r7, #6]
 8009da4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009da6:	88fb      	ldrh	r3, [r7, #6]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 f807 	bl	8009dbc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	46022000 	.word	0x46022000

08009dbc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e081      	b.n	8009ee8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d106      	bne.n	8009dfe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f8a8 	bl	8009f4e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2224      	movs	r2, #36	; 0x24
 8009e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0201 	bic.w	r2, r2, #1
 8009e14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d107      	bne.n	8009e4c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e48:	609a      	str	r2, [r3, #8]
 8009e4a:	e006      	b.n	8009e5a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689a      	ldr	r2, [r3, #8]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009e58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d104      	bne.n	8009e6c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	6812      	ldr	r2, [r2, #0]
 8009e76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e7e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69d9      	ldr	r1, [r3, #28]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1a      	ldr	r2, [r3, #32]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f042 0201 	orr.w	r2, r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d101      	bne.n	8009f02 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e021      	b.n	8009f46 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2224      	movs	r2, #36	; 0x24
 8009f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 0201 	bic.w	r2, r2, #1
 8009f18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f821 	bl	8009f62 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
	...

08009f78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	4608      	mov	r0, r1
 8009f82:	4611      	mov	r1, r2
 8009f84:	461a      	mov	r2, r3
 8009f86:	4603      	mov	r3, r0
 8009f88:	817b      	strh	r3, [r7, #10]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	813b      	strh	r3, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b20      	cmp	r3, #32
 8009f9c:	f040 80f9 	bne.w	800a192 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <HAL_I2C_Mem_Write+0x34>
 8009fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d105      	bne.n	8009fb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e0ed      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d101      	bne.n	8009fc6 <HAL_I2C_Mem_Write+0x4e>
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e0e6      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009fce:	f7fe fc5f 	bl	8008890 <HAL_GetTick>
 8009fd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	2319      	movs	r3, #25
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fadd 	bl	800a5a0 <I2C_WaitOnFlagUntilTimeout>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e0d1      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2221      	movs	r2, #33	; 0x21
 8009ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2240      	movs	r2, #64	; 0x40
 8009ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a3a      	ldr	r2, [r7, #32]
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a018:	88f8      	ldrh	r0, [r7, #6]
 800a01a:	893a      	ldrh	r2, [r7, #8]
 800a01c:	8979      	ldrh	r1, [r7, #10]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4603      	mov	r3, r0
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f9ed 	bl	800a408 <I2C_RequestMemoryWrite>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e0a9      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a044:	b29b      	uxth	r3, r3
 800a046:	2bff      	cmp	r3, #255	; 0xff
 800a048:	d90e      	bls.n	800a068 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	22ff      	movs	r2, #255	; 0xff
 800a04e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a054:	b2da      	uxtb	r2, r3
 800a056:	8979      	ldrh	r1, [r7, #10]
 800a058:	2300      	movs	r3, #0
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 fc45 	bl	800a8f0 <I2C_TransferConfig>
 800a066:	e00f      	b.n	800a088 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a076:	b2da      	uxtb	r2, r3
 800a078:	8979      	ldrh	r1, [r7, #10]
 800a07a:	2300      	movs	r3, #0
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fc34 	bl	800a8f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fac7 	bl	800a620 <I2C_WaitOnTXISFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e07b      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d034      	beq.n	800a140 <HAL_I2C_Mem_Write+0x1c8>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d130      	bne.n	800a140 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2180      	movs	r1, #128	; 0x80
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fa59 	bl	800a5a0 <I2C_WaitOnFlagUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e04d      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	2bff      	cmp	r3, #255	; 0xff
 800a100:	d90e      	bls.n	800a120 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	22ff      	movs	r2, #255	; 0xff
 800a106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	8979      	ldrh	r1, [r7, #10]
 800a110:	2300      	movs	r3, #0
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 fbe9 	bl	800a8f0 <I2C_TransferConfig>
 800a11e:	e00f      	b.n	800a140 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	8979      	ldrh	r1, [r7, #10]
 800a132:	2300      	movs	r3, #0
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 fbd8 	bl	800a8f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d19e      	bne.n	800a088 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 faa6 	bl	800a6a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e01a      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2220      	movs	r2, #32
 800a164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6859      	ldr	r1, [r3, #4]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <HAL_I2C_Mem_Write+0x224>)
 800a172:	400b      	ands	r3, r1
 800a174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2220      	movs	r2, #32
 800a17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	e000      	b.n	800a194 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a192:	2302      	movs	r3, #2
  }
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	fe00e800 	.word	0xfe00e800

0800a1a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	817b      	strh	r3, [r7, #10]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	813b      	strh	r3, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	f040 80fd 	bne.w	800a3c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <HAL_I2C_Mem_Read+0x34>
 800a1ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d105      	bne.n	800a1e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e0f1      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d101      	bne.n	800a1ee <HAL_I2C_Mem_Read+0x4e>
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	e0ea      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a1f6:	f7fe fb4b 	bl	8008890 <HAL_GetTick>
 800a1fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	2319      	movs	r3, #25
 800a202:	2201      	movs	r2, #1
 800a204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 f9c9 	bl	800a5a0 <I2C_WaitOnFlagUntilTimeout>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e0d5      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2222      	movs	r2, #34	; 0x22
 800a21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2240      	movs	r2, #64	; 0x40
 800a224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a3a      	ldr	r2, [r7, #32]
 800a232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a240:	88f8      	ldrh	r0, [r7, #6]
 800a242:	893a      	ldrh	r2, [r7, #8]
 800a244:	8979      	ldrh	r1, [r7, #10]
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	4603      	mov	r3, r0
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f92d 	bl	800a4b0 <I2C_RequestMemoryRead>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e0ad      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2bff      	cmp	r3, #255	; 0xff
 800a270:	d90e      	bls.n	800a290 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	22ff      	movs	r2, #255	; 0xff
 800a276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	8979      	ldrh	r1, [r7, #10]
 800a280:	4b52      	ldr	r3, [pc, #328]	; (800a3cc <HAL_I2C_Mem_Read+0x22c>)
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fb31 	bl	800a8f0 <I2C_TransferConfig>
 800a28e:	e00f      	b.n	800a2b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a294:	b29a      	uxth	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	8979      	ldrh	r1, [r7, #10]
 800a2a2:	4b4a      	ldr	r3, [pc, #296]	; (800a3cc <HAL_I2C_Mem_Read+0x22c>)
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fb20 	bl	800a8f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2104      	movs	r1, #4
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 f970 	bl	800a5a0 <I2C_WaitOnFlagUntilTimeout>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e07c      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	b2d2      	uxtb	r2, r2
 800a2d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a300:	b29b      	uxth	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d034      	beq.n	800a370 <HAL_I2C_Mem_Read+0x1d0>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d130      	bne.n	800a370 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	2200      	movs	r2, #0
 800a316:	2180      	movs	r1, #128	; 0x80
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f941 	bl	800a5a0 <I2C_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e04d      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	2bff      	cmp	r3, #255	; 0xff
 800a330:	d90e      	bls.n	800a350 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	22ff      	movs	r2, #255	; 0xff
 800a336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	8979      	ldrh	r1, [r7, #10]
 800a340:	2300      	movs	r3, #0
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 fad1 	bl	800a8f0 <I2C_TransferConfig>
 800a34e:	e00f      	b.n	800a370 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	8979      	ldrh	r1, [r7, #10]
 800a362:	2300      	movs	r3, #0
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 fac0 	bl	800a8f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a374:	b29b      	uxth	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d19a      	bne.n	800a2b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f98e 	bl	800a6a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e01a      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2220      	movs	r2, #32
 800a394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6859      	ldr	r1, [r3, #4]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <HAL_I2C_Mem_Read+0x230>)
 800a3a2:	400b      	ands	r3, r1
 800a3a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e000      	b.n	800a3c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a3c2:	2302      	movs	r3, #2
  }
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	80002400 	.word	0x80002400
 800a3d0:	fe00e800 	.word	0xfe00e800

0800a3d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3e2:	b2db      	uxtb	r3, r3
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	4608      	mov	r0, r1
 800a412:	4611      	mov	r1, r2
 800a414:	461a      	mov	r2, r3
 800a416:	4603      	mov	r3, r0
 800a418:	817b      	strh	r3, [r7, #10]
 800a41a:	460b      	mov	r3, r1
 800a41c:	813b      	strh	r3, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	b2da      	uxtb	r2, r3
 800a426:	8979      	ldrh	r1, [r7, #10]
 800a428:	4b20      	ldr	r3, [pc, #128]	; (800a4ac <I2C_RequestMemoryWrite+0xa4>)
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fa5d 	bl	800a8f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	69b9      	ldr	r1, [r7, #24]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 f8f0 	bl	800a620 <I2C_WaitOnTXISFlagUntilTimeout>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e02c      	b.n	800a4a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d105      	bne.n	800a45c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a450:	893b      	ldrh	r3, [r7, #8]
 800a452:	b2da      	uxtb	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	629a      	str	r2, [r3, #40]	; 0x28
 800a45a:	e015      	b.n	800a488 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a45c:	893b      	ldrh	r3, [r7, #8]
 800a45e:	0a1b      	lsrs	r3, r3, #8
 800a460:	b29b      	uxth	r3, r3
 800a462:	b2da      	uxtb	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	69b9      	ldr	r1, [r7, #24]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 f8d6 	bl	800a620 <I2C_WaitOnTXISFlagUntilTimeout>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e012      	b.n	800a4a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a47e:	893b      	ldrh	r3, [r7, #8]
 800a480:	b2da      	uxtb	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	2200      	movs	r2, #0
 800a490:	2180      	movs	r1, #128	; 0x80
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 f884 	bl	800a5a0 <I2C_WaitOnFlagUntilTimeout>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	80002000 	.word	0x80002000

0800a4b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4603      	mov	r3, r0
 800a4c0:	817b      	strh	r3, [r7, #10]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	813b      	strh	r3, [r7, #8]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	8979      	ldrh	r1, [r7, #10]
 800a4d0:	4b20      	ldr	r3, [pc, #128]	; (800a554 <I2C_RequestMemoryRead+0xa4>)
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 fa0a 	bl	800a8f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4dc:	69fa      	ldr	r2, [r7, #28]
 800a4de:	69b9      	ldr	r1, [r7, #24]
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f89d 	bl	800a620 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e02c      	b.n	800a54a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a4f0:	88fb      	ldrh	r3, [r7, #6]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d105      	bne.n	800a502 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a4f6:	893b      	ldrh	r3, [r7, #8]
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	629a      	str	r2, [r3, #40]	; 0x28
 800a500:	e015      	b.n	800a52e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a502:	893b      	ldrh	r3, [r7, #8]
 800a504:	0a1b      	lsrs	r3, r3, #8
 800a506:	b29b      	uxth	r3, r3
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a510:	69fa      	ldr	r2, [r7, #28]
 800a512:	69b9      	ldr	r1, [r7, #24]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 f883 	bl	800a620 <I2C_WaitOnTXISFlagUntilTimeout>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e012      	b.n	800a54a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a524:	893b      	ldrh	r3, [r7, #8]
 800a526:	b2da      	uxtb	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2200      	movs	r2, #0
 800a536:	2140      	movs	r1, #64	; 0x40
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f831 	bl	800a5a0 <I2C_WaitOnFlagUntilTimeout>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	80002000 	.word	0x80002000

0800a558 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	f003 0302 	and.w	r3, r3, #2
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d103      	bne.n	800a576 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2200      	movs	r2, #0
 800a574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	2b01      	cmp	r3, #1
 800a582:	d007      	beq.n	800a594 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	699a      	ldr	r2, [r3, #24]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f042 0201 	orr.w	r2, r2, #1
 800a592:	619a      	str	r2, [r3, #24]
  }
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5b0:	e022      	b.n	800a5f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5b8:	d01e      	beq.n	800a5f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ba:	f7fe f969 	bl	8008890 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d302      	bcc.n	800a5d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d113      	bne.n	800a5f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d4:	f043 0220 	orr.w	r2, r3, #32
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e00f      	b.n	800a618 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	699a      	ldr	r2, [r3, #24]
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	4013      	ands	r3, r2
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	429a      	cmp	r2, r3
 800a606:	bf0c      	ite	eq
 800a608:	2301      	moveq	r3, #1
 800a60a:	2300      	movne	r3, #0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	461a      	mov	r2, r3
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	429a      	cmp	r2, r3
 800a614:	d0cd      	beq.n	800a5b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a62c:	e02c      	b.n	800a688 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f870 	bl	800a718 <I2C_IsErrorOccurred>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e02a      	b.n	800a698 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a648:	d01e      	beq.n	800a688 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a64a:	f7fe f921 	bl	8008890 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	d302      	bcc.n	800a660 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d113      	bne.n	800a688 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a664:	f043 0220 	orr.w	r2, r3, #32
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2220      	movs	r2, #32
 800a670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e007      	b.n	800a698 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	f003 0302 	and.w	r3, r3, #2
 800a692:	2b02      	cmp	r3, #2
 800a694:	d1cb      	bne.n	800a62e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6ac:	e028      	b.n	800a700 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	68b9      	ldr	r1, [r7, #8]
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f830 	bl	800a718 <I2C_IsErrorOccurred>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e026      	b.n	800a710 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6c2:	f7fe f8e5 	bl	8008890 <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d302      	bcc.n	800a6d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d113      	bne.n	800a700 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6dc:	f043 0220 	orr.w	r2, r3, #32
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e007      	b.n	800a710 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	d1cf      	bne.n	800a6ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08a      	sub	sp, #40	; 0x28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	f003 0310 	and.w	r3, r3, #16
 800a740:	2b00      	cmp	r3, #0
 800a742:	d075      	beq.n	800a830 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2210      	movs	r2, #16
 800a74a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a74c:	e056      	b.n	800a7fc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a754:	d052      	beq.n	800a7fc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a756:	f7fe f89b 	bl	8008890 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	d302      	bcc.n	800a76c <I2C_IsErrorOccurred+0x54>
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d147      	bne.n	800a7fc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a776:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a77e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a78a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a78e:	d12e      	bne.n	800a7ee <I2C_IsErrorOccurred+0xd6>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a796:	d02a      	beq.n	800a7ee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a798:	7cfb      	ldrb	r3, [r7, #19]
 800a79a:	2b20      	cmp	r3, #32
 800a79c:	d027      	beq.n	800a7ee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a7ae:	f7fe f86f 	bl	8008890 <HAL_GetTick>
 800a7b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7b4:	e01b      	b.n	800a7ee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a7b6:	f7fe f86b 	bl	8008890 <HAL_GetTick>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	2b19      	cmp	r3, #25
 800a7c2:	d914      	bls.n	800a7ee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c8:	f043 0220 	orr.w	r2, r3, #32
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	f003 0320 	and.w	r3, r3, #32
 800a7f8:	2b20      	cmp	r3, #32
 800a7fa:	d1dc      	bne.n	800a7b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	f003 0320 	and.w	r3, r3, #32
 800a806:	2b20      	cmp	r3, #32
 800a808:	d003      	beq.n	800a812 <I2C_IsErrorOccurred+0xfa>
 800a80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d09d      	beq.n	800a74e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a816:	2b00      	cmp	r3, #0
 800a818:	d103      	bne.n	800a822 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2220      	movs	r2, #32
 800a820:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	f043 0304 	orr.w	r3, r3, #4
 800a828:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	f043 0301 	orr.w	r3, r3, #1
 800a848:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a852:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00b      	beq.n	800a87c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	f043 0308 	orr.w	r3, r3, #8
 800a86a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a874:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00b      	beq.n	800a89e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	f043 0302 	orr.w	r3, r3, #2
 800a88c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a896:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a89e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d01c      	beq.n	800a8e0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7ff fe56 	bl	800a558 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6859      	ldr	r1, [r3, #4]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <I2C_IsErrorOccurred+0x1d4>)
 800a8b8:	400b      	ands	r3, r1
 800a8ba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2220      	movs	r2, #32
 800a8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3728      	adds	r7, #40	; 0x28
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	fe00e800 	.word	0xfe00e800

0800a8f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	607b      	str	r3, [r7, #4]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	817b      	strh	r3, [r7, #10]
 800a8fe:	4613      	mov	r3, r2
 800a900:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a902:	897b      	ldrh	r3, [r7, #10]
 800a904:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a908:	7a7b      	ldrb	r3, [r7, #9]
 800a90a:	041b      	lsls	r3, r3, #16
 800a90c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a910:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	4313      	orrs	r3, r2
 800a91a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a91e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	0d5b      	lsrs	r3, r3, #21
 800a92a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a92e:	4b08      	ldr	r3, [pc, #32]	; (800a950 <I2C_TransferConfig+0x60>)
 800a930:	430b      	orrs	r3, r1
 800a932:	43db      	mvns	r3, r3
 800a934:	ea02 0103 	and.w	r1, r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	430a      	orrs	r2, r1
 800a940:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a942:	bf00      	nop
 800a944:	371c      	adds	r7, #28
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	03ff63ff 	.word	0x03ff63ff

0800a954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b20      	cmp	r3, #32
 800a968:	d138      	bne.n	800a9dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a970:	2b01      	cmp	r3, #1
 800a972:	d101      	bne.n	800a978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a974:	2302      	movs	r3, #2
 800a976:	e032      	b.n	800a9de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2224      	movs	r2, #36	; 0x24
 800a984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0201 	bic.w	r2, r2, #1
 800a996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a9a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6819      	ldr	r1, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	430a      	orrs	r2, r1
 800a9b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0201 	orr.w	r2, r2, #1
 800a9c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e000      	b.n	800a9de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a9dc:	2302      	movs	r3, #2
  }
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	d139      	bne.n	800aa74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d101      	bne.n	800aa0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	e033      	b.n	800aa76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2224      	movs	r2, #36	; 0x24
 800aa1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 0201 	bic.w	r2, r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aa3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2220      	movs	r2, #32
 800aa64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	e000      	b.n	800aa76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aa74:	2302      	movs	r3, #2
  }
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
	...

0800aa84 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800aa90:	4b0b      	ldr	r3, [pc, #44]	; (800aac0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	73fb      	strb	r3, [r7, #15]
 800aaa0:	e007      	b.n	800aab2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f023 0204 	bic.w	r2, r3, #4
 800aaaa:	4905      	ldr	r1, [pc, #20]	; (800aac0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	600b      	str	r3, [r1, #0]
  }

  return status;
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	40030400 	.word	0x40030400

0800aac4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800aac4:	b480      	push	{r7}
 800aac6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800aac8:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <HAL_ICACHE_Enable+0x1c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a04      	ldr	r2, [pc, #16]	; (800aae0 <HAL_ICACHE_Enable+0x1c>)
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	40030400 	.word	0x40030400

0800aae4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e0f2      	b.n	800acdc <HAL_LPTIM_Init+0x1f8>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d111      	bne.n	800ab2c <HAL_LPTIM_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fc8f 	bl	800b434 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d102      	bne.n	800ab24 <HAL_LPTIM_Init+0x40>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a70      	ldr	r2, [pc, #448]	; (800ace4 <HAL_LPTIM_Init+0x200>)
 800ab22:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2202      	movs	r2, #2
 800ab30:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	691a      	ldr	r2, [r3, #16]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0201 	orr.w	r2, r2, #1
 800ab42:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab4c:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800ab58:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fcbd 	bl	800b4dc <LPTIM_WaitForFlag>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d101      	bne.n	800ab6c <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e0b7      	b.n	800acdc <HAL_LPTIM_Init+0x1f8>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2210      	movs	r2, #16
 800ab72:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	6a12      	ldr	r2, [r2, #32]
 800ab7c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800ab7e:	2110      	movs	r1, #16
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fcab 	bl	800b4dc <LPTIM_WaitForFlag>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d101      	bne.n	800ab90 <HAL_LPTIM_Init+0xac>
  {
    return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e0a5      	b.n	800acdc <HAL_LPTIM_Init+0x1f8>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10e      	bne.n	800abbc <HAL_LPTIM_Init+0xd8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d107      	bne.n	800abbc <HAL_LPTIM_Init+0xd8>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	691a      	ldr	r2, [r3, #16]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0201 	bic.w	r2, r2, #1
 800abba:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d004      	beq.n	800abd6 <HAL_LPTIM_Init+0xf2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abd4:	d103      	bne.n	800abde <HAL_LPTIM_Init+0xfa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f023 031e 	bic.w	r3, r3, #30
 800abdc:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d005      	beq.n	800abf6 <HAL_LPTIM_Init+0x112>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800abf0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abf4:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	4b3b      	ldr	r3, [pc, #236]	; (800ace8 <HAL_LPTIM_Init+0x204>)
 800abfa:	4013      	ands	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ac06:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800ac0c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800ac12:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d107      	bne.n	800ac32 <HAL_LPTIM_Init+0x14e>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d004      	beq.n	800ac44 <HAL_LPTIM_Init+0x160>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac42:	d107      	bne.n	800ac54 <HAL_LPTIM_Init+0x170>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d00a      	beq.n	800ac76 <HAL_LPTIM_Init+0x192>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800ac68:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800ac6e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a1a      	ldr	r2, [pc, #104]	; (800acec <HAL_LPTIM_Init+0x208>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d004      	beq.n	800ac92 <HAL_LPTIM_Init+0x1ae>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <HAL_LPTIM_Init+0x20c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d108      	bne.n	800aca4 <HAL_LPTIM_Init+0x1c0>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	625a      	str	r2, [r3, #36]	; 0x24
 800aca2:	e00e      	b.n	800acc2 <HAL_LPTIM_Init+0x1de>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a12      	ldr	r2, [pc, #72]	; (800acf4 <HAL_LPTIM_Init+0x210>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d004      	beq.n	800acb8 <HAL_LPTIM_Init+0x1d4>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a11      	ldr	r2, [pc, #68]	; (800acf8 <HAL_LPTIM_Init+0x214>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d104      	bne.n	800acc2 <HAL_LPTIM_Init+0x1de>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acc0:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	0800155d 	.word	0x0800155d
 800ace8:	ff39f1fe 	.word	0xff39f1fe
 800acec:	46004400 	.word	0x46004400
 800acf0:	40009400 	.word	0x40009400
 800acf4:	46004800 	.word	0x46004800
 800acf8:	46004c00 	.word	0x46004c00

0800acfc <HAL_LPTIM_PWM_Start_IT>:
  *            @arg LPTIM_CHANNEL_1: LPTIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: LPTIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d109      	bne.n	800ad20 <HAL_LPTIM_PWM_Start_IT+0x24>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	bf14      	ite	ne
 800ad18:	2301      	movne	r3, #1
 800ad1a:	2300      	moveq	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	e008      	b.n	800ad32 <HAL_LPTIM_PWM_Start_IT+0x36>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	bf14      	ite	ne
 800ad2c:	2301      	movne	r3, #1
 800ad2e:	2300      	moveq	r3, #0
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <HAL_LPTIM_PWM_Start_IT+0x3e>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e08c      	b.n	800ae54 <HAL_LPTIM_PWM_Start_IT+0x158>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d104      	bne.n	800ad52 <HAL_LPTIM_PWM_Start_IT+0x56>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800ad50:	e003      	b.n	800ad5a <HAL_LPTIM_PWM_Start_IT+0x5e>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2202      	movs	r2, #2
 800ad56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68da      	ldr	r2, [r3, #12]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800ad68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	691a      	ldr	r2, [r3, #16]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f042 0201 	orr.w	r2, r2, #1
 800ad78:	611a      	str	r2, [r3, #16]
  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad82:	605a      	str	r2, [r3, #4]

  switch (Channel)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <HAL_LPTIM_PWM_Start_IT+0x96>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d00b      	beq.n	800ada8 <HAL_LPTIM_PWM_Start_IT+0xac>
      /* Enable interrupt */
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
                            LPTIM_IT_UPDATE);
      break;
    default:
      break;
 800ad90:	e013      	b.n	800adba <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP1OK | LPTIM_IT_CC1 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	6812      	ldr	r2, [r2, #0]
 800ad9c:	f443 73cd 	orr.w	r3, r3, #410	; 0x19a
 800ada0:	f043 0301 	orr.w	r3, r3, #1
 800ada4:	6093      	str	r3, [r2, #8]
      break;
 800ada6:	e008      	b.n	800adba <HAL_LPTIM_PWM_Start_IT+0xbe>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMP2OK | LPTIM_IT_CC2 | LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK |
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6899      	ldr	r1, [r3, #8]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	4b2a      	ldr	r3, [pc, #168]	; (800ae5c <HAL_LPTIM_PWM_Start_IT+0x160>)
 800adb4:	430b      	orrs	r3, r1
 800adb6:	6093      	str	r3, [r2, #8]
      break;
 800adb8:	bf00      	nop
  }

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800adba:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fb8c 	bl	800b4dc <LPTIM_WaitForFlag>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d101      	bne.n	800adce <HAL_LPTIM_PWM_Start_IT+0xd2>
  {
    return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e042      	b.n	800ae54 <HAL_LPTIM_PWM_Start_IT+0x158>
  }

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800add6:	4293      	cmp	r3, r2
 800add8:	d016      	beq.n	800ae08 <HAL_LPTIM_PWM_Start_IT+0x10c>
  {
    /* Clear flag */
    __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ade2:	605a      	str	r2, [r3, #4]

    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0204 	orr.w	r2, r2, #4
 800adf2:	609a      	str	r2, [r3, #8]

    /* Wait for the completion of the write operation to the LPTIM_DIER register */
    if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 800adf4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fb6f 	bl	800b4dc <LPTIM_WaitForFlag>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d101      	bne.n	800ae08 <HAL_LPTIM_PWM_Start_IT+0x10c>
    {
      return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e025      	b.n	800ae54 <HAL_LPTIM_PWM_Start_IT+0x158>
    }
  }

  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <HAL_LPTIM_PWM_Start_IT+0x11a>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d009      	beq.n	800ae28 <HAL_LPTIM_PWM_Start_IT+0x12c>
 800ae14:	e010      	b.n	800ae38 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f042 0202 	orr.w	r2, r2, #2
 800ae24:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae26:	e007      	b.n	800ae38 <HAL_LPTIM_PWM_Start_IT+0x13c>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ae36:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae38:	bf00      	nop

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	691a      	ldr	r2, [r3, #16]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f042 0204 	orr.w	r2, r2, #4
 800ae48:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	00080392 	.word	0x00080392

0800ae60 <HAL_LPTIM_OC_ConfigChannel>:
  *            @arg LPTIM_CHANNEL_2: LPTIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  switch (Channel)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <HAL_LPTIM_OC_ConfigChannel+0x22>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d00b      	beq.n	800ae98 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 800ae80:	e018      	b.n	800aeb4 <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f000 fb59 	bl	800b53c <LPTIM_OC1_SetConfig>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00c      	beq.n	800aeae <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	e012      	b.n	800aebe <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 fbb4 	bl	800b608 <LPTIM_OC2_SetConfig>
 800aea0:	4603      	mov	r3, r0
 800aea2:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
 800aeac:	e007      	b.n	800aebe <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 800aeae:	bf00      	nop
 800aeb0:	e000      	b.n	800aeb4 <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 800aeb2:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d123      	bne.n	800af24 <HAL_LPTIM_IRQHandler+0x5e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d11c      	bne.n	800af24 <HAL_LPTIM_IRQHandler+0x5e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2201      	movs	r2, #1
 800aef0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <HAL_LPTIM_IRQHandler+0x4e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	4798      	blx	r3
 800af12:	e003      	b.n	800af1c <HAL_LPTIM_IRQHandler+0x56>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af32:	d125      	bne.n	800af80 <HAL_LPTIM_IRQHandler+0xba>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af42:	d11d      	bne.n	800af80 <HAL_LPTIM_IRQHandler+0xba>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af4c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2202      	movs	r2, #2
 800af52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d005      	beq.n	800af70 <HAL_LPTIM_IRQHandler+0xaa>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	4798      	blx	r3
 800af6e:	e003      	b.n	800af78 <HAL_LPTIM_IRQHandler+0xb2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af8e:	d119      	bne.n	800afc4 <HAL_LPTIM_IRQHandler+0xfe>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af9e:	d111      	bne.n	800afc4 <HAL_LPTIM_IRQHandler+0xfe>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afa8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afd2:	d119      	bne.n	800b008 <HAL_LPTIM_IRQHandler+0x142>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afe2:	d111      	bne.n	800b008 <HAL_LPTIM_IRQHandler+0x142>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800afec:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b02      	cmp	r3, #2
 800b014:	d10e      	bne.n	800b034 <HAL_LPTIM_IRQHandler+0x16e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b02      	cmp	r3, #2
 800b022:	d107      	bne.n	800b034 <HAL_LPTIM_IRQHandler+0x16e>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2202      	movs	r2, #2
 800b02a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d10e      	bne.n	800b060 <HAL_LPTIM_IRQHandler+0x19a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b04      	cmp	r3, #4
 800b04e:	d107      	bne.n	800b060 <HAL_LPTIM_IRQHandler+0x19a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2204      	movs	r2, #4
 800b056:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	2b08      	cmp	r3, #8
 800b06c:	d112      	bne.n	800b094 <HAL_LPTIM_IRQHandler+0x1ce>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d10b      	bne.n	800b094 <HAL_LPTIM_IRQHandler+0x1ce>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2208      	movs	r2, #8
 800b082:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b09e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b0a2:	d114      	bne.n	800b0ce <HAL_LPTIM_IRQHandler+0x208>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b0b2:	d10c      	bne.n	800b0ce <HAL_LPTIM_IRQHandler+0x208>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0bc:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b10      	cmp	r3, #16
 800b0da:	d10e      	bne.n	800b0fa <HAL_LPTIM_IRQHandler+0x234>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f003 0310 	and.w	r3, r3, #16
 800b0e6:	2b10      	cmp	r3, #16
 800b0e8:	d107      	bne.n	800b0fa <HAL_LPTIM_IRQHandler+0x234>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2210      	movs	r2, #16
 800b0f0:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b20      	cmp	r3, #32
 800b106:	d10e      	bne.n	800b126 <HAL_LPTIM_IRQHandler+0x260>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f003 0320 	and.w	r3, r3, #32
 800b112:	2b20      	cmp	r3, #32
 800b114:	d107      	bne.n	800b126 <HAL_LPTIM_IRQHandler+0x260>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2220      	movs	r2, #32
 800b11c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b130:	2b40      	cmp	r3, #64	; 0x40
 800b132:	d10e      	bne.n	800b152 <HAL_LPTIM_IRQHandler+0x28c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b13e:	2b40      	cmp	r3, #64	; 0x40
 800b140:	d107      	bne.n	800b152 <HAL_LPTIM_IRQHandler+0x28c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2240      	movs	r2, #64	; 0x40
 800b148:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	4798      	blx	r3
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b15c:	2b80      	cmp	r3, #128	; 0x80
 800b15e:	d10e      	bne.n	800b17e <HAL_LPTIM_IRQHandler+0x2b8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16a:	2b80      	cmp	r3, #128	; 0x80
 800b16c:	d107      	bne.n	800b17e <HAL_LPTIM_IRQHandler+0x2b8>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2280      	movs	r2, #128	; 0x80
 800b174:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b18c:	d110      	bne.n	800b1b0 <HAL_LPTIM_IRQHandler+0x2ea>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b19c:	d108      	bne.n	800b1b0 <HAL_LPTIM_IRQHandler+0x2ea>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1a6:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	4798      	blx	r3
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_LPTIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  hlptim LPTIM IC handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_LPTIM_UpdateEventHalfCpltCallback>:
  * @brief  Update event half complete callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventHalfCpltCallback could be implemented in the user file
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_LPTIM_ErrorCallback>:
  * @brief  Error callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_ErrorCallback(LPTIM_HandleTypeDef *hlptim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_ErrorCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <HAL_LPTIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e09c      	b.n	800b426 <HAL_LPTIM_RegisterCallback+0x156>
  }

  /* Process locked */
  __HAL_LOCK(hlptim);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d101      	bne.n	800b2fa <HAL_LPTIM_RegisterCallback+0x2a>
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e095      	b.n	800b426 <HAL_LPTIM_RegisterCallback+0x156>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d16d      	bne.n	800b3ea <HAL_LPTIM_RegisterCallback+0x11a>
  {
    switch (CallbackID)
 800b30e:	7afb      	ldrb	r3, [r7, #11]
 800b310:	2b0f      	cmp	r3, #15
 800b312:	d867      	bhi.n	800b3e4 <HAL_LPTIM_RegisterCallback+0x114>
 800b314:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <HAL_LPTIM_RegisterCallback+0x4c>)
 800b316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31a:	bf00      	nop
 800b31c:	0800b35d 	.word	0x0800b35d
 800b320:	0800b365 	.word	0x0800b365
 800b324:	0800b36d 	.word	0x0800b36d
 800b328:	0800b375 	.word	0x0800b375
 800b32c:	0800b37d 	.word	0x0800b37d
 800b330:	0800b385 	.word	0x0800b385
 800b334:	0800b38d 	.word	0x0800b38d
 800b338:	0800b395 	.word	0x0800b395
 800b33c:	0800b39d 	.word	0x0800b39d
 800b340:	0800b3a5 	.word	0x0800b3a5
 800b344:	0800b3ad 	.word	0x0800b3ad
 800b348:	0800b3b5 	.word	0x0800b3b5
 800b34c:	0800b3bd 	.word	0x0800b3bd
 800b350:	0800b3c7 	.word	0x0800b3c7
 800b354:	0800b3d1 	.word	0x0800b3d1
 800b358:	0800b3db 	.word	0x0800b3db
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b362:	e05b      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b36a:	e057      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b372:	e053      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b37a:	e04f      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b382:	e04b      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800b38a:	e047      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800b392:	e043      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b39a:	e03f      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b3a2:	e03b      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_UPDATE_EVENT_CB_ID :
        hlptim->UpdateEventCallback = pCallback;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800b3aa:	e037      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_REP_COUNTER_WRITE_CB_ID :
        hlptim->RepCounterWriteCallback = pCallback;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800b3b2:	e033      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_UPDATE_EVENT_HALF_CB_ID :
        hlptim->UpdateEventHalfCpltCallback = pCallback;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800b3ba:	e02f      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_IC_CAPTURE_CB_ID :
        hlptim->IC_CaptureCallback = pCallback;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800b3c4:	e02a      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_IC_CAPTURE_HALF_CB_ID :
        hlptim->IC_CaptureHalfCpltCallback = pCallback;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800b3ce:	e025      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_OVER_CAPTURE_CB_ID :
        hlptim->IC_OverCaptureCallback = pCallback;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800b3d8:	e020      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_ERROR_CB_ID :
        hlptim->ErrorCallback = pCallback;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800b3e2:	e01b      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	75fb      	strb	r3, [r7, #23]
        break;
 800b3e8:	e018      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d110      	bne.n	800b418 <HAL_LPTIM_RegisterCallback+0x148>
  {
    switch (CallbackID)
 800b3f6:	7afb      	ldrb	r3, [r7, #11]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <HAL_LPTIM_RegisterCallback+0x132>
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d004      	beq.n	800b40a <HAL_LPTIM_RegisterCallback+0x13a>
 800b400:	e007      	b.n	800b412 <HAL_LPTIM_RegisterCallback+0x142>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b408:	e008      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b410:	e004      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	75fb      	strb	r3, [r7, #23]
        break;
 800b416:	e001      	b.n	800b41c <HAL_LPTIM_RegisterCallback+0x14c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hlptim);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return status;
 800b424:	7dfb      	ldrb	r3, [r7, #23]
}
 800b426:	4618      	mov	r0, r3
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop

0800b434 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a19      	ldr	r2, [pc, #100]	; (800b4a4 <LPTIM_ResetCallback+0x70>)
 800b440:	659a      	str	r2, [r3, #88]	; 0x58
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a18      	ldr	r2, [pc, #96]	; (800b4a8 <LPTIM_ResetCallback+0x74>)
 800b446:	65da      	str	r2, [r3, #92]	; 0x5c
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a18      	ldr	r2, [pc, #96]	; (800b4ac <LPTIM_ResetCallback+0x78>)
 800b44c:	661a      	str	r2, [r3, #96]	; 0x60
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a17      	ldr	r2, [pc, #92]	; (800b4b0 <LPTIM_ResetCallback+0x7c>)
 800b452:	665a      	str	r2, [r3, #100]	; 0x64
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a17      	ldr	r2, [pc, #92]	; (800b4b4 <LPTIM_ResetCallback+0x80>)
 800b458:	669a      	str	r2, [r3, #104]	; 0x68
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a16      	ldr	r2, [pc, #88]	; (800b4b8 <LPTIM_ResetCallback+0x84>)
 800b45e:	66da      	str	r2, [r3, #108]	; 0x6c
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a16      	ldr	r2, [pc, #88]	; (800b4bc <LPTIM_ResetCallback+0x88>)
 800b464:	671a      	str	r2, [r3, #112]	; 0x70
  lptim->UpdateEventCallback = HAL_LPTIM_UpdateEventCallback;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a15      	ldr	r2, [pc, #84]	; (800b4c0 <LPTIM_ResetCallback+0x8c>)
 800b46a:	675a      	str	r2, [r3, #116]	; 0x74
  lptim->RepCounterWriteCallback = HAL_LPTIM_RepCounterWriteCallback;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a15      	ldr	r2, [pc, #84]	; (800b4c4 <LPTIM_ResetCallback+0x90>)
 800b470:	679a      	str	r2, [r3, #120]	; 0x78
  lptim->UpdateEventHalfCpltCallback = HAL_LPTIM_UpdateEventHalfCpltCallback;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a14      	ldr	r2, [pc, #80]	; (800b4c8 <LPTIM_ResetCallback+0x94>)
 800b476:	67da      	str	r2, [r3, #124]	; 0x7c
  lptim->IC_CaptureCallback      = HAL_LPTIM_IC_CaptureCallback;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a14      	ldr	r2, [pc, #80]	; (800b4cc <LPTIM_ResetCallback+0x98>)
 800b47c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  lptim->IC_CaptureHalfCpltCallback = HAL_LPTIM_IC_CaptureHalfCpltCallback;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a13      	ldr	r2, [pc, #76]	; (800b4d0 <LPTIM_ResetCallback+0x9c>)
 800b484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  lptim->IC_OverCaptureCallback  = HAL_LPTIM_IC_OverCaptureCallback;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a12      	ldr	r2, [pc, #72]	; (800b4d4 <LPTIM_ResetCallback+0xa0>)
 800b48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  lptim->ErrorCallback           = HAL_LPTIM_ErrorCallback;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a11      	ldr	r2, [pc, #68]	; (800b4d8 <LPTIM_ResetCallback+0xa4>)
 800b494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr
 800b4a4:	0800b1b9 	.word	0x0800b1b9
 800b4a8:	0800b1cd 	.word	0x0800b1cd
 800b4ac:	0800b1e1 	.word	0x0800b1e1
 800b4b0:	0800b1f5 	.word	0x0800b1f5
 800b4b4:	0800b209 	.word	0x0800b209
 800b4b8:	0800b21d 	.word	0x0800b21d
 800b4bc:	0800b231 	.word	0x0800b231
 800b4c0:	0800b245 	.word	0x0800b245
 800b4c4:	0800b259 	.word	0x0800b259
 800b4c8:	0800b2a9 	.word	0x0800b2a9
 800b4cc:	0800b26d 	.word	0x0800b26d
 800b4d0:	0800b295 	.word	0x0800b295
 800b4d4:	0800b281 	.word	0x0800b281
 800b4d8:	0800b2bd 	.word	0x0800b2bd

0800b4dc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800b4ea:	4b12      	ldr	r3, [pc, #72]	; (800b534 <LPTIM_WaitForFlag+0x58>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a12      	ldr	r2, [pc, #72]	; (800b538 <LPTIM_WaitForFlag+0x5c>)
 800b4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f4:	0b9b      	lsrs	r3, r3, #14
 800b4f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4fa:	fb02 f303 	mul.w	r3, r2, r3
 800b4fe:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	3b01      	subs	r3, #1
 800b504:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	4013      	ands	r3, r2
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d002      	beq.n	800b526 <LPTIM_WaitForFlag+0x4a>
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1ec      	bne.n	800b500 <LPTIM_WaitForFlag+0x24>

  return result;
 800b526:	7bfb      	ldrb	r3, [r7, #15]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	200000e4 	.word	0x200000e4
 800b538:	d1b71759 	.word	0xd1b71759

0800b53c <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, LPTIM_OC_ConfigTypeDef *sConfig)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54c:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f023 030d 	bic.w	r3, r3, #13
 800b554:	60fb      	str	r3, [r7, #12]

  if (hlptim->Instance == LPTIM4)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a2a      	ldr	r2, [pc, #168]	; (800b604 <LPTIM_OC1_SetConfig+0xc8>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d112      	bne.n	800b586 <LPTIM_OC1_SetConfig+0x4a>
  {
    tmpcfgr = hlptim->Instance->CFGR;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	60bb      	str	r3, [r7, #8]
    tmpcfgr &= ~LPTIM_CFGR_WAVPOL_Msk;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b56e:	60bb      	str	r3, [r7, #8]
    tmpcfgr |= sConfig->OCPolarity << LPTIM_CFGR_WAVPOL_Pos;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	055b      	lsls	r3, r3, #21
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	4313      	orrs	r3, r2
 800b57a:	60bb      	str	r3, [r7, #8]

    /* Write to CFGR register */
    hlptim->Instance->CFGR = tmpcfgr;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	60da      	str	r2, [r3, #12]
 800b584:	e005      	b.n	800b592 <LPTIM_OC1_SetConfig+0x56>
  }
  else
  {
    tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	4313      	orrs	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	691a      	ldr	r2, [r3, #16]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f042 0201 	orr.w	r2, r2, #1
 800b5a0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2208      	movs	r2, #8
 800b5a8:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	6812      	ldr	r2, [r2, #0]
 800b5b2:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 800b5b4:	2108      	movs	r1, #8
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7ff ff90 	bl	800b4dc <LPTIM_WaitForFlag>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d101      	bne.n	800b5c6 <LPTIM_OC1_SetConfig+0x8a>
  {
    return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e01a      	b.n	800b5fc <LPTIM_OC1_SetConfig+0xc0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10e      	bne.n	800b5f2 <LPTIM_OC1_SetConfig+0xb6>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d107      	bne.n	800b5f2 <LPTIM_OC1_SetConfig+0xb6>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	691a      	ldr	r2, [r3, #16]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f022 0201 	bic.w	r2, r2, #1
 800b5f0:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	46004c00 	.word	0x46004c00

0800b608 <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, LPTIM_OC_ConfigTypeDef *sConfig)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b618:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800b620:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	049b      	lsls	r3, r3, #18
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f042 0201 	orr.w	r2, r2, #1
 800b63c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b646:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	6812      	ldr	r2, [r2, #0]
 800b650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 800b652:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff ff40 	bl	800b4dc <LPTIM_WaitForFlag>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 800b662:	2303      	movs	r3, #3
 800b664:	e01a      	b.n	800b69c <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	f003 0302 	and.w	r3, r3, #2
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10e      	bne.n	800b692 <LPTIM_OC2_SetConfig+0x8a>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d107      	bne.n	800b692 <LPTIM_OC2_SetConfig+0x8a>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f022 0201 	bic.w	r2, r2, #1
 800b690:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800b6ac:	4b34      	ldr	r3, [pc, #208]	; (800b780 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b6b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d101      	bne.n	800b6c2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e057      	b.n	800b772 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c8:	d90a      	bls.n	800b6e0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800b6ca:	4b2d      	ldr	r3, [pc, #180]	; (800b780 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	4a2a      	ldr	r2, [pc, #168]	; (800b780 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b6dc:	60d3      	str	r3, [r2, #12]
 800b6de:	e007      	b.n	800b6f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800b6e0:	4b27      	ldr	r3, [pc, #156]	; (800b780 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b6e8:	4925      	ldr	r1, [pc, #148]	; (800b780 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b6f0:	4b24      	ldr	r3, [pc, #144]	; (800b784 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a24      	ldr	r2, [pc, #144]	; (800b788 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fa:	099b      	lsrs	r3, r3, #6
 800b6fc:	2232      	movs	r2, #50	; 0x32
 800b6fe:	fb02 f303 	mul.w	r3, r2, r3
 800b702:	4a21      	ldr	r2, [pc, #132]	; (800b788 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b704:	fba2 2303 	umull	r2, r3, r2, r3
 800b708:	099b      	lsrs	r3, r3, #6
 800b70a:	3301      	adds	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b70e:	e002      	b.n	800b716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3b01      	subs	r3, #1
 800b714:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b716:	4b1a      	ldr	r3, [pc, #104]	; (800b780 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d102      	bne.n	800b728 <HAL_PWREx_ControlVoltageScaling+0x84>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f3      	bne.n	800b710 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d01b      	beq.n	800b766 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b72e:	4b15      	ldr	r3, [pc, #84]	; (800b784 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a15      	ldr	r2, [pc, #84]	; (800b788 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b734:	fba2 2303 	umull	r2, r3, r2, r3
 800b738:	099b      	lsrs	r3, r3, #6
 800b73a:	2232      	movs	r2, #50	; 0x32
 800b73c:	fb02 f303 	mul.w	r3, r2, r3
 800b740:	4a11      	ldr	r2, [pc, #68]	; (800b788 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b742:	fba2 2303 	umull	r2, r3, r2, r3
 800b746:	099b      	lsrs	r3, r3, #6
 800b748:	3301      	adds	r3, #1
 800b74a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b74c:	e002      	b.n	800b754 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3b01      	subs	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b754:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <HAL_PWREx_ControlVoltageScaling+0xc2>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1f3      	bne.n	800b74e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e000      	b.n	800b772 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	46020800 	.word	0x46020800
 800b784:	200000e4 	.word	0x200000e4
 800b788:	10624dd3 	.word	0x10624dd3

0800b78c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <HAL_PWREx_GetVoltageRange+0x18>)
 800b792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800b798:	4618      	mov	r0, r3
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	46020800 	.word	0x46020800

0800b7a8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800b7ac:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	4a04      	ldr	r2, [pc, #16]	; (800b7c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800b7b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7b6:	6113      	str	r3, [r2, #16]
}
 800b7b8:	bf00      	nop
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	46020800 	.word	0x46020800

0800b7c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800b7cc:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	4a04      	ldr	r2, [pc, #16]	; (800b7e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b7d2:	f043 0301 	orr.w	r3, r3, #1
 800b7d6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b7d8:	bf00      	nop
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	46020800 	.word	0x46020800

0800b7e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08e      	sub	sp, #56	; 0x38
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d102      	bne.n	800b802 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f000 bec3 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b802:	4b9c      	ldr	r3, [pc, #624]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	f003 030c 	and.w	r3, r3, #12
 800b80a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b80c:	4b99      	ldr	r3, [pc, #612]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b810:	f003 0303 	and.w	r3, r3, #3
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0310 	and.w	r3, r3, #16
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 8172 	beq.w	800bb08 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	2b00      	cmp	r3, #0
 800b828:	d007      	beq.n	800b83a <HAL_RCC_OscConfig+0x52>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	2b0c      	cmp	r3, #12
 800b82e:	f040 80e4 	bne.w	800b9fa <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b834:	2b01      	cmp	r3, #1
 800b836:	f040 80e0 	bne.w	800b9fa <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b83a:	4b8e      	ldr	r3, [pc, #568]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 0304 	and.w	r3, r3, #4
 800b842:	2b00      	cmp	r3, #0
 800b844:	d006      	beq.n	800b854 <HAL_RCC_OscConfig+0x6c>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d102      	bne.n	800b854 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	f000 be9a 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b858:	4b86      	ldr	r3, [pc, #536]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d004      	beq.n	800b86e <HAL_RCC_OscConfig+0x86>
 800b864:	4b83      	ldr	r3, [pc, #524]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b86c:	e005      	b.n	800b87a <HAL_RCC_OscConfig+0x92>
 800b86e:	4b81      	ldr	r3, [pc, #516]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b874:	041b      	lsls	r3, r3, #16
 800b876:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d255      	bcs.n	800b92a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	4618      	mov	r0, r3
 800b88a:	f001 f9d3 	bl	800cc34 <RCC_SetFlashLatencyFromMSIRange>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	f000 be77 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b89a:	4b76      	ldr	r3, [pc, #472]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	4a75      	ldr	r2, [pc, #468]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b8a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b8a4:	6093      	str	r3, [r2, #8]
 800b8a6:	4b73      	ldr	r3, [pc, #460]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	4970      	ldr	r1, [pc, #448]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b8c0:	d309      	bcc.n	800b8d6 <HAL_RCC_OscConfig+0xee>
 800b8c2:	4b6c      	ldr	r3, [pc, #432]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	f023 021f 	bic.w	r2, r3, #31
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a1b      	ldr	r3, [r3, #32]
 800b8ce:	4969      	ldr	r1, [pc, #420]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60cb      	str	r3, [r1, #12]
 800b8d4:	e07e      	b.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	da0a      	bge.n	800b8f4 <HAL_RCC_OscConfig+0x10c>
 800b8de:	4b65      	ldr	r3, [pc, #404]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	015b      	lsls	r3, r3, #5
 800b8ec:	4961      	ldr	r1, [pc, #388]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	60cb      	str	r3, [r1, #12]
 800b8f2:	e06f      	b.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fc:	d30a      	bcc.n	800b914 <HAL_RCC_OscConfig+0x12c>
 800b8fe:	4b5d      	ldr	r3, [pc, #372]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	029b      	lsls	r3, r3, #10
 800b90c:	4959      	ldr	r1, [pc, #356]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	60cb      	str	r3, [r1, #12]
 800b912:	e05f      	b.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
 800b914:	4b57      	ldr	r3, [pc, #348]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
 800b920:	03db      	lsls	r3, r3, #15
 800b922:	4954      	ldr	r1, [pc, #336]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b924:	4313      	orrs	r3, r2
 800b926:	60cb      	str	r3, [r1, #12]
 800b928:	e054      	b.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b92a:	4b52      	ldr	r3, [pc, #328]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	4a51      	ldr	r2, [pc, #324]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b934:	6093      	str	r3, [r2, #8]
 800b936:	4b4f      	ldr	r3, [pc, #316]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b942:	494c      	ldr	r1, [pc, #304]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b944:	4313      	orrs	r3, r2
 800b946:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b950:	d309      	bcc.n	800b966 <HAL_RCC_OscConfig+0x17e>
 800b952:	4b48      	ldr	r3, [pc, #288]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f023 021f 	bic.w	r2, r3, #31
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	4945      	ldr	r1, [pc, #276]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b960:	4313      	orrs	r3, r2
 800b962:	60cb      	str	r3, [r1, #12]
 800b964:	e028      	b.n	800b9b8 <HAL_RCC_OscConfig+0x1d0>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da0a      	bge.n	800b984 <HAL_RCC_OscConfig+0x19c>
 800b96e:	4b41      	ldr	r3, [pc, #260]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	015b      	lsls	r3, r3, #5
 800b97c:	493d      	ldr	r1, [pc, #244]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	60cb      	str	r3, [r1, #12]
 800b982:	e019      	b.n	800b9b8 <HAL_RCC_OscConfig+0x1d0>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b98c:	d30a      	bcc.n	800b9a4 <HAL_RCC_OscConfig+0x1bc>
 800b98e:	4b39      	ldr	r3, [pc, #228]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	029b      	lsls	r3, r3, #10
 800b99c:	4935      	ldr	r1, [pc, #212]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	60cb      	str	r3, [r1, #12]
 800b9a2:	e009      	b.n	800b9b8 <HAL_RCC_OscConfig+0x1d0>
 800b9a4:	4b33      	ldr	r3, [pc, #204]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a1b      	ldr	r3, [r3, #32]
 800b9b0:	03db      	lsls	r3, r3, #15
 800b9b2:	4930      	ldr	r1, [pc, #192]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 f936 	bl	800cc34 <RCC_SetFlashLatencyFromMSIRange>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d002      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f000 bdda 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800b9d4:	f001 f8d8 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b9d8:	4b27      	ldr	r3, [pc, #156]	; (800ba78 <HAL_RCC_OscConfig+0x290>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fc ff0d 	bl	80087fc <HAL_InitTick>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800b9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 808a 	beq.w	800bb06 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800b9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9f6:	f000 bdc7 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d066      	beq.n	800bad0 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800ba02:	4b1c      	ldr	r3, [pc, #112]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a1b      	ldr	r2, [pc, #108]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba08:	f043 0301 	orr.w	r3, r3, #1
 800ba0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ba0e:	f7fc ff3f 	bl	8008890 <HAL_GetTick>
 800ba12:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ba14:	e009      	b.n	800ba2a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba16:	f7fc ff3b 	bl	8008890 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d902      	bls.n	800ba2a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	f000 bdaf 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ba2a:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0ef      	beq.n	800ba16 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800ba36:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	4a0e      	ldr	r2, [pc, #56]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba40:	6093      	str	r3, [r2, #8]
 800ba42:	4b0c      	ldr	r3, [pc, #48]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	4909      	ldr	r1, [pc, #36]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ba5c:	d30e      	bcc.n	800ba7c <HAL_RCC_OscConfig+0x294>
 800ba5e:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	f023 021f 	bic.w	r2, r3, #31
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	4902      	ldr	r1, [pc, #8]	; (800ba74 <HAL_RCC_OscConfig+0x28c>)
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	60cb      	str	r3, [r1, #12]
 800ba70:	e04a      	b.n	800bb08 <HAL_RCC_OscConfig+0x320>
 800ba72:	bf00      	nop
 800ba74:	46020c00 	.word	0x46020c00
 800ba78:	200000e8 	.word	0x200000e8
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	da0a      	bge.n	800ba9a <HAL_RCC_OscConfig+0x2b2>
 800ba84:	4b9b      	ldr	r3, [pc, #620]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	015b      	lsls	r3, r3, #5
 800ba92:	4998      	ldr	r1, [pc, #608]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60cb      	str	r3, [r1, #12]
 800ba98:	e036      	b.n	800bb08 <HAL_RCC_OscConfig+0x320>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa2:	d30a      	bcc.n	800baba <HAL_RCC_OscConfig+0x2d2>
 800baa4:	4b93      	ldr	r3, [pc, #588]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a1b      	ldr	r3, [r3, #32]
 800bab0:	029b      	lsls	r3, r3, #10
 800bab2:	4990      	ldr	r1, [pc, #576]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	60cb      	str	r3, [r1, #12]
 800bab8:	e026      	b.n	800bb08 <HAL_RCC_OscConfig+0x320>
 800baba:	4b8e      	ldr	r3, [pc, #568]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	03db      	lsls	r3, r3, #15
 800bac8:	498a      	ldr	r1, [pc, #552]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800baca:	4313      	orrs	r3, r2
 800bacc:	60cb      	str	r3, [r1, #12]
 800bace:	e01b      	b.n	800bb08 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800bad0:	4b88      	ldr	r3, [pc, #544]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a87      	ldr	r2, [pc, #540]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bad6:	f023 0301 	bic.w	r3, r3, #1
 800bada:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800badc:	f7fc fed8 	bl	8008890 <HAL_GetTick>
 800bae0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bae2:	e009      	b.n	800baf8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bae4:	f7fc fed4 	bl	8008890 <HAL_GetTick>
 800bae8:	4602      	mov	r2, r0
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d902      	bls.n	800baf8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	f000 bd48 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800baf8:	4b7e      	ldr	r3, [pc, #504]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1ef      	bne.n	800bae4 <HAL_RCC_OscConfig+0x2fc>
 800bb04:	e000      	b.n	800bb08 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bb06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 8094 	beq.w	800bc3e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	2b08      	cmp	r3, #8
 800bb1a:	d005      	beq.n	800bb28 <HAL_RCC_OscConfig+0x340>
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	2b0c      	cmp	r3, #12
 800bb20:	d110      	bne.n	800bb44 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d10d      	bne.n	800bb44 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb28:	4b72      	ldr	r3, [pc, #456]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 8083 	beq.w	800bc3c <HAL_RCC_OscConfig+0x454>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d17e      	bne.n	800bc3c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	f000 bd22 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb4c:	d106      	bne.n	800bb5c <HAL_RCC_OscConfig+0x374>
 800bb4e:	4b69      	ldr	r3, [pc, #420]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a68      	ldr	r2, [pc, #416]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	e041      	b.n	800bbe0 <HAL_RCC_OscConfig+0x3f8>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb64:	d112      	bne.n	800bb8c <HAL_RCC_OscConfig+0x3a4>
 800bb66:	4b63      	ldr	r3, [pc, #396]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a62      	ldr	r2, [pc, #392]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	4b60      	ldr	r3, [pc, #384]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a5f      	ldr	r2, [pc, #380]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	4b5d      	ldr	r3, [pc, #372]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a5c      	ldr	r2, [pc, #368]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	e029      	b.n	800bbe0 <HAL_RCC_OscConfig+0x3f8>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800bb94:	d112      	bne.n	800bbbc <HAL_RCC_OscConfig+0x3d4>
 800bb96:	4b57      	ldr	r3, [pc, #348]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a56      	ldr	r2, [pc, #344]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bb9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	4b54      	ldr	r3, [pc, #336]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a53      	ldr	r2, [pc, #332]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	4b51      	ldr	r3, [pc, #324]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a50      	ldr	r2, [pc, #320]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	e011      	b.n	800bbe0 <HAL_RCC_OscConfig+0x3f8>
 800bbbc:	4b4d      	ldr	r3, [pc, #308]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a4c      	ldr	r2, [pc, #304]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	4b4a      	ldr	r3, [pc, #296]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a49      	ldr	r2, [pc, #292]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	4b47      	ldr	r3, [pc, #284]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a46      	ldr	r2, [pc, #280]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bbda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bbde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d014      	beq.n	800bc12 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800bbe8:	f7fc fe52 	bl	8008890 <HAL_GetTick>
 800bbec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bbee:	e009      	b.n	800bc04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbf0:	f7fc fe4e 	bl	8008890 <HAL_GetTick>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	2b64      	cmp	r3, #100	; 0x64
 800bbfc:	d902      	bls.n	800bc04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	f000 bcc2 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc04:	4b3b      	ldr	r3, [pc, #236]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0ef      	beq.n	800bbf0 <HAL_RCC_OscConfig+0x408>
 800bc10:	e015      	b.n	800bc3e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800bc12:	f7fc fe3d 	bl	8008890 <HAL_GetTick>
 800bc16:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc18:	e009      	b.n	800bc2e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc1a:	f7fc fe39 	bl	8008890 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	2b64      	cmp	r3, #100	; 0x64
 800bc26:	d902      	bls.n	800bc2e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	f000 bcad 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc2e:	4b31      	ldr	r3, [pc, #196]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1ef      	bne.n	800bc1a <HAL_RCC_OscConfig+0x432>
 800bc3a:	e000      	b.n	800bc3e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 0302 	and.w	r3, r3, #2
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d066      	beq.n	800bd18 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	d005      	beq.n	800bc5c <HAL_RCC_OscConfig+0x474>
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	2b0c      	cmp	r3, #12
 800bc54:	d11a      	bne.n	800bc8c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d117      	bne.n	800bc8c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc5c:	4b25      	ldr	r3, [pc, #148]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d006      	beq.n	800bc76 <HAL_RCC_OscConfig+0x48e>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d102      	bne.n	800bc76 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	f000 bc89 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bc76:	4b1f      	ldr	r3, [pc, #124]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	041b      	lsls	r3, r3, #16
 800bc84:	491b      	ldr	r1, [pc, #108]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bc86:	4313      	orrs	r3, r2
 800bc88:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc8a:	e045      	b.n	800bd18 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d024      	beq.n	800bcde <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800bc94:	4b17      	ldr	r3, [pc, #92]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a16      	ldr	r2, [pc, #88]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bc9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bca0:	f7fc fdf6 	bl	8008890 <HAL_GetTick>
 800bca4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bca6:	e009      	b.n	800bcbc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bca8:	f7fc fdf2 	bl	8008890 <HAL_GetTick>
 800bcac:	4602      	mov	r2, r0
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d902      	bls.n	800bcbc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	f000 bc66 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bcbc:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d0ef      	beq.n	800bca8 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	041b      	lsls	r3, r3, #16
 800bcd6:	4907      	ldr	r1, [pc, #28]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	610b      	str	r3, [r1, #16]
 800bcdc:	e01c      	b.n	800bd18 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a04      	ldr	r2, [pc, #16]	; (800bcf4 <HAL_RCC_OscConfig+0x50c>)
 800bce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bce8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bcea:	f7fc fdd1 	bl	8008890 <HAL_GetTick>
 800bcee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bcf0:	e00c      	b.n	800bd0c <HAL_RCC_OscConfig+0x524>
 800bcf2:	bf00      	nop
 800bcf4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcf8:	f7fc fdca 	bl	8008890 <HAL_GetTick>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d902      	bls.n	800bd0c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800bd06:	2303      	movs	r3, #3
 800bd08:	f000 bc3e 	b.w	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd0c:	4baf      	ldr	r3, [pc, #700]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1ef      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0308 	and.w	r3, r3, #8
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f000 80c7 	beq.w	800beb4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800bd26:	2300      	movs	r3, #0
 800bd28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd2c:	4ba7      	ldr	r3, [pc, #668]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bd2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd32:	f003 0304 	and.w	r3, r3, #4
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d111      	bne.n	800bd5e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd3a:	4ba4      	ldr	r3, [pc, #656]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bd3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd40:	4aa2      	ldr	r2, [pc, #648]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bd42:	f043 0304 	orr.w	r3, r3, #4
 800bd46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bd4a:	4ba0      	ldr	r3, [pc, #640]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bd4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	617b      	str	r3, [r7, #20]
 800bd56:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bd5e:	4b9c      	ldr	r3, [pc, #624]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800bd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d118      	bne.n	800bd9c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bd6a:	4b99      	ldr	r3, [pc, #612]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	4a98      	ldr	r2, [pc, #608]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800bd70:	f043 0301 	orr.w	r3, r3, #1
 800bd74:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd76:	f7fc fd8b 	bl	8008890 <HAL_GetTick>
 800bd7a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bd7c:	e008      	b.n	800bd90 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd7e:	f7fc fd87 	bl	8008890 <HAL_GetTick>
 800bd82:	4602      	mov	r2, r0
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d901      	bls.n	800bd90 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	e3fb      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bd90:	4b8f      	ldr	r3, [pc, #572]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800bd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d0f0      	beq.n	800bd7e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d05f      	beq.n	800be64 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800bda4:	4b89      	ldr	r3, [pc, #548]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bda6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdaa:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	699a      	ldr	r2, [r3, #24]
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d037      	beq.n	800be2a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d006      	beq.n	800bdd2 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e3da      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01b      	beq.n	800be14 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800bddc:	4b7b      	ldr	r3, [pc, #492]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bdde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bde2:	4a7a      	ldr	r2, [pc, #488]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bde4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800bde8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800bdec:	f7fc fd50 	bl	8008890 <HAL_GetTick>
 800bdf0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800bdf2:	e008      	b.n	800be06 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bdf4:	f7fc fd4c 	bl	8008890 <HAL_GetTick>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d901      	bls.n	800be06 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800be02:	2303      	movs	r3, #3
 800be04:	e3c0      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be06:	4b71      	ldr	r3, [pc, #452]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1ef      	bne.n	800bdf4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800be14:	4b6d      	ldr	r3, [pc, #436]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	496a      	ldr	r1, [pc, #424]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be24:	4313      	orrs	r3, r2
 800be26:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800be2a:	4b68      	ldr	r3, [pc, #416]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be30:	4a66      	ldr	r2, [pc, #408]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800be3a:	f7fc fd29 	bl	8008890 <HAL_GetTick>
 800be3e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be40:	e008      	b.n	800be54 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be42:	f7fc fd25 	bl	8008890 <HAL_GetTick>
 800be46:	4602      	mov	r2, r0
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d901      	bls.n	800be54 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e399      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be54:	4b5d      	ldr	r3, [pc, #372]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0ef      	beq.n	800be42 <HAL_RCC_OscConfig+0x65a>
 800be62:	e01b      	b.n	800be9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800be64:	4b59      	ldr	r3, [pc, #356]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be6a:	4a58      	ldr	r2, [pc, #352]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be6c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800be70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800be74:	f7fc fd0c 	bl	8008890 <HAL_GetTick>
 800be78:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be7a:	e008      	b.n	800be8e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be7c:	f7fc fd08 	bl	8008890 <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b02      	cmp	r3, #2
 800be88:	d901      	bls.n	800be8e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e37c      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be8e:	4b4f      	ldr	r3, [pc, #316]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800be90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1ef      	bne.n	800be7c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800be9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d107      	bne.n	800beb4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bea4:	4b49      	ldr	r3, [pc, #292]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beaa:	4a48      	ldr	r2, [pc, #288]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800beac:	f023 0304 	bic.w	r3, r3, #4
 800beb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 8112 	beq.w	800c0e6 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800bec2:	2300      	movs	r3, #0
 800bec4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bec8:	4b40      	ldr	r3, [pc, #256]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800beca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bece:	f003 0304 	and.w	r3, r3, #4
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d111      	bne.n	800befa <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bed6:	4b3d      	ldr	r3, [pc, #244]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bedc:	4a3b      	ldr	r2, [pc, #236]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bede:	f043 0304 	orr.w	r3, r3, #4
 800bee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bee6:	4b39      	ldr	r3, [pc, #228]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	613b      	str	r3, [r7, #16]
 800bef2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800bef4:	2301      	movs	r3, #1
 800bef6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800befa:	4b35      	ldr	r3, [pc, #212]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d118      	bne.n	800bf38 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bf06:	4b32      	ldr	r3, [pc, #200]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800bf08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0a:	4a31      	ldr	r2, [pc, #196]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800bf0c:	f043 0301 	orr.w	r3, r3, #1
 800bf10:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf12:	f7fc fcbd 	bl	8008890 <HAL_GetTick>
 800bf16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf18:	e008      	b.n	800bf2c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf1a:	f7fc fcb9 	bl	8008890 <HAL_GetTick>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d901      	bls.n	800bf2c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e32d      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf2c:	4b28      	ldr	r3, [pc, #160]	; (800bfd0 <HAL_RCC_OscConfig+0x7e8>)
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0f0      	beq.n	800bf1a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01f      	beq.n	800bf84 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d010      	beq.n	800bf72 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bf50:	4b1e      	ldr	r3, [pc, #120]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf56:	4a1d      	ldr	r2, [pc, #116]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf58:	f043 0304 	orr.w	r3, r3, #4
 800bf5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bf60:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf66:	4a19      	ldr	r2, [pc, #100]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf68:	f043 0301 	orr.w	r3, r3, #1
 800bf6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bf70:	e018      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bf72:	4b16      	ldr	r3, [pc, #88]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf78:	4a14      	ldr	r2, [pc, #80]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf7a:	f043 0301 	orr.w	r3, r3, #1
 800bf7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bf82:	e00f      	b.n	800bfa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bf84:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf8a:	4a10      	ldr	r2, [pc, #64]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf8c:	f023 0301 	bic.w	r3, r3, #1
 800bf90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bf94:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf9a:	4a0c      	ldr	r2, [pc, #48]	; (800bfcc <HAL_RCC_OscConfig+0x7e4>)
 800bf9c:	f023 0304 	bic.w	r3, r3, #4
 800bfa0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d058      	beq.n	800c05e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800bfac:	f7fc fc70 	bl	8008890 <HAL_GetTick>
 800bfb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfb2:	e00f      	b.n	800bfd4 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfb4:	f7fc fc6c 	bl	8008890 <HAL_GetTick>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d906      	bls.n	800bfd4 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e2de      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
 800bfca:	bf00      	nop
 800bfcc:	46020c00 	.word	0x46020c00
 800bfd0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfd4:	4b9c      	ldr	r3, [pc, #624]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800bfd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfda:	f003 0302 	and.w	r3, r3, #2
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0e8      	beq.n	800bfb4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d01b      	beq.n	800c026 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800bfee:	4b96      	ldr	r3, [pc, #600]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800bff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bff4:	4a94      	ldr	r2, [pc, #592]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800bff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bffa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800bffe:	e00a      	b.n	800c016 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c000:	f7fc fc46 	bl	8008890 <HAL_GetTick>
 800c004:	4602      	mov	r2, r0
 800c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c00e:	4293      	cmp	r3, r2
 800c010:	d901      	bls.n	800c016 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e2b8      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c016:	4b8c      	ldr	r3, [pc, #560]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c01c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c020:	2b00      	cmp	r3, #0
 800c022:	d0ed      	beq.n	800c000 <HAL_RCC_OscConfig+0x818>
 800c024:	e053      	b.n	800c0ce <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c026:	4b88      	ldr	r3, [pc, #544]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c02c:	4a86      	ldr	r2, [pc, #536]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c02e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c032:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c036:	e00a      	b.n	800c04e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c038:	f7fc fc2a 	bl	8008890 <HAL_GetTick>
 800c03c:	4602      	mov	r2, r0
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	f241 3288 	movw	r2, #5000	; 0x1388
 800c046:	4293      	cmp	r3, r2
 800c048:	d901      	bls.n	800c04e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e29c      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c04e:	4b7e      	ldr	r3, [pc, #504]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1ed      	bne.n	800c038 <HAL_RCC_OscConfig+0x850>
 800c05c:	e037      	b.n	800c0ce <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c05e:	f7fc fc17 	bl	8008890 <HAL_GetTick>
 800c062:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c064:	e00a      	b.n	800c07c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c066:	f7fc fc13 	bl	8008890 <HAL_GetTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	f241 3288 	movw	r2, #5000	; 0x1388
 800c074:	4293      	cmp	r3, r2
 800c076:	d901      	bls.n	800c07c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800c078:	2303      	movs	r3, #3
 800c07a:	e285      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c07c:	4b72      	ldr	r3, [pc, #456]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c07e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1ed      	bne.n	800c066 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c08a:	4b6f      	ldr	r3, [pc, #444]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01a      	beq.n	800c0ce <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c098:	4b6b      	ldr	r3, [pc, #428]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c09a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c09e:	4a6a      	ldr	r2, [pc, #424]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c0a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c0a8:	e00a      	b.n	800c0c0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0aa:	f7fc fbf1 	bl	8008890 <HAL_GetTick>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d901      	bls.n	800c0c0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e263      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c0c0:	4b61      	ldr	r3, [pc, #388]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c0c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1ed      	bne.n	800c0aa <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c0ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d107      	bne.n	800c0e6 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c0d6:	4b5c      	ldr	r3, [pc, #368]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c0d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0dc:	4a5a      	ldr	r2, [pc, #360]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c0de:	f023 0304 	bic.w	r3, r3, #4
 800c0e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0320 	and.w	r3, r3, #32
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d036      	beq.n	800c160 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d019      	beq.n	800c12e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c0fa:	4b53      	ldr	r3, [pc, #332]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a52      	ldr	r2, [pc, #328]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c104:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c106:	f7fc fbc3 	bl	8008890 <HAL_GetTick>
 800c10a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c10c:	e008      	b.n	800c120 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c10e:	f7fc fbbf 	bl	8008890 <HAL_GetTick>
 800c112:	4602      	mov	r2, r0
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d901      	bls.n	800c120 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800c11c:	2303      	movs	r3, #3
 800c11e:	e233      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c120:	4b49      	ldr	r3, [pc, #292]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0f0      	beq.n	800c10e <HAL_RCC_OscConfig+0x926>
 800c12c:	e018      	b.n	800c160 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c12e:	4b46      	ldr	r3, [pc, #280]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a45      	ldr	r2, [pc, #276]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c138:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c13a:	f7fc fba9 	bl	8008890 <HAL_GetTick>
 800c13e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c140:	e008      	b.n	800c154 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c142:	f7fc fba5 	bl	8008890 <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d901      	bls.n	800c154 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e219      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c154:	4b3c      	ldr	r3, [pc, #240]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1f0      	bne.n	800c142 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d036      	beq.n	800c1da <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c170:	2b00      	cmp	r3, #0
 800c172:	d019      	beq.n	800c1a8 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c174:	4b34      	ldr	r3, [pc, #208]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a33      	ldr	r2, [pc, #204]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c17a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c17e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c180:	f7fc fb86 	bl	8008890 <HAL_GetTick>
 800c184:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c186:	e008      	b.n	800c19a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c188:	f7fc fb82 	bl	8008890 <HAL_GetTick>
 800c18c:	4602      	mov	r2, r0
 800c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	2b02      	cmp	r3, #2
 800c194:	d901      	bls.n	800c19a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800c196:	2303      	movs	r3, #3
 800c198:	e1f6      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c19a:	4b2b      	ldr	r3, [pc, #172]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d0f0      	beq.n	800c188 <HAL_RCC_OscConfig+0x9a0>
 800c1a6:	e018      	b.n	800c1da <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c1a8:	4b27      	ldr	r3, [pc, #156]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a26      	ldr	r2, [pc, #152]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c1ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c1b4:	f7fc fb6c 	bl	8008890 <HAL_GetTick>
 800c1b8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c1ba:	e008      	b.n	800c1ce <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c1bc:	f7fc fb68 	bl	8008890 <HAL_GetTick>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d901      	bls.n	800c1ce <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	e1dc      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c1ce:	4b1e      	ldr	r3, [pc, #120]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1f0      	bne.n	800c1bc <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d07f      	beq.n	800c2e6 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d062      	beq.n	800c2b4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c1ee:	4b16      	ldr	r3, [pc, #88]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	4a15      	ldr	r2, [pc, #84]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c1f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c1f8:	6093      	str	r3, [r2, #8]
 800c1fa:	4b13      	ldr	r3, [pc, #76]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c206:	4910      	ldr	r1, [pc, #64]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c208:	4313      	orrs	r3, r2
 800c20a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c210:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c214:	d309      	bcc.n	800c22a <HAL_RCC_OscConfig+0xa42>
 800c216:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f023 021f 	bic.w	r2, r3, #31
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	4909      	ldr	r1, [pc, #36]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c224:	4313      	orrs	r3, r2
 800c226:	60cb      	str	r3, [r1, #12]
 800c228:	e02a      	b.n	800c280 <HAL_RCC_OscConfig+0xa98>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da0c      	bge.n	800c24c <HAL_RCC_OscConfig+0xa64>
 800c232:	4b05      	ldr	r3, [pc, #20]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	015b      	lsls	r3, r3, #5
 800c240:	4901      	ldr	r1, [pc, #4]	; (800c248 <HAL_RCC_OscConfig+0xa60>)
 800c242:	4313      	orrs	r3, r2
 800c244:	60cb      	str	r3, [r1, #12]
 800c246:	e01b      	b.n	800c280 <HAL_RCC_OscConfig+0xa98>
 800c248:	46020c00 	.word	0x46020c00
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c254:	d30a      	bcc.n	800c26c <HAL_RCC_OscConfig+0xa84>
 800c256:	4ba5      	ldr	r3, [pc, #660]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	029b      	lsls	r3, r3, #10
 800c264:	49a1      	ldr	r1, [pc, #644]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c266:	4313      	orrs	r3, r2
 800c268:	60cb      	str	r3, [r1, #12]
 800c26a:	e009      	b.n	800c280 <HAL_RCC_OscConfig+0xa98>
 800c26c:	4b9f      	ldr	r3, [pc, #636]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6a1b      	ldr	r3, [r3, #32]
 800c278:	03db      	lsls	r3, r3, #15
 800c27a:	499c      	ldr	r1, [pc, #624]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c27c:	4313      	orrs	r3, r2
 800c27e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c280:	4b9a      	ldr	r3, [pc, #616]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a99      	ldr	r2, [pc, #612]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c286:	f043 0310 	orr.w	r3, r3, #16
 800c28a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c28c:	f7fc fb00 	bl	8008890 <HAL_GetTick>
 800c290:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c292:	e008      	b.n	800c2a6 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c294:	f7fc fafc 	bl	8008890 <HAL_GetTick>
 800c298:	4602      	mov	r2, r0
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d901      	bls.n	800c2a6 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	e170      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c2a6:	4b91      	ldr	r3, [pc, #580]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0f0      	beq.n	800c294 <HAL_RCC_OscConfig+0xaac>
 800c2b2:	e018      	b.n	800c2e6 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c2b4:	4b8d      	ldr	r3, [pc, #564]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a8c      	ldr	r2, [pc, #560]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c2ba:	f023 0310 	bic.w	r3, r3, #16
 800c2be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c2c0:	f7fc fae6 	bl	8008890 <HAL_GetTick>
 800c2c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c2c6:	e008      	b.n	800c2da <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c2c8:	f7fc fae2 	bl	8008890 <HAL_GetTick>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d901      	bls.n	800c2da <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e156      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c2da:	4b84      	ldr	r3, [pc, #528]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 0320 	and.w	r3, r3, #32
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1f0      	bne.n	800c2c8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 814b 	beq.w	800c586 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c2f6:	4b7d      	ldr	r3, [pc, #500]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c2f8:	69db      	ldr	r3, [r3, #28]
 800c2fa:	f003 030c 	and.w	r3, r3, #12
 800c2fe:	2b0c      	cmp	r3, #12
 800c300:	f000 80fa 	beq.w	800c4f8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c308:	2b02      	cmp	r3, #2
 800c30a:	f040 80cc 	bne.w	800c4a6 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c30e:	4b77      	ldr	r3, [pc, #476]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a76      	ldr	r2, [pc, #472]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c318:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c31a:	f7fc fab9 	bl	8008890 <HAL_GetTick>
 800c31e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c320:	e008      	b.n	800c334 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c322:	f7fc fab5 	bl	8008890 <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d901      	bls.n	800c334 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e129      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c334:	4b6d      	ldr	r3, [pc, #436]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1f0      	bne.n	800c322 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c340:	4b6a      	ldr	r3, [pc, #424]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c346:	f003 0304 	and.w	r3, r3, #4
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d111      	bne.n	800c372 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800c34e:	4b67      	ldr	r3, [pc, #412]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c354:	4a65      	ldr	r2, [pc, #404]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c356:	f043 0304 	orr.w	r3, r3, #4
 800c35a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c35e:	4b63      	ldr	r3, [pc, #396]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800c36c:	2301      	movs	r3, #1
 800c36e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800c372:	4b5f      	ldr	r3, [pc, #380]	; (800c4f0 <HAL_RCC_OscConfig+0xd08>)
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c37a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c37e:	d102      	bne.n	800c386 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800c380:	2301      	movs	r3, #1
 800c382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c386:	4b5a      	ldr	r3, [pc, #360]	; (800c4f0 <HAL_RCC_OscConfig+0xd08>)
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	4a59      	ldr	r2, [pc, #356]	; (800c4f0 <HAL_RCC_OscConfig+0xd08>)
 800c38c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c390:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800c392:	4b56      	ldr	r3, [pc, #344]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c39a:	f023 0303 	bic.w	r3, r3, #3
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c3a6:	3a01      	subs	r2, #1
 800c3a8:	0212      	lsls	r2, r2, #8
 800c3aa:	4311      	orrs	r1, r2
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c3b0:	430a      	orrs	r2, r1
 800c3b2:	494e      	ldr	r1, [pc, #312]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	628b      	str	r3, [r1, #40]	; 0x28
 800c3b8:	4b4c      	ldr	r3, [pc, #304]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c3ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3bc:	4b4d      	ldr	r3, [pc, #308]	; (800c4f4 <HAL_RCC_OscConfig+0xd0c>)
 800c3be:	4013      	ands	r3, r2
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c3c4:	3a01      	subs	r2, #1
 800c3c6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c3ce:	3a01      	subs	r2, #1
 800c3d0:	0252      	lsls	r2, r2, #9
 800c3d2:	b292      	uxth	r2, r2
 800c3d4:	4311      	orrs	r1, r2
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c3da:	3a01      	subs	r2, #1
 800c3dc:	0412      	lsls	r2, r2, #16
 800c3de:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c3e2:	4311      	orrs	r1, r2
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c3e8:	3a01      	subs	r2, #1
 800c3ea:	0612      	lsls	r2, r2, #24
 800c3ec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	493e      	ldr	r1, [pc, #248]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c3f8:	4b3c      	ldr	r3, [pc, #240]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fc:	4a3b      	ldr	r2, [pc, #236]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c3fe:	f023 0310 	bic.w	r3, r3, #16
 800c402:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c404:	4b39      	ldr	r3, [pc, #228]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c40c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c414:	00d2      	lsls	r2, r2, #3
 800c416:	4935      	ldr	r1, [pc, #212]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c418:	4313      	orrs	r3, r2
 800c41a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c41c:	4b33      	ldr	r3, [pc, #204]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c420:	4a32      	ldr	r2, [pc, #200]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c422:	f043 0310 	orr.w	r3, r3, #16
 800c426:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800c428:	4b30      	ldr	r3, [pc, #192]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42c:	f023 020c 	bic.w	r2, r3, #12
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c434:	492d      	ldr	r1, [pc, #180]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c436:	4313      	orrs	r3, r2
 800c438:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800c43a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d105      	bne.n	800c44e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c442:	4b2b      	ldr	r3, [pc, #172]	; (800c4f0 <HAL_RCC_OscConfig+0xd08>)
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	4a2a      	ldr	r2, [pc, #168]	; (800c4f0 <HAL_RCC_OscConfig+0xd08>)
 800c448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c44c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800c44e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c452:	2b01      	cmp	r3, #1
 800c454:	d107      	bne.n	800c466 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800c456:	4b25      	ldr	r3, [pc, #148]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c45c:	4a23      	ldr	r2, [pc, #140]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c45e:	f023 0304 	bic.w	r3, r3, #4
 800c462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c466:	4b21      	ldr	r3, [pc, #132]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	4a20      	ldr	r2, [pc, #128]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c46c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c470:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800c472:	4b1e      	ldr	r3, [pc, #120]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a1d      	ldr	r2, [pc, #116]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c47c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c47e:	f7fc fa07 	bl	8008890 <HAL_GetTick>
 800c482:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c484:	e008      	b.n	800c498 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c486:	f7fc fa03 	bl	8008890 <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	2b02      	cmp	r3, #2
 800c492:	d901      	bls.n	800c498 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e077      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c498:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0f0      	beq.n	800c486 <HAL_RCC_OscConfig+0xc9e>
 800c4a4:	e06f      	b.n	800c586 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c4a6:	4b11      	ldr	r3, [pc, #68]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a10      	ldr	r2, [pc, #64]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c4ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c4b2:	f7fc f9ed 	bl	8008890 <HAL_GetTick>
 800c4b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c4b8:	e008      	b.n	800c4cc <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4ba:	f7fc f9e9 	bl	8008890 <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e05d      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c4cc:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1f0      	bne.n	800c4ba <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c4d8:	4b04      	ldr	r3, [pc, #16]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4dc:	4a03      	ldr	r2, [pc, #12]	; (800c4ec <HAL_RCC_OscConfig+0xd04>)
 800c4de:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	6293      	str	r3, [r2, #40]	; 0x28
 800c4e8:	e04d      	b.n	800c586 <HAL_RCC_OscConfig+0xd9e>
 800c4ea:	bf00      	nop
 800c4ec:	46020c00 	.word	0x46020c00
 800c4f0:	46020800 	.word	0x46020800
 800c4f4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c4f8:	4b25      	ldr	r3, [pc, #148]	; (800c590 <HAL_RCC_OscConfig+0xda8>)
 800c4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c4fe:	4b24      	ldr	r3, [pc, #144]	; (800c590 <HAL_RCC_OscConfig+0xda8>)
 800c500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c502:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d03a      	beq.n	800c582 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	f003 0203 	and.w	r2, r3, #3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c516:	429a      	cmp	r2, r3
 800c518:	d133      	bne.n	800c582 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	0a1b      	lsrs	r3, r3, #8
 800c51e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c526:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c528:	429a      	cmp	r2, r3
 800c52a:	d12a      	bne.n	800c582 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	0b1b      	lsrs	r3, r3, #12
 800c530:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c538:	429a      	cmp	r2, r3
 800c53a:	d122      	bne.n	800c582 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c546:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c548:	429a      	cmp	r2, r3
 800c54a:	d11a      	bne.n	800c582 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	0a5b      	lsrs	r3, r3, #9
 800c550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c558:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d111      	bne.n	800c582 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	0c1b      	lsrs	r3, r3, #16
 800c562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c56a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d108      	bne.n	800c582 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	0e1b      	lsrs	r3, r3, #24
 800c574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c57c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c57e:	429a      	cmp	r2, r3
 800c580:	d001      	beq.n	800c586 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e000      	b.n	800c588 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3738      	adds	r7, #56	; 0x38
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	46020c00 	.word	0x46020c00

0800c594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e1d9      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c5a8:	4b9b      	ldr	r3, [pc, #620]	; (800c818 <HAL_RCC_ClockConfig+0x284>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 030f 	and.w	r3, r3, #15
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d910      	bls.n	800c5d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5b6:	4b98      	ldr	r3, [pc, #608]	; (800c818 <HAL_RCC_ClockConfig+0x284>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f023 020f 	bic.w	r2, r3, #15
 800c5be:	4996      	ldr	r1, [pc, #600]	; (800c818 <HAL_RCC_ClockConfig+0x284>)
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5c6:	4b94      	ldr	r3, [pc, #592]	; (800c818 <HAL_RCC_ClockConfig+0x284>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f003 030f 	and.w	r3, r3, #15
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d001      	beq.n	800c5d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e1c1      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 0310 	and.w	r3, r3, #16
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d010      	beq.n	800c606 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	695a      	ldr	r2, [r3, #20]
 800c5e8:	4b8c      	ldr	r3, [pc, #560]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d908      	bls.n	800c606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800c5f4:	4b89      	ldr	r3, [pc, #548]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	4986      	ldr	r1, [pc, #536]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c602:	4313      	orrs	r3, r2
 800c604:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0308 	and.w	r3, r3, #8
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d012      	beq.n	800c638 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	691a      	ldr	r2, [r3, #16]
 800c616:	4b81      	ldr	r3, [pc, #516]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	091b      	lsrs	r3, r3, #4
 800c61c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c620:	429a      	cmp	r2, r3
 800c622:	d909      	bls.n	800c638 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c624:	4b7d      	ldr	r3, [pc, #500]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	011b      	lsls	r3, r3, #4
 800c632:	497a      	ldr	r1, [pc, #488]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c634:	4313      	orrs	r3, r2
 800c636:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d010      	beq.n	800c666 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68da      	ldr	r2, [r3, #12]
 800c648:	4b74      	ldr	r3, [pc, #464]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c650:	429a      	cmp	r2, r3
 800c652:	d908      	bls.n	800c666 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c654:	4b71      	ldr	r3, [pc, #452]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	496e      	ldr	r1, [pc, #440]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c662:	4313      	orrs	r3, r2
 800c664:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d010      	beq.n	800c694 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	689a      	ldr	r2, [r3, #8]
 800c676:	4b69      	ldr	r3, [pc, #420]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	f003 030f 	and.w	r3, r3, #15
 800c67e:	429a      	cmp	r2, r3
 800c680:	d908      	bls.n	800c694 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c682:	4b66      	ldr	r3, [pc, #408]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	f023 020f 	bic.w	r2, r3, #15
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	4963      	ldr	r1, [pc, #396]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c690:	4313      	orrs	r3, r2
 800c692:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 80d2 	beq.w	800c846 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d143      	bne.n	800c736 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6ae:	4b5b      	ldr	r3, [pc, #364]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c6b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6b4:	f003 0304 	and.w	r3, r3, #4
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d110      	bne.n	800c6de <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800c6bc:	4b57      	ldr	r3, [pc, #348]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c6be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6c2:	4a56      	ldr	r2, [pc, #344]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c6c4:	f043 0304 	orr.w	r3, r3, #4
 800c6c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c6cc:	4b53      	ldr	r3, [pc, #332]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c6ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6d2:	f003 0304 	and.w	r3, r3, #4
 800c6d6:	60bb      	str	r3, [r7, #8]
 800c6d8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800c6de:	f7fc f8d7 	bl	8008890 <HAL_GetTick>
 800c6e2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800c6e4:	4b4e      	ldr	r3, [pc, #312]	; (800c820 <HAL_RCC_ClockConfig+0x28c>)
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00f      	beq.n	800c710 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c6f0:	e008      	b.n	800c704 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800c6f2:	f7fc f8cd 	bl	8008890 <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d901      	bls.n	800c704 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e12b      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c704:	4b46      	ldr	r3, [pc, #280]	; (800c820 <HAL_RCC_ClockConfig+0x28c>)
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0f0      	beq.n	800c6f2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d107      	bne.n	800c726 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800c716:	4b41      	ldr	r3, [pc, #260]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c71c:	4a3f      	ldr	r2, [pc, #252]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c71e:	f023 0304 	bic.w	r3, r3, #4
 800c722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c726:	4b3d      	ldr	r3, [pc, #244]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d121      	bne.n	800c776 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e112      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	d107      	bne.n	800c74e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c73e:	4b37      	ldr	r3, [pc, #220]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d115      	bne.n	800c776 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e106      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d107      	bne.n	800c766 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c756:	4b31      	ldr	r3, [pc, #196]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e0fa      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c766:	4b2d      	ldr	r3, [pc, #180]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e0f2      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800c776:	4b29      	ldr	r3, [pc, #164]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c778:	69db      	ldr	r3, [r3, #28]
 800c77a:	f023 0203 	bic.w	r2, r3, #3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	4926      	ldr	r1, [pc, #152]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c784:	4313      	orrs	r3, r2
 800c786:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800c788:	f7fc f882 	bl	8008890 <HAL_GetTick>
 800c78c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	2b03      	cmp	r3, #3
 800c794:	d112      	bne.n	800c7bc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c796:	e00a      	b.n	800c7ae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c798:	f7fc f87a 	bl	8008890 <HAL_GetTick>
 800c79c:	4602      	mov	r2, r0
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d901      	bls.n	800c7ae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e0d6      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c7ae:	4b1b      	ldr	r3, [pc, #108]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	f003 030c 	and.w	r3, r3, #12
 800c7b6:	2b0c      	cmp	r3, #12
 800c7b8:	d1ee      	bne.n	800c798 <HAL_RCC_ClockConfig+0x204>
 800c7ba:	e044      	b.n	800c846 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d112      	bne.n	800c7ea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c7c4:	e00a      	b.n	800c7dc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7c6:	f7fc f863 	bl	8008890 <HAL_GetTick>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d901      	bls.n	800c7dc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e0bf      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c7dc:	4b0f      	ldr	r3, [pc, #60]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c7de:	69db      	ldr	r3, [r3, #28]
 800c7e0:	f003 030c 	and.w	r3, r3, #12
 800c7e4:	2b08      	cmp	r3, #8
 800c7e6:	d1ee      	bne.n	800c7c6 <HAL_RCC_ClockConfig+0x232>
 800c7e8:	e02d      	b.n	800c846 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d123      	bne.n	800c83a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c7f2:	e00a      	b.n	800c80a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7f4:	f7fc f84c 	bl	8008890 <HAL_GetTick>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c802:	4293      	cmp	r3, r2
 800c804:	d901      	bls.n	800c80a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800c806:	2303      	movs	r3, #3
 800c808:	e0a8      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c80a:	4b04      	ldr	r3, [pc, #16]	; (800c81c <HAL_RCC_ClockConfig+0x288>)
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f003 030c 	and.w	r3, r3, #12
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1ee      	bne.n	800c7f4 <HAL_RCC_ClockConfig+0x260>
 800c816:	e016      	b.n	800c846 <HAL_RCC_ClockConfig+0x2b2>
 800c818:	40022000 	.word	0x40022000
 800c81c:	46020c00 	.word	0x46020c00
 800c820:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c824:	f7fc f834 	bl	8008890 <HAL_GetTick>
 800c828:	4602      	mov	r2, r0
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c832:	4293      	cmp	r3, r2
 800c834:	d901      	bls.n	800c83a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800c836:	2303      	movs	r3, #3
 800c838:	e090      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c83a:	4b4a      	ldr	r3, [pc, #296]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	f003 030c 	and.w	r3, r3, #12
 800c842:	2b04      	cmp	r3, #4
 800c844:	d1ee      	bne.n	800c824 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 0302 	and.w	r3, r3, #2
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d010      	beq.n	800c874 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	4b43      	ldr	r3, [pc, #268]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	f003 030f 	and.w	r3, r3, #15
 800c85e:	429a      	cmp	r2, r3
 800c860:	d208      	bcs.n	800c874 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c862:	4b40      	ldr	r3, [pc, #256]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	f023 020f 	bic.w	r2, r3, #15
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	493d      	ldr	r1, [pc, #244]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c870:	4313      	orrs	r3, r2
 800c872:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c874:	4b3c      	ldr	r3, [pc, #240]	; (800c968 <HAL_RCC_ClockConfig+0x3d4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 030f 	and.w	r3, r3, #15
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d210      	bcs.n	800c8a4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c882:	4b39      	ldr	r3, [pc, #228]	; (800c968 <HAL_RCC_ClockConfig+0x3d4>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f023 020f 	bic.w	r2, r3, #15
 800c88a:	4937      	ldr	r1, [pc, #220]	; (800c968 <HAL_RCC_ClockConfig+0x3d4>)
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	4313      	orrs	r3, r2
 800c890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c892:	4b35      	ldr	r3, [pc, #212]	; (800c968 <HAL_RCC_ClockConfig+0x3d4>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 030f 	and.w	r3, r3, #15
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d001      	beq.n	800c8a4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e05b      	b.n	800c95c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d010      	beq.n	800c8d2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68da      	ldr	r2, [r3, #12]
 800c8b4:	4b2b      	ldr	r3, [pc, #172]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c8b6:	6a1b      	ldr	r3, [r3, #32]
 800c8b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d208      	bcs.n	800c8d2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c8c0:	4b28      	ldr	r3, [pc, #160]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	4925      	ldr	r1, [pc, #148]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f003 0308 	and.w	r3, r3, #8
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d012      	beq.n	800c904 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	691a      	ldr	r2, [r3, #16]
 800c8e2:	4b20      	ldr	r3, [pc, #128]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	091b      	lsrs	r3, r3, #4
 800c8e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d209      	bcs.n	800c904 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c8f0:	4b1c      	ldr	r3, [pc, #112]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c8f2:	6a1b      	ldr	r3, [r3, #32]
 800c8f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	011b      	lsls	r3, r3, #4
 800c8fe:	4919      	ldr	r1, [pc, #100]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c900:	4313      	orrs	r3, r2
 800c902:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 0310 	and.w	r3, r3, #16
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d010      	beq.n	800c932 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	695a      	ldr	r2, [r3, #20]
 800c914:	4b13      	ldr	r3, [pc, #76]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d208      	bcs.n	800c932 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800c920:	4b10      	ldr	r3, [pc, #64]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	490d      	ldr	r1, [pc, #52]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c92e:	4313      	orrs	r3, r2
 800c930:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c932:	f000 f821 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800c936:	4602      	mov	r2, r0
 800c938:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <HAL_RCC_ClockConfig+0x3d0>)
 800c93a:	6a1b      	ldr	r3, [r3, #32]
 800c93c:	f003 030f 	and.w	r3, r3, #15
 800c940:	490a      	ldr	r1, [pc, #40]	; (800c96c <HAL_RCC_ClockConfig+0x3d8>)
 800c942:	5ccb      	ldrb	r3, [r1, r3]
 800c944:	fa22 f303 	lsr.w	r3, r2, r3
 800c948:	4a09      	ldr	r2, [pc, #36]	; (800c970 <HAL_RCC_ClockConfig+0x3dc>)
 800c94a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c94c:	4b09      	ldr	r3, [pc, #36]	; (800c974 <HAL_RCC_ClockConfig+0x3e0>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4618      	mov	r0, r3
 800c952:	f7fb ff53 	bl	80087fc <HAL_InitTick>
 800c956:	4603      	mov	r3, r0
 800c958:	73fb      	strb	r3, [r7, #15]

  return status;
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	46020c00 	.word	0x46020c00
 800c968:	40022000 	.word	0x40022000
 800c96c:	0818ab00 	.word	0x0818ab00
 800c970:	200000e4 	.word	0x200000e4
 800c974:	200000e8 	.word	0x200000e8

0800c978 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c978:	b480      	push	{r7}
 800c97a:	b08b      	sub	sp, #44	; 0x2c
 800c97c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c986:	4b7b      	ldr	r3, [pc, #492]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	f003 030c 	and.w	r3, r3, #12
 800c98e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c990:	4b78      	ldr	r3, [pc, #480]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d005      	beq.n	800c9ac <HAL_RCC_GetSysClockFreq+0x34>
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	2b0c      	cmp	r3, #12
 800c9a4:	d121      	bne.n	800c9ea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d11e      	bne.n	800c9ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800c9ac:	4b71      	ldr	r3, [pc, #452]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d107      	bne.n	800c9c8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800c9b8:	4b6e      	ldr	r3, [pc, #440]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c9ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c9be:	0b1b      	lsrs	r3, r3, #12
 800c9c0:	f003 030f 	and.w	r3, r3, #15
 800c9c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c9c6:	e005      	b.n	800c9d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800c9c8:	4b6a      	ldr	r3, [pc, #424]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	0f1b      	lsrs	r3, r3, #28
 800c9ce:	f003 030f 	and.w	r3, r3, #15
 800c9d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c9d4:	4a68      	ldr	r2, [pc, #416]	; (800cb78 <HAL_RCC_GetSysClockFreq+0x200>)
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d110      	bne.n	800ca06 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c9e8:	e00d      	b.n	800ca06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c9ea:	4b62      	ldr	r3, [pc, #392]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	f003 030c 	and.w	r3, r3, #12
 800c9f2:	2b04      	cmp	r3, #4
 800c9f4:	d102      	bne.n	800c9fc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c9f6:	4b61      	ldr	r3, [pc, #388]	; (800cb7c <HAL_RCC_GetSysClockFreq+0x204>)
 800c9f8:	623b      	str	r3, [r7, #32]
 800c9fa:	e004      	b.n	800ca06 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	2b08      	cmp	r3, #8
 800ca00:	d101      	bne.n	800ca06 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ca02:	4b5e      	ldr	r3, [pc, #376]	; (800cb7c <HAL_RCC_GetSysClockFreq+0x204>)
 800ca04:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	2b0c      	cmp	r3, #12
 800ca0a:	f040 80ac 	bne.w	800cb66 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ca0e:	4b59      	ldr	r3, [pc, #356]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca12:	f003 0303 	and.w	r3, r3, #3
 800ca16:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ca18:	4b56      	ldr	r3, [pc, #344]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1c:	0a1b      	lsrs	r3, r3, #8
 800ca1e:	f003 030f 	and.w	r3, r3, #15
 800ca22:	3301      	adds	r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ca26:	4b53      	ldr	r3, [pc, #332]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2a:	091b      	lsrs	r3, r3, #4
 800ca2c:	f003 0301 	and.w	r3, r3, #1
 800ca30:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ca32:	4b50      	ldr	r3, [pc, #320]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	08db      	lsrs	r3, r3, #3
 800ca38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	fb02 f303 	mul.w	r3, r2, r3
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 8086 	beq.w	800cb62 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d003      	beq.n	800ca64 <HAL_RCC_GetSysClockFreq+0xec>
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d022      	beq.n	800caa8 <HAL_RCC_GetSysClockFreq+0x130>
 800ca62:	e043      	b.n	800caec <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eddf 6a44 	vldr	s13, [pc, #272]	; 800cb80 <HAL_RCC_GetSysClockFreq+0x208>
 800ca72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca76:	4b3f      	ldr	r3, [pc, #252]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ca86:	ed97 6a01 	vldr	s12, [r7, #4]
 800ca8a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cb84 <HAL_RCC_GetSysClockFreq+0x20c>
 800ca8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ca96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800caa6:	e046      	b.n	800cb36 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab2:	eddf 6a33 	vldr	s13, [pc, #204]	; 800cb80 <HAL_RCC_GetSysClockFreq+0x208>
 800cab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caba:	4b2e      	ldr	r3, [pc, #184]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800caca:	ed97 6a01 	vldr	s12, [r7, #4]
 800cace:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800cb84 <HAL_RCC_GetSysClockFreq+0x20c>
 800cad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cade:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800caea:	e024      	b.n	800cb36 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	ee07 3a90 	vmov	s15, r3
 800cafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb04:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb0c:	ee07 3a90 	vmov	s15, r3
 800cb10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb14:	ed97 6a01 	vldr	s12, [r7, #4]
 800cb18:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800cb84 <HAL_RCC_GetSysClockFreq+0x20c>
 800cb1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb28:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb30:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cb34:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800cb36:	4b0f      	ldr	r3, [pc, #60]	; (800cb74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3a:	0e1b      	lsrs	r3, r3, #24
 800cb3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb40:	3301      	adds	r3, #1
 800cb42:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	ee07 3a90 	vmov	s15, r3
 800cb4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb5a:	ee17 3a90 	vmov	r3, s15
 800cb5e:	623b      	str	r3, [r7, #32]
 800cb60:	e001      	b.n	800cb66 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800cb66:	6a3b      	ldr	r3, [r7, #32]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	372c      	adds	r7, #44	; 0x2c
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	46020c00 	.word	0x46020c00
 800cb78:	0818ab18 	.word	0x0818ab18
 800cb7c:	00f42400 	.word	0x00f42400
 800cb80:	4b742400 	.word	0x4b742400
 800cb84:	46000000 	.word	0x46000000

0800cb88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cb8c:	f7ff fef4 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800cb90:	4602      	mov	r2, r0
 800cb92:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <HAL_RCC_GetHCLKFreq+0x28>)
 800cb94:	6a1b      	ldr	r3, [r3, #32]
 800cb96:	f003 030f 	and.w	r3, r3, #15
 800cb9a:	4906      	ldr	r1, [pc, #24]	; (800cbb4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800cb9c:	5ccb      	ldrb	r3, [r1, r3]
 800cb9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cba2:	4a05      	ldr	r2, [pc, #20]	; (800cbb8 <HAL_RCC_GetHCLKFreq+0x30>)
 800cba4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800cba6:	4b04      	ldr	r3, [pc, #16]	; (800cbb8 <HAL_RCC_GetHCLKFreq+0x30>)
 800cba8:	681b      	ldr	r3, [r3, #0]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	46020c00 	.word	0x46020c00
 800cbb4:	0818ab00 	.word	0x0818ab00
 800cbb8:	200000e4 	.word	0x200000e4

0800cbbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800cbc0:	f7ff ffe2 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <HAL_RCC_GetPCLK1Freq+0x20>)
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	091b      	lsrs	r3, r3, #4
 800cbcc:	f003 0307 	and.w	r3, r3, #7
 800cbd0:	4903      	ldr	r1, [pc, #12]	; (800cbe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cbd2:	5ccb      	ldrb	r3, [r1, r3]
 800cbd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	46020c00 	.word	0x46020c00
 800cbe0:	0818ab10 	.word	0x0818ab10

0800cbe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800cbe8:	f7ff ffce 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800cbec:	4602      	mov	r2, r0
 800cbee:	4b05      	ldr	r3, [pc, #20]	; (800cc04 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	0a1b      	lsrs	r3, r3, #8
 800cbf4:	f003 0307 	and.w	r3, r3, #7
 800cbf8:	4903      	ldr	r1, [pc, #12]	; (800cc08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cbfa:	5ccb      	ldrb	r3, [r1, r3]
 800cbfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	46020c00 	.word	0x46020c00
 800cc08:	0818ab10 	.word	0x0818ab10

0800cc0c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800cc10:	f7ff ffba 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800cc14:	4602      	mov	r2, r0
 800cc16:	4b05      	ldr	r3, [pc, #20]	; (800cc2c <HAL_RCC_GetPCLK3Freq+0x20>)
 800cc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1a:	091b      	lsrs	r3, r3, #4
 800cc1c:	f003 0307 	and.w	r3, r3, #7
 800cc20:	4903      	ldr	r1, [pc, #12]	; (800cc30 <HAL_RCC_GetPCLK3Freq+0x24>)
 800cc22:	5ccb      	ldrb	r3, [r1, r3]
 800cc24:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	46020c00 	.word	0x46020c00
 800cc30:	0818ab10 	.word	0x0818ab10

0800cc34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cc3c:	4b3e      	ldr	r3, [pc, #248]	; (800cd38 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cc3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc42:	f003 0304 	and.w	r3, r3, #4
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cc4a:	f7fe fd9f 	bl	800b78c <HAL_PWREx_GetVoltageRange>
 800cc4e:	6178      	str	r0, [r7, #20]
 800cc50:	e019      	b.n	800cc86 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cc52:	4b39      	ldr	r3, [pc, #228]	; (800cd38 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cc54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc58:	4a37      	ldr	r2, [pc, #220]	; (800cd38 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cc5a:	f043 0304 	orr.w	r3, r3, #4
 800cc5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cc62:	4b35      	ldr	r3, [pc, #212]	; (800cd38 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cc64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cc70:	f7fe fd8c 	bl	800b78c <HAL_PWREx_GetVoltageRange>
 800cc74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cc76:	4b30      	ldr	r3, [pc, #192]	; (800cd38 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cc78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc7c:	4a2e      	ldr	r2, [pc, #184]	; (800cd38 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cc7e:	f023 0304 	bic.w	r3, r3, #4
 800cc82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc8c:	d003      	beq.n	800cc96 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc94:	d109      	bne.n	800ccaa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc9c:	d202      	bcs.n	800cca4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800cc9e:	2301      	movs	r3, #1
 800cca0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cca2:	e033      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800cca4:	2300      	movs	r3, #0
 800cca6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cca8:	e030      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccb0:	d208      	bcs.n	800ccc4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccb8:	d102      	bne.n	800ccc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800ccba:	2303      	movs	r3, #3
 800ccbc:	613b      	str	r3, [r7, #16]
 800ccbe:	e025      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e035      	b.n	800cd30 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccca:	d90f      	bls.n	800ccec <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d109      	bne.n	800cce6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccd8:	d902      	bls.n	800cce0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ccda:	2300      	movs	r3, #0
 800ccdc:	613b      	str	r3, [r7, #16]
 800ccde:	e015      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800cce0:	2301      	movs	r3, #1
 800cce2:	613b      	str	r3, [r7, #16]
 800cce4:	e012      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800cce6:	2300      	movs	r3, #0
 800cce8:	613b      	str	r3, [r7, #16]
 800ccea:	e00f      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccf2:	d109      	bne.n	800cd08 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccfa:	d102      	bne.n	800cd02 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	613b      	str	r3, [r7, #16]
 800cd00:	e004      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800cd02:	2302      	movs	r3, #2
 800cd04:	613b      	str	r3, [r7, #16]
 800cd06:	e001      	b.n	800cd0c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800cd08:	2301      	movs	r3, #1
 800cd0a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cd0c:	4b0b      	ldr	r3, [pc, #44]	; (800cd3c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f023 020f 	bic.w	r2, r3, #15
 800cd14:	4909      	ldr	r1, [pc, #36]	; (800cd3c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800cd1c:	4b07      	ldr	r3, [pc, #28]	; (800cd3c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 030f 	and.w	r3, r3, #15
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d001      	beq.n	800cd2e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	46020c00 	.word	0x46020c00
 800cd3c:	40022000 	.word	0x40022000

0800cd40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800cd40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd44:	b0ba      	sub	sp, #232	; 0xe8
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cd58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd60:	f002 0401 	and.w	r4, r2, #1
 800cd64:	2500      	movs	r5, #0
 800cd66:	ea54 0305 	orrs.w	r3, r4, r5
 800cd6a:	d00b      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800cd6c:	4bcb      	ldr	r3, [pc, #812]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cd6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd72:	f023 0103 	bic.w	r1, r3, #3
 800cd76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd7c:	4ac7      	ldr	r2, [pc, #796]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cd7e:	430b      	orrs	r3, r1
 800cd80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cd84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	f002 0802 	and.w	r8, r2, #2
 800cd90:	f04f 0900 	mov.w	r9, #0
 800cd94:	ea58 0309 	orrs.w	r3, r8, r9
 800cd98:	d00b      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800cd9a:	4bc0      	ldr	r3, [pc, #768]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cd9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cda0:	f023 010c 	bic.w	r1, r3, #12
 800cda4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdaa:	4abc      	ldr	r2, [pc, #752]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cdac:	430b      	orrs	r3, r1
 800cdae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cdb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f002 0a04 	and.w	sl, r2, #4
 800cdbe:	f04f 0b00 	mov.w	fp, #0
 800cdc2:	ea5a 030b 	orrs.w	r3, sl, fp
 800cdc6:	d00b      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800cdc8:	4bb4      	ldr	r3, [pc, #720]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cdca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cdce:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cdd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cdd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd8:	4ab0      	ldr	r2, [pc, #704]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cdda:	430b      	orrs	r3, r1
 800cddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cde0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde8:	f002 0308 	and.w	r3, r2, #8
 800cdec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cdf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	d00b      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ce00:	4ba6      	ldr	r3, [pc, #664]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ce0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce10:	4aa2      	ldr	r2, [pc, #648]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce12:	430b      	orrs	r3, r1
 800ce14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	f002 0310 	and.w	r3, r2, #16
 800ce24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ce32:	460b      	mov	r3, r1
 800ce34:	4313      	orrs	r3, r2
 800ce36:	d00b      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800ce38:	4b98      	ldr	r3, [pc, #608]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ce42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce48:	4a94      	ldr	r2, [pc, #592]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce4a:	430b      	orrs	r3, r1
 800ce4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f002 0320 	and.w	r3, r2, #32
 800ce5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce60:	2300      	movs	r3, #0
 800ce62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ce66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	d00b      	beq.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800ce70:	4b8a      	ldr	r3, [pc, #552]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce76:	f023 0107 	bic.w	r1, r3, #7
 800ce7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce80:	4a86      	ldr	r2, [pc, #536]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce82:	430b      	orrs	r3, r1
 800ce84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ce88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce90:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ce94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cea2:	460b      	mov	r3, r1
 800cea4:	4313      	orrs	r3, r2
 800cea6:	d00b      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800cea8:	4b7c      	ldr	r3, [pc, #496]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ceaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ceae:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800ceb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ceb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ceb8:	4a78      	ldr	r2, [pc, #480]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ceba:	430b      	orrs	r3, r1
 800cebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800cecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ced0:	2300      	movs	r3, #0
 800ced2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ced6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ceda:	460b      	mov	r3, r1
 800cedc:	4313      	orrs	r3, r2
 800cede:	d00b      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800cee0:	4b6e      	ldr	r3, [pc, #440]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ceea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ceee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef0:	4a6a      	ldr	r2, [pc, #424]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cef2:	430b      	orrs	r3, r1
 800cef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf00:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800cf04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cf0e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4313      	orrs	r3, r2
 800cf16:	d00b      	beq.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800cf18:	4b60      	ldr	r3, [pc, #384]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cf22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf28:	4a5c      	ldr	r2, [pc, #368]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf2a:	430b      	orrs	r3, r1
 800cf2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800cf3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cf40:	2300      	movs	r3, #0
 800cf42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	d00b      	beq.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800cf50:	4b52      	ldr	r3, [pc, #328]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf56:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800cf5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf60:	4a4e      	ldr	r2, [pc, #312]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf62:	430b      	orrs	r3, r1
 800cf64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cf68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf70:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800cf74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800cf82:	460b      	mov	r3, r1
 800cf84:	4313      	orrs	r3, r2
 800cf86:	d00b      	beq.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800cf88:	4b44      	ldr	r3, [pc, #272]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf8e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800cf92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf98:	4a40      	ldr	r2, [pc, #256]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf9a:	430b      	orrs	r3, r1
 800cf9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cfa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800cfac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cfb6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800cfba:	460b      	mov	r3, r1
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	d00b      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800cfc0:	4b36      	ldr	r3, [pc, #216]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cfc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cfc6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800cfca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfd0:	4a32      	ldr	r2, [pc, #200]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cfd2:	430b      	orrs	r3, r1
 800cfd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800cfd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cfe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cfee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800cff2:	460b      	mov	r3, r1
 800cff4:	4313      	orrs	r3, r2
 800cff6:	d00c      	beq.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800cff8:	4b28      	ldr	r3, [pc, #160]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d00a:	4a24      	ldr	r2, [pc, #144]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d00c:	430b      	orrs	r3, r1
 800d00e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d01e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d020:	2300      	movs	r3, #0
 800d022:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d024:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d028:	460b      	mov	r3, r1
 800d02a:	4313      	orrs	r3, r2
 800d02c:	d04f      	beq.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d02e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d036:	2b80      	cmp	r3, #128	; 0x80
 800d038:	d02d      	beq.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800d03a:	2b80      	cmp	r3, #128	; 0x80
 800d03c:	d827      	bhi.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d03e:	2b60      	cmp	r3, #96	; 0x60
 800d040:	d02e      	beq.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d042:	2b60      	cmp	r3, #96	; 0x60
 800d044:	d823      	bhi.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d046:	2b40      	cmp	r3, #64	; 0x40
 800d048:	d006      	beq.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800d04a:	2b40      	cmp	r3, #64	; 0x40
 800d04c:	d81f      	bhi.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800d052:	2b20      	cmp	r3, #32
 800d054:	d011      	beq.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800d056:	e01a      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d058:	4b10      	ldr	r3, [pc, #64]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d05c:	4a0f      	ldr	r2, [pc, #60]	; (800d09c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d05e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d062:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d064:	e01d      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d06a:	3308      	adds	r3, #8
 800d06c:	4618      	mov	r0, r3
 800d06e:	f002 f981 	bl	800f374 <RCCEx_PLL2_Config>
 800d072:	4603      	mov	r3, r0
 800d074:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d078:	e013      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d07a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d07e:	332c      	adds	r3, #44	; 0x2c
 800d080:	4618      	mov	r0, r3
 800d082:	f002 fa0f 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d086:	4603      	mov	r3, r0
 800d088:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d08c:	e009      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d094:	e005      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800d096:	bf00      	nop
 800d098:	e003      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d09a:	bf00      	nop
 800d09c:	46020c00 	.word	0x46020c00
        break;
 800d0a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10d      	bne.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d0aa:	4bb6      	ldr	r3, [pc, #728]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d0ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d0b0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800d0b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0bc:	4ab1      	ldr	r2, [pc, #708]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d0be:	430b      	orrs	r3, r1
 800d0c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d0c4:	e003      	b.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d0ca:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d0ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d0da:	673b      	str	r3, [r7, #112]	; 0x70
 800d0dc:	2300      	movs	r3, #0
 800d0de:	677b      	str	r3, [r7, #116]	; 0x74
 800d0e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	d053      	beq.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d0ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0f6:	d033      	beq.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800d0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0fc:	d82c      	bhi.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d0fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d102:	d02f      	beq.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800d104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d108:	d826      	bhi.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d10a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d10e:	d008      	beq.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800d110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d114:	d820      	bhi.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800d11a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d11e:	d011      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d120:	e01a      	b.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d122:	4b98      	ldr	r3, [pc, #608]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d126:	4a97      	ldr	r2, [pc, #604]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d12c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d12e:	e01a      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d134:	3308      	adds	r3, #8
 800d136:	4618      	mov	r0, r3
 800d138:	f002 f91c 	bl	800f374 <RCCEx_PLL2_Config>
 800d13c:	4603      	mov	r3, r0
 800d13e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d142:	e010      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d148:	332c      	adds	r3, #44	; 0x2c
 800d14a:	4618      	mov	r0, r3
 800d14c:	f002 f9aa 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d150:	4603      	mov	r3, r0
 800d152:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d156:	e006      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d15e:	e002      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d160:	bf00      	nop
 800d162:	e000      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d166:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10d      	bne.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d16e:	4b85      	ldr	r3, [pc, #532]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d174:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800d178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d17c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d180:	4a80      	ldr	r2, [pc, #512]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d182:	430b      	orrs	r3, r1
 800d184:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d188:	e003      	b.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d18a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d18e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d19e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	d046      	beq.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d1b6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d1ba:	d028      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d1bc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d1c0:	d821      	bhi.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d1c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1c6:	d022      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d1c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1cc:	d81b      	bhi.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d1ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d1d2:	d01c      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d1d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d1d8:	d815      	bhi.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d1da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1de:	d008      	beq.n	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800d1e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1e4:	d80f      	bhi.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d011      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ee:	d00e      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d1f0:	e009      	b.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d1f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f002 f8bb 	bl	800f374 <RCCEx_PLL2_Config>
 800d1fe:	4603      	mov	r3, r0
 800d200:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d204:	e004      	b.n	800d210 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d20c:	e000      	b.n	800d210 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800d20e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d210:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10d      	bne.n	800d234 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d218:	4b5a      	ldr	r3, [pc, #360]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d21a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d21e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d226:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d22a:	4a56      	ldr	r2, [pc, #344]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d22c:	430b      	orrs	r3, r1
 800d22e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d232:	e003      	b.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d234:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d238:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d23c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d248:	663b      	str	r3, [r7, #96]	; 0x60
 800d24a:	2300      	movs	r3, #0
 800d24c:	667b      	str	r3, [r7, #100]	; 0x64
 800d24e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d252:	460b      	mov	r3, r1
 800d254:	4313      	orrs	r3, r2
 800d256:	d03f      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d260:	2b04      	cmp	r3, #4
 800d262:	d81e      	bhi.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800d264:	a201      	add	r2, pc, #4	; (adr r2, 800d26c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800d266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26a:	bf00      	nop
 800d26c:	0800d2ab 	.word	0x0800d2ab
 800d270:	0800d281 	.word	0x0800d281
 800d274:	0800d28f 	.word	0x0800d28f
 800d278:	0800d2ab 	.word	0x0800d2ab
 800d27c:	0800d2ab 	.word	0x0800d2ab
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d280:	4b40      	ldr	r3, [pc, #256]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d284:	4a3f      	ldr	r2, [pc, #252]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d28a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d28c:	e00e      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d28e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d292:	332c      	adds	r3, #44	; 0x2c
 800d294:	4618      	mov	r0, r3
 800d296:	f002 f905 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d29a:	4603      	mov	r3, r0
 800d29c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d2a0:	e004      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d2a8:	e000      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800d2aa:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d2ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10d      	bne.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d2b4:	4b33      	ldr	r3, [pc, #204]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d2b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d2ba:	f023 0107 	bic.w	r1, r3, #7
 800d2be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c6:	4a2f      	ldr	r2, [pc, #188]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d2c8:	430b      	orrs	r3, r1
 800d2ca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d2ce:	e003      	b.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d2d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d2d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d2e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	d04d      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d2f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d300:	d028      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800d302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d306:	d821      	bhi.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d30c:	d024      	beq.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800d30e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d312:	d81b      	bhi.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d318:	d00e      	beq.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800d31a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d31e:	d815      	bhi.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01b      	beq.n	800d35c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800d324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d328:	d110      	bne.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d32a:	4b16      	ldr	r3, [pc, #88]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d32e:	4a15      	ldr	r2, [pc, #84]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d334:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d336:	e012      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d33c:	332c      	adds	r3, #44	; 0x2c
 800d33e:	4618      	mov	r0, r3
 800d340:	f002 f8b0 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d344:	4603      	mov	r3, r0
 800d346:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d34a:	e008      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d352:	e004      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d354:	bf00      	nop
 800d356:	e002      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d358:	bf00      	nop
 800d35a:	e000      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d35c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d35e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d362:	2b00      	cmp	r3, #0
 800d364:	d110      	bne.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800d366:	4b07      	ldr	r3, [pc, #28]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d36c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d378:	4a02      	ldr	r2, [pc, #8]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d37a:	430b      	orrs	r3, r1
 800d37c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d380:	e006      	b.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800d382:	bf00      	nop
 800d384:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d388:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d38c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d39c:	653b      	str	r3, [r7, #80]	; 0x50
 800d39e:	2300      	movs	r3, #0
 800d3a0:	657b      	str	r3, [r7, #84]	; 0x54
 800d3a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	f000 80b5 	beq.w	800d518 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d3b4:	4b9d      	ldr	r3, [pc, #628]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3ba:	f003 0304 	and.w	r3, r3, #4
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d113      	bne.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d3c2:	4b9a      	ldr	r3, [pc, #616]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d3c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3c8:	4a98      	ldr	r2, [pc, #608]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d3ca:	f043 0304 	orr.w	r3, r3, #4
 800d3ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d3d2:	4b96      	ldr	r3, [pc, #600]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3d8:	f003 0304 	and.w	r3, r3, #4
 800d3dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d3e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d3ea:	4b91      	ldr	r3, [pc, #580]	; (800d630 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ee:	4a90      	ldr	r2, [pc, #576]	; (800d630 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d3f0:	f043 0301 	orr.w	r3, r3, #1
 800d3f4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d3f6:	f7fb fa4b 	bl	8008890 <HAL_GetTick>
 800d3fa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d3fe:	e00b      	b.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d400:	f7fb fa46 	bl	8008890 <HAL_GetTick>
 800d404:	4602      	mov	r2, r0
 800d406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d903      	bls.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d416:	e005      	b.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d418:	4b85      	ldr	r3, [pc, #532]	; (800d630 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d0ed      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800d424:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d165      	bne.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d42c:	4b7f      	ldr	r3, [pc, #508]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d42e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800d43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d023      	beq.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800d442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d446:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800d44a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d44e:	4293      	cmp	r3, r2
 800d450:	d01b      	beq.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d452:	4b76      	ldr	r3, [pc, #472]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d45c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d460:	4b72      	ldr	r3, [pc, #456]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d466:	4a71      	ldr	r2, [pc, #452]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d46c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d470:	4b6e      	ldr	r3, [pc, #440]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d476:	4a6d      	ldr	r2, [pc, #436]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d47c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d480:	4a6a      	ldr	r2, [pc, #424]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d486:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d019      	beq.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d496:	f7fb f9fb 	bl	8008890 <HAL_GetTick>
 800d49a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d49e:	e00d      	b.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4a0:	f7fb f9f6 	bl	8008890 <HAL_GetTick>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4aa:	1ad2      	subs	r2, r2, r3
 800d4ac:	f241 3388 	movw	r3, #5000	; 0x1388
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d903      	bls.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800d4ba:	e006      	b.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d4bc:	4b5b      	ldr	r3, [pc, #364]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4c2:	f003 0302 	and.w	r3, r3, #2
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d0ea      	beq.n	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800d4ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10d      	bne.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800d4d2:	4b56      	ldr	r3, [pc, #344]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d4dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d4e4:	4a51      	ldr	r2, [pc, #324]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4e6:	430b      	orrs	r3, r1
 800d4e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d4ec:	e008      	b.n	800d500 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d4ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d4f2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800d4f6:	e003      	b.n	800d500 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d4fc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d500:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800d504:	2b01      	cmp	r3, #1
 800d506:	d107      	bne.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d508:	4b48      	ldr	r3, [pc, #288]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d50a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d50e:	4a47      	ldr	r2, [pc, #284]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d510:	f023 0304 	bic.w	r3, r3, #4
 800d514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800d518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d524:	64bb      	str	r3, [r7, #72]	; 0x48
 800d526:	2300      	movs	r3, #0
 800d528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d52a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d52e:	460b      	mov	r3, r1
 800d530:	4313      	orrs	r3, r2
 800d532:	d042      	beq.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800d534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d53c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d540:	d022      	beq.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800d542:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d546:	d81b      	bhi.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800d548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d54c:	d011      	beq.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800d54e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d552:	d815      	bhi.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800d554:	2b00      	cmp	r3, #0
 800d556:	d019      	beq.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800d558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d55c:	d110      	bne.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d55e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d562:	3308      	adds	r3, #8
 800d564:	4618      	mov	r0, r3
 800d566:	f001 ff05 	bl	800f374 <RCCEx_PLL2_Config>
 800d56a:	4603      	mov	r3, r0
 800d56c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d570:	e00d      	b.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d572:	4b2e      	ldr	r3, [pc, #184]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d576:	4a2d      	ldr	r2, [pc, #180]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d57c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d57e:	e006      	b.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d586:	e002      	b.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800d588:	bf00      	nop
 800d58a:	e000      	b.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800d58c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d58e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10d      	bne.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800d596:	4b25      	ldr	r3, [pc, #148]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d59c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d5a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d5a8:	4a20      	ldr	r2, [pc, #128]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d5aa:	430b      	orrs	r3, r1
 800d5ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d5b0:	e003      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d5b6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d5c6:	643b      	str	r3, [r7, #64]	; 0x40
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d5cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	d032      	beq.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800d5d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5e2:	d00b      	beq.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800d5e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5e8:	d804      	bhi.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d008      	beq.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800d5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5f2:	d007      	beq.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d5fa:	e004      	b.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d5fc:	bf00      	nop
 800d5fe:	e002      	b.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d600:	bf00      	nop
 800d602:	e000      	b.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d604:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d606:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d112      	bne.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800d60e:	4b07      	ldr	r3, [pc, #28]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d610:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d614:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d61c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d620:	4a02      	ldr	r2, [pc, #8]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d622:	430b      	orrs	r3, r1
 800d624:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d628:	e008      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800d62a:	bf00      	nop
 800d62c:	46020c00 	.word	0x46020c00
 800d630:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d634:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d638:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800d63c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d644:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d648:	63bb      	str	r3, [r7, #56]	; 0x38
 800d64a:	2300      	movs	r3, #0
 800d64c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d64e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d652:	460b      	mov	r3, r1
 800d654:	4313      	orrs	r3, r2
 800d656:	d00c      	beq.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800d658:	4b98      	ldr	r3, [pc, #608]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d65a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d65e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800d662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d66a:	4a94      	ldr	r2, [pc, #592]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d66c:	430b      	orrs	r3, r1
 800d66e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800d672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d67e:	633b      	str	r3, [r7, #48]	; 0x30
 800d680:	2300      	movs	r3, #0
 800d682:	637b      	str	r3, [r7, #52]	; 0x34
 800d684:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d688:	460b      	mov	r3, r1
 800d68a:	4313      	orrs	r3, r2
 800d68c:	d019      	beq.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800d68e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d692:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d69a:	d105      	bne.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d69c:	4b87      	ldr	r3, [pc, #540]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a0:	4a86      	ldr	r2, [pc, #536]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d6a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800d6a8:	4b84      	ldr	r3, [pc, #528]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d6aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d6ae:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d6b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d6ba:	4a80      	ldr	r2, [pc, #512]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d6bc:	430b      	orrs	r3, r1
 800d6be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800d6c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d6ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	d00c      	beq.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800d6de:	4b77      	ldr	r3, [pc, #476]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d6e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d6e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d6f0:	4972      	ldr	r1, [pc, #456]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800d6f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d704:	623b      	str	r3, [r7, #32]
 800d706:	2300      	movs	r3, #0
 800d708:	627b      	str	r3, [r7, #36]	; 0x24
 800d70a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d70e:	460b      	mov	r3, r1
 800d710:	4313      	orrs	r3, r2
 800d712:	d00c      	beq.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800d714:	4b69      	ldr	r3, [pc, #420]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d71a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d71e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d722:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d726:	4965      	ldr	r1, [pc, #404]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d728:	4313      	orrs	r3, r2
 800d72a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800d72e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d73a:	61bb      	str	r3, [r7, #24]
 800d73c:	2300      	movs	r3, #0
 800d73e:	61fb      	str	r3, [r7, #28]
 800d740:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d744:	460b      	mov	r3, r1
 800d746:	4313      	orrs	r3, r2
 800d748:	d00c      	beq.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800d74a:	4b5c      	ldr	r3, [pc, #368]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d74c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d750:	f023 0218 	bic.w	r2, r3, #24
 800d754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d758:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d75c:	4957      	ldr	r1, [pc, #348]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d75e:	4313      	orrs	r3, r2
 800d760:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800d770:	613b      	str	r3, [r7, #16]
 800d772:	2300      	movs	r3, #0
 800d774:	617b      	str	r3, [r7, #20]
 800d776:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d77a:	460b      	mov	r3, r1
 800d77c:	4313      	orrs	r3, r2
 800d77e:	d032      	beq.n	800d7e6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800d780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d78c:	d105      	bne.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d78e:	4b4b      	ldr	r3, [pc, #300]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d792:	4a4a      	ldr	r2, [pc, #296]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d798:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800d79a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d79e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d7a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d7a6:	d108      	bne.n	800d7ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d7a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7ac:	3308      	adds	r3, #8
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f001 fde0 	bl	800f374 <RCCEx_PLL2_Config>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800d7ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10d      	bne.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800d7c2:	4b3e      	ldr	r3, [pc, #248]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d7c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d7d4:	4939      	ldr	r1, [pc, #228]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800d7dc:	e003      	b.n	800d7e6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d7e2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800d7e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800d7f2:	60bb      	str	r3, [r7, #8]
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	60fb      	str	r3, [r7, #12]
 800d7f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4313      	orrs	r3, r2
 800d800:	d03a      	beq.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800d802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d80e:	d00e      	beq.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800d810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d814:	d815      	bhi.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800d816:	2b00      	cmp	r3, #0
 800d818:	d017      	beq.n	800d84a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d81a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d81e:	d110      	bne.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d820:	4b26      	ldr	r3, [pc, #152]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d824:	4a25      	ldr	r2, [pc, #148]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d82a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d82c:	e00e      	b.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d82e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d832:	3308      	adds	r3, #8
 800d834:	4618      	mov	r0, r3
 800d836:	f001 fd9d 	bl	800f374 <RCCEx_PLL2_Config>
 800d83a:	4603      	mov	r3, r0
 800d83c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d840:	e004      	b.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800d842:	2301      	movs	r3, #1
 800d844:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d848:	e000      	b.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800d84a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d84c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10d      	bne.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800d854:	4b19      	ldr	r3, [pc, #100]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d85a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d85e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d866:	4915      	ldr	r1, [pc, #84]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d868:	4313      	orrs	r3, r2
 800d86a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800d86e:	e003      	b.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d870:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d874:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800d878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d880:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d884:	603b      	str	r3, [r7, #0]
 800d886:	2300      	movs	r3, #0
 800d888:	607b      	str	r3, [r7, #4]
 800d88a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d88e:	460b      	mov	r3, r1
 800d890:	4313      	orrs	r3, r2
 800d892:	d00c      	beq.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800d894:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d89a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800d89e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d8a6:	4905      	ldr	r1, [pc, #20]	; (800d8bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800d8ae:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	37e8      	adds	r7, #232	; 0xe8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8bc:	46020c00 	.word	0x46020c00

0800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b089      	sub	sp, #36	; 0x24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800d8c8:	4bac      	ldr	r3, [pc, #688]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8d0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d8d2:	4baa      	ldr	r3, [pc, #680]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d6:	f003 0303 	and.w	r3, r3, #3
 800d8da:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d8dc:	4ba7      	ldr	r3, [pc, #668]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e0:	0a1b      	lsrs	r3, r3, #8
 800d8e2:	f003 030f 	and.w	r3, r3, #15
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800d8ea:	4ba4      	ldr	r3, [pc, #656]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ee:	f003 0310 	and.w	r3, r3, #16
 800d8f2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d8f4:	4ba1      	ldr	r3, [pc, #644]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f8:	08db      	lsrs	r3, r3, #3
 800d8fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	fb02 f303 	mul.w	r3, r2, r3
 800d904:	ee07 3a90 	vmov	s15, r3
 800d908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d90c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 8123 	beq.w	800db5e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d062      	beq.n	800d9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b03      	cmp	r3, #3
 800d922:	f200 8081 	bhi.w	800da28 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d024      	beq.n	800d976 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b02      	cmp	r3, #2
 800d930:	d17a      	bne.n	800da28 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	ee07 3a90 	vmov	s15, r3
 800d938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93c:	eddf 6a90 	vldr	s13, [pc, #576]	; 800db80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800d940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d944:	4b8d      	ldr	r3, [pc, #564]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94c:	ee07 3a90 	vmov	s15, r3
 800d950:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800d954:	ed97 6a02 	vldr	s12, [r7, #8]
 800d958:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800db84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800d95c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d960:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800d964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d968:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d96c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d974:	e08f      	b.n	800da96 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d976:	4b81      	ldr	r3, [pc, #516]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d005      	beq.n	800d98e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800d982:	4b7e      	ldr	r3, [pc, #504]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	0f1b      	lsrs	r3, r3, #28
 800d988:	f003 030f 	and.w	r3, r3, #15
 800d98c:	e006      	b.n	800d99c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800d98e:	4b7b      	ldr	r3, [pc, #492]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d994:	041b      	lsls	r3, r3, #16
 800d996:	0f1b      	lsrs	r3, r3, #28
 800d998:	f003 030f 	and.w	r3, r3, #15
 800d99c:	4a7a      	ldr	r2, [pc, #488]	; (800db88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800d99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9a2:	ee07 3a90 	vmov	s15, r3
 800d9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	ee07 3a90 	vmov	s15, r3
 800d9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9c6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800db84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800d9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9e2:	e058      	b.n	800da96 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	ee07 3a90 	vmov	s15, r3
 800d9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ee:	eddf 6a64 	vldr	s13, [pc, #400]	; 800db80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800d9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f6:	4b61      	ldr	r3, [pc, #388]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9fe:	ee07 3a90 	vmov	s15, r3
 800da02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800da06:	ed97 6a02 	vldr	s12, [r7, #8]
 800da0a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800db84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800da0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800da16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da26:	e036      	b.n	800da96 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800da28:	4b54      	ldr	r3, [pc, #336]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d005      	beq.n	800da40 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800da34:	4b51      	ldr	r3, [pc, #324]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	0f1b      	lsrs	r3, r3, #28
 800da3a:	f003 030f 	and.w	r3, r3, #15
 800da3e:	e006      	b.n	800da4e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800da40:	4b4e      	ldr	r3, [pc, #312]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da46:	041b      	lsls	r3, r3, #16
 800da48:	0f1b      	lsrs	r3, r3, #28
 800da4a:	f003 030f 	and.w	r3, r3, #15
 800da4e:	4a4e      	ldr	r2, [pc, #312]	; (800db88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800da50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da54:	ee07 3a90 	vmov	s15, r3
 800da58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	ee07 3a90 	vmov	s15, r3
 800da70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da74:	ed97 6a02 	vldr	s12, [r7, #8]
 800da78:	eddf 5a42 	vldr	s11, [pc, #264]	; 800db84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800da7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da88:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800da8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da94:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800da96:	4b39      	ldr	r3, [pc, #228]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d017      	beq.n	800dad2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800daa2:	4b36      	ldr	r3, [pc, #216]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800daa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa6:	0a5b      	lsrs	r3, r3, #9
 800daa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daac:	ee07 3a90 	vmov	s15, r3
 800dab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800dab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dab8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dabc:	edd7 6a07 	vldr	s13, [r7, #28]
 800dac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac8:	ee17 2a90 	vmov	r2, s15
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	601a      	str	r2, [r3, #0]
 800dad0:	e002      	b.n	800dad8 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800dad8:	4b28      	ldr	r3, [pc, #160]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dadc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d017      	beq.n	800db14 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dae4:	4b25      	ldr	r3, [pc, #148]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae8:	0c1b      	lsrs	r3, r3, #16
 800daea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daee:	ee07 3a90 	vmov	s15, r3
 800daf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800daf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dafa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800db02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db0a:	ee17 2a90 	vmov	r2, s15
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	605a      	str	r2, [r3, #4]
 800db12:	e002      	b.n	800db1a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800db1a:	4b18      	ldr	r3, [pc, #96]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800db1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d017      	beq.n	800db56 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db26:	4b15      	ldr	r3, [pc, #84]	; (800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800db28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2a:	0e1b      	lsrs	r3, r3, #24
 800db2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db30:	ee07 3a90 	vmov	s15, r3
 800db34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800db38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db3c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db40:	edd7 6a07 	vldr	s13, [r7, #28]
 800db44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4c:	ee17 2a90 	vmov	r2, s15
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800db54:	e00c      	b.n	800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	609a      	str	r2, [r3, #8]
}
 800db5c:	e008      	b.n	800db70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	609a      	str	r2, [r3, #8]
}
 800db70:	bf00      	nop
 800db72:	3724      	adds	r7, #36	; 0x24
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	46020c00 	.word	0x46020c00
 800db80:	4b742400 	.word	0x4b742400
 800db84:	46000000 	.word	0x46000000
 800db88:	0818ab18 	.word	0x0818ab18

0800db8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b089      	sub	sp, #36	; 0x24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800db94:	4bac      	ldr	r3, [pc, #688]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800db96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db9c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800db9e:	4baa      	ldr	r3, [pc, #680]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba2:	f003 0303 	and.w	r3, r3, #3
 800dba6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800dba8:	4ba7      	ldr	r3, [pc, #668]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbac:	0a1b      	lsrs	r3, r3, #8
 800dbae:	f003 030f 	and.w	r3, r3, #15
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800dbb6:	4ba4      	ldr	r3, [pc, #656]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbba:	f003 0310 	and.w	r3, r3, #16
 800dbbe:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800dbc0:	4ba1      	ldr	r3, [pc, #644]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc4:	08db      	lsrs	r3, r3, #3
 800dbc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	fb02 f303 	mul.w	r3, r2, r3
 800dbd0:	ee07 3a90 	vmov	s15, r3
 800dbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 8123 	beq.w	800de2a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d062      	beq.n	800dcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2b03      	cmp	r3, #3
 800dbee:	f200 8081 	bhi.w	800dcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d024      	beq.n	800dc42 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d17a      	bne.n	800dcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	ee07 3a90 	vmov	s15, r3
 800dc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc08:	eddf 6a90 	vldr	s13, [pc, #576]	; 800de4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800dc0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc10:	4b8d      	ldr	r3, [pc, #564]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc18:	ee07 3a90 	vmov	s15, r3
 800dc1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc20:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc24:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800de50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800dc28:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dc2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc34:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dc38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc40:	e08f      	b.n	800dd62 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800dc42:	4b81      	ldr	r3, [pc, #516]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800dc4e:	4b7e      	ldr	r3, [pc, #504]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	0f1b      	lsrs	r3, r3, #28
 800dc54:	f003 030f 	and.w	r3, r3, #15
 800dc58:	e006      	b.n	800dc68 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800dc5a:	4b7b      	ldr	r3, [pc, #492]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dc60:	041b      	lsls	r3, r3, #16
 800dc62:	0f1b      	lsrs	r3, r3, #28
 800dc64:	f003 030f 	and.w	r3, r3, #15
 800dc68:	4a7a      	ldr	r2, [pc, #488]	; (800de54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800dc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc6e:	ee07 3a90 	vmov	s15, r3
 800dc72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	ee07 3a90 	vmov	s15, r3
 800dc7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	ee07 3a90 	vmov	s15, r3
 800dc8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc92:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800de50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800dc96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800dca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcae:	e058      	b.n	800dd62 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	ee07 3a90 	vmov	s15, r3
 800dcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcba:	eddf 6a64 	vldr	s13, [pc, #400]	; 800de4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800dcbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc2:	4b61      	ldr	r3, [pc, #388]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcca:	ee07 3a90 	vmov	s15, r3
 800dcce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800dcd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcd6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800de50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800dcda:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dcde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800dce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dcea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcf2:	e036      	b.n	800dd62 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800dcf4:	4b54      	ldr	r3, [pc, #336]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d005      	beq.n	800dd0c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800dd00:	4b51      	ldr	r3, [pc, #324]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	0f1b      	lsrs	r3, r3, #28
 800dd06:	f003 030f 	and.w	r3, r3, #15
 800dd0a:	e006      	b.n	800dd1a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800dd0c:	4b4e      	ldr	r3, [pc, #312]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd12:	041b      	lsls	r3, r3, #16
 800dd14:	0f1b      	lsrs	r3, r3, #28
 800dd16:	f003 030f 	and.w	r3, r3, #15
 800dd1a:	4a4e      	ldr	r2, [pc, #312]	; (800de54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800dd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd20:	ee07 3a90 	vmov	s15, r3
 800dd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	ee07 3a90 	vmov	s15, r3
 800dd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	ee07 3a90 	vmov	s15, r3
 800dd3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd40:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd44:	eddf 5a42 	vldr	s11, [pc, #264]	; 800de50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800dd48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd54:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800dd58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd60:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800dd62:	4b39      	ldr	r3, [pc, #228]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d017      	beq.n	800dd9e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800dd6e:	4b36      	ldr	r3, [pc, #216]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd72:	0a5b      	lsrs	r3, r3, #9
 800dd74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd78:	ee07 3a90 	vmov	s15, r3
 800dd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800dd80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd84:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800dd88:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd94:	ee17 2a90 	vmov	r2, s15
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	e002      	b.n	800dda4 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800dda4:	4b28      	ldr	r3, [pc, #160]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d017      	beq.n	800dde0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ddb0:	4b25      	ldr	r3, [pc, #148]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ddb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb4:	0c1b      	lsrs	r3, r3, #16
 800ddb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddba:	ee07 3a90 	vmov	s15, r3
 800ddbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ddc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddc6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ddca:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddd6:	ee17 2a90 	vmov	r2, s15
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	605a      	str	r2, [r3, #4]
 800ddde:	e002      	b.n	800dde6 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800dde6:	4b18      	ldr	r3, [pc, #96]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d017      	beq.n	800de22 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ddf2:	4b15      	ldr	r3, [pc, #84]	; (800de48 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ddf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf6:	0e1b      	lsrs	r3, r3, #24
 800ddf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddfc:	ee07 3a90 	vmov	s15, r3
 800de00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800de04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de08:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800de10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de18:	ee17 2a90 	vmov	r2, s15
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800de20:	e00c      	b.n	800de3c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	609a      	str	r2, [r3, #8]
}
 800de28:	e008      	b.n	800de3c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	609a      	str	r2, [r3, #8]
}
 800de3c:	bf00      	nop
 800de3e:	3724      	adds	r7, #36	; 0x24
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	46020c00 	.word	0x46020c00
 800de4c:	4b742400 	.word	0x4b742400
 800de50:	46000000 	.word	0x46000000
 800de54:	0818ab18 	.word	0x0818ab18

0800de58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800de58:	b480      	push	{r7}
 800de5a:	b089      	sub	sp, #36	; 0x24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800de60:	4bac      	ldr	r3, [pc, #688]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800de62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de68:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800de6a:	4baa      	ldr	r3, [pc, #680]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800de6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de6e:	f003 0303 	and.w	r3, r3, #3
 800de72:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800de74:	4ba7      	ldr	r3, [pc, #668]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800de76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de78:	0a1b      	lsrs	r3, r3, #8
 800de7a:	f003 030f 	and.w	r3, r3, #15
 800de7e:	3301      	adds	r3, #1
 800de80:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800de82:	4ba4      	ldr	r3, [pc, #656]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800de84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de86:	f003 0310 	and.w	r3, r3, #16
 800de8a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800de8c:	4ba1      	ldr	r3, [pc, #644]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800de8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de90:	08db      	lsrs	r3, r3, #3
 800de92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	fb02 f303 	mul.w	r3, r2, r3
 800de9c:	ee07 3a90 	vmov	s15, r3
 800dea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dea4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 8123 	beq.w	800e0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d062      	beq.n	800df7c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b03      	cmp	r3, #3
 800deba:	f200 8081 	bhi.w	800dfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d024      	beq.n	800df0e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d17a      	bne.n	800dfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	ee07 3a90 	vmov	s15, r3
 800ded0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ded4:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800ded8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dedc:	4b8d      	ldr	r3, [pc, #564]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dee4:	ee07 3a90 	vmov	s15, r3
 800dee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800deec:	ed97 6a02 	vldr	s12, [r7, #8]
 800def0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800e11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800def4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800def8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800defc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800df04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df08:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800df0c:	e08f      	b.n	800e02e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800df0e:	4b81      	ldr	r3, [pc, #516]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df16:	2b00      	cmp	r3, #0
 800df18:	d005      	beq.n	800df26 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800df1a:	4b7e      	ldr	r3, [pc, #504]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	0f1b      	lsrs	r3, r3, #28
 800df20:	f003 030f 	and.w	r3, r3, #15
 800df24:	e006      	b.n	800df34 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800df26:	4b7b      	ldr	r3, [pc, #492]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800df2c:	041b      	lsls	r3, r3, #16
 800df2e:	0f1b      	lsrs	r3, r3, #28
 800df30:	f003 030f 	and.w	r3, r3, #15
 800df34:	4a7a      	ldr	r2, [pc, #488]	; (800e120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800df36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df3a:	ee07 3a90 	vmov	s15, r3
 800df3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	ee07 3a90 	vmov	s15, r3
 800df48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	ee07 3a90 	vmov	s15, r3
 800df56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df5e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800df62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800df72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df7a:	e058      	b.n	800e02e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	ee07 3a90 	vmov	s15, r3
 800df82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df86:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800df8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df8e:	4b61      	ldr	r3, [pc, #388]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df96:	ee07 3a90 	vmov	s15, r3
 800df9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800df9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfa2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800dfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800dfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800dfae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800dfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfbe:	e036      	b.n	800e02e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800dfc0:	4b54      	ldr	r3, [pc, #336]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800dfcc:	4b51      	ldr	r3, [pc, #324]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	0f1b      	lsrs	r3, r3, #28
 800dfd2:	f003 030f 	and.w	r3, r3, #15
 800dfd6:	e006      	b.n	800dfe6 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800dfd8:	4b4e      	ldr	r3, [pc, #312]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dfda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dfde:	041b      	lsls	r3, r3, #16
 800dfe0:	0f1b      	lsrs	r3, r3, #28
 800dfe2:	f003 030f 	and.w	r3, r3, #15
 800dfe6:	4a4e      	ldr	r2, [pc, #312]	; (800e120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800dfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfec:	ee07 3a90 	vmov	s15, r3
 800dff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	ee07 3a90 	vmov	s15, r3
 800dffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	ee07 3a90 	vmov	s15, r3
 800e008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e00c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e010:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e01c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e020:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e024:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e028:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e02c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e02e:	4b39      	ldr	r3, [pc, #228]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e036:	2b00      	cmp	r3, #0
 800e038:	d017      	beq.n	800e06a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e03a:	4b36      	ldr	r3, [pc, #216]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e03e:	0a5b      	lsrs	r3, r3, #9
 800e040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e044:	ee07 3a90 	vmov	s15, r3
 800e048:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e04c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e050:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e054:	edd7 6a07 	vldr	s13, [r7, #28]
 800e058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e05c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e060:	ee17 2a90 	vmov	r2, s15
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	e002      	b.n	800e070 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e070:	4b28      	ldr	r3, [pc, #160]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d017      	beq.n	800e0ac <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e07c:	4b25      	ldr	r3, [pc, #148]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e080:	0c1b      	lsrs	r3, r3, #16
 800e082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e086:	ee07 3a90 	vmov	s15, r3
 800e08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e08e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e092:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e096:	edd7 6a07 	vldr	s13, [r7, #28]
 800e09a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e09e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0a2:	ee17 2a90 	vmov	r2, s15
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	605a      	str	r2, [r3, #4]
 800e0aa:	e002      	b.n	800e0b2 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e0b2:	4b18      	ldr	r3, [pc, #96]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d017      	beq.n	800e0ee <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e0be:	4b15      	ldr	r3, [pc, #84]	; (800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0c2:	0e1b      	lsrs	r3, r3, #24
 800e0c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0c8:	ee07 3a90 	vmov	s15, r3
 800e0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e0d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0d4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e0d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0e4:	ee17 2a90 	vmov	r2, s15
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800e0ec:	e00c      	b.n	800e108 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	609a      	str	r2, [r3, #8]
}
 800e0f4:	e008      	b.n	800e108 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	609a      	str	r2, [r3, #8]
}
 800e108:	bf00      	nop
 800e10a:	3724      	adds	r7, #36	; 0x24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	46020c00 	.word	0x46020c00
 800e118:	4b742400 	.word	0x4b742400
 800e11c:	46000000 	.word	0x46000000
 800e120:	0818ab18 	.word	0x0818ab18

0800e124 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b08e      	sub	sp, #56	; 0x38
 800e128:	af00      	add	r7, sp, #0
 800e12a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e12e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e132:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800e136:	430b      	orrs	r3, r1
 800e138:	d145      	bne.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e13a:	4ba7      	ldr	r3, [pc, #668]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e13c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e144:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800e146:	4ba4      	ldr	r3, [pc, #656]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e14c:	f003 0302 	and.w	r3, r3, #2
 800e150:	2b02      	cmp	r3, #2
 800e152:	d108      	bne.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800e154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e15a:	d104      	bne.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800e15c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e160:	637b      	str	r3, [r7, #52]	; 0x34
 800e162:	f001 b8fc 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800e166:	4b9c      	ldr	r3, [pc, #624]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e16c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e174:	d114      	bne.n	800e1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e17c:	d110      	bne.n	800e1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e17e:	4b96      	ldr	r3, [pc, #600]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e18c:	d103      	bne.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800e18e:	23fa      	movs	r3, #250	; 0xfa
 800e190:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e192:	f001 b8e4 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e196:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e19a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e19c:	f001 b8df 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800e1a0:	4b8d      	ldr	r3, [pc, #564]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1ac:	d107      	bne.n	800e1be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e1b4:	d103      	bne.n	800e1be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800e1b6:	4b89      	ldr	r3, [pc, #548]	; (800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800e1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1ba:	f001 b8d0 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e1c2:	f001 b8cc 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1ca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e1ce:	430b      	orrs	r3, r1
 800e1d0:	d151      	bne.n	800e276 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e1d2:	4b81      	ldr	r3, [pc, #516]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e1d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e1d8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800e1dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	2b80      	cmp	r3, #128	; 0x80
 800e1e2:	d035      	beq.n	800e250 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e6:	2b80      	cmp	r3, #128	; 0x80
 800e1e8:	d841      	bhi.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	2b60      	cmp	r3, #96	; 0x60
 800e1ee:	d02a      	beq.n	800e246 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	2b60      	cmp	r3, #96	; 0x60
 800e1f4:	d83b      	bhi.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	2b40      	cmp	r3, #64	; 0x40
 800e1fa:	d009      	beq.n	800e210 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fe:	2b40      	cmp	r3, #64	; 0x40
 800e200:	d835      	bhi.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00c      	beq.n	800e222 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	2b20      	cmp	r3, #32
 800e20c:	d012      	beq.n	800e234 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e20e:	e02e      	b.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e214:	4618      	mov	r0, r3
 800e216:	f7ff fb53 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e21e:	f001 b89e 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e222:	f107 0318 	add.w	r3, r7, #24
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff fcb0 	bl	800db8c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e230:	f001 b895 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e234:	f107 030c 	add.w	r3, r7, #12
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff fe0d 	bl	800de58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e242:	f001 b88c 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e246:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e24a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e24c:	f001 b887 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e250:	4b61      	ldr	r3, [pc, #388]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e25c:	d103      	bne.n	800e266 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800e25e:	4b60      	ldr	r3, [pc, #384]	; (800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e260:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e262:	f001 b87c 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e266:	2300      	movs	r3, #0
 800e268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e26a:	f001 b878 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800e26e:	2300      	movs	r3, #0
 800e270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e272:	f001 b874 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e27a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e27e:	430b      	orrs	r3, r1
 800e280:	d158      	bne.n	800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e282:	4b55      	ldr	r3, [pc, #340]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e284:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e28c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e294:	d03b      	beq.n	800e30e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e29c:	d846      	bhi.n	800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2a4:	d02e      	beq.n	800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2ac:	d83e      	bhi.n	800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2b4:	d00b      	beq.n	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2bc:	d836      	bhi.n	800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00d      	beq.n	800e2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2ca:	d012      	beq.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800e2cc:	e02e      	b.n	800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7ff faf4 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e2dc:	f001 b83f 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2e0:	f107 0318 	add.w	r3, r7, #24
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7ff fc51 	bl	800db8c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e2ee:	f001 b836 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2f2:	f107 030c 	add.w	r3, r7, #12
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff fdae 	bl	800de58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e300:	f001 b82d 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e304:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e30a:	f001 b828 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e30e:	4b32      	ldr	r3, [pc, #200]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e31a:	d103      	bne.n	800e324 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800e31c:	4b30      	ldr	r3, [pc, #192]	; (800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e31e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e320:	f001 b81d 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e324:	2300      	movs	r3, #0
 800e326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e328:	f001 b819 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800e32c:	2300      	movs	r3, #0
 800e32e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e330:	f001 b815 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800e334:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e338:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e33c:	430b      	orrs	r3, r1
 800e33e:	d126      	bne.n	800e38e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800e340:	4b25      	ldr	r3, [pc, #148]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e342:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e34a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800e34c:	4b22      	ldr	r3, [pc, #136]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e358:	d106      	bne.n	800e368 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800e35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d103      	bne.n	800e368 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800e360:	4b1f      	ldr	r3, [pc, #124]	; (800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e362:	637b      	str	r3, [r7, #52]	; 0x34
 800e364:	f000 bffb 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800e368:	4b1b      	ldr	r3, [pc, #108]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e374:	d107      	bne.n	800e386 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e37c:	d103      	bne.n	800e386 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800e37e:	4b19      	ldr	r3, [pc, #100]	; (800e3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800e380:	637b      	str	r3, [r7, #52]	; 0x34
 800e382:	f000 bfec 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800e386:	2300      	movs	r3, #0
 800e388:	637b      	str	r3, [r7, #52]	; 0x34
 800e38a:	f000 bfe8 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800e38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e392:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800e396:	430b      	orrs	r3, r1
 800e398:	d164      	bne.n	800e464 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e39a:	4b0f      	ldr	r3, [pc, #60]	; (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e39c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3a0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e3a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e3ac:	d03d      	beq.n	800e42a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e3b4:	d852      	bhi.n	800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3bc:	d014      	beq.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3c4:	d84a      	bhi.n	800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800e3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d01f      	beq.n	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e3d2:	d012      	beq.n	800e3fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800e3d4:	e042      	b.n	800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800e3d6:	bf00      	nop
 800e3d8:	46020c00 	.word	0x46020c00
 800e3dc:	0007a120 	.word	0x0007a120
 800e3e0:	00f42400 	.word	0x00f42400
 800e3e4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e3e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7ff fa67 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3f6:	f000 bfb2 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3fa:	f107 0318 	add.w	r3, r7, #24
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff fbc4 	bl	800db8c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e408:	f000 bfa9 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800e40c:	4bab      	ldr	r3, [pc, #684]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e418:	d103      	bne.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800e41a:	4ba9      	ldr	r3, [pc, #676]	; (800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800e41c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e41e:	f000 bf9e 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e422:	2300      	movs	r3, #0
 800e424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e426:	f000 bf9a 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e42a:	4ba4      	ldr	r3, [pc, #656]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e432:	2b00      	cmp	r3, #0
 800e434:	d005      	beq.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800e436:	4ba1      	ldr	r3, [pc, #644]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	0e1b      	lsrs	r3, r3, #24
 800e43c:	f003 030f 	and.w	r3, r3, #15
 800e440:	e006      	b.n	800e450 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800e442:	4b9e      	ldr	r3, [pc, #632]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e448:	041b      	lsls	r3, r3, #16
 800e44a:	0e1b      	lsrs	r3, r3, #24
 800e44c:	f003 030f 	and.w	r3, r3, #15
 800e450:	4a9c      	ldr	r2, [pc, #624]	; (800e6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800e452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e456:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e458:	f000 bf81 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800e45c:	2300      	movs	r3, #0
 800e45e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e460:	f000 bf7d 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e468:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800e46c:	430b      	orrs	r3, r1
 800e46e:	d175      	bne.n	800e55c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e470:	4b92      	ldr	r3, [pc, #584]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e472:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e47a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d15b      	bne.n	800e53a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e482:	4b8e      	ldr	r3, [pc, #568]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e488:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e48c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e490:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e494:	d034      	beq.n	800e500 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e49c:	d849      	bhi.n	800e532 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800e49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4a4:	d00b      	beq.n	800e4be <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4ac:	d841      	bhi.n	800e532 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800e4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d016      	beq.n	800e4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e4ba:	d009      	beq.n	800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800e4bc:	e039      	b.n	800e532 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7ff f9fc 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e4cc:	f000 bf47 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4d0:	f107 0318 	add.w	r3, r7, #24
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff fb59 	bl	800db8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e4de:	f000 bf3e 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800e4e2:	4b76      	ldr	r3, [pc, #472]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4ee:	d103      	bne.n	800e4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800e4f0:	4b73      	ldr	r3, [pc, #460]	; (800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800e4f2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800e4f4:	f000 bf33 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e4fc:	f000 bf2f 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e500:	4b6e      	ldr	r3, [pc, #440]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d005      	beq.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800e50c:	4b6b      	ldr	r3, [pc, #428]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	0e1b      	lsrs	r3, r3, #24
 800e512:	f003 030f 	and.w	r3, r3, #15
 800e516:	e006      	b.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800e518:	4b68      	ldr	r3, [pc, #416]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e51a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e51e:	041b      	lsls	r3, r3, #16
 800e520:	0e1b      	lsrs	r3, r3, #24
 800e522:	f003 030f 	and.w	r3, r3, #15
 800e526:	4a67      	ldr	r2, [pc, #412]	; (800e6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800e528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e52c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e52e:	f000 bf16 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800e532:	2300      	movs	r3, #0
 800e534:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e536:	f000 bf12 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e540:	d108      	bne.n	800e554 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e546:	4618      	mov	r0, r3
 800e548:	f7ff f9ba 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	637b      	str	r3, [r7, #52]	; 0x34
 800e550:	f000 bf05 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800e554:	2300      	movs	r3, #0
 800e556:	637b      	str	r3, [r7, #52]	; 0x34
 800e558:	f000 bf01 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800e55c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e560:	1e51      	subs	r1, r2, #1
 800e562:	430b      	orrs	r3, r1
 800e564:	d136      	bne.n	800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800e566:	4b55      	ldr	r3, [pc, #340]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e56c:	f003 0303 	and.w	r3, r3, #3
 800e570:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	2b00      	cmp	r3, #0
 800e576:	d104      	bne.n	800e582 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800e578:	f7fe fb34 	bl	800cbe4 <HAL_RCC_GetPCLK2Freq>
 800e57c:	6378      	str	r0, [r7, #52]	; 0x34
 800e57e:	f000 beee 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800e582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e584:	2b01      	cmp	r3, #1
 800e586:	d104      	bne.n	800e592 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e588:	f7fe f9f6 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800e58c:	6378      	str	r0, [r7, #52]	; 0x34
 800e58e:	f000 bee6 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800e592:	4b4a      	ldr	r3, [pc, #296]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e59a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e59e:	d106      	bne.n	800e5ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800e5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	d103      	bne.n	800e5ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800e5a6:	4b48      	ldr	r3, [pc, #288]	; (800e6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e5a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5aa:	f000 bed8 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800e5ae:	4b43      	ldr	r3, [pc, #268]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e5b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e5b4:	f003 0302 	and.w	r3, r3, #2
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d107      	bne.n	800e5cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5be:	2b03      	cmp	r3, #3
 800e5c0:	d104      	bne.n	800e5cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800e5c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5c6:	637b      	str	r3, [r7, #52]	; 0x34
 800e5c8:	f000 bec9 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	637b      	str	r3, [r7, #52]	; 0x34
 800e5d0:	f000 bec5 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800e5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5d8:	1e91      	subs	r1, r2, #2
 800e5da:	430b      	orrs	r3, r1
 800e5dc:	d136      	bne.n	800e64c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e5de:	4b37      	ldr	r3, [pc, #220]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e5e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5e4:	f003 030c 	and.w	r3, r3, #12
 800e5e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800e5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d104      	bne.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e5f0:	f7fe fae4 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800e5f4:	6378      	str	r0, [r7, #52]	; 0x34
 800e5f6:	f000 beb2 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	2b04      	cmp	r3, #4
 800e5fe:	d104      	bne.n	800e60a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e600:	f7fe f9ba 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800e604:	6378      	str	r0, [r7, #52]	; 0x34
 800e606:	f000 beaa 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800e60a:	4b2c      	ldr	r3, [pc, #176]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e616:	d106      	bne.n	800e626 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	2b08      	cmp	r3, #8
 800e61c:	d103      	bne.n	800e626 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800e61e:	4b2a      	ldr	r3, [pc, #168]	; (800e6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e620:	637b      	str	r3, [r7, #52]	; 0x34
 800e622:	f000 be9c 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800e626:	4b25      	ldr	r3, [pc, #148]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e62c:	f003 0302 	and.w	r3, r3, #2
 800e630:	2b02      	cmp	r3, #2
 800e632:	d107      	bne.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	2b0c      	cmp	r3, #12
 800e638:	d104      	bne.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800e63a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e63e:	637b      	str	r3, [r7, #52]	; 0x34
 800e640:	f000 be8d 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800e644:	2300      	movs	r3, #0
 800e646:	637b      	str	r3, [r7, #52]	; 0x34
 800e648:	f000 be89 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800e64c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e650:	1f11      	subs	r1, r2, #4
 800e652:	430b      	orrs	r3, r1
 800e654:	d13e      	bne.n	800e6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e656:	4b19      	ldr	r3, [pc, #100]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e65c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e660:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e664:	2b00      	cmp	r3, #0
 800e666:	d104      	bne.n	800e672 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e668:	f7fe faa8 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800e66c:	6378      	str	r0, [r7, #52]	; 0x34
 800e66e:	f000 be76 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	2b10      	cmp	r3, #16
 800e676:	d104      	bne.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e678:	f7fe f97e 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800e67c:	6378      	str	r0, [r7, #52]	; 0x34
 800e67e:	f000 be6e 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800e682:	4b0e      	ldr	r3, [pc, #56]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e68e:	d106      	bne.n	800e69e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	2b20      	cmp	r3, #32
 800e694:	d103      	bne.n	800e69e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800e696:	4b0c      	ldr	r3, [pc, #48]	; (800e6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e698:	637b      	str	r3, [r7, #52]	; 0x34
 800e69a:	f000 be60 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800e69e:	4b07      	ldr	r3, [pc, #28]	; (800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e6a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e6a4:	f003 0302 	and.w	r3, r3, #2
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d10f      	bne.n	800e6cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ae:	2b30      	cmp	r3, #48	; 0x30
 800e6b0:	d10c      	bne.n	800e6cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800e6b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e6b8:	f000 be51 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e6bc:	46020c00 	.word	0x46020c00
 800e6c0:	02dc6c00 	.word	0x02dc6c00
 800e6c4:	0818ab18 	.word	0x0818ab18
 800e6c8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	637b      	str	r3, [r7, #52]	; 0x34
 800e6d0:	f000 be45 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800e6d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6d8:	f1a2 0108 	sub.w	r1, r2, #8
 800e6dc:	430b      	orrs	r3, r1
 800e6de:	d136      	bne.n	800e74e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e6e0:	4b9f      	ldr	r3, [pc, #636]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e6e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e6e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e6ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800e6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d104      	bne.n	800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e6f2:	f7fe fa63 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800e6f6:	6378      	str	r0, [r7, #52]	; 0x34
 800e6f8:	f000 be31 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800e6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fe:	2b40      	cmp	r3, #64	; 0x40
 800e700:	d104      	bne.n	800e70c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e702:	f7fe f939 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800e706:	6378      	str	r0, [r7, #52]	; 0x34
 800e708:	f000 be29 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800e70c:	4b94      	ldr	r3, [pc, #592]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e718:	d106      	bne.n	800e728 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	2b80      	cmp	r3, #128	; 0x80
 800e71e:	d103      	bne.n	800e728 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800e720:	4b90      	ldr	r3, [pc, #576]	; (800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e722:	637b      	str	r3, [r7, #52]	; 0x34
 800e724:	f000 be1b 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800e728:	4b8d      	ldr	r3, [pc, #564]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e72a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e72e:	f003 0302 	and.w	r3, r3, #2
 800e732:	2b02      	cmp	r3, #2
 800e734:	d107      	bne.n	800e746 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	2bc0      	cmp	r3, #192	; 0xc0
 800e73a:	d104      	bne.n	800e746 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800e73c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
 800e742:	f000 be0c 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800e746:	2300      	movs	r3, #0
 800e748:	637b      	str	r3, [r7, #52]	; 0x34
 800e74a:	f000 be08 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800e74e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e752:	f1a2 0110 	sub.w	r1, r2, #16
 800e756:	430b      	orrs	r3, r1
 800e758:	d139      	bne.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e75a:	4b81      	ldr	r3, [pc, #516]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e75c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e764:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d104      	bne.n	800e776 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e76c:	f7fe fa26 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800e770:	6378      	str	r0, [r7, #52]	; 0x34
 800e772:	f000 bdf4 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800e776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e77c:	d104      	bne.n	800e788 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e77e:	f7fe f8fb 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800e782:	6378      	str	r0, [r7, #52]	; 0x34
 800e784:	f000 bdeb 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800e788:	4b75      	ldr	r3, [pc, #468]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e794:	d107      	bne.n	800e7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800e796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e79c:	d103      	bne.n	800e7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800e79e:	4b71      	ldr	r3, [pc, #452]	; (800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7a2:	f000 bddc 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800e7a6:	4b6e      	ldr	r3, [pc, #440]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e7a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e7ac:	f003 0302 	and.w	r3, r3, #2
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d108      	bne.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7ba:	d104      	bne.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800e7bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7c2:	f000 bdcc 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e7ca:	f000 bdc8 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800e7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7d2:	f1a2 0120 	sub.w	r1, r2, #32
 800e7d6:	430b      	orrs	r3, r1
 800e7d8:	d158      	bne.n	800e88c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e7da:	4b61      	ldr	r3, [pc, #388]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e7dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e7e0:	f003 0307 	and.w	r3, r3, #7
 800e7e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d104      	bne.n	800e7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800e7ec:	f7fe fa0e 	bl	800cc0c <HAL_RCC_GetPCLK3Freq>
 800e7f0:	6378      	str	r0, [r7, #52]	; 0x34
 800e7f2:	f000 bdb4 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800e7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d104      	bne.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e7fc:	f7fe f8bc 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800e800:	6378      	str	r0, [r7, #52]	; 0x34
 800e802:	f000 bdac 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800e806:	4b56      	ldr	r3, [pc, #344]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e80e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e812:	d106      	bne.n	800e822 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	2b02      	cmp	r3, #2
 800e818:	d103      	bne.n	800e822 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800e81a:	4b52      	ldr	r3, [pc, #328]	; (800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e81c:	637b      	str	r3, [r7, #52]	; 0x34
 800e81e:	f000 bd9e 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800e822:	4b4f      	ldr	r3, [pc, #316]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e828:	f003 0302 	and.w	r3, r3, #2
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	d107      	bne.n	800e840 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800e830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e832:	2b03      	cmp	r3, #3
 800e834:	d104      	bne.n	800e840 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800e836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e83a:	637b      	str	r3, [r7, #52]	; 0x34
 800e83c:	f000 bd8f 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800e840:	4b47      	ldr	r3, [pc, #284]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f003 0320 	and.w	r3, r3, #32
 800e848:	2b20      	cmp	r3, #32
 800e84a:	d11b      	bne.n	800e884 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800e84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84e:	2b04      	cmp	r3, #4
 800e850:	d118      	bne.n	800e884 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e852:	4b43      	ldr	r3, [pc, #268]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d005      	beq.n	800e86a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800e85e:	4b40      	ldr	r3, [pc, #256]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	0e1b      	lsrs	r3, r3, #24
 800e864:	f003 030f 	and.w	r3, r3, #15
 800e868:	e006      	b.n	800e878 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800e86a:	4b3d      	ldr	r3, [pc, #244]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e86c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e870:	041b      	lsls	r3, r3, #16
 800e872:	0e1b      	lsrs	r3, r3, #24
 800e874:	f003 030f 	and.w	r3, r3, #15
 800e878:	4a3b      	ldr	r2, [pc, #236]	; (800e968 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e87e:	637b      	str	r3, [r7, #52]	; 0x34
 800e880:	f000 bd6d 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800e884:	2300      	movs	r3, #0
 800e886:	637b      	str	r3, [r7, #52]	; 0x34
 800e888:	f000 bd69 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800e88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e890:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e894:	430b      	orrs	r3, r1
 800e896:	d169      	bne.n	800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800e898:	4b31      	ldr	r3, [pc, #196]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e89a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e89e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e8a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800e8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8aa:	d104      	bne.n	800e8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e8ac:	f7fe f864 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800e8b0:	6378      	str	r0, [r7, #52]	; 0x34
 800e8b2:	f000 bd54 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8bc:	d108      	bne.n	800e8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8be:	f107 0318 	add.w	r3, r7, #24
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7ff f962 	bl	800db8c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800e8cc:	f000 bd47 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800e8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d104      	bne.n	800e8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800e8d6:	f7fe f957 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800e8da:	6378      	str	r0, [r7, #52]	; 0x34
 800e8dc:	f000 bd3f 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e8e6:	d118      	bne.n	800e91a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800e8e8:	4b1d      	ldr	r3, [pc, #116]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d005      	beq.n	800e900 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800e8f4:	4b1a      	ldr	r3, [pc, #104]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	0f1b      	lsrs	r3, r3, #28
 800e8fa:	f003 030f 	and.w	r3, r3, #15
 800e8fe:	e006      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800e900:	4b17      	ldr	r3, [pc, #92]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e906:	041b      	lsls	r3, r3, #16
 800e908:	0f1b      	lsrs	r3, r3, #28
 800e90a:	f003 030f 	and.w	r3, r3, #15
 800e90e:	4a16      	ldr	r2, [pc, #88]	; (800e968 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e914:	637b      	str	r3, [r7, #52]	; 0x34
 800e916:	f000 bd22 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800e91a:	4b11      	ldr	r3, [pc, #68]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e926:	d107      	bne.n	800e938 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e92e:	d103      	bne.n	800e938 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800e930:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e932:	637b      	str	r3, [r7, #52]	; 0x34
 800e934:	f000 bd13 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800e938:	4b09      	ldr	r3, [pc, #36]	; (800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e944:	d107      	bne.n	800e956 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e94c:	d103      	bne.n	800e956 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800e94e:	4b05      	ldr	r3, [pc, #20]	; (800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e950:	637b      	str	r3, [r7, #52]	; 0x34
 800e952:	f000 bd04 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800e956:	2300      	movs	r3, #0
 800e958:	637b      	str	r3, [r7, #52]	; 0x34
 800e95a:	f000 bd00 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e95e:	bf00      	nop
 800e960:	46020c00 	.word	0x46020c00
 800e964:	00f42400 	.word	0x00f42400
 800e968:	0818ab18 	.word	0x0818ab18
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800e96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e970:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e974:	430b      	orrs	r3, r1
 800e976:	d14e      	bne.n	800ea16 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800e978:	4ba8      	ldr	r3, [pc, #672]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e97a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e97e:	f003 0307 	and.w	r3, r3, #7
 800e982:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	2b04      	cmp	r3, #4
 800e988:	d841      	bhi.n	800ea0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e98a:	a201      	add	r2, pc, #4	; (adr r2, 800e990 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800e98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e990:	0800e9c9 	.word	0x0800e9c9
 800e994:	0800e9a5 	.word	0x0800e9a5
 800e998:	0800e9b7 	.word	0x0800e9b7
 800e99c:	0800e9d3 	.word	0x0800e9d3
 800e9a0:	0800e9dd 	.word	0x0800e9dd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e9a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fe ff89 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9b2:	f000 bcd4 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9b6:	f107 030c 	add.w	r3, r7, #12
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7ff fa4c 	bl	800de58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9c4:	f000 bccb 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800e9c8:	f7fe f8de 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800e9cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e9ce:	f000 bcc6 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e9d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e9d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9d8:	f000 bcc1 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e9dc:	4b8f      	ldr	r3, [pc, #572]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d005      	beq.n	800e9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800e9e8:	4b8c      	ldr	r3, [pc, #560]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	0e1b      	lsrs	r3, r3, #24
 800e9ee:	f003 030f 	and.w	r3, r3, #15
 800e9f2:	e006      	b.n	800ea02 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800e9f4:	4b89      	ldr	r3, [pc, #548]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e9f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e9fa:	041b      	lsls	r3, r3, #16
 800e9fc:	0e1b      	lsrs	r3, r3, #24
 800e9fe:	f003 030f 	and.w	r3, r3, #15
 800ea02:	4a87      	ldr	r2, [pc, #540]	; (800ec20 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ea04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea0a:	f000 bca8 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea12:	f000 bca4 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ea16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea1a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800ea1e:	430b      	orrs	r3, r1
 800ea20:	d15d      	bne.n	800eade <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ea22:	4b7e      	ldr	r3, [pc, #504]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ea28:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ea2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ea34:	d036      	beq.n	800eaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ea36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ea3c:	d84b      	bhi.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ea44:	d029      	beq.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800ea46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ea4c:	d843      	bhi.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea54:	d013      	beq.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea5c:	d83b      	bhi.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d015      	beq.n	800ea90 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea6a:	d134      	bne.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe ff25 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea7a:	f000 bc70 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea7e:	f107 030c 	add.w	r3, r7, #12
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff f9e8 	bl	800de58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea8c:	f000 bc67 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ea90:	f7fe f87a 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800ea94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ea96:	f000 bc62 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ea9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ea9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eaa0:	f000 bc5d 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eaa4:	4b5d      	ldr	r3, [pc, #372]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d005      	beq.n	800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800eab0:	4b5a      	ldr	r3, [pc, #360]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	0e1b      	lsrs	r3, r3, #24
 800eab6:	f003 030f 	and.w	r3, r3, #15
 800eaba:	e006      	b.n	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800eabc:	4b57      	ldr	r3, [pc, #348]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eabe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eac2:	041b      	lsls	r3, r3, #16
 800eac4:	0e1b      	lsrs	r3, r3, #24
 800eac6:	f003 030f 	and.w	r3, r3, #15
 800eaca:	4a55      	ldr	r2, [pc, #340]	; (800ec20 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800eacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ead0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ead2:	f000 bc44 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ead6:	2300      	movs	r3, #0
 800ead8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eada:	f000 bc40 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800eade:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eae2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800eae6:	430b      	orrs	r3, r1
 800eae8:	d14a      	bne.n	800eb80 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800eaea:	4b4c      	ldr	r3, [pc, #304]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eaec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eaf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eaf4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d104      	bne.n	800eb06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800eafc:	f7fe f85e 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800eb00:	6378      	str	r0, [r7, #52]	; 0x34
 800eb02:	f000 bc2c 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800eb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb0c:	d104      	bne.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eb0e:	f7fd ff33 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800eb12:	6378      	str	r0, [r7, #52]	; 0x34
 800eb14:	f000 bc23 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800eb18:	4b40      	ldr	r3, [pc, #256]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb24:	d107      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb2c:	d103      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800eb2e:	4b3d      	ldr	r3, [pc, #244]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eb30:	637b      	str	r3, [r7, #52]	; 0x34
 800eb32:	f000 bc14 	b.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800eb36:	4b39      	ldr	r3, [pc, #228]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f003 0320 	and.w	r3, r3, #32
 800eb3e:	2b20      	cmp	r3, #32
 800eb40:	d11b      	bne.n	800eb7a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eb48:	d117      	bne.n	800eb7a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eb4a:	4b34      	ldr	r3, [pc, #208]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d005      	beq.n	800eb62 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800eb56:	4b31      	ldr	r3, [pc, #196]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	0e1b      	lsrs	r3, r3, #24
 800eb5c:	f003 030f 	and.w	r3, r3, #15
 800eb60:	e006      	b.n	800eb70 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800eb62:	4b2e      	ldr	r3, [pc, #184]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb68:	041b      	lsls	r3, r3, #16
 800eb6a:	0e1b      	lsrs	r3, r3, #24
 800eb6c:	f003 030f 	and.w	r3, r3, #15
 800eb70:	4a2b      	ldr	r2, [pc, #172]	; (800ec20 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800eb72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb76:	637b      	str	r3, [r7, #52]	; 0x34
 800eb78:	e3f1      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	637b      	str	r3, [r7, #52]	; 0x34
 800eb7e:	e3ee      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800eb80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb84:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800eb88:	430b      	orrs	r3, r1
 800eb8a:	d14d      	bne.n	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800eb8c:	4b23      	ldr	r3, [pc, #140]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800eb96:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d103      	bne.n	800eba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800eb9e:	f7fe f80d 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800eba2:	6378      	str	r0, [r7, #52]	; 0x34
 800eba4:	e3db      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800eba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebac:	d103      	bne.n	800ebb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ebae:	f7fd fee3 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800ebb2:	6378      	str	r0, [r7, #52]	; 0x34
 800ebb4:	e3d3      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ebb6:	4b19      	ldr	r3, [pc, #100]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebc2:	d106      	bne.n	800ebd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800ebc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebca:	d102      	bne.n	800ebd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800ebcc:	4b15      	ldr	r3, [pc, #84]	; (800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ebce:	637b      	str	r3, [r7, #52]	; 0x34
 800ebd0:	e3c5      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ebd2:	4b12      	ldr	r3, [pc, #72]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f003 0320 	and.w	r3, r3, #32
 800ebda:	2b20      	cmp	r3, #32
 800ebdc:	d11b      	bne.n	800ec16 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ebe4:	d117      	bne.n	800ec16 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ebe6:	4b0d      	ldr	r3, [pc, #52]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d005      	beq.n	800ebfe <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800ebf2:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	0e1b      	lsrs	r3, r3, #24
 800ebf8:	f003 030f 	and.w	r3, r3, #15
 800ebfc:	e006      	b.n	800ec0c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800ebfe:	4b07      	ldr	r3, [pc, #28]	; (800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ec00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec04:	041b      	lsls	r3, r3, #16
 800ec06:	0e1b      	lsrs	r3, r3, #24
 800ec08:	f003 030f 	and.w	r3, r3, #15
 800ec0c:	4a04      	ldr	r2, [pc, #16]	; (800ec20 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ec0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec12:	637b      	str	r3, [r7, #52]	; 0x34
 800ec14:	e3a3      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ec16:	2300      	movs	r3, #0
 800ec18:	637b      	str	r3, [r7, #52]	; 0x34
 800ec1a:	e3a0      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800ec1c:	46020c00 	.word	0x46020c00
 800ec20:	0818ab18 	.word	0x0818ab18
 800ec24:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ec28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec2c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ec30:	430b      	orrs	r3, r1
 800ec32:	d148      	bne.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ec34:	4b9d      	ldr	r3, [pc, #628]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ec36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ec3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ec3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	2bc0      	cmp	r3, #192	; 0xc0
 800ec44:	d024      	beq.n	800ec90 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec48:	2bc0      	cmp	r3, #192	; 0xc0
 800ec4a:	d839      	bhi.n	800ecc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4e:	2b80      	cmp	r3, #128	; 0x80
 800ec50:	d00d      	beq.n	800ec6e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	2b80      	cmp	r3, #128	; 0x80
 800ec56:	d833      	bhi.n	800ecc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800ec58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d003      	beq.n	800ec66 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	2b40      	cmp	r3, #64	; 0x40
 800ec62:	d011      	beq.n	800ec88 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800ec64:	e02c      	b.n	800ecc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ec66:	f7fd ffd1 	bl	800cc0c <HAL_RCC_GetPCLK3Freq>
 800ec6a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ec6c:	e377      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ec6e:	4b8f      	ldr	r3, [pc, #572]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec7a:	d102      	bne.n	800ec82 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800ec7c:	4b8c      	ldr	r3, [pc, #560]	; (800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800ec7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ec80:	e36d      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec86:	e36a      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ec88:	f7fd fe76 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800ec8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ec8e:	e366      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800ec90:	4b86      	ldr	r3, [pc, #536]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800ec9c:	4b83      	ldr	r3, [pc, #524]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	0f1b      	lsrs	r3, r3, #28
 800eca2:	f003 030f 	and.w	r3, r3, #15
 800eca6:	e006      	b.n	800ecb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800eca8:	4b80      	ldr	r3, [pc, #512]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ecaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ecae:	041b      	lsls	r3, r3, #16
 800ecb0:	0f1b      	lsrs	r3, r3, #28
 800ecb2:	f003 030f 	and.w	r3, r3, #15
 800ecb6:	4a7f      	ldr	r2, [pc, #508]	; (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ecb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecbe:	e34e      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecc4:	e34b      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ecc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecca:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800ecce:	430b      	orrs	r3, r1
 800ecd0:	d147      	bne.n	800ed62 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ecd2:	4b76      	ldr	r3, [pc, #472]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ecd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ecdc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d103      	bne.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ece4:	f7fd ff6a 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800ece8:	6378      	str	r0, [r7, #52]	; 0x34
 800ecea:	e338      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecf2:	d103      	bne.n	800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ecf4:	f7fd fe40 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800ecf8:	6378      	str	r0, [r7, #52]	; 0x34
 800ecfa:	e330      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ecfc:	4b6b      	ldr	r3, [pc, #428]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed08:	d106      	bne.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed10:	d102      	bne.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800ed12:	4b67      	ldr	r3, [pc, #412]	; (800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800ed14:	637b      	str	r3, [r7, #52]	; 0x34
 800ed16:	e322      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800ed18:	4b64      	ldr	r3, [pc, #400]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f003 0320 	and.w	r3, r3, #32
 800ed20:	2b20      	cmp	r3, #32
 800ed22:	d11b      	bne.n	800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800ed24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ed2a:	d117      	bne.n	800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ed2c:	4b5f      	ldr	r3, [pc, #380]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d005      	beq.n	800ed44 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800ed38:	4b5c      	ldr	r3, [pc, #368]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	0e1b      	lsrs	r3, r3, #24
 800ed3e:	f003 030f 	and.w	r3, r3, #15
 800ed42:	e006      	b.n	800ed52 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800ed44:	4b59      	ldr	r3, [pc, #356]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed4a:	041b      	lsls	r3, r3, #16
 800ed4c:	0e1b      	lsrs	r3, r3, #24
 800ed4e:	f003 030f 	and.w	r3, r3, #15
 800ed52:	4a58      	ldr	r2, [pc, #352]	; (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ed54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed58:	637b      	str	r3, [r7, #52]	; 0x34
 800ed5a:	e300      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed60:	e2fd      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800ed62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed66:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ed6a:	430b      	orrs	r3, r1
 800ed6c:	d15b      	bne.n	800ee26 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ed6e:	4b4f      	ldr	r3, [pc, #316]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ed74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed78:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d117      	bne.n	800edb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ed80:	4b4a      	ldr	r3, [pc, #296]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d005      	beq.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800ed8c:	4b47      	ldr	r3, [pc, #284]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	0e1b      	lsrs	r3, r3, #24
 800ed92:	f003 030f 	and.w	r3, r3, #15
 800ed96:	e006      	b.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800ed98:	4b44      	ldr	r3, [pc, #272]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed9e:	041b      	lsls	r3, r3, #16
 800eda0:	0e1b      	lsrs	r3, r3, #24
 800eda2:	f003 030f 	and.w	r3, r3, #15
 800eda6:	4a43      	ldr	r2, [pc, #268]	; (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800eda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edac:	637b      	str	r3, [r7, #52]	; 0x34
 800edae:	e2d6      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800edb0:	4b3e      	ldr	r3, [pc, #248]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800edb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800edb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800edbe:	d112      	bne.n	800ede6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edc6:	d10e      	bne.n	800ede6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800edc8:	4b38      	ldr	r3, [pc, #224]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800edca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800edce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edd6:	d102      	bne.n	800edde <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800edd8:	23fa      	movs	r3, #250	; 0xfa
 800edda:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eddc:	e2bf      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800edde:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ede2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ede4:	e2bb      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800ede6:	4b31      	ldr	r3, [pc, #196]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edf2:	d106      	bne.n	800ee02 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800edf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edfa:	d102      	bne.n	800ee02 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800edfc:	4b2c      	ldr	r3, [pc, #176]	; (800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800edfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ee00:	e2ad      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800ee02:	4b2a      	ldr	r3, [pc, #168]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee08:	f003 0302 	and.w	r3, r3, #2
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d107      	bne.n	800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800ee10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee16:	d103      	bne.n	800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800ee18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee1e:	e29e      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800ee20:	2300      	movs	r3, #0
 800ee22:	637b      	str	r3, [r7, #52]	; 0x34
 800ee24:	e29b      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800ee26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee2a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ee2e:	430b      	orrs	r3, r1
 800ee30:	d162      	bne.n	800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ee32:	4b1e      	ldr	r3, [pc, #120]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ee3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d117      	bne.n	800ee74 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ee44:	4b19      	ldr	r3, [pc, #100]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d005      	beq.n	800ee5c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800ee50:	4b16      	ldr	r3, [pc, #88]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	0e1b      	lsrs	r3, r3, #24
 800ee56:	f003 030f 	and.w	r3, r3, #15
 800ee5a:	e006      	b.n	800ee6a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800ee5c:	4b13      	ldr	r3, [pc, #76]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ee62:	041b      	lsls	r3, r3, #16
 800ee64:	0e1b      	lsrs	r3, r3, #24
 800ee66:	f003 030f 	and.w	r3, r3, #15
 800ee6a:	4a12      	ldr	r2, [pc, #72]	; (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ee6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee70:	637b      	str	r3, [r7, #52]	; 0x34
 800ee72:	e274      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800ee74:	4b0d      	ldr	r3, [pc, #52]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee82:	d119      	bne.n	800eeb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee8a:	d115      	bne.n	800eeb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ee8c:	4b07      	ldr	r3, [pc, #28]	; (800eeac <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee9a:	d102      	bne.n	800eea2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800ee9c:	23fa      	movs	r3, #250	; 0xfa
 800ee9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eea0:	e25d      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800eea2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800eea6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eea8:	e259      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800eeaa:	bf00      	nop
 800eeac:	46020c00 	.word	0x46020c00
 800eeb0:	00f42400 	.word	0x00f42400
 800eeb4:	0818ab18 	.word	0x0818ab18
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800eeb8:	4b9d      	ldr	r3, [pc, #628]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eec4:	d106      	bne.n	800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eecc:	d102      	bne.n	800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800eece:	4b99      	ldr	r3, [pc, #612]	; (800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800eed0:	637b      	str	r3, [r7, #52]	; 0x34
 800eed2:	e244      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800eed4:	4b96      	ldr	r3, [pc, #600]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800eed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eeda:	f003 0302 	and.w	r3, r3, #2
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d107      	bne.n	800eef2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eee8:	d103      	bne.n	800eef2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800eeea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eeee:	637b      	str	r3, [r7, #52]	; 0x34
 800eef0:	e235      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800eef2:	2300      	movs	r3, #0
 800eef4:	637b      	str	r3, [r7, #52]	; 0x34
 800eef6:	e232      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800eef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eefc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ef00:	430b      	orrs	r3, r1
 800ef02:	d147      	bne.n	800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ef04:	4b8a      	ldr	r3, [pc, #552]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ef06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef0a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ef0e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800ef10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d103      	bne.n	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ef16:	f7fd fe51 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800ef1a:	6378      	str	r0, [r7, #52]	; 0x34
 800ef1c:	e21f      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800ef1e:	4b84      	ldr	r3, [pc, #528]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ef20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef2c:	d112      	bne.n	800ef54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ef34:	d10e      	bne.n	800ef54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef36:	4b7e      	ldr	r3, [pc, #504]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ef38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef44:	d102      	bne.n	800ef4c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800ef46:	23fa      	movs	r3, #250	; 0xfa
 800ef48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef4a:	e208      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800ef4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ef50:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef52:	e204      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800ef54:	4b76      	ldr	r3, [pc, #472]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef60:	d106      	bne.n	800ef70 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ef68:	d102      	bne.n	800ef70 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800ef6a:	4b72      	ldr	r3, [pc, #456]	; (800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ef6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef6e:	e1f6      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800ef70:	4b6f      	ldr	r3, [pc, #444]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ef72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef76:	f003 0302 	and.w	r3, r3, #2
 800ef7a:	2b02      	cmp	r3, #2
 800ef7c:	d107      	bne.n	800ef8e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ef84:	d103      	bne.n	800ef8e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800ef86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ef8c:	e1e7      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	637b      	str	r3, [r7, #52]	; 0x34
 800ef92:	e1e4      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800ef94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef98:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800ef9c:	430b      	orrs	r3, r1
 800ef9e:	d12d      	bne.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800efa0:	4b63      	ldr	r3, [pc, #396]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800efa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800efa6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800efaa:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800efac:	4b60      	ldr	r3, [pc, #384]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efb8:	d105      	bne.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d102      	bne.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800efc0:	4b5c      	ldr	r3, [pc, #368]	; (800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800efc2:	637b      	str	r3, [r7, #52]	; 0x34
 800efc4:	e1cb      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800efcc:	d107      	bne.n	800efde <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800efce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fe fc74 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	637b      	str	r3, [r7, #52]	; 0x34
 800efdc:	e1bf      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efe4:	d107      	bne.n	800eff6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efe6:	f107 0318 	add.w	r3, r7, #24
 800efea:	4618      	mov	r0, r3
 800efec:	f7fe fdce 	bl	800db8c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	637b      	str	r3, [r7, #52]	; 0x34
 800eff4:	e1b3      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800eff6:	2300      	movs	r3, #0
 800eff8:	637b      	str	r3, [r7, #52]	; 0x34
 800effa:	e1b0      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800effc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f000:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800f004:	430b      	orrs	r3, r1
 800f006:	d14d      	bne.n	800f0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f008:	4b49      	ldr	r3, [pc, #292]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f00a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f00e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f012:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f01a:	d028      	beq.n	800f06e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f022:	d83c      	bhi.n	800f09e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f02a:	d013      	beq.n	800f054 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f032:	d834      	bhi.n	800f09e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800f034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f036:	2b00      	cmp	r3, #0
 800f038:	d004      	beq.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800f03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f040:	d004      	beq.n	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800f042:	e02c      	b.n	800f09e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f044:	f7fd fdce 	bl	800cbe4 <HAL_RCC_GetPCLK2Freq>
 800f048:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f04a:	e188      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f04c:	f7fd fc94 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800f050:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f052:	e184      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f054:	4b36      	ldr	r3, [pc, #216]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f05c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f060:	d102      	bne.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800f062:	4b34      	ldr	r3, [pc, #208]	; (800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800f064:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f066:	e17a      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f068:	2300      	movs	r3, #0
 800f06a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f06c:	e177      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f06e:	4b30      	ldr	r3, [pc, #192]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f076:	2b00      	cmp	r3, #0
 800f078:	d005      	beq.n	800f086 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800f07a:	4b2d      	ldr	r3, [pc, #180]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	0e1b      	lsrs	r3, r3, #24
 800f080:	f003 030f 	and.w	r3, r3, #15
 800f084:	e006      	b.n	800f094 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800f086:	4b2a      	ldr	r3, [pc, #168]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f08c:	041b      	lsls	r3, r3, #16
 800f08e:	0e1b      	lsrs	r3, r3, #24
 800f090:	f003 030f 	and.w	r3, r3, #15
 800f094:	4a28      	ldr	r2, [pc, #160]	; (800f138 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800f096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f09a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f09c:	e15f      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0a2:	e15c      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800f0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0a8:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800f0ac:	430b      	orrs	r3, r1
 800f0ae:	d154      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f0b0:	4b1f      	ldr	r3, [pc, #124]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f0b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f0b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f0ba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f0c2:	d028      	beq.n	800f116 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800f0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f0ca:	d843      	bhi.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800f0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0d2:	d013      	beq.n	800f0fc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0da:	d83b      	bhi.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d004      	beq.n	800f0ec <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0e8:	d004      	beq.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800f0ea:	e033      	b.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800f0ec:	f7fd fd66 	bl	800cbbc <HAL_RCC_GetPCLK1Freq>
 800f0f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f0f2:	e134      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f0f4:	f7fd fc40 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800f0f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f0fa:	e130      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f0fc:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f108:	d102      	bne.n	800f110 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800f10a:	4b0a      	ldr	r3, [pc, #40]	; (800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f10e:	e126      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f110:	2300      	movs	r3, #0
 800f112:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f114:	e123      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f116:	4b06      	ldr	r3, [pc, #24]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00c      	beq.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800f122:	4b03      	ldr	r3, [pc, #12]	; (800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	0e1b      	lsrs	r3, r3, #24
 800f128:	f003 030f 	and.w	r3, r3, #15
 800f12c:	e00d      	b.n	800f14a <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800f12e:	bf00      	nop
 800f130:	46020c00 	.word	0x46020c00
 800f134:	00f42400 	.word	0x00f42400
 800f138:	0818ab18 	.word	0x0818ab18
 800f13c:	4b8a      	ldr	r3, [pc, #552]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f13e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f142:	041b      	lsls	r3, r3, #16
 800f144:	0e1b      	lsrs	r3, r3, #24
 800f146:	f003 030f 	and.w	r3, r3, #15
 800f14a:	4a88      	ldr	r2, [pc, #544]	; (800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800f14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f150:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f152:	e104      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f154:	2300      	movs	r3, #0
 800f156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f158:	e101      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800f15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f15e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800f162:	430b      	orrs	r3, r1
 800f164:	d16e      	bne.n	800f244 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800f166:	4b80      	ldr	r3, [pc, #512]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f16c:	f003 0318 	and.w	r3, r3, #24
 800f170:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	2b18      	cmp	r3, #24
 800f176:	d862      	bhi.n	800f23e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800f178:	a201      	add	r2, pc, #4	; (adr r2, 800f180 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f17e:	bf00      	nop
 800f180:	0800f1e5 	.word	0x0800f1e5
 800f184:	0800f23f 	.word	0x0800f23f
 800f188:	0800f23f 	.word	0x0800f23f
 800f18c:	0800f23f 	.word	0x0800f23f
 800f190:	0800f23f 	.word	0x0800f23f
 800f194:	0800f23f 	.word	0x0800f23f
 800f198:	0800f23f 	.word	0x0800f23f
 800f19c:	0800f23f 	.word	0x0800f23f
 800f1a0:	0800f1ed 	.word	0x0800f1ed
 800f1a4:	0800f23f 	.word	0x0800f23f
 800f1a8:	0800f23f 	.word	0x0800f23f
 800f1ac:	0800f23f 	.word	0x0800f23f
 800f1b0:	0800f23f 	.word	0x0800f23f
 800f1b4:	0800f23f 	.word	0x0800f23f
 800f1b8:	0800f23f 	.word	0x0800f23f
 800f1bc:	0800f23f 	.word	0x0800f23f
 800f1c0:	0800f1f5 	.word	0x0800f1f5
 800f1c4:	0800f23f 	.word	0x0800f23f
 800f1c8:	0800f23f 	.word	0x0800f23f
 800f1cc:	0800f23f 	.word	0x0800f23f
 800f1d0:	0800f23f 	.word	0x0800f23f
 800f1d4:	0800f23f 	.word	0x0800f23f
 800f1d8:	0800f23f 	.word	0x0800f23f
 800f1dc:	0800f23f 	.word	0x0800f23f
 800f1e0:	0800f20f 	.word	0x0800f20f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800f1e4:	f7fd fd12 	bl	800cc0c <HAL_RCC_GetPCLK3Freq>
 800f1e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f1ea:	e0b8      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f1ec:	f7fd fbc4 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800f1f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f1f2:	e0b4      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f1f4:	4b5c      	ldr	r3, [pc, #368]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f200:	d102      	bne.n	800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800f202:	4b5b      	ldr	r3, [pc, #364]	; (800f370 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800f204:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f206:	e0aa      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f208:	2300      	movs	r3, #0
 800f20a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f20c:	e0a7      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f20e:	4b56      	ldr	r3, [pc, #344]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f216:	2b00      	cmp	r3, #0
 800f218:	d005      	beq.n	800f226 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800f21a:	4b53      	ldr	r3, [pc, #332]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	0e1b      	lsrs	r3, r3, #24
 800f220:	f003 030f 	and.w	r3, r3, #15
 800f224:	e006      	b.n	800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800f226:	4b50      	ldr	r3, [pc, #320]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f22c:	041b      	lsls	r3, r3, #16
 800f22e:	0e1b      	lsrs	r3, r3, #24
 800f230:	f003 030f 	and.w	r3, r3, #15
 800f234:	4a4d      	ldr	r2, [pc, #308]	; (800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800f236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f23a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f23c:	e08f      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f23e:	2300      	movs	r3, #0
 800f240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f242:	e08c      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800f244:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f248:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800f24c:	430b      	orrs	r3, r1
 800f24e:	d14c      	bne.n	800f2ea <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800f250:	4b45      	ldr	r3, [pc, #276]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f252:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f256:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f25a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f262:	d013      	beq.n	800f28c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f26a:	d83b      	bhi.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f272:	d013      	beq.n	800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800f274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f27a:	d833      	bhi.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800f27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d014      	beq.n	800f2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f288:	d014      	beq.n	800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800f28a:	e02b      	b.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f28c:	f107 0318 	add.w	r3, r7, #24
 800f290:	4618      	mov	r0, r3
 800f292:	f7fe fc7b 	bl	800db8c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f29a:	e060      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f29c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fe fb0d 	bl	800d8c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2aa:	e058      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f2ac:	f7fd fb64 	bl	800c978 <HAL_RCC_GetSysClockFreq>
 800f2b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f2b2:	e054      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f2b4:	4b2c      	ldr	r3, [pc, #176]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d005      	beq.n	800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800f2c0:	4b29      	ldr	r3, [pc, #164]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	0e1b      	lsrs	r3, r3, #24
 800f2c6:	f003 030f 	and.w	r3, r3, #15
 800f2ca:	e006      	b.n	800f2da <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800f2cc:	4b26      	ldr	r3, [pc, #152]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f2d2:	041b      	lsls	r3, r3, #16
 800f2d4:	0e1b      	lsrs	r3, r3, #24
 800f2d6:	f003 030f 	and.w	r3, r3, #15
 800f2da:	4a24      	ldr	r2, [pc, #144]	; (800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800f2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2e2:	e03c      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2e8:	e039      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800f2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2ee:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800f2f2:	430b      	orrs	r3, r1
 800f2f4:	d131      	bne.n	800f35a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800f2f6:	4b1c      	ldr	r3, [pc, #112]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f300:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800f302:	4b19      	ldr	r3, [pc, #100]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f308:	f003 0302 	and.w	r3, r3, #2
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d106      	bne.n	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800f310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f312:	2b00      	cmp	r3, #0
 800f314:	d103      	bne.n	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800f316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f31a:	637b      	str	r3, [r7, #52]	; 0x34
 800f31c:	e01f      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800f31e:	4b12      	ldr	r3, [pc, #72]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f32c:	d112      	bne.n	800f354 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f334:	d10e      	bne.n	800f354 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f336:	4b0c      	ldr	r3, [pc, #48]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f33c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f344:	d102      	bne.n	800f34c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800f346:	23fa      	movs	r3, #250	; 0xfa
 800f348:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f34a:	e008      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800f34c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f350:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f352:	e004      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800f354:	2300      	movs	r3, #0
 800f356:	637b      	str	r3, [r7, #52]	; 0x34
 800f358:	e001      	b.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800f35a:	2300      	movs	r3, #0
 800f35c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800f35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f360:	4618      	mov	r0, r3
 800f362:	3738      	adds	r7, #56	; 0x38
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	46020c00 	.word	0x46020c00
 800f36c:	0818ab18 	.word	0x0818ab18
 800f370:	00f42400 	.word	0x00f42400

0800f374 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800f37c:	4b47      	ldr	r3, [pc, #284]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a46      	ldr	r2, [pc, #280]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f386:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f388:	f7f9 fa82 	bl	8008890 <HAL_GetTick>
 800f38c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f38e:	e008      	b.n	800f3a2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f390:	f7f9 fa7e 	bl	8008890 <HAL_GetTick>
 800f394:	4602      	mov	r2, r0
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d901      	bls.n	800f3a2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f39e:	2303      	movs	r3, #3
 800f3a0:	e077      	b.n	800f492 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f3a2:	4b3e      	ldr	r3, [pc, #248]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d1f0      	bne.n	800f390 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800f3ae:	4b3b      	ldr	r3, [pc, #236]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f3b6:	f023 0303 	bic.w	r3, r3, #3
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	6811      	ldr	r1, [r2, #0]
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	6852      	ldr	r2, [r2, #4]
 800f3c2:	3a01      	subs	r2, #1
 800f3c4:	0212      	lsls	r2, r2, #8
 800f3c6:	430a      	orrs	r2, r1
 800f3c8:	4934      	ldr	r1, [pc, #208]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 800f3ce:	4b33      	ldr	r3, [pc, #204]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f3d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3d2:	4b33      	ldr	r3, [pc, #204]	; (800f4a0 <RCCEx_PLL2_Config+0x12c>)
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	6892      	ldr	r2, [r2, #8]
 800f3da:	3a01      	subs	r2, #1
 800f3dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	68d2      	ldr	r2, [r2, #12]
 800f3e4:	3a01      	subs	r2, #1
 800f3e6:	0252      	lsls	r2, r2, #9
 800f3e8:	b292      	uxth	r2, r2
 800f3ea:	4311      	orrs	r1, r2
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	6912      	ldr	r2, [r2, #16]
 800f3f0:	3a01      	subs	r2, #1
 800f3f2:	0412      	lsls	r2, r2, #16
 800f3f4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f3f8:	4311      	orrs	r1, r2
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	6952      	ldr	r2, [r2, #20]
 800f3fe:	3a01      	subs	r2, #1
 800f400:	0612      	lsls	r2, r2, #24
 800f402:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f406:	430a      	orrs	r2, r1
 800f408:	4924      	ldr	r1, [pc, #144]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f40a:	4313      	orrs	r3, r2
 800f40c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800f40e:	4b23      	ldr	r3, [pc, #140]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f412:	f023 020c 	bic.w	r2, r3, #12
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	4920      	ldr	r1, [pc, #128]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f41c:	4313      	orrs	r3, r2
 800f41e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800f420:	4b1e      	ldr	r3, [pc, #120]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a1b      	ldr	r3, [r3, #32]
 800f428:	491c      	ldr	r1, [pc, #112]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f42a:	4313      	orrs	r3, r2
 800f42c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800f42e:	4b1b      	ldr	r3, [pc, #108]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f432:	4a1a      	ldr	r2, [pc, #104]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f434:	f023 0310 	bic.w	r3, r3, #16
 800f438:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f43a:	4b18      	ldr	r3, [pc, #96]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f43e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f442:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	69d2      	ldr	r2, [r2, #28]
 800f44a:	00d2      	lsls	r2, r2, #3
 800f44c:	4913      	ldr	r1, [pc, #76]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f44e:	4313      	orrs	r3, r2
 800f450:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800f452:	4b12      	ldr	r3, [pc, #72]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f456:	4a11      	ldr	r2, [pc, #68]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f458:	f043 0310 	orr.w	r3, r3, #16
 800f45c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800f45e:	4b0f      	ldr	r3, [pc, #60]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4a0e      	ldr	r2, [pc, #56]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f468:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f46a:	f7f9 fa11 	bl	8008890 <HAL_GetTick>
 800f46e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f470:	e008      	b.n	800f484 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f472:	f7f9 fa0d 	bl	8008890 <HAL_GetTick>
 800f476:	4602      	mov	r2, r0
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d901      	bls.n	800f484 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800f480:	2303      	movs	r3, #3
 800f482:	e006      	b.n	800f492 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f484:	4b05      	ldr	r3, [pc, #20]	; (800f49c <RCCEx_PLL2_Config+0x128>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d0f0      	beq.n	800f472 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800f490:	2300      	movs	r3, #0

}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	46020c00 	.word	0x46020c00
 800f4a0:	80800000 	.word	0x80800000

0800f4a4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800f4ac:	4b47      	ldr	r3, [pc, #284]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a46      	ldr	r2, [pc, #280]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f4b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f4b8:	f7f9 f9ea 	bl	8008890 <HAL_GetTick>
 800f4bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4be:	e008      	b.n	800f4d2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f4c0:	f7f9 f9e6 	bl	8008890 <HAL_GetTick>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d901      	bls.n	800f4d2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f4ce:	2303      	movs	r3, #3
 800f4d0:	e077      	b.n	800f5c2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4d2:	4b3e      	ldr	r3, [pc, #248]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1f0      	bne.n	800f4c0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800f4de:	4b3b      	ldr	r3, [pc, #236]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f4e6:	f023 0303 	bic.w	r3, r3, #3
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	6811      	ldr	r1, [r2, #0]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	6852      	ldr	r2, [r2, #4]
 800f4f2:	3a01      	subs	r2, #1
 800f4f4:	0212      	lsls	r2, r2, #8
 800f4f6:	430a      	orrs	r2, r1
 800f4f8:	4934      	ldr	r1, [pc, #208]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	630b      	str	r3, [r1, #48]	; 0x30
 800f4fe:	4b33      	ldr	r3, [pc, #204]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f502:	4b33      	ldr	r3, [pc, #204]	; (800f5d0 <RCCEx_PLL3_Config+0x12c>)
 800f504:	4013      	ands	r3, r2
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	6892      	ldr	r2, [r2, #8]
 800f50a:	3a01      	subs	r2, #1
 800f50c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	68d2      	ldr	r2, [r2, #12]
 800f514:	3a01      	subs	r2, #1
 800f516:	0252      	lsls	r2, r2, #9
 800f518:	b292      	uxth	r2, r2
 800f51a:	4311      	orrs	r1, r2
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	6912      	ldr	r2, [r2, #16]
 800f520:	3a01      	subs	r2, #1
 800f522:	0412      	lsls	r2, r2, #16
 800f524:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f528:	4311      	orrs	r1, r2
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	6952      	ldr	r2, [r2, #20]
 800f52e:	3a01      	subs	r2, #1
 800f530:	0612      	lsls	r2, r2, #24
 800f532:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f536:	430a      	orrs	r2, r1
 800f538:	4924      	ldr	r1, [pc, #144]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f53a:	4313      	orrs	r3, r2
 800f53c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800f53e:	4b23      	ldr	r3, [pc, #140]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f542:	f023 020c 	bic.w	r2, r3, #12
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	699b      	ldr	r3, [r3, #24]
 800f54a:	4920      	ldr	r1, [pc, #128]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f54c:	4313      	orrs	r3, r2
 800f54e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800f550:	4b1e      	ldr	r3, [pc, #120]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	491c      	ldr	r1, [pc, #112]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f55a:	4313      	orrs	r3, r2
 800f55c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800f55e:	4b1b      	ldr	r3, [pc, #108]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f562:	4a1a      	ldr	r2, [pc, #104]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f564:	f023 0310 	bic.w	r3, r3, #16
 800f568:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f56a:	4b18      	ldr	r3, [pc, #96]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f56e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f572:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	69d2      	ldr	r2, [r2, #28]
 800f57a:	00d2      	lsls	r2, r2, #3
 800f57c:	4913      	ldr	r1, [pc, #76]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f57e:	4313      	orrs	r3, r2
 800f580:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800f582:	4b12      	ldr	r3, [pc, #72]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f586:	4a11      	ldr	r2, [pc, #68]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f588:	f043 0310 	orr.w	r3, r3, #16
 800f58c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800f58e:	4b0f      	ldr	r3, [pc, #60]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a0e      	ldr	r2, [pc, #56]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f598:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f59a:	f7f9 f979 	bl	8008890 <HAL_GetTick>
 800f59e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5a0:	e008      	b.n	800f5b4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f5a2:	f7f9 f975 	bl	8008890 <HAL_GetTick>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	d901      	bls.n	800f5b4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	e006      	b.n	800f5c2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5b4:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <RCCEx_PLL3_Config+0x128>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d0f0      	beq.n	800f5a2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800f5c0:	2300      	movs	r3, #0
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	46020c00 	.word	0x46020c00
 800f5d0:	80800000 	.word	0x80800000

0800f5d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e0dd      	b.n	800f7a2 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4a70      	ldr	r2, [pc, #448]	; (800f7ac <HAL_SPI_Init+0x1d8>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d004      	beq.n	800f5fa <HAL_SPI_Init+0x26>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a6e      	ldr	r2, [pc, #440]	; (800f7b0 <HAL_SPI_Init+0x1dc>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	e000      	b.n	800f5fc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800f5fa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a69      	ldr	r2, [pc, #420]	; (800f7ac <HAL_SPI_Init+0x1d8>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d004      	beq.n	800f616 <HAL_SPI_Init+0x42>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a67      	ldr	r2, [pc, #412]	; (800f7b0 <HAL_SPI_Init+0x1dc>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d105      	bne.n	800f622 <HAL_SPI_Init+0x4e>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	2b0f      	cmp	r3, #15
 800f61c:	d901      	bls.n	800f622 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800f61e:	2301      	movs	r3, #1
 800f620:	e0bf      	b.n	800f7a2 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f001 f9a2 	bl	801096c <SPI_GetPacketSize>
 800f628:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a5f      	ldr	r2, [pc, #380]	; (800f7ac <HAL_SPI_Init+0x1d8>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d004      	beq.n	800f63e <HAL_SPI_Init+0x6a>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a5d      	ldr	r2, [pc, #372]	; (800f7b0 <HAL_SPI_Init+0x1dc>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d102      	bne.n	800f644 <HAL_SPI_Init+0x70>
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2b08      	cmp	r3, #8
 800f642:	d816      	bhi.n	800f672 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f648:	4a5a      	ldr	r2, [pc, #360]	; (800f7b4 <HAL_SPI_Init+0x1e0>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d00e      	beq.n	800f66c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4a59      	ldr	r2, [pc, #356]	; (800f7b8 <HAL_SPI_Init+0x1e4>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d009      	beq.n	800f66c <HAL_SPI_Init+0x98>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a57      	ldr	r2, [pc, #348]	; (800f7bc <HAL_SPI_Init+0x1e8>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d004      	beq.n	800f66c <HAL_SPI_Init+0x98>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a56      	ldr	r2, [pc, #344]	; (800f7c0 <HAL_SPI_Init+0x1ec>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d104      	bne.n	800f676 <HAL_SPI_Init+0xa2>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b10      	cmp	r3, #16
 800f670:	d901      	bls.n	800f676 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800f672:	2301      	movs	r3, #1
 800f674:	e095      	b.n	800f7a2 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7f1 fdf2 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2202      	movs	r2, #2
 800f694:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f022 0201 	bic.w	r2, r2, #1
 800f6a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f6b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	699b      	ldr	r3, [r3, #24]
 800f6b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f6bc:	d119      	bne.n	800f6f2 <HAL_SPI_Init+0x11e>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6c6:	d103      	bne.n	800f6d0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d008      	beq.n	800f6e2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10c      	bne.n	800f6f2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f6dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6e0:	d107      	bne.n	800f6f2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f6f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	69da      	ldr	r2, [r3, #28]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6fa:	431a      	orrs	r2, r3
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	431a      	orrs	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f704:	ea42 0103 	orr.w	r1, r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	68da      	ldr	r2, [r3, #12]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	430a      	orrs	r2, r1
 800f712:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71c:	431a      	orrs	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f722:	431a      	orrs	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	431a      	orrs	r2, r3
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	431a      	orrs	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	695b      	ldr	r3, [r3, #20]
 800f734:	431a      	orrs	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	431a      	orrs	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	431a      	orrs	r2, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f746:	431a      	orrs	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	431a      	orrs	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f752:	431a      	orrs	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f758:	431a      	orrs	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f75e:	ea42 0103 	orr.w	r1, r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	430a      	orrs	r2, r1
 800f76c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00a      	beq.n	800f790 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	430a      	orrs	r2, r1
 800f78e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2201      	movs	r2, #1
 800f79c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
 800f7aa:	bf00      	nop
 800f7ac:	46002000 	.word	0x46002000
 800f7b0:	56002000 	.word	0x56002000
 800f7b4:	40013000 	.word	0x40013000
 800f7b8:	50013000 	.word	0x50013000
 800f7bc:	40003800 	.word	0x40003800
 800f7c0:	50003800 	.word	0x50003800

0800f7c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08a      	sub	sp, #40	; 0x28
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	603b      	str	r3, [r7, #0]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3320      	adds	r3, #32
 800f7da:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d101      	bne.n	800f7ee <HAL_SPI_Transmit+0x2a>
 800f7ea:	2302      	movs	r3, #2
 800f7ec:	e1f7      	b.n	800fbde <HAL_SPI_Transmit+0x41a>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7f6:	f7f9 f84b 	bl	8008890 <HAL_GetTick>
 800f7fa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b01      	cmp	r3, #1
 800f806:	d007      	beq.n	800f818 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f808:	2302      	movs	r3, #2
 800f80a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2200      	movs	r2, #0
 800f810:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800f814:	7efb      	ldrb	r3, [r7, #27]
 800f816:	e1e2      	b.n	800fbde <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d002      	beq.n	800f824 <HAL_SPI_Transmit+0x60>
 800f81e:	88fb      	ldrh	r3, [r7, #6]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d107      	bne.n	800f834 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f824:	2301      	movs	r3, #1
 800f826:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800f830:	7efb      	ldrb	r3, [r7, #27]
 800f832:	e1d4      	b.n	800fbde <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2203      	movs	r2, #3
 800f838:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	88fa      	ldrh	r2, [r7, #6]
 800f84e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	88fa      	ldrh	r2, [r7, #6]
 800f856:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2200      	movs	r2, #0
 800f864:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2200      	movs	r2, #0
 800f874:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2200      	movs	r2, #0
 800f87a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f884:	d107      	bne.n	800f896 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f894:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	0c1b      	lsrs	r3, r3, #16
 800f89e:	041b      	lsls	r3, r3, #16
 800f8a0:	88f9      	ldrh	r1, [r7, #6]
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	6812      	ldr	r2, [r2, #0]
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f042 0201 	orr.w	r2, r2, #1
 800f8b8:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	69db      	ldr	r3, [r3, #28]
 800f8c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d10c      	bne.n	800f8e2 <HAL_SPI_Transmit+0x11e>
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f8d0:	d107      	bne.n	800f8e2 <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f8e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	2b0f      	cmp	r3, #15
 800f8e8:	d95b      	bls.n	800f9a2 <HAL_SPI_Transmit+0x1de>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a8f      	ldr	r2, [pc, #572]	; (800fb2c <HAL_SPI_Transmit+0x368>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d04f      	beq.n	800f994 <HAL_SPI_Transmit+0x1d0>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a8d      	ldr	r2, [pc, #564]	; (800fb30 <HAL_SPI_Transmit+0x36c>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d04a      	beq.n	800f994 <HAL_SPI_Transmit+0x1d0>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a8c      	ldr	r2, [pc, #560]	; (800fb34 <HAL_SPI_Transmit+0x370>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d045      	beq.n	800f994 <HAL_SPI_Transmit+0x1d0>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a8a      	ldr	r2, [pc, #552]	; (800fb38 <HAL_SPI_Transmit+0x374>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d147      	bne.n	800f9a2 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f912:	e03f      	b.n	800f994 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	695b      	ldr	r3, [r3, #20]
 800f91a:	f003 0302 	and.w	r3, r3, #2
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d114      	bne.n	800f94c <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	6812      	ldr	r2, [r2, #0]
 800f92c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f932:	1d1a      	adds	r2, r3, #4
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f93e:	b29b      	uxth	r3, r3
 800f940:	3b01      	subs	r3, #1
 800f942:	b29a      	uxth	r2, r3
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f94a:	e023      	b.n	800f994 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f94c:	f7f8 ffa0 	bl	8008890 <HAL_GetTick>
 800f950:	4602      	mov	r2, r0
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d803      	bhi.n	800f964 <HAL_SPI_Transmit+0x1a0>
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f962:	d102      	bne.n	800f96a <HAL_SPI_Transmit+0x1a6>
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d114      	bne.n	800f994 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f000 ff30 	bl	80107d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2200      	movs	r2, #0
 800f974:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f97e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2201      	movs	r2, #1
 800f98c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800f990:	2303      	movs	r3, #3
 800f992:	e124      	b.n	800fbde <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d1b9      	bne.n	800f914 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800f9a0:	e0f7      	b.n	800fb92 <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	2b07      	cmp	r3, #7
 800f9a8:	f240 80ec 	bls.w	800fb84 <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f9ac:	e05d      	b.n	800fa6a <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	f003 0302 	and.w	r3, r3, #2
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d132      	bne.n	800fa22 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d918      	bls.n	800f9fa <HAL_SPI_Transmit+0x236>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d014      	beq.n	800f9fa <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	6812      	ldr	r2, [r2, #0]
 800f9da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9e0:	1d1a      	adds	r2, r3, #4
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	3b02      	subs	r3, #2
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f9f8:	e037      	b.n	800fa6a <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9fe:	881a      	ldrh	r2, [r3, #0]
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa08:	1c9a      	adds	r2, r3, #2
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	3b01      	subs	r3, #1
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fa20:	e023      	b.n	800fa6a <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa22:	f7f8 ff35 	bl	8008890 <HAL_GetTick>
 800fa26:	4602      	mov	r2, r0
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	683a      	ldr	r2, [r7, #0]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d803      	bhi.n	800fa3a <HAL_SPI_Transmit+0x276>
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa38:	d102      	bne.n	800fa40 <HAL_SPI_Transmit+0x27c>
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d114      	bne.n	800fa6a <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f000 fec5 	bl	80107d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2201      	movs	r2, #1
 800fa62:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800fa66:	2303      	movs	r3, #3
 800fa68:	e0b9      	b.n	800fbde <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d19b      	bne.n	800f9ae <HAL_SPI_Transmit+0x1ea>
 800fa76:	e08c      	b.n	800fb92 <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	695b      	ldr	r3, [r3, #20]
 800fa7e:	f003 0302 	and.w	r3, r3, #2
 800fa82:	2b02      	cmp	r3, #2
 800fa84:	d15a      	bne.n	800fb3c <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d918      	bls.n	800fac4 <HAL_SPI_Transmit+0x300>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa96:	2b40      	cmp	r3, #64	; 0x40
 800fa98:	d914      	bls.n	800fac4 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	6812      	ldr	r2, [r2, #0]
 800faa4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800faaa:	1d1a      	adds	r2, r3, #4
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	3b04      	subs	r3, #4
 800faba:	b29a      	uxth	r2, r3
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fac2:	e05f      	b.n	800fb84 <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800faca:	b29b      	uxth	r3, r3
 800facc:	2b01      	cmp	r3, #1
 800face:	d917      	bls.n	800fb00 <HAL_SPI_Transmit+0x33c>
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d013      	beq.n	800fb00 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fadc:	881a      	ldrh	r2, [r3, #0]
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fae6:	1c9a      	adds	r2, r3, #2
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	3b02      	subs	r3, #2
 800faf6:	b29a      	uxth	r2, r3
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fafe:	e041      	b.n	800fb84 <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3320      	adds	r3, #32
 800fb0a:	7812      	ldrb	r2, [r2, #0]
 800fb0c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb12:	1c5a      	adds	r2, r3, #1
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fb2a:	e02b      	b.n	800fb84 <HAL_SPI_Transmit+0x3c0>
 800fb2c:	40013000 	.word	0x40013000
 800fb30:	50013000 	.word	0x50013000
 800fb34:	40003800 	.word	0x40003800
 800fb38:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb3c:	f7f8 fea8 	bl	8008890 <HAL_GetTick>
 800fb40:	4602      	mov	r2, r0
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d803      	bhi.n	800fb54 <HAL_SPI_Transmit+0x390>
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb52:	d102      	bne.n	800fb5a <HAL_SPI_Transmit+0x396>
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d114      	bne.n	800fb84 <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f000 fe38 	bl	80107d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800fb80:	2303      	movs	r3, #3
 800fb82:	e02c      	b.n	800fbde <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f47f af73 	bne.w	800fa78 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	9300      	str	r3, [sp, #0]
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	2108      	movs	r1, #8
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f000 feb7 	bl	8010910 <SPI_WaitOnFlagUntilTimeout>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d007      	beq.n	800fbb8 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbae:	f043 0220 	orr.w	r2, r3, #32
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f000 fe09 	bl	80107d0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2201      	movs	r2, #1
 800fbca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d001      	beq.n	800fbdc <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e000      	b.n	800fbde <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 800fbdc:	7efb      	ldrb	r3, [r7, #27]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3720      	adds	r7, #32
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop

0800fbe8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b08a      	sub	sp, #40	; 0x28
 800fbec:	af02      	add	r7, sp, #8
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	603b      	str	r3, [r7, #0]
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	3330      	adds	r3, #48	; 0x30
 800fc02:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc0c:	d112      	bne.n	800fc34 <HAL_SPI_Receive+0x4c>
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d10e      	bne.n	800fc34 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2204      	movs	r2, #4
 800fc1a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800fc1e:	88fa      	ldrh	r2, [r7, #6]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	4613      	mov	r3, r2
 800fc26:	68ba      	ldr	r2, [r7, #8]
 800fc28:	68b9      	ldr	r1, [r7, #8]
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f000 f99a 	bl	800ff64 <HAL_SPI_TransmitReceive>
 800fc30:	4603      	mov	r3, r0
 800fc32:	e18a      	b.n	800ff4a <HAL_SPI_Receive+0x362>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d101      	bne.n	800fc42 <HAL_SPI_Receive+0x5a>
 800fc3e:	2302      	movs	r3, #2
 800fc40:	e183      	b.n	800ff4a <HAL_SPI_Receive+0x362>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc4a:	f7f8 fe21 	bl	8008890 <HAL_GetTick>
 800fc4e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d007      	beq.n	800fc6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800fc5c:	2302      	movs	r3, #2
 800fc5e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800fc68:	7ffb      	ldrb	r3, [r7, #31]
 800fc6a:	e16e      	b.n	800ff4a <HAL_SPI_Receive+0x362>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d002      	beq.n	800fc78 <HAL_SPI_Receive+0x90>
 800fc72:	88fb      	ldrh	r3, [r7, #6]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d107      	bne.n	800fc88 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800fc84:	7ffb      	ldrb	r3, [r7, #31]
 800fc86:	e160      	b.n	800ff4a <HAL_SPI_Receive+0x362>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2204      	movs	r2, #4
 800fc8c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	68ba      	ldr	r2, [r7, #8]
 800fc9c:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	88fa      	ldrh	r2, [r7, #6]
 800fca2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	88fa      	ldrh	r2, [r7, #6]
 800fcaa:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	689b      	ldr	r3, [r3, #8]
 800fcd4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fcd8:	d107      	bne.n	800fcea <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	0c1b      	lsrs	r3, r3, #16
 800fcf2:	041b      	lsls	r3, r3, #16
 800fcf4:	88f9      	ldrh	r1, [r7, #6]
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	6812      	ldr	r2, [r2, #0]
 800fcfa:	430b      	orrs	r3, r1
 800fcfc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	681a      	ldr	r2, [r3, #0]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f042 0201 	orr.w	r2, r2, #1
 800fd0c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	69db      	ldr	r3, [r3, #28]
 800fd14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d10c      	bne.n	800fd36 <HAL_SPI_Receive+0x14e>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd24:	d107      	bne.n	800fd36 <HAL_SPI_Receive+0x14e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	2b0f      	cmp	r3, #15
 800fd3c:	d95c      	bls.n	800fdf8 <HAL_SPI_Receive+0x210>
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a84      	ldr	r2, [pc, #528]	; (800ff54 <HAL_SPI_Receive+0x36c>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d050      	beq.n	800fdea <HAL_SPI_Receive+0x202>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a82      	ldr	r2, [pc, #520]	; (800ff58 <HAL_SPI_Receive+0x370>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d04b      	beq.n	800fdea <HAL_SPI_Receive+0x202>
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a81      	ldr	r2, [pc, #516]	; (800ff5c <HAL_SPI_Receive+0x374>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d046      	beq.n	800fdea <HAL_SPI_Receive+0x202>
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a7f      	ldr	r2, [pc, #508]	; (800ff60 <HAL_SPI_Receive+0x378>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d148      	bne.n	800fdf8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fd66:	e040      	b.n	800fdea <HAL_SPI_Receive+0x202>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	695a      	ldr	r2, [r3, #20]
 800fd6e:	f248 0308 	movw	r3, #32776	; 0x8008
 800fd72:	4013      	ands	r3, r2
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d014      	beq.n	800fda2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fd82:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd88:	1d1a      	adds	r2, r3, #4
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	3b01      	subs	r3, #1
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800fda0:	e023      	b.n	800fdea <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fda2:	f7f8 fd75 	bl	8008890 <HAL_GetTick>
 800fda6:	4602      	mov	r2, r0
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	683a      	ldr	r2, [r7, #0]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d803      	bhi.n	800fdba <HAL_SPI_Receive+0x1d2>
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdb8:	d102      	bne.n	800fdc0 <HAL_SPI_Receive+0x1d8>
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d114      	bne.n	800fdea <HAL_SPI_Receive+0x202>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f000 fd05 	bl	80107d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2201      	movs	r2, #1
 800fde2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800fde6:	2303      	movs	r3, #3
 800fde8:	e0af      	b.n	800ff4a <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1b8      	bne.n	800fd68 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800fdf6:	e095      	b.n	800ff24 <HAL_SPI_Receive+0x33c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	2b07      	cmp	r3, #7
 800fdfe:	f240 808b 	bls.w	800ff18 <HAL_SPI_Receive+0x330>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fe02:	e03f      	b.n	800fe84 <HAL_SPI_Receive+0x29c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	695b      	ldr	r3, [r3, #20]
 800fe0a:	f003 0301 	and.w	r3, r3, #1
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d114      	bne.n	800fe3c <HAL_SPI_Receive+0x254>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe16:	69ba      	ldr	r2, [r7, #24]
 800fe18:	8812      	ldrh	r2, [r2, #0]
 800fe1a:	b292      	uxth	r2, r2
 800fe1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe22:	1c9a      	adds	r2, r3, #2
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	3b01      	subs	r3, #1
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800fe3a:	e023      	b.n	800fe84 <HAL_SPI_Receive+0x29c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe3c:	f7f8 fd28 	bl	8008890 <HAL_GetTick>
 800fe40:	4602      	mov	r2, r0
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	683a      	ldr	r2, [r7, #0]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d803      	bhi.n	800fe54 <HAL_SPI_Receive+0x26c>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe52:	d102      	bne.n	800fe5a <HAL_SPI_Receive+0x272>
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d114      	bne.n	800fe84 <HAL_SPI_Receive+0x29c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	f000 fcb8 	bl	80107d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800fe80:	2303      	movs	r3, #3
 800fe82:	e062      	b.n	800ff4a <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1b9      	bne.n	800fe04 <HAL_SPI_Receive+0x21c>
 800fe90:	e048      	b.n	800ff24 <HAL_SPI_Receive+0x33c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	695b      	ldr	r3, [r3, #20]
 800fe98:	f003 0301 	and.w	r3, r3, #1
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d117      	bne.n	800fed0 <HAL_SPI_Receive+0x2e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feac:	7812      	ldrb	r2, [r2, #0]
 800feae:	b2d2      	uxtb	r2, r2
 800feb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feb6:	1c5a      	adds	r2, r3, #1
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	3b01      	subs	r3, #1
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800fece:	e023      	b.n	800ff18 <HAL_SPI_Receive+0x330>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fed0:	f7f8 fcde 	bl	8008890 <HAL_GetTick>
 800fed4:	4602      	mov	r2, r0
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	683a      	ldr	r2, [r7, #0]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d803      	bhi.n	800fee8 <HAL_SPI_Receive+0x300>
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fee6:	d102      	bne.n	800feee <HAL_SPI_Receive+0x306>
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d114      	bne.n	800ff18 <HAL_SPI_Receive+0x330>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f000 fc6e 	bl	80107d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2201      	movs	r2, #1
 800ff10:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800ff14:	2303      	movs	r3, #3
 800ff16:	e018      	b.n	800ff4a <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1b6      	bne.n	800fe92 <HAL_SPI_Receive+0x2aa>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f000 fc53 	bl	80107d0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2201      	movs	r2, #1
 800ff36:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d001      	beq.n	800ff48 <HAL_SPI_Receive+0x360>
  {
    return HAL_ERROR;
 800ff44:	2301      	movs	r3, #1
 800ff46:	e000      	b.n	800ff4a <HAL_SPI_Receive+0x362>
  }
  return errorcode;
 800ff48:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3720      	adds	r7, #32
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	40013000 	.word	0x40013000
 800ff58:	50013000 	.word	0x50013000
 800ff5c:	40003800 	.word	0x40003800
 800ff60:	50003800 	.word	0x50003800

0800ff64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08e      	sub	sp, #56	; 0x38
 800ff68:	af02      	add	r7, sp, #8
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]
 800ff70:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff72:	2300      	movs	r3, #0
 800ff74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3320      	adds	r3, #32
 800ff7e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	3330      	adds	r3, #48	; 0x30
 800ff86:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d101      	bne.n	800ff96 <HAL_SPI_TransmitReceive+0x32>
 800ff92:	2302      	movs	r3, #2
 800ff94:	e22b      	b.n	80103ee <HAL_SPI_TransmitReceive+0x48a>
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2201      	movs	r2, #1
 800ff9a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff9e:	f7f8 fc77 	bl	8008890 <HAL_GetTick>
 800ffa2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ffa4:	887b      	ldrh	r3, [r7, #2]
 800ffa6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ffa8:	887b      	ldrh	r3, [r7, #2]
 800ffaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ffb2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ffba:	7efb      	ldrb	r3, [r7, #27]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d014      	beq.n	800ffea <HAL_SPI_TransmitReceive+0x86>
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ffc6:	d106      	bne.n	800ffd6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d102      	bne.n	800ffd6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ffd0:	7efb      	ldrb	r3, [r7, #27]
 800ffd2:	2b04      	cmp	r3, #4
 800ffd4:	d009      	beq.n	800ffea <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800ffe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ffe8:	e201      	b.n	80103ee <HAL_SPI_TransmitReceive+0x48a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d005      	beq.n	800fffc <HAL_SPI_TransmitReceive+0x98>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d002      	beq.n	800fffc <HAL_SPI_TransmitReceive+0x98>
 800fff6:	887b      	ldrh	r3, [r7, #2]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d109      	bne.n	8010010 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800fffc:	2301      	movs	r3, #1
 800fffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 801000a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801000e:	e1ee      	b.n	80103ee <HAL_SPI_TransmitReceive+0x48a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010016:	b2db      	uxtb	r3, r3
 8010018:	2b04      	cmp	r3, #4
 801001a:	d003      	beq.n	8010024 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2205      	movs	r2, #5
 8010020:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2200      	movs	r2, #0
 8010028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	887a      	ldrh	r2, [r7, #2]
 8010036:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	887a      	ldrh	r2, [r7, #2]
 801003e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	68ba      	ldr	r2, [r7, #8]
 8010046:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	887a      	ldrh	r2, [r7, #2]
 801004c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	887a      	ldrh	r2, [r7, #2]
 8010054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2200      	movs	r2, #0
 801005c:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	0c1b      	lsrs	r3, r3, #16
 801006c:	041b      	lsls	r3, r3, #16
 801006e:	8879      	ldrh	r1, [r7, #2]
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	6812      	ldr	r2, [r2, #0]
 8010074:	430b      	orrs	r3, r1
 8010076:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	681a      	ldr	r2, [r3, #0]
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f042 0201 	orr.w	r2, r2, #1
 8010086:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	69db      	ldr	r3, [r3, #28]
 801008e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10c      	bne.n	80100b0 <HAL_SPI_TransmitReceive+0x14c>
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801009e:	d107      	bne.n	80100b0 <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	2b0f      	cmp	r3, #15
 80100b6:	f240 8085 	bls.w	80101c4 <HAL_SPI_TransmitReceive+0x260>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a7b      	ldr	r2, [pc, #492]	; (80102ac <HAL_SPI_TransmitReceive+0x348>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d078      	beq.n	80101b6 <HAL_SPI_TransmitReceive+0x252>
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a79      	ldr	r2, [pc, #484]	; (80102b0 <HAL_SPI_TransmitReceive+0x34c>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d073      	beq.n	80101b6 <HAL_SPI_TransmitReceive+0x252>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a78      	ldr	r2, [pc, #480]	; (80102b4 <HAL_SPI_TransmitReceive+0x350>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d06e      	beq.n	80101b6 <HAL_SPI_TransmitReceive+0x252>
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a76      	ldr	r2, [pc, #472]	; (80102b8 <HAL_SPI_TransmitReceive+0x354>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d170      	bne.n	80101c4 <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80100e2:	e068      	b.n	80101b6 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	695b      	ldr	r3, [r3, #20]
 80100ea:	f003 0302 	and.w	r3, r3, #2
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d11a      	bne.n	8010128 <HAL_SPI_TransmitReceive+0x1c4>
 80100f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d017      	beq.n	8010128 <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	6812      	ldr	r2, [r2, #0]
 8010102:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010108:	1d1a      	adds	r2, r3, #4
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010114:	b29b      	uxth	r3, r3
 8010116:	3b01      	subs	r3, #1
 8010118:	b29a      	uxth	r2, r3
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010126:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	695a      	ldr	r2, [r3, #20]
 801012e:	f248 0308 	movw	r3, #32776	; 0x8008
 8010132:	4013      	ands	r3, r2
 8010134:	2b00      	cmp	r3, #0
 8010136:	d01a      	beq.n	801016e <HAL_SPI_TransmitReceive+0x20a>
 8010138:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801013a:	2b00      	cmp	r3, #0
 801013c:	d017      	beq.n	801016e <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010146:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010148:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801014e:	1d1a      	adds	r2, r3, #4
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801015a:	b29b      	uxth	r3, r3
 801015c:	3b01      	subs	r3, #1
 801015e:	b29a      	uxth	r2, r3
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801016c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801016e:	f7f8 fb8f 	bl	8008890 <HAL_GetTick>
 8010172:	4602      	mov	r2, r0
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801017a:	429a      	cmp	r2, r3
 801017c:	d803      	bhi.n	8010186 <HAL_SPI_TransmitReceive+0x222>
 801017e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010184:	d102      	bne.n	801018c <HAL_SPI_TransmitReceive+0x228>
 8010186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010188:	2b00      	cmp	r3, #0
 801018a:	d114      	bne.n	80101b6 <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	f000 fb1f 	bl	80107d0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80101b2:	2303      	movs	r3, #3
 80101b4:	e11b      	b.n	80103ee <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80101b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d193      	bne.n	80100e4 <HAL_SPI_TransmitReceive+0x180>
 80101bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d190      	bne.n	80100e4 <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80101c2:	e0ed      	b.n	80103a0 <HAL_SPI_TransmitReceive+0x43c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	2b07      	cmp	r3, #7
 80101ca:	f240 80e3 	bls.w	8010394 <HAL_SPI_TransmitReceive+0x430>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80101ce:	e066      	b.n	801029e <HAL_SPI_TransmitReceive+0x33a>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	695b      	ldr	r3, [r3, #20]
 80101d6:	f003 0302 	and.w	r3, r3, #2
 80101da:	2b02      	cmp	r3, #2
 80101dc:	d119      	bne.n	8010212 <HAL_SPI_TransmitReceive+0x2ae>
 80101de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d016      	beq.n	8010212 <HAL_SPI_TransmitReceive+0x2ae>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101e8:	881a      	ldrh	r2, [r3, #0]
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ec:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101f2:	1c9a      	adds	r2, r3, #2
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101fe:	b29b      	uxth	r3, r3
 8010200:	3b01      	subs	r3, #1
 8010202:	b29a      	uxth	r2, r3
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010210:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	695b      	ldr	r3, [r3, #20]
 8010218:	f003 0301 	and.w	r3, r3, #1
 801021c:	2b01      	cmp	r3, #1
 801021e:	d11a      	bne.n	8010256 <HAL_SPI_TransmitReceive+0x2f2>
 8010220:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010222:	2b00      	cmp	r3, #0
 8010224:	d017      	beq.n	8010256 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801022a:	6a3a      	ldr	r2, [r7, #32]
 801022c:	8812      	ldrh	r2, [r2, #0]
 801022e:	b292      	uxth	r2, r2
 8010230:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010236:	1c9a      	adds	r2, r3, #2
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010242:	b29b      	uxth	r3, r3
 8010244:	3b01      	subs	r3, #1
 8010246:	b29a      	uxth	r2, r3
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010254:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010256:	f7f8 fb1b 	bl	8008890 <HAL_GetTick>
 801025a:	4602      	mov	r2, r0
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010262:	429a      	cmp	r2, r3
 8010264:	d803      	bhi.n	801026e <HAL_SPI_TransmitReceive+0x30a>
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801026c:	d102      	bne.n	8010274 <HAL_SPI_TransmitReceive+0x310>
 801026e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010270:	2b00      	cmp	r3, #0
 8010272:	d114      	bne.n	801029e <HAL_SPI_TransmitReceive+0x33a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010274:	68f8      	ldr	r0, [r7, #12]
 8010276:	f000 faab 	bl	80107d0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2200      	movs	r2, #0
 801027e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010288:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2201      	movs	r2, #1
 8010296:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 801029a:	2303      	movs	r3, #3
 801029c:	e0a7      	b.n	80103ee <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801029e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d195      	bne.n	80101d0 <HAL_SPI_TransmitReceive+0x26c>
 80102a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d192      	bne.n	80101d0 <HAL_SPI_TransmitReceive+0x26c>
 80102aa:	e079      	b.n	80103a0 <HAL_SPI_TransmitReceive+0x43c>
 80102ac:	40013000 	.word	0x40013000
 80102b0:	50013000 	.word	0x50013000
 80102b4:	40003800 	.word	0x40003800
 80102b8:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	695b      	ldr	r3, [r3, #20]
 80102c2:	f003 0302 	and.w	r3, r3, #2
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d11b      	bne.n	8010302 <HAL_SPI_TransmitReceive+0x39e>
 80102ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d018      	beq.n	8010302 <HAL_SPI_TransmitReceive+0x39e>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	3320      	adds	r3, #32
 80102da:	7812      	ldrb	r2, [r2, #0]
 80102dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	3b01      	subs	r3, #1
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010300:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	695b      	ldr	r3, [r3, #20]
 8010308:	f003 0301 	and.w	r3, r3, #1
 801030c:	2b01      	cmp	r3, #1
 801030e:	d11d      	bne.n	801034c <HAL_SPI_TransmitReceive+0x3e8>
 8010310:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010312:	2b00      	cmp	r3, #0
 8010314:	d01a      	beq.n	801034c <HAL_SPI_TransmitReceive+0x3e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010322:	7812      	ldrb	r2, [r2, #0]
 8010324:	b2d2      	uxtb	r2, r2
 8010326:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010338:	b29b      	uxth	r3, r3
 801033a:	3b01      	subs	r3, #1
 801033c:	b29a      	uxth	r2, r3
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801034a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801034c:	f7f8 faa0 	bl	8008890 <HAL_GetTick>
 8010350:	4602      	mov	r2, r0
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010358:	429a      	cmp	r2, r3
 801035a:	d803      	bhi.n	8010364 <HAL_SPI_TransmitReceive+0x400>
 801035c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010362:	d102      	bne.n	801036a <HAL_SPI_TransmitReceive+0x406>
 8010364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010366:	2b00      	cmp	r3, #0
 8010368:	d114      	bne.n	8010394 <HAL_SPI_TransmitReceive+0x430>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f000 fa30 	bl	80107d0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801037e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8010390:	2303      	movs	r3, #3
 8010392:	e02c      	b.n	80103ee <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010396:	2b00      	cmp	r3, #0
 8010398:	d190      	bne.n	80102bc <HAL_SPI_TransmitReceive+0x358>
 801039a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801039c:	2b00      	cmp	r3, #0
 801039e:	d18d      	bne.n	80102bc <HAL_SPI_TransmitReceive+0x358>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80103a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	2200      	movs	r2, #0
 80103a8:	2108      	movs	r1, #8
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f000 fab0 	bl	8010910 <SPI_WaitOnFlagUntilTimeout>
 80103b0:	4603      	mov	r3, r0
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d007      	beq.n	80103c6 <HAL_SPI_TransmitReceive+0x462>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103bc:	f043 0220 	orr.w	r2, r3, #32
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80103c6:	68f8      	ldr	r0, [r7, #12]
 80103c8:	f000 fa02 	bl	80107d0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2201      	movs	r2, #1
 80103d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d001      	beq.n	80103ea <HAL_SPI_TransmitReceive+0x486>
  {
    return HAL_ERROR;
 80103e6:	2301      	movs	r3, #1
 80103e8:	e001      	b.n	80103ee <HAL_SPI_TransmitReceive+0x48a>
  }
  return errorcode;
 80103ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3730      	adds	r7, #48	; 0x30
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop

080103f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b08a      	sub	sp, #40	; 0x28
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	695b      	ldr	r3, [r3, #20]
 801040e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010410:	6a3a      	ldr	r2, [r7, #32]
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	4013      	ands	r3, r2
 8010416:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	689b      	ldr	r3, [r3, #8]
 801041e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010420:	2300      	movs	r3, #0
 8010422:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801042a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	3330      	adds	r3, #48	; 0x30
 8010432:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801043a:	2b00      	cmp	r3, #0
 801043c:	d113      	bne.n	8010466 <HAL_SPI_IRQHandler+0x6e>
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	f003 0320 	and.w	r3, r3, #32
 8010444:	2b00      	cmp	r3, #0
 8010446:	d10e      	bne.n	8010466 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801044e:	2b00      	cmp	r3, #0
 8010450:	d009      	beq.n	8010466 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	4798      	blx	r3
    hspi->RxISR(hspi);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	4798      	blx	r3
    handled = 1UL;
 8010462:	2301      	movs	r3, #1
 8010464:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801046c:	2b00      	cmp	r3, #0
 801046e:	d10f      	bne.n	8010490 <HAL_SPI_IRQHandler+0x98>
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	f003 0301 	and.w	r3, r3, #1
 8010476:	2b00      	cmp	r3, #0
 8010478:	d00a      	beq.n	8010490 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010480:	2b00      	cmp	r3, #0
 8010482:	d105      	bne.n	8010490 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	4798      	blx	r3
    handled = 1UL;
 801048c:	2301      	movs	r3, #1
 801048e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	f003 0320 	and.w	r3, r3, #32
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10f      	bne.n	80104ba <HAL_SPI_IRQHandler+0xc2>
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	f003 0302 	and.w	r3, r3, #2
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00a      	beq.n	80104ba <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d105      	bne.n	80104ba <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	4798      	blx	r3
    handled = 1UL;
 80104b6:	2301      	movs	r3, #1
 80104b8:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f040 8162 	bne.w	8010786 <HAL_SPI_IRQHandler+0x38e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	f003 0308 	and.w	r3, r3, #8
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f000 808b 	beq.w	80105e4 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	699a      	ldr	r2, [r3, #24]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f042 0208 	orr.w	r2, r2, #8
 80104dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	699a      	ldr	r2, [r3, #24]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f042 0210 	orr.w	r2, r2, #16
 80104ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	699a      	ldr	r2, [r3, #24]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80104fc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	691a      	ldr	r2, [r3, #16]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f022 0208 	bic.w	r2, r2, #8
 801050c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010518:	2b00      	cmp	r3, #0
 801051a:	d13d      	bne.n	8010598 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801051c:	e036      	b.n	801058c <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	68db      	ldr	r3, [r3, #12]
 8010522:	2b0f      	cmp	r3, #15
 8010524:	d90b      	bls.n	801053e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801052e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010530:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010536:	1d1a      	adds	r2, r3, #4
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	66da      	str	r2, [r3, #108]	; 0x6c
 801053c:	e01d      	b.n	801057a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	2b07      	cmp	r3, #7
 8010544:	d90b      	bls.n	801055e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	8812      	ldrh	r2, [r2, #0]
 801054e:	b292      	uxth	r2, r2
 8010550:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010556:	1c9a      	adds	r2, r3, #2
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	66da      	str	r2, [r3, #108]	; 0x6c
 801055c:	e00d      	b.n	801057a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801056a:	7812      	ldrb	r2, [r2, #0]
 801056c:	b2d2      	uxtb	r2, r2
 801056e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010580:	b29b      	uxth	r3, r3
 8010582:	3b01      	subs	r3, #1
 8010584:	b29a      	uxth	r2, r3
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8010592:	b29b      	uxth	r3, r3
 8010594:	2b00      	cmp	r3, #0
 8010596:	d1c2      	bne.n	801051e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f000 f919 	bl	80107d0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2201      	movs	r2, #1
 80105a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d003      	beq.n	80105b8 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f7f2 fe7b 	bl	80032ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80105b6:	e0eb      	b.n	8010790 <HAL_SPI_IRQHandler+0x398>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80105b8:	7cfb      	ldrb	r3, [r7, #19]
 80105ba:	2b05      	cmp	r3, #5
 80105bc:	d103      	bne.n	80105c6 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7f2 fdfa 	bl	80031b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80105c4:	e0e1      	b.n	801078a <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80105c6:	7cfb      	ldrb	r3, [r7, #19]
 80105c8:	2b04      	cmp	r3, #4
 80105ca:	d103      	bne.n	80105d4 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7f2 fdcf 	bl	8003170 <HAL_SPI_RxCpltCallback>
    return;
 80105d2:	e0da      	b.n	801078a <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80105d4:	7cfb      	ldrb	r3, [r7, #19]
 80105d6:	2b03      	cmp	r3, #3
 80105d8:	f040 80d7 	bne.w	801078a <HAL_SPI_IRQHandler+0x392>
      HAL_SPI_TxCpltCallback(hspi);
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7f2 fdd9 	bl	8003194 <HAL_SPI_TxCpltCallback>
    return;
 80105e2:	e0d2      	b.n	801078a <HAL_SPI_IRQHandler+0x392>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00d      	beq.n	801060a <HAL_SPI_IRQHandler+0x212>
 80105ee:	6a3b      	ldr	r3, [r7, #32]
 80105f0:	f003 0308 	and.w	r3, r3, #8
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d008      	beq.n	801060a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	699a      	ldr	r2, [r3, #24]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010606:	619a      	str	r2, [r3, #24]

    return;
 8010608:	e0c2      	b.n	8010790 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8010610:	2b00      	cmp	r3, #0
 8010612:	f000 80bd 	beq.w	8010790 <HAL_SPI_IRQHandler+0x398>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00f      	beq.n	8010640 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010626:	f043 0204 	orr.w	r2, r3, #4
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	699a      	ldr	r2, [r3, #24]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801063e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00f      	beq.n	801066a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010650:	f043 0201 	orr.w	r2, r3, #1
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	699a      	ldr	r2, [r3, #24]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010668:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010670:	2b00      	cmp	r3, #0
 8010672:	d00f      	beq.n	8010694 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801067a:	f043 0208 	orr.w	r2, r3, #8
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	699a      	ldr	r2, [r3, #24]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010692:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	f003 0320 	and.w	r3, r3, #32
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00f      	beq.n	80106be <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	699a      	ldr	r2, [r3, #24]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f042 0220 	orr.w	r2, r2, #32
 80106bc:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d062      	beq.n	801078e <HAL_SPI_IRQHandler+0x396>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f022 0201 	bic.w	r2, r2, #1
 80106d6:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	691b      	ldr	r3, [r3, #16]
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	6812      	ldr	r2, [r2, #0]
 80106e2:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 80106e6:	f023 0303 	bic.w	r3, r3, #3
 80106ea:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80106f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80106f6:	d13e      	bne.n	8010776 <HAL_SPI_IRQHandler+0x37e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	689a      	ldr	r2, [r3, #8]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010706:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801070e:	2b00      	cmp	r3, #0
 8010710:	d015      	beq.n	801073e <HAL_SPI_IRQHandler+0x346>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010718:	4a1f      	ldr	r2, [pc, #124]	; (8010798 <HAL_SPI_IRQHandler+0x3a0>)
 801071a:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010722:	4618      	mov	r0, r3
 8010724:	f7f8 fbfa 	bl	8008f1c <HAL_DMA_Abort_IT>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d007      	beq.n	801073e <HAL_SPI_IRQHandler+0x346>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010744:	2b00      	cmp	r3, #0
 8010746:	d022      	beq.n	801078e <HAL_SPI_IRQHandler+0x396>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801074e:	4a12      	ldr	r2, [pc, #72]	; (8010798 <HAL_SPI_IRQHandler+0x3a0>)
 8010750:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010758:	4618      	mov	r0, r3
 801075a:	f7f8 fbdf 	bl	8008f1c <HAL_DMA_Abort_IT>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	d014      	beq.n	801078e <HAL_SPI_IRQHandler+0x396>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801076a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010774:	e00b      	b.n	801078e <HAL_SPI_IRQHandler+0x396>
        hspi->State = HAL_SPI_STATE_READY;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2201      	movs	r2, #1
 801077a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7f2 fd94 	bl	80032ac <HAL_SPI_ErrorCallback>
    return;
 8010784:	e003      	b.n	801078e <HAL_SPI_IRQHandler+0x396>
    return;
 8010786:	bf00      	nop
 8010788:	e002      	b.n	8010790 <HAL_SPI_IRQHandler+0x398>
    return;
 801078a:	bf00      	nop
 801078c:	e000      	b.n	8010790 <HAL_SPI_IRQHandler+0x398>
    return;
 801078e:	bf00      	nop
  }
}
 8010790:	3728      	adds	r7, #40	; 0x28
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	0801079d 	.word	0x0801079d

0801079c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2200      	movs	r2, #0
 80107b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2201      	movs	r2, #1
 80107be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	f7f2 fd72 	bl	80032ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80107c8:	bf00      	nop
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	695b      	ldr	r3, [r3, #20]
 80107de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	699a      	ldr	r2, [r3, #24]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f042 0208 	orr.w	r2, r2, #8
 80107ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	699a      	ldr	r2, [r3, #24]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f042 0210 	orr.w	r2, r2, #16
 80107fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f022 0201 	bic.w	r2, r2, #1
 801080e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	6812      	ldr	r2, [r2, #0]
 801081a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 801081e:	f023 0303 	bic.w	r3, r3, #3
 8010822:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	689a      	ldr	r2, [r3, #8]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010832:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801083a:	b2db      	uxtb	r3, r3
 801083c:	2b04      	cmp	r3, #4
 801083e:	d014      	beq.n	801086a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f003 0320 	and.w	r3, r3, #32
 8010846:	2b00      	cmp	r3, #0
 8010848:	d00f      	beq.n	801086a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010850:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	699a      	ldr	r2, [r3, #24]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f042 0220 	orr.w	r2, r2, #32
 8010868:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010870:	b2db      	uxtb	r3, r3
 8010872:	2b03      	cmp	r3, #3
 8010874:	d014      	beq.n	80108a0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00f      	beq.n	80108a0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010886:	f043 0204 	orr.w	r2, r3, #4
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	699a      	ldr	r2, [r3, #24]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801089e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00f      	beq.n	80108ca <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108b0:	f043 0201 	orr.w	r2, r3, #1
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	699a      	ldr	r2, [r3, #24]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80108c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00f      	beq.n	80108f4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108da:	f043 0208 	orr.w	r2, r3, #8
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	699a      	ldr	r2, [r3, #24]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8010904:	bf00      	nop
 8010906:	3714      	adds	r7, #20
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	603b      	str	r3, [r7, #0]
 801091c:	4613      	mov	r3, r2
 801091e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010920:	e010      	b.n	8010944 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010922:	f7f7 ffb5 	bl	8008890 <HAL_GetTick>
 8010926:	4602      	mov	r2, r0
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	69ba      	ldr	r2, [r7, #24]
 801092e:	429a      	cmp	r2, r3
 8010930:	d803      	bhi.n	801093a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010938:	d102      	bne.n	8010940 <SPI_WaitOnFlagUntilTimeout+0x30>
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d101      	bne.n	8010944 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010940:	2303      	movs	r3, #3
 8010942:	e00f      	b.n	8010964 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	695a      	ldr	r2, [r3, #20]
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	4013      	ands	r3, r2
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	429a      	cmp	r2, r3
 8010952:	bf0c      	ite	eq
 8010954:	2301      	moveq	r3, #1
 8010956:	2300      	movne	r3, #0
 8010958:	b2db      	uxtb	r3, r3
 801095a:	461a      	mov	r2, r3
 801095c:	79fb      	ldrb	r3, [r7, #7]
 801095e:	429a      	cmp	r2, r3
 8010960:	d0df      	beq.n	8010922 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010978:	095b      	lsrs	r3, r3, #5
 801097a:	3301      	adds	r3, #1
 801097c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	3301      	adds	r3, #1
 8010984:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	3307      	adds	r3, #7
 801098a:	08db      	lsrs	r3, r3, #3
 801098c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	fb02 f303 	mul.w	r3, r2, r3
}
 8010996:	4618      	mov	r0, r3
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b082      	sub	sp, #8
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d101      	bne.n	80109b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109b0:	2301      	movs	r3, #1
 80109b2:	e042      	b.n	8010a3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d106      	bne.n	80109cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2200      	movs	r2, #0
 80109c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7f0 fd64 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2224      	movs	r2, #36	; 0x24
 80109d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f022 0201 	bic.w	r2, r2, #1
 80109e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 fa4b 	bl	8010e80 <UART_SetConfig>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d101      	bne.n	80109f4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80109f0:	2301      	movs	r3, #1
 80109f2:	e022      	b.n	8010a3a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d002      	beq.n	8010a02 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f000 fbe1 	bl	80111c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	685a      	ldr	r2, [r3, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	689a      	ldr	r2, [r3, #8]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f042 0201 	orr.w	r2, r2, #1
 8010a30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 fc68 	bl	8011308 <UART_CheckIdleState>
 8010a38:	4603      	mov	r3, r0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b08a      	sub	sp, #40	; 0x28
 8010a46:	af02      	add	r7, sp, #8
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	60b9      	str	r1, [r7, #8]
 8010a4c:	603b      	str	r3, [r7, #0]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a58:	2b20      	cmp	r3, #32
 8010a5a:	f040 8092 	bne.w	8010b82 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d002      	beq.n	8010a6a <HAL_UART_Transmit+0x28>
 8010a64:	88fb      	ldrh	r3, [r7, #6]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d101      	bne.n	8010a6e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e08a      	b.n	8010b84 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d101      	bne.n	8010a7c <HAL_UART_Transmit+0x3a>
 8010a78:	2302      	movs	r3, #2
 8010a7a:	e083      	b.n	8010b84 <HAL_UART_Transmit+0x142>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	689b      	ldr	r3, [r3, #8]
 8010a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a8e:	2b80      	cmp	r3, #128	; 0x80
 8010a90:	d107      	bne.n	8010aa2 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689a      	ldr	r2, [r3, #8]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010aa0:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2221      	movs	r2, #33	; 0x21
 8010aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010ab2:	f7f7 feed 	bl	8008890 <HAL_GetTick>
 8010ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	88fa      	ldrh	r2, [r7, #6]
 8010abc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	88fa      	ldrh	r2, [r7, #6]
 8010ac4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ad0:	d108      	bne.n	8010ae4 <HAL_UART_Transmit+0xa2>
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	691b      	ldr	r3, [r3, #16]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d104      	bne.n	8010ae4 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	61bb      	str	r3, [r7, #24]
 8010ae2:	e003      	b.n	8010aec <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8010af4:	e02c      	b.n	8010b50 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	9300      	str	r3, [sp, #0]
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	2200      	movs	r2, #0
 8010afe:	2180      	movs	r1, #128	; 0x80
 8010b00:	68f8      	ldr	r0, [r7, #12]
 8010b02:	f000 fc4c 	bl	801139e <UART_WaitOnFlagUntilTimeout>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d001      	beq.n	8010b10 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8010b0c:	2303      	movs	r3, #3
 8010b0e:	e039      	b.n	8010b84 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10b      	bne.n	8010b2e <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	881b      	ldrh	r3, [r3, #0]
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	3302      	adds	r3, #2
 8010b2a:	61bb      	str	r3, [r7, #24]
 8010b2c:	e007      	b.n	8010b3e <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	781a      	ldrb	r2, [r3, #0]
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	3b01      	subs	r3, #1
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1cc      	bne.n	8010af6 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	2200      	movs	r2, #0
 8010b64:	2140      	movs	r1, #64	; 0x40
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f000 fc19 	bl	801139e <UART_WaitOnFlagUntilTimeout>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d001      	beq.n	8010b76 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8010b72:	2303      	movs	r3, #3
 8010b74:	e006      	b.n	8010b84 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2220      	movs	r2, #32
 8010b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	e000      	b.n	8010b84 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8010b82:	2302      	movs	r3, #2
  }
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3720      	adds	r7, #32
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b08a      	sub	sp, #40	; 0x28
 8010b90:	af02      	add	r7, sp, #8
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	603b      	str	r3, [r7, #0]
 8010b98:	4613      	mov	r3, r2
 8010b9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ba2:	2b20      	cmp	r3, #32
 8010ba4:	f040 80cf 	bne.w	8010d46 <HAL_UART_Receive+0x1ba>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d002      	beq.n	8010bb4 <HAL_UART_Receive+0x28>
 8010bae:	88fb      	ldrh	r3, [r7, #6]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d101      	bne.n	8010bb8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e0c7      	b.n	8010d48 <HAL_UART_Receive+0x1bc>
    }

    __HAL_LOCK(huart);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d101      	bne.n	8010bc6 <HAL_UART_Receive+0x3a>
 8010bc2:	2302      	movs	r3, #2
 8010bc4:	e0c0      	b.n	8010d48 <HAL_UART_Receive+0x1bc>
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	689b      	ldr	r3, [r3, #8]
 8010bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bd8:	2b40      	cmp	r3, #64	; 0x40
 8010bda:	d107      	bne.n	8010bec <HAL_UART_Receive+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	689a      	ldr	r2, [r3, #8]
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bea:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2222      	movs	r2, #34	; 0x22
 8010bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010c02:	f7f7 fe45 	bl	8008890 <HAL_GetTick>
 8010c06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	88fa      	ldrh	r2, [r7, #6]
 8010c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	88fa      	ldrh	r2, [r7, #6]
 8010c14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	689b      	ldr	r3, [r3, #8]
 8010c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c20:	d10e      	bne.n	8010c40 <HAL_UART_Receive+0xb4>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	691b      	ldr	r3, [r3, #16]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d105      	bne.n	8010c36 <HAL_UART_Receive+0xaa>
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010c30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c34:	e02d      	b.n	8010c92 <HAL_UART_Receive+0x106>
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	22ff      	movs	r2, #255	; 0xff
 8010c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c3e:	e028      	b.n	8010c92 <HAL_UART_Receive+0x106>
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d10d      	bne.n	8010c64 <HAL_UART_Receive+0xd8>
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d104      	bne.n	8010c5a <HAL_UART_Receive+0xce>
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	22ff      	movs	r2, #255	; 0xff
 8010c54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c58:	e01b      	b.n	8010c92 <HAL_UART_Receive+0x106>
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	227f      	movs	r2, #127	; 0x7f
 8010c5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c62:	e016      	b.n	8010c92 <HAL_UART_Receive+0x106>
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	689b      	ldr	r3, [r3, #8]
 8010c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010c6c:	d10d      	bne.n	8010c8a <HAL_UART_Receive+0xfe>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d104      	bne.n	8010c80 <HAL_UART_Receive+0xf4>
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	227f      	movs	r2, #127	; 0x7f
 8010c7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c7e:	e008      	b.n	8010c92 <HAL_UART_Receive+0x106>
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	223f      	movs	r2, #63	; 0x3f
 8010c84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c88:	e003      	b.n	8010c92 <HAL_UART_Receive+0x106>
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c98:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ca2:	d108      	bne.n	8010cb6 <HAL_UART_Receive+0x12a>
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d104      	bne.n	8010cb6 <HAL_UART_Receive+0x12a>
    {
      pdata8bits  = NULL;
 8010cac:	2300      	movs	r3, #0
 8010cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	61bb      	str	r3, [r7, #24]
 8010cb4:	e003      	b.n	8010cbe <HAL_UART_Receive+0x132>
    }
    else
    {
      pdata8bits  = pData;
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010cc6:	e032      	b.n	8010d2e <HAL_UART_Receive+0x1a2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	9300      	str	r3, [sp, #0]
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	2120      	movs	r1, #32
 8010cd2:	68f8      	ldr	r0, [r7, #12]
 8010cd4:	f000 fb63 	bl	801139e <UART_WaitOnFlagUntilTimeout>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <HAL_UART_Receive+0x156>
      {
        return HAL_TIMEOUT;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	e032      	b.n	8010d48 <HAL_UART_Receive+0x1bc>
      }
      if (pdata8bits == NULL)
 8010ce2:	69fb      	ldr	r3, [r7, #28]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10c      	bne.n	8010d02 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	8a7b      	ldrh	r3, [r7, #18]
 8010cf2:	4013      	ands	r3, r2
 8010cf4:	b29a      	uxth	r2, r3
 8010cf6:	69bb      	ldr	r3, [r7, #24]
 8010cf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	3302      	adds	r3, #2
 8010cfe:	61bb      	str	r3, [r7, #24]
 8010d00:	e00c      	b.n	8010d1c <HAL_UART_Receive+0x190>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d08:	b2da      	uxtb	r2, r3
 8010d0a:	8a7b      	ldrh	r3, [r7, #18]
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	4013      	ands	r3, r2
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	3b01      	subs	r3, #1
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d1c6      	bne.n	8010cc8 <HAL_UART_Receive+0x13c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2220      	movs	r2, #32
 8010d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010d42:	2300      	movs	r3, #0
 8010d44:	e000      	b.n	8010d48 <HAL_UART_Receive+0x1bc>
  }
  else
  {
    return HAL_BUSY;
 8010d46:	2302      	movs	r3, #2
  }
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3720      	adds	r7, #32
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b094      	sub	sp, #80	; 0x50
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d60:	e853 3f00 	ldrex	r3, [r3]
 8010d64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	461a      	mov	r2, r3
 8010d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d76:	643b      	str	r3, [r7, #64]	; 0x40
 8010d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d7e:	e841 2300 	strex	r3, r2, [r1]
 8010d82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1e6      	bne.n	8010d58 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	3308      	adds	r3, #8
 8010d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d92:	6a3b      	ldr	r3, [r7, #32]
 8010d94:	e853 3f00 	ldrex	r3, [r3]
 8010d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010da0:	f023 0301 	bic.w	r3, r3, #1
 8010da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	3308      	adds	r3, #8
 8010dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010db0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010db6:	e841 2300 	strex	r3, r2, [r1]
 8010dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d1e3      	bne.n	8010d8a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	d118      	bne.n	8010dfc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	e853 3f00 	ldrex	r3, [r3]
 8010dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	f023 0310 	bic.w	r3, r3, #16
 8010dde:	647b      	str	r3, [r7, #68]	; 0x44
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	461a      	mov	r2, r3
 8010de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010de8:	61bb      	str	r3, [r7, #24]
 8010dea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dec:	6979      	ldr	r1, [r7, #20]
 8010dee:	69ba      	ldr	r2, [r7, #24]
 8010df0:	e841 2300 	strex	r3, r2, [r1]
 8010df4:	613b      	str	r3, [r7, #16]
   return(result);
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1e6      	bne.n	8010dca <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e06:	2b40      	cmp	r3, #64	; 0x40
 8010e08:	d11d      	bne.n	8010e46 <HAL_UART_AbortReceive+0xf6>
  {
    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d019      	beq.n	8010e46 <HAL_UART_AbortReceive+0xf6>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e16:	2200      	movs	r2, #0
 8010e18:	66da      	str	r2, [r3, #108]	; 0x6c

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7f8 f800 	bl	8008e24 <HAL_DMA_Abort>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00d      	beq.n	8010e46 <HAL_UART_AbortReceive+0xf6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7f8 fa11 	bl	8009256 <HAL_DMA_GetError>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b10      	cmp	r3, #16
 8010e38:	d105      	bne.n	8010e46 <HAL_UART_AbortReceive+0xf6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2210      	movs	r2, #16
 8010e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8010e42:	2303      	movs	r3, #3
 8010e44:	e017      	b.n	8010e76 <HAL_UART_AbortReceive+0x126>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	220f      	movs	r2, #15
 8010e54:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	699a      	ldr	r2, [r3, #24]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f042 0208 	orr.w	r2, r2, #8
 8010e64:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2220      	movs	r2, #32
 8010e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2200      	movs	r2, #0
 8010e72:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010e74:	2300      	movs	r3, #0
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3750      	adds	r7, #80	; 0x50
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
	...

08010e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e84:	b094      	sub	sp, #80	; 0x50
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	4b7e      	ldr	r3, [pc, #504]	; (8011090 <UART_SetConfig+0x210>)
 8010e96:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9a:	689a      	ldr	r2, [r3, #8]
 8010e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	431a      	orrs	r2, r3
 8010ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea4:	695b      	ldr	r3, [r3, #20]
 8010ea6:	431a      	orrs	r2, r3
 8010ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eaa:	69db      	ldr	r3, [r3, #28]
 8010eac:	4313      	orrs	r3, r2
 8010eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4977      	ldr	r1, [pc, #476]	; (8011094 <UART_SetConfig+0x214>)
 8010eb8:	4019      	ands	r1, r3
 8010eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec0:	430b      	orrs	r3, r1
 8010ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed0:	68d9      	ldr	r1, [r3, #12]
 8010ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	ea40 0301 	orr.w	r3, r0, r1
 8010eda:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ede:	699b      	ldr	r3, [r3, #24]
 8010ee0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	4b6a      	ldr	r3, [pc, #424]	; (8011090 <UART_SetConfig+0x210>)
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d009      	beq.n	8010f00 <UART_SetConfig+0x80>
 8010eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	4b69      	ldr	r3, [pc, #420]	; (8011098 <UART_SetConfig+0x218>)
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d004      	beq.n	8010f00 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef8:	6a1a      	ldr	r2, [r3, #32]
 8010efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010efc:	4313      	orrs	r3, r2
 8010efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8010f0a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8010f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f10:	681a      	ldr	r2, [r3, #0]
 8010f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f14:	430b      	orrs	r3, r1
 8010f16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f1e:	f023 000f 	bic.w	r0, r3, #15
 8010f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	ea40 0301 	orr.w	r3, r0, r1
 8010f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	4b59      	ldr	r3, [pc, #356]	; (801109c <UART_SetConfig+0x21c>)
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d102      	bne.n	8010f40 <UART_SetConfig+0xc0>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f3e:	e029      	b.n	8010f94 <UART_SetConfig+0x114>
 8010f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	4b56      	ldr	r3, [pc, #344]	; (80110a0 <UART_SetConfig+0x220>)
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d102      	bne.n	8010f50 <UART_SetConfig+0xd0>
 8010f4a:	2302      	movs	r3, #2
 8010f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f4e:	e021      	b.n	8010f94 <UART_SetConfig+0x114>
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	4b53      	ldr	r3, [pc, #332]	; (80110a4 <UART_SetConfig+0x224>)
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d102      	bne.n	8010f60 <UART_SetConfig+0xe0>
 8010f5a:	2304      	movs	r3, #4
 8010f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f5e:	e019      	b.n	8010f94 <UART_SetConfig+0x114>
 8010f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	4b50      	ldr	r3, [pc, #320]	; (80110a8 <UART_SetConfig+0x228>)
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d102      	bne.n	8010f70 <UART_SetConfig+0xf0>
 8010f6a:	2308      	movs	r3, #8
 8010f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f6e:	e011      	b.n	8010f94 <UART_SetConfig+0x114>
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	4b4d      	ldr	r3, [pc, #308]	; (80110ac <UART_SetConfig+0x22c>)
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d102      	bne.n	8010f80 <UART_SetConfig+0x100>
 8010f7a:	2310      	movs	r3, #16
 8010f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f7e:	e009      	b.n	8010f94 <UART_SetConfig+0x114>
 8010f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	4b42      	ldr	r3, [pc, #264]	; (8011090 <UART_SetConfig+0x210>)
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d102      	bne.n	8010f90 <UART_SetConfig+0x110>
 8010f8a:	2320      	movs	r3, #32
 8010f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f8e:	e001      	b.n	8010f94 <UART_SetConfig+0x114>
 8010f90:	2300      	movs	r3, #0
 8010f92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	4b3d      	ldr	r3, [pc, #244]	; (8011090 <UART_SetConfig+0x210>)
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d005      	beq.n	8010faa <UART_SetConfig+0x12a>
 8010f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	4b3d      	ldr	r3, [pc, #244]	; (8011098 <UART_SetConfig+0x218>)
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	f040 8085 	bne.w	80110b4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fac:	2200      	movs	r2, #0
 8010fae:	623b      	str	r3, [r7, #32]
 8010fb0:	627a      	str	r2, [r7, #36]	; 0x24
 8010fb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010fb6:	f7fd f8b5 	bl	800e124 <HAL_RCCEx_GetPeriphCLKFreq>
 8010fba:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	f000 80e8 	beq.w	8011194 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc8:	4a39      	ldr	r2, [pc, #228]	; (80110b0 <UART_SetConfig+0x230>)
 8010fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fce:	461a      	mov	r2, r3
 8010fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fd6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fda:	685a      	ldr	r2, [r3, #4]
 8010fdc:	4613      	mov	r3, r2
 8010fde:	005b      	lsls	r3, r3, #1
 8010fe0:	4413      	add	r3, r2
 8010fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d305      	bcc.n	8010ff4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d903      	bls.n	8010ffc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010ffa:	e048      	b.n	801108e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ffe:	2200      	movs	r2, #0
 8011000:	61bb      	str	r3, [r7, #24]
 8011002:	61fa      	str	r2, [r7, #28]
 8011004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011008:	4a29      	ldr	r2, [pc, #164]	; (80110b0 <UART_SetConfig+0x230>)
 801100a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801100e:	b29b      	uxth	r3, r3
 8011010:	2200      	movs	r2, #0
 8011012:	613b      	str	r3, [r7, #16]
 8011014:	617a      	str	r2, [r7, #20]
 8011016:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801101a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801101e:	f7ef fe41 	bl	8000ca4 <__aeabi_uldivmod>
 8011022:	4602      	mov	r2, r0
 8011024:	460b      	mov	r3, r1
 8011026:	4610      	mov	r0, r2
 8011028:	4619      	mov	r1, r3
 801102a:	f04f 0200 	mov.w	r2, #0
 801102e:	f04f 0300 	mov.w	r3, #0
 8011032:	020b      	lsls	r3, r1, #8
 8011034:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011038:	0202      	lsls	r2, r0, #8
 801103a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801103c:	6849      	ldr	r1, [r1, #4]
 801103e:	0849      	lsrs	r1, r1, #1
 8011040:	2000      	movs	r0, #0
 8011042:	460c      	mov	r4, r1
 8011044:	4605      	mov	r5, r0
 8011046:	eb12 0804 	adds.w	r8, r2, r4
 801104a:	eb43 0905 	adc.w	r9, r3, r5
 801104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	60bb      	str	r3, [r7, #8]
 8011056:	60fa      	str	r2, [r7, #12]
 8011058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801105c:	4640      	mov	r0, r8
 801105e:	4649      	mov	r1, r9
 8011060:	f7ef fe20 	bl	8000ca4 <__aeabi_uldivmod>
 8011064:	4602      	mov	r2, r0
 8011066:	460b      	mov	r3, r1
 8011068:	4613      	mov	r3, r2
 801106a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801106e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011072:	d308      	bcc.n	8011086 <UART_SetConfig+0x206>
 8011074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801107a:	d204      	bcs.n	8011086 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011082:	60da      	str	r2, [r3, #12]
 8011084:	e003      	b.n	801108e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8011086:	2301      	movs	r3, #1
 8011088:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 801108c:	e082      	b.n	8011194 <UART_SetConfig+0x314>
 801108e:	e081      	b.n	8011194 <UART_SetConfig+0x314>
 8011090:	46002400 	.word	0x46002400
 8011094:	cfff69f3 	.word	0xcfff69f3
 8011098:	56002400 	.word	0x56002400
 801109c:	40013800 	.word	0x40013800
 80110a0:	40004400 	.word	0x40004400
 80110a4:	40004800 	.word	0x40004800
 80110a8:	40004c00 	.word	0x40004c00
 80110ac:	40005000 	.word	0x40005000
 80110b0:	0818abd8 	.word	0x0818abd8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	69db      	ldr	r3, [r3, #28]
 80110b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80110bc:	d13c      	bne.n	8011138 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80110be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110c0:	2200      	movs	r2, #0
 80110c2:	603b      	str	r3, [r7, #0]
 80110c4:	607a      	str	r2, [r7, #4]
 80110c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80110ca:	f7fd f82b 	bl	800e124 <HAL_RCCEx_GetPeriphCLKFreq>
 80110ce:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80110d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d05e      	beq.n	8011194 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110da:	4a39      	ldr	r2, [pc, #228]	; (80111c0 <UART_SetConfig+0x340>)
 80110dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110e0:	461a      	mov	r2, r3
 80110e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80110e8:	005a      	lsls	r2, r3, #1
 80110ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	085b      	lsrs	r3, r3, #1
 80110f0:	441a      	add	r2, r3
 80110f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80110fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110fe:	2b0f      	cmp	r3, #15
 8011100:	d916      	bls.n	8011130 <UART_SetConfig+0x2b0>
 8011102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011108:	d212      	bcs.n	8011130 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801110a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110c:	b29b      	uxth	r3, r3
 801110e:	f023 030f 	bic.w	r3, r3, #15
 8011112:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011116:	085b      	lsrs	r3, r3, #1
 8011118:	b29b      	uxth	r3, r3
 801111a:	f003 0307 	and.w	r3, r3, #7
 801111e:	b29a      	uxth	r2, r3
 8011120:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011122:	4313      	orrs	r3, r2
 8011124:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8011126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801112c:	60da      	str	r2, [r3, #12]
 801112e:	e031      	b.n	8011194 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8011130:	2301      	movs	r3, #1
 8011132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011136:	e02d      	b.n	8011194 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801113a:	2200      	movs	r2, #0
 801113c:	469a      	mov	sl, r3
 801113e:	4693      	mov	fp, r2
 8011140:	4650      	mov	r0, sl
 8011142:	4659      	mov	r1, fp
 8011144:	f7fc ffee 	bl	800e124 <HAL_RCCEx_GetPeriphCLKFreq>
 8011148:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 801114a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801114c:	2b00      	cmp	r3, #0
 801114e:	d021      	beq.n	8011194 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011154:	4a1a      	ldr	r2, [pc, #104]	; (80111c0 <UART_SetConfig+0x340>)
 8011156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801115a:	461a      	mov	r2, r3
 801115c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801115e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	085b      	lsrs	r3, r3, #1
 8011168:	441a      	add	r2, r3
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011172:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011176:	2b0f      	cmp	r3, #15
 8011178:	d909      	bls.n	801118e <UART_SetConfig+0x30e>
 801117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011180:	d205      	bcs.n	801118e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011184:	b29a      	uxth	r2, r3
 8011186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	60da      	str	r2, [r3, #12]
 801118c:	e002      	b.n	8011194 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 801118e:	2301      	movs	r3, #1
 8011190:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	2201      	movs	r2, #1
 8011198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119e:	2201      	movs	r2, #1
 80111a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80111a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a6:	2200      	movs	r2, #0
 80111a8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80111aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ac:	2200      	movs	r2, #0
 80111ae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80111b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3750      	adds	r7, #80	; 0x50
 80111b8:	46bd      	mov	sp, r7
 80111ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111be:	bf00      	nop
 80111c0:	0818abd8 	.word	0x0818abd8

080111c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80111c4:	b480      	push	{r7}
 80111c6:	b083      	sub	sp, #12
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d0:	f003 0301 	and.w	r3, r3, #1
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d00a      	beq.n	80111ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	430a      	orrs	r2, r1
 80111ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f2:	f003 0302 	and.w	r3, r3, #2
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00a      	beq.n	8011210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	430a      	orrs	r2, r1
 801120e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011214:	f003 0304 	and.w	r3, r3, #4
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00a      	beq.n	8011232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	430a      	orrs	r2, r1
 8011230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011236:	f003 0308 	and.w	r3, r3, #8
 801123a:	2b00      	cmp	r3, #0
 801123c:	d00a      	beq.n	8011254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	430a      	orrs	r2, r1
 8011252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011258:	f003 0310 	and.w	r3, r3, #16
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00a      	beq.n	8011276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	689b      	ldr	r3, [r3, #8]
 8011266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	430a      	orrs	r2, r1
 8011274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801127a:	f003 0320 	and.w	r3, r3, #32
 801127e:	2b00      	cmp	r3, #0
 8011280:	d00a      	beq.n	8011298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	689b      	ldr	r3, [r3, #8]
 8011288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	430a      	orrs	r2, r1
 8011296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801129c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d01a      	beq.n	80112da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	430a      	orrs	r2, r1
 80112b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112c2:	d10a      	bne.n	80112da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	430a      	orrs	r2, r1
 80112d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d00a      	beq.n	80112fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	430a      	orrs	r2, r1
 80112fa:	605a      	str	r2, [r3, #4]
  }
}
 80112fc:	bf00      	nop
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr

08011308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af02      	add	r7, sp, #8
 801130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011318:	f7f7 faba 	bl	8008890 <HAL_GetTick>
 801131c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f003 0308 	and.w	r3, r3, #8
 8011328:	2b08      	cmp	r3, #8
 801132a:	d10e      	bne.n	801134a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801132c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011330:	9300      	str	r3, [sp, #0]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2200      	movs	r2, #0
 8011336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f000 f82f 	bl	801139e <UART_WaitOnFlagUntilTimeout>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011346:	2303      	movs	r3, #3
 8011348:	e025      	b.n	8011396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f003 0304 	and.w	r3, r3, #4
 8011354:	2b04      	cmp	r3, #4
 8011356:	d10e      	bne.n	8011376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2200      	movs	r2, #0
 8011362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 f819 	bl	801139e <UART_WaitOnFlagUntilTimeout>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d001      	beq.n	8011376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011372:	2303      	movs	r3, #3
 8011374:	e00f      	b.n	8011396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2220      	movs	r2, #32
 801137a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2220      	movs	r2, #32
 8011382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b09c      	sub	sp, #112	; 0x70
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	60f8      	str	r0, [r7, #12]
 80113a6:	60b9      	str	r1, [r7, #8]
 80113a8:	603b      	str	r3, [r7, #0]
 80113aa:	4613      	mov	r3, r2
 80113ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113ae:	e0a9      	b.n	8011504 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80113b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113b6:	f000 80a5 	beq.w	8011504 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80113ba:	f7f7 fa69 	bl	8008890 <HAL_GetTick>
 80113be:	4602      	mov	r2, r0
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	1ad3      	subs	r3, r2, r3
 80113c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d302      	bcc.n	80113d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80113ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d140      	bne.n	8011452 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d8:	e853 3f00 	ldrex	r3, [r3]
 80113dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80113de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80113e4:	667b      	str	r3, [r7, #100]	; 0x64
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	461a      	mov	r2, r3
 80113ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80113ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80113f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80113f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80113f6:	e841 2300 	strex	r3, r2, [r1]
 80113fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80113fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1e6      	bne.n	80113d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	3308      	adds	r3, #8
 8011408:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801140a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140c:	e853 3f00 	ldrex	r3, [r3]
 8011410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011414:	f023 0301 	bic.w	r3, r3, #1
 8011418:	663b      	str	r3, [r7, #96]	; 0x60
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	3308      	adds	r3, #8
 8011420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011422:	64ba      	str	r2, [r7, #72]	; 0x48
 8011424:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801142a:	e841 2300 	strex	r3, r2, [r1]
 801142e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011432:	2b00      	cmp	r3, #0
 8011434:	d1e5      	bne.n	8011402 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2220      	movs	r2, #32
 801143a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2220      	movs	r2, #32
 8011442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2200      	movs	r2, #0
 801144a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801144e:	2303      	movs	r3, #3
 8011450:	e069      	b.n	8011526 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f003 0304 	and.w	r3, r3, #4
 801145c:	2b00      	cmp	r3, #0
 801145e:	d051      	beq.n	8011504 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	69db      	ldr	r3, [r3, #28]
 8011466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801146a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801146e:	d149      	bne.n	8011504 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011482:	e853 3f00 	ldrex	r3, [r3]
 8011486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801148e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	461a      	mov	r2, r3
 8011496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011498:	637b      	str	r3, [r7, #52]	; 0x34
 801149a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801149c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801149e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114a0:	e841 2300 	strex	r3, r2, [r1]
 80114a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80114a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1e6      	bne.n	801147a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	3308      	adds	r3, #8
 80114b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	e853 3f00 	ldrex	r3, [r3]
 80114ba:	613b      	str	r3, [r7, #16]
   return(result);
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	f023 0301 	bic.w	r3, r3, #1
 80114c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	3308      	adds	r3, #8
 80114ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80114cc:	623a      	str	r2, [r7, #32]
 80114ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d0:	69f9      	ldr	r1, [r7, #28]
 80114d2:	6a3a      	ldr	r2, [r7, #32]
 80114d4:	e841 2300 	strex	r3, r2, [r1]
 80114d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d1e5      	bne.n	80114ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2220      	movs	r2, #32
 80114e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2220      	movs	r2, #32
 80114ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2220      	movs	r2, #32
 80114f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011500:	2303      	movs	r3, #3
 8011502:	e010      	b.n	8011526 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	69da      	ldr	r2, [r3, #28]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	4013      	ands	r3, r2
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	429a      	cmp	r2, r3
 8011512:	bf0c      	ite	eq
 8011514:	2301      	moveq	r3, #1
 8011516:	2300      	movne	r3, #0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	461a      	mov	r2, r3
 801151c:	79fb      	ldrb	r3, [r7, #7]
 801151e:	429a      	cmp	r2, r3
 8011520:	f43f af46 	beq.w	80113b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3770      	adds	r7, #112	; 0x70
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801152e:	b480      	push	{r7}
 8011530:	b085      	sub	sp, #20
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801153c:	2b01      	cmp	r3, #1
 801153e:	d101      	bne.n	8011544 <HAL_UARTEx_DisableFifoMode+0x16>
 8011540:	2302      	movs	r3, #2
 8011542:	e027      	b.n	8011594 <HAL_UARTEx_DisableFifoMode+0x66>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2201      	movs	r2, #1
 8011548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2224      	movs	r2, #36	; 0x24
 8011550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f022 0201 	bic.w	r2, r2, #1
 801156a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011572:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2200      	movs	r2, #0
 8011578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2220      	movs	r2, #32
 8011586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011592:	2300      	movs	r3, #0
}
 8011594:	4618      	mov	r0, r3
 8011596:	3714      	adds	r7, #20
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <net_ntoa_r>:
  * @param  Params
  * @retval socket status
  */
#if !defined(NET_USE_LWIP_DEFINITIONS)
char_t *net_ntoa_r(const net_ip_addr_t *addr, char_t *buf, int32_t buflen)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b08d      	sub	sp, #52	; 0x34
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
  uint8_t val;
  char_t inv[3];
  uint8_t *ap;
  uint8_t rem;
  uint8_t i;
  int32_t len = 0;
 80115ac:	2300      	movs	r3, #0
 80115ae:	62bb      	str	r3, [r7, #40]	; 0x28
  char_t *buf_ret;

  NET_S_ADDR = addr->addr;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	617b      	str	r3, [r7, #20]

  ap = (uint8_t *)&NET_S_ADDR;
 80115b6:	f107 0314 	add.w	r3, r7, #20
 80115ba:	61fb      	str	r3, [r7, #28]
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 80115bc:	2300      	movs	r3, #0
 80115be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80115c2:	e05f      	b.n	8011684 <net_ntoa_r+0xe4>
  {
    i = 0;
 80115c4:	2300      	movs	r3, #0
 80115c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    val = ap[n];
 80115ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80115ce:	69fa      	ldr	r2, [r7, #28]
 80115d0:	4413      	add	r3, r2
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    do
    {
      rem = val % 10U;
 80115d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80115dc:	4b36      	ldr	r3, [pc, #216]	; (80116b8 <net_ntoa_r+0x118>)
 80115de:	fba3 1302 	umull	r1, r3, r3, r2
 80115e2:	08d9      	lsrs	r1, r3, #3
 80115e4:	460b      	mov	r3, r1
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	440b      	add	r3, r1
 80115ea:	005b      	lsls	r3, r3, #1
 80115ec:	1ad3      	subs	r3, r2, r3
 80115ee:	76fb      	strb	r3, [r7, #27]
      val /=  10U;
 80115f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115f4:	4a30      	ldr	r2, [pc, #192]	; (80116b8 <net_ntoa_r+0x118>)
 80115f6:	fba2 2303 	umull	r2, r3, r2, r3
 80115fa:	08db      	lsrs	r3, r3, #3
 80115fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      inv[i] = (char_t)'0' + rem;
 8011600:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011604:	7efa      	ldrb	r2, [r7, #27]
 8011606:	3230      	adds	r2, #48	; 0x30
 8011608:	b2d2      	uxtb	r2, r2
 801160a:	3330      	adds	r3, #48	; 0x30
 801160c:	443b      	add	r3, r7
 801160e:	f803 2c20 	strb.w	r2, [r3, #-32]
      i++;
 8011612:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011616:	3301      	adds	r3, #1
 8011618:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    } while (val != 0U);
 801161c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011620:	2b00      	cmp	r3, #0
 8011622:	d1d9      	bne.n	80115d8 <net_ntoa_r+0x38>

    while (i != 0U)
 8011624:	e015      	b.n	8011652 <net_ntoa_r+0xb2>
    {
      i--;
 8011626:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801162a:	3b01      	subs	r3, #1
 801162c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      if (len < buflen)
 8011630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	429a      	cmp	r2, r3
 8011636:	da0c      	bge.n	8011652 <net_ntoa_r+0xb2>
      {
        buf[len] = inv[i];
 8011638:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163e:	68b9      	ldr	r1, [r7, #8]
 8011640:	440b      	add	r3, r1
 8011642:	3230      	adds	r2, #48	; 0x30
 8011644:	443a      	add	r2, r7
 8011646:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 801164a:	701a      	strb	r2, [r3, #0]
        len++;
 801164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164e:	3301      	adds	r3, #1
 8011650:	62bb      	str	r3, [r7, #40]	; 0x28
    while (i != 0U)
 8011652:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011656:	2b00      	cmp	r3, #0
 8011658:	d1e5      	bne.n	8011626 <net_ntoa_r+0x86>
      }
    }

    if ((n < 3U) && (len < buflen))
 801165a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801165e:	2b02      	cmp	r3, #2
 8011660:	d80b      	bhi.n	801167a <net_ntoa_r+0xda>
 8011662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	429a      	cmp	r2, r3
 8011668:	da07      	bge.n	801167a <net_ntoa_r+0xda>
    {
      buf[len] = (char_t) '.';
 801166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	4413      	add	r3, r2
 8011670:	222e      	movs	r2, #46	; 0x2e
 8011672:	701a      	strb	r2, [r3, #0]
      len++;
 8011674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011676:	3301      	adds	r3, #1
 8011678:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint8_t n = 0; n < (uint8_t) 4; n++)
 801167a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801167e:	3301      	adds	r3, #1
 8011680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011688:	2b03      	cmp	r3, #3
 801168a:	d99b      	bls.n	80115c4 <net_ntoa_r+0x24>
    }
  }

  if (len < buflen)
 801168c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	429a      	cmp	r2, r3
 8011692:	da07      	bge.n	80116a4 <net_ntoa_r+0x104>
  {
    buf[len] = (char_t) '\0';
 8011694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	4413      	add	r3, r2
 801169a:	2200      	movs	r2, #0
 801169c:	701a      	strb	r2, [r3, #0]
    buf_ret = buf;
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	627b      	str	r3, [r7, #36]	; 0x24
 80116a2:	e001      	b.n	80116a8 <net_ntoa_r+0x108>

  }
  else
  {
    buf_ret = NULL;
 80116a4:	2300      	movs	r3, #0
 80116a6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return buf_ret;
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3734      	adds	r7, #52	; 0x34
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
 80116b6:	bf00      	nop
 80116b8:	cccccccd 	.word	0xcccccccd

080116bc <net_ntoa>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
char_t *net_ntoa(const net_ip_addr_t *addr)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  static char_t str[16];
  return net_ntoa_r(addr, str, 16);
 80116c4:	2210      	movs	r2, #16
 80116c6:	4904      	ldr	r1, [pc, #16]	; (80116d8 <net_ntoa+0x1c>)
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7ff ff69 	bl	80115a0 <net_ntoa_r>
 80116ce:	4603      	mov	r3, r0
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	200031c4 	.word	0x200031c4

080116dc <net_set_port>:
uint16_t net_get_port(net_sockaddr_t *addr)
{
  return (NET_NTOHS(((net_sockaddr_in_t *)addr)->sin_port));
}
void net_set_port(net_sockaddr_t *addr, uint16_t port)
{
 80116dc:	b480      	push	{r7}
 80116de:	b083      	sub	sp, #12
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	460b      	mov	r3, r1
 80116e6:	807b      	strh	r3, [r7, #2]
  ((net_sockaddr_in_t *)addr)->sin_port = NET_HTONS(port);
 80116e8:	887b      	ldrh	r3, [r7, #2]
 80116ea:	ba5b      	rev16	r3, r3
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	805a      	strh	r2, [r3, #2]
}
 80116f2:	bf00      	nop
 80116f4:	370c      	adds	r7, #12
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr

080116fe <net_get_ip_addr>:

net_ip_addr_t net_get_ip_addr(net_sockaddr_t *addr)
{
 80116fe:	b480      	push	{r7}
 8011700:	b085      	sub	sp, #20
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
  net_ip_addr_t ipaddr;
  uint32_t addrv;
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	60bb      	str	r3, [r7, #8]
 801170c:	68bb      	ldr	r3, [r7, #8]
  NET_COPY(ipaddr, addrv);
 801170e:	60fb      	str	r3, [r7, #12]
  return ipaddr;
 8011710:	68fb      	ldr	r3, [r7, #12]
}
 8011712:	4618      	mov	r0, r3
 8011714:	3714      	adds	r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <net_wifi_get_class>:
#include "net_internals.h"

#define MATCH(a,b) ((a) & (b) == (b))

net_interface_class_t net_wifi_get_class(net_if_handle_t *pnetif)
{
 801171e:	b480      	push	{r7}
 8011720:	b083      	sub	sp, #12
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
  return pnetif->pdrv->if_class;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801172c:	781b      	ldrb	r3, [r3, #0]
}
 801172e:	4618      	mov	r0, r3
 8011730:	370c      	adds	r7, #12
 8011732:	46bd      	mov	sp, r7
 8011734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011738:	4770      	bx	lr
	...

0801173c <net_wifi_security_to_string>:
  * @brief  Convert wifi security enum value to string
  * @param  sec is an unsigned integer
  * @retval a constant string , for instance "Open" or "WPA2-AES"
  */
const char_t *net_wifi_security_to_string(uint32_t sec)
{
 801173c:	b480      	push	{r7}
 801173e:	b085      	sub	sp, #20
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  const char_t *s;
  if (sec == NET_WIFI_SM_OPEN)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d102      	bne.n	8011750 <net_wifi_security_to_string+0x14>
  {
    s =  "Open";
 801174a:	4b45      	ldr	r3, [pc, #276]	; (8011860 <net_wifi_security_to_string+0x124>)
 801174c:	60fb      	str	r3, [r7, #12]
 801174e:	e080      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WEP_SHARED)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f248 0201 	movw	r2, #32769	; 0x8001
 8011756:	4293      	cmp	r3, r2
 8011758:	d102      	bne.n	8011760 <net_wifi_security_to_string+0x24>
  {
    s = "WEP-shared";
 801175a:	4b42      	ldr	r3, [pc, #264]	; (8011864 <net_wifi_security_to_string+0x128>)
 801175c:	60fb      	str	r3, [r7, #12]
 801175e:	e078      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_TKIP_PSK)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a41      	ldr	r2, [pc, #260]	; (8011868 <net_wifi_security_to_string+0x12c>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d102      	bne.n	801176e <net_wifi_security_to_string+0x32>
  {
    s = "WPA-TKIP";
 8011768:	4b40      	ldr	r3, [pc, #256]	; (801186c <net_wifi_security_to_string+0x130>)
 801176a:	60fb      	str	r3, [r7, #12]
 801176c:	e071      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_MIXED_PSK)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4a3f      	ldr	r2, [pc, #252]	; (8011870 <net_wifi_security_to_string+0x134>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d102      	bne.n	801177c <net_wifi_security_to_string+0x40>
  {
    s = "WPA-Mixed";
 8011776:	4b3f      	ldr	r3, [pc, #252]	; (8011874 <net_wifi_security_to_string+0x138>)
 8011778:	60fb      	str	r3, [r7, #12]
 801177a:	e06a      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_PSK)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	4a3e      	ldr	r2, [pc, #248]	; (8011878 <net_wifi_security_to_string+0x13c>)
 8011780:	4293      	cmp	r3, r2
 8011782:	d102      	bne.n	801178a <net_wifi_security_to_string+0x4e>
  {
    s = "WPA2-AES";
 8011784:	4b3d      	ldr	r3, [pc, #244]	; (801187c <net_wifi_security_to_string+0x140>)
 8011786:	60fb      	str	r3, [r7, #12]
 8011788:	e063      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_PSK)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4a3c      	ldr	r2, [pc, #240]	; (8011880 <net_wifi_security_to_string+0x144>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d102      	bne.n	8011798 <net_wifi_security_to_string+0x5c>
  {
    s = "WPA2-TKIP";
 8011792:	4b3c      	ldr	r3, [pc, #240]	; (8011884 <net_wifi_security_to_string+0x148>)
 8011794:	60fb      	str	r3, [r7, #12]
 8011796:	e05c      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_PSK)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4a3b      	ldr	r2, [pc, #236]	; (8011888 <net_wifi_security_to_string+0x14c>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d102      	bne.n	80117a6 <net_wifi_security_to_string+0x6a>
  {
    s = "WPA2_Mixed";
 80117a0:	4b3a      	ldr	r3, [pc, #232]	; (801188c <net_wifi_security_to_string+0x150>)
 80117a2:	60fb      	str	r3, [r7, #12]
 80117a4:	e055      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_PSK)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4a39      	ldr	r2, [pc, #228]	; (8011890 <net_wifi_security_to_string+0x154>)
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d102      	bne.n	80117b4 <net_wifi_security_to_string+0x78>
  {
    s = "WPA2-FBT";
 80117ae:	4b39      	ldr	r3, [pc, #228]	; (8011894 <net_wifi_security_to_string+0x158>)
 80117b0:	60fb      	str	r3, [r7, #12]
 80117b2:	e04e      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_SAE)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	4a38      	ldr	r2, [pc, #224]	; (8011898 <net_wifi_security_to_string+0x15c>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d102      	bne.n	80117c2 <net_wifi_security_to_string+0x86>
  {
    s = "WPA3";
 80117bc:	4b37      	ldr	r3, [pc, #220]	; (801189c <net_wifi_security_to_string+0x160>)
 80117be:	60fb      	str	r3, [r7, #12]
 80117c0:	e047      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA3_WPA2_PSK)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	4a36      	ldr	r2, [pc, #216]	; (80118a0 <net_wifi_security_to_string+0x164>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d102      	bne.n	80117d0 <net_wifi_security_to_string+0x94>
  {
    s = "WPA3-WPA2";
 80117ca:	4b36      	ldr	r3, [pc, #216]	; (80118a4 <net_wifi_security_to_string+0x168>)
 80117cc:	60fb      	str	r3, [r7, #12]
 80117ce:	e040      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_WPA_TKIP_ENT)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a35      	ldr	r2, [pc, #212]	; (80118a8 <net_wifi_security_to_string+0x16c>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d102      	bne.n	80117de <net_wifi_security_to_string+0xa2>
  {
    s = "WPA-TKIP-Ent";
 80117d8:	4b34      	ldr	r3, [pc, #208]	; (80118ac <net_wifi_security_to_string+0x170>)
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	e039      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA_AES_ENT)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	4a33      	ldr	r2, [pc, #204]	; (80118b0 <net_wifi_security_to_string+0x174>)
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d102      	bne.n	80117ec <net_wifi_security_to_string+0xb0>
  {
    s = "WPA-AES-Ent";
 80117e6:	4b33      	ldr	r3, [pc, #204]	; (80118b4 <net_wifi_security_to_string+0x178>)
 80117e8:	60fb      	str	r3, [r7, #12]
 80117ea:	e032      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_ENT)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	4a32      	ldr	r2, [pc, #200]	; (80118b8 <net_wifi_security_to_string+0x17c>)
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d102      	bne.n	80117fa <net_wifi_security_to_string+0xbe>
  {
    s = "WPA2-TKIP-Ent";
 80117f4:	4b31      	ldr	r3, [pc, #196]	; (80118bc <net_wifi_security_to_string+0x180>)
 80117f6:	60fb      	str	r3, [r7, #12]
 80117f8:	e02b      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_ENT)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4a30      	ldr	r2, [pc, #192]	; (80118c0 <net_wifi_security_to_string+0x184>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d102      	bne.n	8011808 <net_wifi_security_to_string+0xcc>
  {
    s = "WPA2-AES-Ent";
 8011802:	4b30      	ldr	r3, [pc, #192]	; (80118c4 <net_wifi_security_to_string+0x188>)
 8011804:	60fb      	str	r3, [r7, #12]
 8011806:	e024      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_ENT)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4a2f      	ldr	r2, [pc, #188]	; (80118c8 <net_wifi_security_to_string+0x18c>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d102      	bne.n	8011816 <net_wifi_security_to_string+0xda>
  {
    s = "WPA2-Mixed-Ent";
 8011810:	4b2e      	ldr	r3, [pc, #184]	; (80118cc <net_wifi_security_to_string+0x190>)
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	e01d      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_ENT)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a2d      	ldr	r2, [pc, #180]	; (80118d0 <net_wifi_security_to_string+0x194>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d102      	bne.n	8011824 <net_wifi_security_to_string+0xe8>
  {
    s = "WPA-FBT-Ent";
 801181e:	4b2d      	ldr	r3, [pc, #180]	; (80118d4 <net_wifi_security_to_string+0x198>)
 8011820:	60fb      	str	r3, [r7, #12]
 8011822:	e016      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }

  else if (sec == NET_WIFI_SM_IBSS_OPEN)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801182a:	d102      	bne.n	8011832 <net_wifi_security_to_string+0xf6>
  {
    s = "IBS";
 801182c:	4b2a      	ldr	r3, [pc, #168]	; (80118d8 <net_wifi_security_to_string+0x19c>)
 801182e:	60fb      	str	r3, [r7, #12]
 8011830:	e00f      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_OPEN)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011838:	d102      	bne.n	8011840 <net_wifi_security_to_string+0x104>
  {
    s = "WPS";
 801183a:	4b28      	ldr	r3, [pc, #160]	; (80118dc <net_wifi_security_to_string+0x1a0>)
 801183c:	60fb      	str	r3, [r7, #12]
 801183e:	e008      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else if (sec == NET_WIFI_SM_WPS_SECURE)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4a27      	ldr	r2, [pc, #156]	; (80118e0 <net_wifi_security_to_string+0x1a4>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d102      	bne.n	801184e <net_wifi_security_to_string+0x112>
  {
    s = "WPS-AES";
 8011848:	4b26      	ldr	r3, [pc, #152]	; (80118e4 <net_wifi_security_to_string+0x1a8>)
 801184a:	60fb      	str	r3, [r7, #12]
 801184c:	e001      	b.n	8011852 <net_wifi_security_to_string+0x116>
  }
  else
  {
    s = "unknown";
 801184e:	4b26      	ldr	r3, [pc, #152]	; (80118e8 <net_wifi_security_to_string+0x1ac>)
 8011850:	60fb      	str	r3, [r7, #12]
  }
  return s;
 8011852:	68fb      	ldr	r3, [r7, #12]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3714      	adds	r7, #20
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr
 8011860:	08018c6c 	.word	0x08018c6c
 8011864:	08018c74 	.word	0x08018c74
 8011868:	00200002 	.word	0x00200002
 801186c:	08018c80 	.word	0x08018c80
 8011870:	00200006 	.word	0x00200006
 8011874:	08018c8c 	.word	0x08018c8c
 8011878:	00400004 	.word	0x00400004
 801187c:	08018c98 	.word	0x08018c98
 8011880:	00400002 	.word	0x00400002
 8011884:	08018ca4 	.word	0x08018ca4
 8011888:	00400006 	.word	0x00400006
 801188c:	08018cb0 	.word	0x08018cb0
 8011890:	40400004 	.word	0x40400004
 8011894:	08018cbc 	.word	0x08018cbc
 8011898:	01000004 	.word	0x01000004
 801189c:	08018cc8 	.word	0x08018cc8
 80118a0:	01400004 	.word	0x01400004
 80118a4:	08018cd0 	.word	0x08018cd0
 80118a8:	02200002 	.word	0x02200002
 80118ac:	08018cdc 	.word	0x08018cdc
 80118b0:	02200004 	.word	0x02200004
 80118b4:	08018cec 	.word	0x08018cec
 80118b8:	02400002 	.word	0x02400002
 80118bc:	08018cf8 	.word	0x08018cf8
 80118c0:	02400004 	.word	0x02400004
 80118c4:	08018d08 	.word	0x08018d08
 80118c8:	02400006 	.word	0x02400006
 80118cc:	08018d18 	.word	0x08018d18
 80118d0:	42400004 	.word	0x42400004
 80118d4:	08018d28 	.word	0x08018d28
 80118d8:	08018d34 	.word	0x08018d34
 80118dc:	08018d38 	.word	0x08018d38
 80118e0:	10000004 	.word	0x10000004
 80118e4:	08018d3c 	.word	0x08018d3c
 80118e8:	08018d44 	.word	0x08018d44

080118ec <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
  * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char *ssid)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b086      	sub	sp, #24
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	460b      	mov	r3, r1
 80118f6:	607a      	str	r2, [r7, #4]
 80118f8:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	617b      	str	r3, [r7, #20]
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f000 f956 	bl	8011bb0 <netif_check>
 8011904:	6138      	str	r0, [r7, #16]
  if (pnetif == NULL)
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d103      	bne.n	8011914 <net_wifi_scan+0x28>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
 801190c:	f06f 0303 	mvn.w	r3, #3
 8011910:	617b      	str	r3, [r7, #20]
 8011912:	e018      	b.n	8011946 <net_wifi_scan+0x5a>
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d003      	beq.n	8011928 <net_wifi_scan+0x3c>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
 8011920:	f06f 0303 	mvn.w	r3, #3
 8011924:	617b      	str	r3, [r7, #20]
 8011926:	e00e      	b.n	8011946 <net_wifi_scan+0x5a>
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801192e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	7af9      	ldrb	r1, [r7, #11]
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	6938      	ldr	r0, [r7, #16]
 8011938:	4798      	blx	r3
 801193a:	4603      	mov	r3, r0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d002      	beq.n	8011946 <net_wifi_scan+0x5a>
    {
      NET_DBG_ERROR("Error when executing net_wifi_scan function\n");
      ret = NET_ERROR_GENERIC;
 8011940:	f06f 031c 	mvn.w	r3, #28
 8011944:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8011946:	697b      	ldr	r3, [r7, #20]
}
 8011948:	4618      	mov	r0, r3
 801194a:	3718      	adds	r7, #24
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	4613      	mov	r3, r2
 801195c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f000 f926 	bl	8011bb0 <netif_check>
 8011964:	6138      	str	r0, [r7, #16]
  if (pnetif == NULL)
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d103      	bne.n	8011974 <net_wifi_get_scan_results+0x24>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
 801196c:	f06f 0303 	mvn.w	r3, #3
 8011970:	617b      	str	r3, [r7, #20]
 8011972:	e013      	b.n	801199c <net_wifi_get_scan_results+0x4c>
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d003      	beq.n	8011988 <net_wifi_get_scan_results+0x38>
  {
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
 8011980:	f06f 0303 	mvn.w	r3, #3
 8011984:	617b      	str	r3, [r7, #20]
 8011986:	e009      	b.n	801199c <net_wifi_get_scan_results+0x4c>
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801198e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	79fa      	ldrb	r2, [r7, #7]
 8011994:	68b9      	ldr	r1, [r7, #8]
 8011996:	6938      	ldr	r0, [r7, #16]
 8011998:	4798      	blx	r3
 801199a:	6178      	str	r0, [r7, #20]
  }
  return ret;
 801199c:	697b      	ldr	r3, [r7, #20]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3718      	adds	r7, #24
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <net_wifi_set_credentials>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
 80119a6:	b480      	push	{r7}
 80119a8:	b083      	sub	sp, #12
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
 80119ae:	6039      	str	r1, [r7, #0]
  pnetif->pdrv->extension.wifi->credentials = credentials;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80119b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119b8:	683a      	ldr	r2, [r7, #0]
 80119ba:	619a      	str	r2, [r3, #24]
  return NET_OK;
 80119bc:	2300      	movs	r3, #0
}
 80119be:	4618      	mov	r0, r3
 80119c0:	370c      	adds	r7, #12
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <net_wifi_set_access_mode>:
  * @brief  set the access mode for a wifi interface: AP or STA mode
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_mode(net_if_handle_t *pnetif, net_wifi_mode_t mode)
{
 80119ca:	b480      	push	{r7}
 80119cc:	b083      	sub	sp, #12
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
 80119d2:	460b      	mov	r3, r1
 80119d4:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->mode = mode;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80119dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119de:	78fa      	ldrb	r2, [r7, #3]
 80119e0:	771a      	strb	r2, [r3, #28]
  return NET_OK;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	370c      	adds	r7, #12
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr

080119f0 <net_wifi_set_access_channel>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  channel is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_access_channel(net_if_handle_t *pnetif,  uint8_t channel)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	460b      	mov	r3, r1
 80119fa:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->access_channel = channel;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a04:	78fa      	ldrb	r2, [r7, #3]
 8011a06:	775a      	strb	r2, [r3, #29]
  return NET_OK;
 8011a08:	2300      	movs	r3, #0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	370c      	adds	r7, #12
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a14:	4770      	bx	lr

08011a16 <net_wifi_set_ap_max_connections>:
  * @param  pnetif_is a pointer to an allocated network interface structure
  * @param  channel is an unsigned 8 bit integer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_ap_max_connections(net_if_handle_t *pnetif,  uint8_t count)
{
 8011a16:	b480      	push	{r7}
 8011a18:	b083      	sub	sp, #12
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
 8011a1e:	460b      	mov	r3, r1
 8011a20:	70fb      	strb	r3, [r7, #3]
  pnetif->pdrv->extension.wifi->max_connections = count;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a2a:	78fa      	ldrb	r2, [r7, #3]
 8011a2c:	779a      	strb	r2, [r3, #30]
  return NET_OK;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <net_cellular_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contains credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */

int32_t net_cellular_set_credentials(net_if_handle_t *pnetif_in, const net_cellular_credentials_t *credentials)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 f8b2 	bl	8011bb0 <netif_check>
 8011a4c:	60b8      	str	r0, [r7, #8]
  if (pnetif == NULL)
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d103      	bne.n	8011a5c <net_cellular_set_credentials+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
 8011a54:	f06f 0303 	mvn.w	r3, #3
 8011a58:	60fb      	str	r3, [r7, #12]
 8011a5a:	e012      	b.n	8011a82 <net_cellular_set_credentials+0x46>
  }
  else
  {
    if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_CELLULAR)
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d003      	beq.n	8011a70 <net_cellular_set_credentials+0x34>
    {
      NET_DBG_ERROR("Incorrect class interface when calling net_cellular_get_radio_results function\n");
      ret = NET_ERROR_PARAMETER;
 8011a68:	f06f 0303 	mvn.w	r3, #3
 8011a6c:	60fb      	str	r3, [r7, #12]
 8011a6e:	e008      	b.n	8011a82 <net_cellular_set_credentials+0x46>
    }
    else
    {
      pnetif->pdrv->extension.cellular->credentials = credentials;
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a7a:	683a      	ldr	r2, [r7, #0]
 8011a7c:	605a      	str	r2, [r3, #4]
      ret = NET_OK;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8011a82:	68fb      	ldr	r3, [r7, #12]
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <netif_add_to_list>:
#define __IO volatile
#endif /* IO */


static void netif_add_to_list(net_if_handle_t *pnetif)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 8011a94:	4b0d      	ldr	r3, [pc, #52]	; (8011acc <netif_add_to_list+0x40>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d103      	bne.n	8011aa4 <netif_add_to_list+0x18>
  {
    net_if_list = pnetif;
 8011a9c:	4a0b      	ldr	r2, [pc, #44]	; (8011acc <netif_add_to_list+0x40>)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6013      	str	r3, [r2, #0]
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
  }
  UNLOCK_NETIF_LIST();
}
 8011aa2:	e00d      	b.n	8011ac0 <netif_add_to_list+0x34>
    plastnetif = net_if_list;
 8011aa4:	4b09      	ldr	r3, [pc, #36]	; (8011acc <netif_add_to_list+0x40>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	60fb      	str	r3, [r7, #12]
    while (plastnetif->next != NULL)
 8011aaa:	e002      	b.n	8011ab2 <netif_add_to_list+0x26>
      plastnetif = plastnetif->next;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	60fb      	str	r3, [r7, #12]
    while (plastnetif->next != NULL)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d1f8      	bne.n	8011aac <netif_add_to_list+0x20>
    plastnetif->next = pnetif;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	601a      	str	r2, [r3, #0]
}
 8011ac0:	bf00      	nop
 8011ac2:	3714      	adds	r7, #20
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	200031d4 	.word	0x200031d4

08011ad0 <netif_remove_from_list>:


static void netif_remove_from_list(net_if_handle_t *pnetif)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  net_if_handle_t *pnetif_prev;
  LOCK_NETIF_LIST();

  if (net_if_list == pnetif)
 8011ad8:	4b13      	ldr	r3, [pc, #76]	; (8011b28 <netif_remove_from_list+0x58>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d105      	bne.n	8011aee <netif_remove_from_list+0x1e>
  {
    net_if_list = net_if_list->next;
 8011ae2:	4b11      	ldr	r3, [pc, #68]	; (8011b28 <netif_remove_from_list+0x58>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	4a0f      	ldr	r2, [pc, #60]	; (8011b28 <netif_remove_from_list+0x58>)
 8011aea:	6013      	str	r3, [r2, #0]
        break;
      }
    }
  }
  UNLOCK_NETIF_LIST();
}
 8011aec:	e015      	b.n	8011b1a <netif_remove_from_list+0x4a>
    for (pnetif_prev = net_if_list; pnetif_prev->next != NULL; pnetif_prev = pnetif_prev->next)
 8011aee:	4b0e      	ldr	r3, [pc, #56]	; (8011b28 <netif_remove_from_list+0x58>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	e00d      	b.n	8011b12 <netif_remove_from_list+0x42>
      if (pnetif_prev->next == pnetif)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d105      	bne.n	8011b0c <netif_remove_from_list+0x3c>
        pnetif_prev->next = pnetif->next;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	601a      	str	r2, [r3, #0]
        break;
 8011b08:	bf00      	nop
}
 8011b0a:	e006      	b.n	8011b1a <netif_remove_from_list+0x4a>
    for (pnetif_prev = net_if_list; pnetif_prev->next != NULL; pnetif_prev = pnetif_prev->next)
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	60fb      	str	r3, [r7, #12]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1ed      	bne.n	8011af6 <netif_remove_from_list+0x26>
}
 8011b1a:	bf00      	nop
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	200031d4 	.word	0x200031d4

08011b2c <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b086      	sub	sp, #24
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 8011b34:	f107 030c 	add.w	r3, r7, #12
 8011b38:	2204      	movs	r2, #4
 8011b3a:	2100      	movs	r1, #0
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f001 fe3c 	bl	80137ba <memset>
  NET_ZERO(ipaddr);
 8011b42:	f107 0310 	add.w	r3, r7, #16
 8011b46:	2204      	movs	r2, #4
 8011b48:	2100      	movs	r1, #0
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f001 fe35 	bl	80137ba <memset>
  if (addr != NULL)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d004      	beq.n	8011b60 <net_if_find+0x34>
  {
    ipaddr = net_get_ip_addr(addr);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f7ff fdd1 	bl	80116fe <net_get_ip_addr>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	613b      	str	r3, [r7, #16]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 8011b60:	4b12      	ldr	r3, [pc, #72]	; (8011bac <net_if_find+0x80>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	617b      	str	r3, [r7, #20]
  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 8011b66:	f107 010c 	add.w	r1, r7, #12
 8011b6a:	f107 0310 	add.w	r3, r7, #16
 8011b6e:	2204      	movs	r2, #4
 8011b70:	4618      	mov	r0, r3
 8011b72:	f001 fe05 	bl	8013780 <memcmp>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d012      	beq.n	8011ba2 <net_if_find+0x76>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	3304      	adds	r3, #4
 8011b80:	f107 0110 	add.w	r1, r7, #16
 8011b84:	2204      	movs	r2, #4
 8011b86:	4618      	mov	r0, r3
 8011b88:	f001 fdfa 	bl	8013780 <memcmp>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d006      	beq.n	8011ba0 <net_if_find+0x74>
      {
        break;
      }
      ptr = ptr->next;
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	617b      	str	r3, [r7, #20]
    } while (ptr != NULL);
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1ee      	bne.n	8011b7c <net_if_find+0x50>
 8011b9e:	e000      	b.n	8011ba2 <net_if_find+0x76>
        break;
 8011ba0:	bf00      	nop
  }
  UNLOCK_NETIF_LIST();
  return ptr;
 8011ba2:	697b      	ldr	r3, [r7, #20]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3718      	adds	r7, #24
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	200031d4 	.word	0x200031d4

08011bb0 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  net_if_handle_t *pnetif = pnetif_in;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	60fb      	str	r3, [r7, #12]
  if (pnetif == NULL)
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d103      	bne.n	8011bca <netif_check+0x1a>
  {
    /* get default interface*/
    pnetif = net_if_find(NULL);
 8011bc2:	2000      	movs	r0, #0
 8011bc4:	f7ff ffb2 	bl	8011b2c <net_if_find>
 8011bc8:	60f8      	str	r0, [r7, #12]
    if (pnetif == NULL)
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
 8011bca:	68fb      	ldr	r3, [r7, #12]
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <net_if_wait_state>:
  * @param  state  the expected state
  * @param  timeout max time to wait in ms for the transition
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 8011bd4:	b590      	push	{r4, r7, lr}
 8011bd6:	b089      	sub	sp, #36	; 0x24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	460b      	mov	r3, r1
 8011bde:	607a      	str	r2, [r7, #4]
 8011be0:	72fb      	strb	r3, [r7, #11]
  int32_t ret = NET_OK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	61fb      	str	r3, [r7, #28]
  __IO net_state_t *p;
  p = &pnetif->state;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	33eb      	adds	r3, #235	; 0xeb
 8011bea:	61bb      	str	r3, [r7, #24]

  uint32_t start_time = HAL_GetTick();
 8011bec:	f7f6 fe50 	bl	8008890 <HAL_GetTick>
 8011bf0:	6178      	str	r0, [r7, #20]
  while (*p != state)
 8011bf2:	e019      	b.n	8011c28 <net_if_wait_state+0x54>
  {
    if (HAL_GetTick() >= (start_time + timeout))
 8011bf4:	f7f6 fe4c 	bl	8008890 <HAL_GetTick>
 8011bf8:	4601      	mov	r1, r0
 8011bfa:	697a      	ldr	r2, [r7, #20]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4413      	add	r3, r2
 8011c00:	4299      	cmp	r1, r3
 8011c02:	d303      	bcc.n	8011c0c <net_if_wait_state+0x38>
    {
      ret = NET_TIMEOUT;
 8011c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c08:	61fb      	str	r3, [r7, #28]
      break;
 8011c0a:	e013      	b.n	8011c34 <net_if_wait_state+0x60>
    }
    WAIT_STATE_CHANGE(timeout - (HAL_GetTick() - start_time));
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011c12:	695c      	ldr	r4, [r3, #20]
 8011c14:	f7f6 fe3c 	bl	8008890 <HAL_GetTick>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	1a9a      	subs	r2, r3, r2
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4413      	add	r3, r2
 8011c22:	4619      	mov	r1, r3
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	47a0      	blx	r4
  while (*p != state)
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	7afa      	ldrb	r2, [r7, #11]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d1df      	bne.n	8011bf4 <net_if_wait_state+0x20>
  }
  return ret;
 8011c34:	69fb      	ldr	r3, [r7, #28]

}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3724      	adds	r7, #36	; 0x24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd90      	pop	{r4, r7, pc}

08011c3e <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void *event_data)
{
 8011c3e:	b590      	push	{r4, r7, lr}
 8011c40:	b085      	sub	sp, #20
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	60f8      	str	r0, [r7, #12]
 8011c46:	607a      	str	r2, [r7, #4]
 8011c48:	603b      	str	r3, [r7, #0]
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	72fb      	strb	r3, [r7, #11]
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d011      	beq.n	8011c7c <net_if_notify+0x3e>
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00b      	beq.n	8011c7c <net_if_notify+0x3e>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011c6a:	681c      	ldr	r4, [r3, #0]
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011c72:	6858      	ldr	r0, [r3, #4]
 8011c74:	7af9      	ldrb	r1, [r7, #11]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	47a0      	blx	r4
  }
}
 8011c7c:	bf00      	nop
 8011c7e:	3714      	adds	r7, #20
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd90      	pop	{r4, r7, pc}

08011c84 <net_if_init>:
  * @retval 0 in case of success, an error code otherwise
   * This function is a synchronous function.
  */
int32_t net_if_init(net_if_handle_t *pnetif_in, net_if_driver_init_func driver_init,
                    const net_event_handler_t *event_handler)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b086      	sub	sp, #24
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  net_if_handle_t *pnetif = pnetif_in;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	613b      	str	r3, [r7, #16]
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d01c      	beq.n	8011cd4 <net_if_init+0x50>
  {
    pnetif->event_handler = event_handler;
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
    netif_add_to_list(pnetif);
 8011caa:	6938      	ldr	r0, [r7, #16]
 8011cac:	f7ff feee 	bl	8011a8c <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	6938      	ldr	r0, [r7, #16]
 8011cb4:	4798      	blx	r3
 8011cb6:	6178      	str	r0, [r7, #20]
    if (NET_OK != ret)
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d00d      	beq.n	8011cda <net_if_init+0x56>
    {
      pnetif->state = NET_STATE_DEINITIALIZED;
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
      netif_remove_from_list(pnetif);
 8011cc6:	6938      	ldr	r0, [r7, #16]
 8011cc8:	f7ff ff02 	bl	8011ad0 <netif_remove_from_list>

      NET_DBG_ERROR("Interface cannot be initialized.");
      ret = NET_ERROR_INTERFACE_FAILURE;
 8011ccc:	f06f 0310 	mvn.w	r3, #16
 8011cd0:	617b      	str	r3, [r7, #20]
 8011cd2:	e002      	b.n	8011cda <net_if_init+0x56>
    }
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
 8011cd4:	f06f 0303 	mvn.w	r3, #3
 8011cd8:	617b      	str	r3, [r7, #20]
    net_destroy_locks();
    net_initialized = 0;
  }
#endif /* NET_USE_RTOS */

  return ret;
 8011cda:	697b      	ldr	r3, [r7, #20]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3718      	adds	r7, #24
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 8011cec:	2101      	movs	r1, #1
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 fda4 	bl	801283c <net_state_manage_event>
 8011cf4:	4603      	mov	r3, r0
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3708      	adds	r7, #8
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}

08011cfe <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 8011cfe:	b580      	push	{r7, lr}
 8011d00:	b082      	sub	sp, #8
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 8011d06:	2102      	movs	r1, #2
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f000 fd97 	bl	801283c <net_state_manage_event>
 8011d0e:	4603      	mov	r3, r0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <net_if_getState>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  state  a pointer to a net_state_t enum
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_getState(net_if_handle_t *pnetif_in, net_state_t *state)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7ff ff44 	bl	8011bb0 <netif_check>
 8011d28:	60b8      	str	r0, [r7, #8]
  if (pnetif != NULL)
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d007      	beq.n	8011d40 <net_if_getState+0x28>
  {
    *state = pnetif->state;
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	701a      	strb	r2, [r3, #0]
    ret = NET_OK;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	60fb      	str	r3, [r7, #12]
 8011d3e:	e005      	b.n	8011d4c <net_if_getState+0x34>
  }
  else
  {
    NET_DBG_ERROR("Invalid interface.");
    *state = NET_STATE_DEINITIALIZED;
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	2200      	movs	r2, #0
 8011d44:	701a      	strb	r2, [r3, #0]
    ret = NET_ERROR_PARAMETER;
 8011d46:	f06f 0303 	mvn.w	r3, #3
 8011d4a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}

08011d56 <net_if_set_dhcp_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean , true to activate DHCP
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_mode(net_if_handle_t *pnetif_in, bool mode)
{
 8011d56:	b580      	push	{r7, lr}
 8011d58:	b084      	sub	sp, #16
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
 8011d5e:	460b      	mov	r3, r1
 8011d60:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8011d62:	f06f 0318 	mvn.w	r3, #24
 8011d66:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7ff ff21 	bl	8011bb0 <netif_check>
 8011d6e:	60b8      	str	r0, [r7, #8]
  if (pnetif != NULL)
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d005      	beq.n	8011d82 <net_if_set_dhcp_mode+0x2c>
  {
    pnetif->dhcp_mode = mode;
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	78fa      	ldrb	r2, [r7, #3]
 8011d7a:	f883 2020 	strb.w	r2, [r3, #32]
    ret = NET_OK;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8011d82:	68fb      	ldr	r3, [r7, #12]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <net_if_set_dhcp_server_mode>:
  * @param  pnetif a pointer to an allocated network interface structure
  * @param  mode is a boolean , true to activate DHCP server
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_dhcp_server_mode(net_if_handle_t *pnetif_in, bool mode)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	460b      	mov	r3, r1
 8011d96:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8011d98:	f06f 0318 	mvn.w	r3, #24
 8011d9c:	60fb      	str	r3, [r7, #12]
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f7ff ff06 	bl	8011bb0 <netif_check>
 8011da4:	60b8      	str	r0, [r7, #8]
  if (pnetif != NULL)
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d005      	beq.n	8011db8 <net_if_set_dhcp_server_mode+0x2c>
  {
    pnetif->dhcp_server = mode;
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	78fa      	ldrb	r2, [r7, #3]
 8011db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    ret = NET_OK;
 8011db4:	2300      	movs	r3, #0
 8011db6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8011db8:	68fb      	ldr	r3, [r7, #12]
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <net_if_set_ipaddr>:
  * @param  netmask is a pointer to the net_ip_addr_t structure used as the netmask
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_set_ipaddr(net_if_handle_t *pnetif_in, net_ip_addr_t ipaddr,
                          net_ip_addr_t gateway, net_ip_addr_t netmask)
{
 8011dc2:	b580      	push	{r7, lr}
 8011dc4:	b086      	sub	sp, #24
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	60f8      	str	r0, [r7, #12]
 8011dca:	60b9      	str	r1, [r7, #8]
 8011dcc:	607a      	str	r2, [r7, #4]
 8011dce:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8011dd0:	f06f 0318 	mvn.w	r3, #24
 8011dd4:	617b      	str	r3, [r7, #20]
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f7ff feea 	bl	8011bb0 <netif_check>
 8011ddc:	6138      	str	r0, [r7, #16]
  if (pnetif != NULL)
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d00a      	beq.n	8011dfa <net_if_set_ipaddr+0x38>
  {
    pnetif->static_ipaddr  = ipaddr;
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	68ba      	ldr	r2, [r7, #8]
 8011de8:	611a      	str	r2, [r3, #16]
    pnetif->static_gateway = gateway;
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	615a      	str	r2, [r3, #20]
    pnetif->static_netmask = netmask;
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	683a      	ldr	r2, [r7, #0]
 8011df4:	619a      	str	r2, [r3, #24]
    ret = NET_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8011dfa:	697b      	ldr	r3, [r7, #20]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3718      	adds	r7, #24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <net_socket_get_and_lock>:

static net_socket_t sockets[NET_MAX_SOCKETS_NBR] = {0};


static net_socket_t *net_socket_get_and_lock(int32_t sock)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b085      	sub	sp, #20
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  net_socket_t *pSocket;
  LOCK_SOCK(sock);
  pSocket = &sockets[sock];
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	222c      	movs	r2, #44	; 0x2c
 8011e10:	fb02 f303 	mul.w	r3, r2, r3
 8011e14:	4a04      	ldr	r2, [pc, #16]	; (8011e28 <net_socket_get_and_lock+0x24>)
 8011e16:	4413      	add	r3, r2
 8011e18:	60fb      	str	r3, [r7, #12]
  return pSocket;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3714      	adds	r7, #20
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr
 8011e28:	200031d8 	.word	0x200031d8

08011e2c <is_valid_socket>:
  * @brief  function description
  * @param  Params
  * @retval socket status
  */
static bool is_valid_socket(int32_t socketnum)
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b085      	sub	sp, #20
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8011e34:	2300      	movs	r3, #0
 8011e36:	73fb      	strb	r3, [r7, #15]
  if ((socketnum >= 0) && (socketnum < (int32_t) NET_MAX_SOCKETS_NBR))
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	db0e      	blt.n	8011e5c <is_valid_socket+0x30>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2b04      	cmp	r3, #4
 8011e42:	dc0b      	bgt.n	8011e5c <is_valid_socket+0x30>
  {
    if (sockets[socketnum].status != SOCKET_NOT_ALIVE)
 8011e44:	4a09      	ldr	r2, [pc, #36]	; (8011e6c <is_valid_socket+0x40>)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	212c      	movs	r1, #44	; 0x2c
 8011e4a:	fb01 f303 	mul.w	r3, r1, r3
 8011e4e:	4413      	add	r3, r2
 8011e50:	3308      	adds	r3, #8
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d001      	beq.n	8011e5c <is_valid_socket+0x30>
    {
      ret = true;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	200031d8 	.word	0x200031d8

08011e70 <create_low_level_socket>:
  * @brief  function description
  * @param  sock
  * @retval socket status
  */
static int32_t create_low_level_socket(int32_t sock)
{
 8011e70:	b5b0      	push	{r4, r5, r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  net_socket_t *pSocket;
  pSocket = &sockets[sock];
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	222c      	movs	r2, #44	; 0x2c
 8011e7c:	fb02 f303 	mul.w	r3, r2, r3
 8011e80:	4a34      	ldr	r2, [pc, #208]	; (8011f54 <create_low_level_socket+0xe4>)
 8011e82:	4413      	add	r3, r2
 8011e84:	60fb      	str	r3, [r7, #12]
  if (pSocket->ulsocket == -1)
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e8e:	d15b      	bne.n	8011f48 <create_low_level_socket+0xd8>
  {
    if (net_access_control(pSocket->pnetif, NET_ACCESS_SOCKET, &pSocket->ulsocket))
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6818      	ldr	r0, [r3, #0]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	3304      	adds	r3, #4
 8011e98:	461a      	mov	r2, r3
 8011e9a:	2100      	movs	r1, #0
 8011e9c:	f000 fb2e 	bl	80124fc <net_access_control>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d050      	beq.n	8011f48 <create_low_level_socket+0xd8>
    {
      if (0 == sockets[sock].protocol)
 8011ea6:	4a2b      	ldr	r2, [pc, #172]	; (8011f54 <create_low_level_socket+0xe4>)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	212c      	movs	r1, #44	; 0x2c
 8011eac:	fb01 f303 	mul.w	r3, r1, r3
 8011eb0:	4413      	add	r3, r2
 8011eb2:	3314      	adds	r3, #20
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d125      	bne.n	8011f06 <create_low_level_socket+0x96>
      {
        if (sockets[sock].type == NET_SOCK_STREAM)
 8011eba:	4a26      	ldr	r2, [pc, #152]	; (8011f54 <create_low_level_socket+0xe4>)
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	212c      	movs	r1, #44	; 0x2c
 8011ec0:	fb01 f303 	mul.w	r3, r1, r3
 8011ec4:	4413      	add	r3, r2
 8011ec6:	3310      	adds	r3, #16
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d108      	bne.n	8011ee0 <create_low_level_socket+0x70>
        {
          sockets[sock].protocol = NET_IPPROTO_TCP;
 8011ece:	4a21      	ldr	r2, [pc, #132]	; (8011f54 <create_low_level_socket+0xe4>)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	212c      	movs	r1, #44	; 0x2c
 8011ed4:	fb01 f303 	mul.w	r3, r1, r3
 8011ed8:	4413      	add	r3, r2
 8011eda:	3314      	adds	r3, #20
 8011edc:	2206      	movs	r2, #6
 8011ede:	601a      	str	r2, [r3, #0]
        }
        if (sockets[sock].type == NET_SOCK_DGRAM)
 8011ee0:	4a1c      	ldr	r2, [pc, #112]	; (8011f54 <create_low_level_socket+0xe4>)
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	212c      	movs	r1, #44	; 0x2c
 8011ee6:	fb01 f303 	mul.w	r3, r1, r3
 8011eea:	4413      	add	r3, r2
 8011eec:	3310      	adds	r3, #16
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2b02      	cmp	r3, #2
 8011ef2:	d108      	bne.n	8011f06 <create_low_level_socket+0x96>
        {
          sockets[sock].protocol = NET_IPPROTO_UDP;
 8011ef4:	4a17      	ldr	r2, [pc, #92]	; (8011f54 <create_low_level_socket+0xe4>)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	212c      	movs	r1, #44	; 0x2c
 8011efa:	fb01 f303 	mul.w	r3, r1, r3
 8011efe:	4413      	add	r3, r2
 8011f00:	3314      	adds	r3, #20
 8011f02:	2211      	movs	r2, #17
 8011f04:	601a      	str	r2, [r3, #0]
        }
      }
      pSocket->ulsocket = pSocket->pnetif->pdrv->psocket(sockets[sock].domain,
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8011f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f10:	4910      	ldr	r1, [pc, #64]	; (8011f54 <create_low_level_socket+0xe4>)
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	202c      	movs	r0, #44	; 0x2c
 8011f16:	fb00 f202 	mul.w	r2, r0, r2
 8011f1a:	440a      	add	r2, r1
 8011f1c:	320c      	adds	r2, #12
 8011f1e:	6810      	ldr	r0, [r2, #0]
 8011f20:	490c      	ldr	r1, [pc, #48]	; (8011f54 <create_low_level_socket+0xe4>)
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	242c      	movs	r4, #44	; 0x2c
 8011f26:	fb04 f202 	mul.w	r2, r4, r2
 8011f2a:	440a      	add	r2, r1
 8011f2c:	3210      	adds	r2, #16
 8011f2e:	6811      	ldr	r1, [r2, #0]
 8011f30:	4c08      	ldr	r4, [pc, #32]	; (8011f54 <create_low_level_socket+0xe4>)
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	252c      	movs	r5, #44	; 0x2c
 8011f36:	fb05 f202 	mul.w	r2, r5, r2
 8011f3a:	4422      	add	r2, r4
 8011f3c:	3214      	adds	r2, #20
 8011f3e:	6812      	ldr	r2, [r2, #0]
 8011f40:	4798      	blx	r3
 8011f42:	4602      	mov	r2, r0
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	605a      	str	r2, [r3, #4]
                                                         sockets[sock].type,
                                                         sockets[sock].protocol);
    }
  }
  return pSocket->ulsocket;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	685b      	ldr	r3, [r3, #4]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3710      	adds	r7, #16
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bdb0      	pop	{r4, r5, r7, pc}
 8011f54:	200031d8 	.word	0x200031d8

08011f58 <check_low_level_socket>:

static int32_t check_low_level_socket(int32_t sock)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b085      	sub	sp, #20
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  net_socket_t *pSocket;
  pSocket = &sockets[sock];
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	222c      	movs	r2, #44	; 0x2c
 8011f64:	fb02 f303 	mul.w	r3, r2, r3
 8011f68:	4a05      	ldr	r2, [pc, #20]	; (8011f80 <check_low_level_socket+0x28>)
 8011f6a:	4413      	add	r3, r2
 8011f6c:	60fb      	str	r3, [r7, #12]
  return pSocket->ulsocket;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	685b      	ldr	r3, [r3, #4]
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3714      	adds	r7, #20
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	200031d8 	.word	0x200031d8

08011f84 <find_free_socket>:
  * @brief  function description
  * @param  Params
  * @retval socket status
  */
static int32_t find_free_socket(void)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
  int32_t sidx;
  int32_t ret = NET_ERROR_INVALID_SOCKET;
 8011f8a:	f06f 0305 	mvn.w	r3, #5
 8011f8e:	603b      	str	r3, [r7, #0]

  LOCK_SOCK_ARRAY();
  for (sidx = 0; sidx < NET_MAX_SOCKETS_NBR; sidx++)
 8011f90:	2300      	movs	r3, #0
 8011f92:	607b      	str	r3, [r7, #4]
 8011f94:	e06e      	b.n	8012074 <find_free_socket+0xf0>
  {
    if (sockets[sidx].status == SOCKET_NOT_ALIVE)
 8011f96:	4a3b      	ldr	r2, [pc, #236]	; (8012084 <find_free_socket+0x100>)
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	212c      	movs	r1, #44	; 0x2c
 8011f9c:	fb01 f303 	mul.w	r3, r1, r3
 8011fa0:	4413      	add	r3, r2
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d161      	bne.n	801206e <find_free_socket+0xea>
    {
      sockets[sidx].idx      = sidx;
 8011faa:	4a36      	ldr	r2, [pc, #216]	; (8012084 <find_free_socket+0x100>)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	212c      	movs	r1, #44	; 0x2c
 8011fb0:	fb01 f303 	mul.w	r3, r1, r3
 8011fb4:	4413      	add	r3, r2
 8011fb6:	3328      	adds	r3, #40	; 0x28
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	601a      	str	r2, [r3, #0]
      sockets[sidx].status   = SOCKET_ALLOCATED;
 8011fbc:	4a31      	ldr	r2, [pc, #196]	; (8012084 <find_free_socket+0x100>)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	212c      	movs	r1, #44	; 0x2c
 8011fc2:	fb01 f303 	mul.w	r3, r1, r3
 8011fc6:	4413      	add	r3, r2
 8011fc8:	3308      	adds	r3, #8
 8011fca:	2201      	movs	r2, #1
 8011fcc:	701a      	strb	r2, [r3, #0]
      sockets[sidx].domain   = 0;
 8011fce:	4a2d      	ldr	r2, [pc, #180]	; (8012084 <find_free_socket+0x100>)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	212c      	movs	r1, #44	; 0x2c
 8011fd4:	fb01 f303 	mul.w	r3, r1, r3
 8011fd8:	4413      	add	r3, r2
 8011fda:	330c      	adds	r3, #12
 8011fdc:	2200      	movs	r2, #0
 8011fde:	601a      	str	r2, [r3, #0]
      sockets[sidx].type     = 0;
 8011fe0:	4a28      	ldr	r2, [pc, #160]	; (8012084 <find_free_socket+0x100>)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	212c      	movs	r1, #44	; 0x2c
 8011fe6:	fb01 f303 	mul.w	r3, r1, r3
 8011fea:	4413      	add	r3, r2
 8011fec:	3310      	adds	r3, #16
 8011fee:	2200      	movs	r2, #0
 8011ff0:	601a      	str	r2, [r3, #0]
      sockets[sidx].protocol = 0;
 8011ff2:	4a24      	ldr	r2, [pc, #144]	; (8012084 <find_free_socket+0x100>)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	212c      	movs	r1, #44	; 0x2c
 8011ff8:	fb01 f303 	mul.w	r3, r1, r3
 8011ffc:	4413      	add	r3, r2
 8011ffe:	3314      	adds	r3, #20
 8012000:	2200      	movs	r2, #0
 8012002:	601a      	str	r2, [r3, #0]
#ifdef NET_MBEDTLS_HOST_SUPPORT
      sockets[sidx].is_secure = false;
      sockets[sidx].tlsData   = 0;
#endif /* NET_MBEDTLS_HOST_SUPPORT */
      sockets[sidx].read_timeout  = NET_SOCK_DEFAULT_RECEIVE_TO;
 8012004:	4a1f      	ldr	r2, [pc, #124]	; (8012084 <find_free_socket+0x100>)
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	212c      	movs	r1, #44	; 0x2c
 801200a:	fb01 f303 	mul.w	r3, r1, r3
 801200e:	4413      	add	r3, r2
 8012010:	331c      	adds	r3, #28
 8012012:	f64e 2260 	movw	r2, #60000	; 0xea60
 8012016:	601a      	str	r2, [r3, #0]
      sockets[sidx].write_timeout = NET_SOCK_DEFAULT_SEND_TO;
 8012018:	4a1a      	ldr	r2, [pc, #104]	; (8012084 <find_free_socket+0x100>)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	212c      	movs	r1, #44	; 0x2c
 801201e:	fb01 f303 	mul.w	r3, r1, r3
 8012022:	4413      	add	r3, r2
 8012024:	3320      	adds	r3, #32
 8012026:	f64e 2260 	movw	r2, #60000	; 0xea60
 801202a:	601a      	str	r2, [r3, #0]
      sockets[sidx].blocking = true;
 801202c:	4a15      	ldr	r2, [pc, #84]	; (8012084 <find_free_socket+0x100>)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	212c      	movs	r1, #44	; 0x2c
 8012032:	fb01 f303 	mul.w	r3, r1, r3
 8012036:	4413      	add	r3, r2
 8012038:	3324      	adds	r3, #36	; 0x24
 801203a:	2201      	movs	r2, #1
 801203c:	701a      	strb	r2, [r3, #0]
      sockets[sidx].ulsocket = -1;
 801203e:	4a11      	ldr	r2, [pc, #68]	; (8012084 <find_free_socket+0x100>)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	212c      	movs	r1, #44	; 0x2c
 8012044:	fb01 f303 	mul.w	r3, r1, r3
 8012048:	4413      	add	r3, r2
 801204a:	3304      	adds	r3, #4
 801204c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012050:	601a      	str	r2, [r3, #0]
      sockets[sidx].pnetif   = net_if_find(NULL);
 8012052:	2000      	movs	r0, #0
 8012054:	f7ff fd6a 	bl	8011b2c <net_if_find>
 8012058:	4602      	mov	r2, r0
 801205a:	490a      	ldr	r1, [pc, #40]	; (8012084 <find_free_socket+0x100>)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	202c      	movs	r0, #44	; 0x2c
 8012060:	fb00 f303 	mul.w	r3, r0, r3
 8012064:	440b      	add	r3, r1
 8012066:	601a      	str	r2, [r3, #0]

      LOCK_SOCK(sidx);
      ret =  sidx;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	603b      	str	r3, [r7, #0]
      break;
 801206c:	e005      	b.n	801207a <find_free_socket+0xf6>
  for (sidx = 0; sidx < NET_MAX_SOCKETS_NBR; sidx++)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	3301      	adds	r3, #1
 8012072:	607b      	str	r3, [r7, #4]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2b04      	cmp	r3, #4
 8012078:	d98d      	bls.n	8011f96 <find_free_socket+0x12>
    }
  }
  UNLOCK_SOCK_ARRAY();
  return ret;
 801207a:	683b      	ldr	r3, [r7, #0]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	200031d8 	.word	0x200031d8

08012088 <clone_socket>:

static int32_t clone_socket(int32_t sock)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  int32_t newsock;
  newsock = find_free_socket();
 8012090:	f7ff ff78 	bl	8011f84 <find_free_socket>
 8012094:	60f8      	str	r0, [r7, #12]
  if (newsock >= 0)
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2b00      	cmp	r3, #0
 801209a:	db0f      	blt.n	80120bc <clone_socket+0x34>
  {
    (void) memcpy(&sockets[newsock], &sockets[sock], sizeof(net_socket_t));
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	222c      	movs	r2, #44	; 0x2c
 80120a0:	fb02 f303 	mul.w	r3, r2, r3
 80120a4:	4a08      	ldr	r2, [pc, #32]	; (80120c8 <clone_socket+0x40>)
 80120a6:	1898      	adds	r0, r3, r2
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	222c      	movs	r2, #44	; 0x2c
 80120ac:	fb02 f303 	mul.w	r3, r2, r3
 80120b0:	4a05      	ldr	r2, [pc, #20]	; (80120c8 <clone_socket+0x40>)
 80120b2:	4413      	add	r3, r2
 80120b4:	222c      	movs	r2, #44	; 0x2c
 80120b6:	4619      	mov	r1, r3
 80120b8:	f001 fb72 	bl	80137a0 <memcpy>
  }
  return newsock;
 80120bc:	68fb      	ldr	r3, [r7, #12]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	200031d8 	.word	0x200031d8

080120cc <net_socket>:
  * @param  protocol [in] integer should be NET_IPPROTO_TCP,NET_IPPROTO_ICMP,NET_IPPROTO_UDP or NET_IPPROTO_TCP_TLS
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */

int32_t net_socket(int32_t domain, int32_t type, int32_t protocol)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b086      	sub	sp, #24
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	607a      	str	r2, [r7, #4]
  int32_t newsock;
  newsock = find_free_socket();
 80120d8:	f7ff ff54 	bl	8011f84 <find_free_socket>
 80120dc:	6178      	str	r0, [r7, #20]
  if (newsock >= 0)
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	db1a      	blt.n	801211a <net_socket+0x4e>
  {
    sockets[newsock].domain   = domain;
 80120e4:	4a0f      	ldr	r2, [pc, #60]	; (8012124 <net_socket+0x58>)
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	212c      	movs	r1, #44	; 0x2c
 80120ea:	fb01 f303 	mul.w	r3, r1, r3
 80120ee:	4413      	add	r3, r2
 80120f0:	330c      	adds	r3, #12
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	601a      	str	r2, [r3, #0]
    sockets[newsock].type     = type;
 80120f6:	4a0b      	ldr	r2, [pc, #44]	; (8012124 <net_socket+0x58>)
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	212c      	movs	r1, #44	; 0x2c
 80120fc:	fb01 f303 	mul.w	r3, r1, r3
 8012100:	4413      	add	r3, r2
 8012102:	3310      	adds	r3, #16
 8012104:	68ba      	ldr	r2, [r7, #8]
 8012106:	601a      	str	r2, [r3, #0]
    sockets[newsock].protocol = protocol;
 8012108:	4a06      	ldr	r2, [pc, #24]	; (8012124 <net_socket+0x58>)
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	212c      	movs	r1, #44	; 0x2c
 801210e:	fb01 f303 	mul.w	r3, r1, r3
 8012112:	4413      	add	r3, r2
 8012114:	3314      	adds	r3, #20
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	601a      	str	r2, [r3, #0]
  }
  else
  {
    NET_DBG_ERROR("Socket allocation failed.\n");
  }
  return newsock;
 801211a:	697b      	ldr	r3, [r7, #20]
}
 801211c:	4618      	mov	r0, r3
 801211e:	3718      	adds	r7, #24
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	200031d8 	.word	0x200031d8

08012128 <net_bind>:
  * @param  addr [in] pointer to net_sockaddr_t structure
  * @param  addrlen [in] unsigned integer length of the net_sockaddr_t
  * @retval zero in case of success, error code otherwise
  */
int32_t net_bind(int32_t sock, net_sockaddr_t *addr, uint32_t addrlen)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b086      	sub	sp, #24
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012134:	f06f 0318 	mvn.w	r3, #24
 8012138:	613b      	str	r3, [r7, #16]
  net_socket_t *pSocket;

  if (!is_valid_socket(sock))
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f7ff fe76 	bl	8011e2c <is_valid_socket>
 8012140:	4603      	mov	r3, r0
 8012142:	f083 0301 	eor.w	r3, r3, #1
 8012146:	b2db      	uxtb	r3, r3
 8012148:	2b00      	cmp	r3, #0
 801214a:	d003      	beq.n	8012154 <net_bind+0x2c>
  {
    NET_DBG_ERROR("Invalid socket.\n");
    ret = NET_ERROR_INVALID_SOCKET;
 801214c:	f06f 0305 	mvn.w	r3, #5
 8012150:	613b      	str	r3, [r7, #16]
 8012152:	e02e      	b.n	80121b2 <net_bind+0x8a>
  }
  else
  {
    pSocket = net_socket_get_and_lock(sock);
 8012154:	68f8      	ldr	r0, [r7, #12]
 8012156:	f7ff fe55 	bl	8011e04 <net_socket_get_and_lock>
 801215a:	6178      	str	r0, [r7, #20]
#if (NET_USE_DEFAULT_INTERFACE == 1)
    if (pSocket->pnetif == NULL)
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d105      	bne.n	8012170 <net_bind+0x48>
    {
      pSocket->pnetif = net_if_find(NULL);
 8012164:	2000      	movs	r0, #0
 8012166:	f7ff fce1 	bl	8011b2c <net_if_find>
 801216a:	4602      	mov	r2, r0
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	601a      	str	r2, [r3, #0]
    }
#endif /* NET_USE_DEFAULT_INTERFACE */

    if (create_low_level_socket(sock) < 0)
 8012170:	68f8      	ldr	r0, [r7, #12]
 8012172:	f7ff fe7d 	bl	8011e70 <create_low_level_socket>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	da03      	bge.n	8012184 <net_bind+0x5c>
    {
      ret = NET_ERROR_SOCKET_FAILURE;
 801217c:	f06f 0312 	mvn.w	r3, #18
 8012180:	613b      	str	r3, [r7, #16]
 8012182:	e016      	b.n	80121b2 <net_bind+0x8a>
      NET_DBG_ERROR("low level socket creation failed.\n");
    }
    else
    {
      if (net_access_control(pSocket->pnetif, NET_ACCESS_BIND, &ret))
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f107 0210 	add.w	r2, r7, #16
 801218c:	2101      	movs	r1, #1
 801218e:	4618      	mov	r0, r3
 8012190:	f000 f9b4 	bl	80124fc <net_access_control>
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00b      	beq.n	80121b2 <net_bind+0x8a>
      {
        UNLOCK_SOCK(sock);
        ret = pSocket->pnetif->pdrv->pbind(pSocket->ulsocket, addr, addrlen);
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80121a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a4:	697a      	ldr	r2, [r7, #20]
 80121a6:	6850      	ldr	r0, [r2, #4]
 80121a8:	687a      	ldr	r2, [r7, #4]
 80121aa:	68b9      	ldr	r1, [r7, #8]
 80121ac:	4798      	blx	r3
 80121ae:	4603      	mov	r3, r0
 80121b0:	613b      	str	r3, [r7, #16]
        }
      }
    }
    UNLOCK_SOCK(sock);
  }
  return ret;
 80121b2:	693b      	ldr	r3, [r7, #16]
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3718      	adds	r7, #24
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <net_accept>:
  * @param  addr [out] pointer to net_sockaddr_t structure of remote connection
  * @param  addrlen [out] pointer to unsigned integer, length of the remote net_sockaddr_t
  * @retval socket number as an integer greater than zero in case of success, zero or less than zero otherwise
  */
int32_t net_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b088      	sub	sp, #32
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	607a      	str	r2, [r7, #4]
  int32_t newsock;
  int32_t ulnewsock;
  net_socket_t *pSocket;

  if (!is_valid_socket(sock))
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	f7ff fe2f 	bl	8011e2c <is_valid_socket>
 80121ce:	4603      	mov	r3, r0
 80121d0:	f083 0301 	eor.w	r3, r3, #1
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d003      	beq.n	80121e2 <net_accept+0x26>
  {
    NET_DBG_ERROR("Invalid socket.\n");
    newsock =  NET_ERROR_INVALID_SOCKET;
 80121da:	f06f 0305 	mvn.w	r3, #5
 80121de:	61fb      	str	r3, [r7, #28]
 80121e0:	e04c      	b.n	801227c <net_accept+0xc0>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f7ff feb8 	bl	8011f58 <check_low_level_socket>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	da03      	bge.n	80121f6 <net_accept+0x3a>
    {
      NET_DBG_ERROR("low level Socket has not been created.\n");
      newsock =  NET_ERROR_SOCKET_FAILURE;
 80121ee:	f06f 0312 	mvn.w	r3, #18
 80121f2:	61fb      	str	r3, [r7, #28]
 80121f4:	e042      	b.n	801227c <net_accept+0xc0>
    }
    else
    {
      pSocket = net_socket_get_and_lock(sock);
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f7ff fe04 	bl	8011e04 <net_socket_get_and_lock>
 80121fc:	61b8      	str	r0, [r7, #24]
      if (net_access_control(pSocket->pnetif, NET_ACCESS_BIND, &ulnewsock))
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f107 0214 	add.w	r2, r7, #20
 8012206:	2101      	movs	r1, #1
 8012208:	4618      	mov	r0, r3
 801220a:	f000 f977 	bl	80124fc <net_access_control>
 801220e:	4603      	mov	r3, r0
 8012210:	2b00      	cmp	r3, #0
 8012212:	d00b      	beq.n	801222c <net_accept+0x70>
      {
        UNLOCK_SOCK(sock);
        ulnewsock = pSocket->pnetif->pdrv->paccept(pSocket->ulsocket, addr, addrlen);
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801221e:	69ba      	ldr	r2, [r7, #24]
 8012220:	6850      	ldr	r0, [r2, #4]
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	68b9      	ldr	r1, [r7, #8]
 8012226:	4798      	blx	r3
 8012228:	4603      	mov	r3, r0
 801222a:	617b      	str	r3, [r7, #20]
        LOCK_SOCK(sock);

      }
      if (ulnewsock < 0)
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	2b00      	cmp	r3, #0
 8012230:	da02      	bge.n	8012238 <net_accept+0x7c>
      {
        NET_DBG_ERROR("No connection has been established.\n");
        newsock = ulnewsock;
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	61fb      	str	r3, [r7, #28]
 8012236:	e021      	b.n	801227c <net_accept+0xc0>
      }
      else
      {
        sockets[sock].status = SOCKET_CONNECTED;
 8012238:	4a13      	ldr	r2, [pc, #76]	; (8012288 <net_accept+0xcc>)
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	212c      	movs	r1, #44	; 0x2c
 801223e:	fb01 f303 	mul.w	r3, r1, r3
 8012242:	4413      	add	r3, r2
 8012244:	3308      	adds	r3, #8
 8012246:	2202      	movs	r2, #2
 8012248:	701a      	strb	r2, [r3, #0]
        newsock = clone_socket(sock);
 801224a:	68f8      	ldr	r0, [r7, #12]
 801224c:	f7ff ff1c 	bl	8012088 <clone_socket>
 8012250:	61f8      	str	r0, [r7, #28]
        if (newsock >= 0)
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	2b00      	cmp	r3, #0
 8012256:	db11      	blt.n	801227c <net_accept+0xc0>
        {
          sockets[newsock].ulsocket = ulnewsock;
 8012258:	697a      	ldr	r2, [r7, #20]
 801225a:	490b      	ldr	r1, [pc, #44]	; (8012288 <net_accept+0xcc>)
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	202c      	movs	r0, #44	; 0x2c
 8012260:	fb00 f303 	mul.w	r3, r0, r3
 8012264:	440b      	add	r3, r1
 8012266:	3304      	adds	r3, #4
 8012268:	601a      	str	r2, [r3, #0]
          sockets[newsock].cloneserver = true;
 801226a:	4a07      	ldr	r2, [pc, #28]	; (8012288 <net_accept+0xcc>)
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	212c      	movs	r1, #44	; 0x2c
 8012270:	fb01 f303 	mul.w	r3, r1, r3
 8012274:	4413      	add	r3, r2
 8012276:	3318      	adds	r3, #24
 8012278:	2201      	movs	r2, #1
 801227a:	701a      	strb	r2, [r3, #0]
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return newsock;
 801227c:	69fb      	ldr	r3, [r7, #28]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3720      	adds	r7, #32
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	200031d8 	.word	0x200031d8

0801228c <net_listen>:
  * @param  sock [in] integer socket number
  * @param  backlog [in] integer maximum number of queued connection
  * @retval zero in case of success, none zero value in case of error
  */
int32_t net_listen(int32_t sock, int32_t backlog)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012296:	f06f 0318 	mvn.w	r3, #24
 801229a:	60bb      	str	r3, [r7, #8]
  net_socket_t *pSocket;

  if (!is_valid_socket(sock))
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ff fdc5 	bl	8011e2c <is_valid_socket>
 80122a2:	4603      	mov	r3, r0
 80122a4:	f083 0301 	eor.w	r3, r3, #1
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <net_listen+0x2a>
  {
    NET_DBG_ERROR("Invalid socket.\n");
    ret = NET_ERROR_INVALID_SOCKET;
 80122ae:	f06f 0305 	mvn.w	r3, #5
 80122b2:	60bb      	str	r3, [r7, #8]
 80122b4:	e024      	b.n	8012300 <net_listen+0x74>
  }
  else
  {
    if (check_low_level_socket(sock) < 0)
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7ff fe4e 	bl	8011f58 <check_low_level_socket>
 80122bc:	4603      	mov	r3, r0
 80122be:	2b00      	cmp	r3, #0
 80122c0:	da03      	bge.n	80122ca <net_listen+0x3e>
    {
      NET_DBG_ERROR("low level socket has not been created.\n");
      ret = NET_ERROR_SOCKET_FAILURE;
 80122c2:	f06f 0312 	mvn.w	r3, #18
 80122c6:	60bb      	str	r3, [r7, #8]
 80122c8:	e01a      	b.n	8012300 <net_listen+0x74>
    }
    else
    {
      pSocket = net_socket_get_and_lock(sock);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7ff fd9a 	bl	8011e04 <net_socket_get_and_lock>
 80122d0:	60f8      	str	r0, [r7, #12]
      if (net_access_control(pSocket->pnetif, NET_ACCESS_LISTEN, &ret))
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f107 0208 	add.w	r2, r7, #8
 80122da:	2102      	movs	r1, #2
 80122dc:	4618      	mov	r0, r3
 80122de:	f000 f90d 	bl	80124fc <net_access_control>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00b      	beq.n	8012300 <net_listen+0x74>
      {
        UNLOCK_SOCK(sock);
        ret = pSocket->pnetif->pdrv->plisten(pSocket->ulsocket, backlog);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80122f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122f2:	68fa      	ldr	r2, [r7, #12]
 80122f4:	6852      	ldr	r2, [r2, #4]
 80122f6:	6839      	ldr	r1, [r7, #0]
 80122f8:	4610      	mov	r0, r2
 80122fa:	4798      	blx	r3
 80122fc:	4603      	mov	r3, r0
 80122fe:	60bb      	str	r3, [r7, #8]
        }
      }
      UNLOCK_SOCK(sock);
    }
  }
  return ret;
 8012300:	68bb      	ldr	r3, [r7, #8]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <net_send>:
  * @param  buf [in] pointer to an array of unsigned byte
  * @param  len [in] number of byte to send
  * @retval number of byte transmitted, negative value in case of error or timeout
  */
int32_t net_send(int32_t sock, uint8_t *buf, uint32_t len, int32_t flags)
{
 801230a:	b590      	push	{r4, r7, lr}
 801230c:	b087      	sub	sp, #28
 801230e:	af00      	add	r7, sp, #0
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	607a      	str	r2, [r7, #4]
 8012316:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012318:	f06f 0318 	mvn.w	r3, #24
 801231c:	613b      	str	r3, [r7, #16]
  net_socket_t *pSocket;

  if (!is_valid_socket(sock))
 801231e:	68f8      	ldr	r0, [r7, #12]
 8012320:	f7ff fd84 	bl	8011e2c <is_valid_socket>
 8012324:	4603      	mov	r3, r0
 8012326:	f083 0301 	eor.w	r3, r3, #1
 801232a:	b2db      	uxtb	r3, r3
 801232c:	2b00      	cmp	r3, #0
 801232e:	d003      	beq.n	8012338 <net_send+0x2e>
  {
    NET_DBG_ERROR("Invalid socket.\n");
    ret = NET_ERROR_INVALID_SOCKET;
 8012330:	f06f 0305 	mvn.w	r3, #5
 8012334:	613b      	str	r3, [r7, #16]
 8012336:	e02e      	b.n	8012396 <net_send+0x8c>
  }
  else
  {
    if (buf == NULL)
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d103      	bne.n	8012346 <net_send+0x3c>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 801233e:	f06f 0305 	mvn.w	r3, #5
 8012342:	613b      	str	r3, [r7, #16]
 8012344:	e027      	b.n	8012396 <net_send+0x8c>
    }
    else
    {
      if (check_low_level_socket(sock) < 0)
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f7ff fe06 	bl	8011f58 <check_low_level_socket>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	da03      	bge.n	801235a <net_send+0x50>
      {
        NET_DBG_ERROR("low level socket has not been created.\n");
        ret = NET_ERROR_SOCKET_FAILURE;
 8012352:	f06f 0312 	mvn.w	r3, #18
 8012356:	613b      	str	r3, [r7, #16]
 8012358:	e01d      	b.n	8012396 <net_send+0x8c>
      }
      else
      {
        pSocket = net_socket_get_and_lock(sock);
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f7ff fd52 	bl	8011e04 <net_socket_get_and_lock>
 8012360:	6178      	str	r0, [r7, #20]
          ret = (int32_t) net_mbedtls_sock_send(pSocket,  buf,  len);
        }
        else
#endif /* NET_MBEDTLS_HOST_SUPPORT */
        {
          if (net_access_control(pSocket->pnetif, NET_ACCESS_SEND, &ret))
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f107 0210 	add.w	r2, r7, #16
 801236a:	2104      	movs	r1, #4
 801236c:	4618      	mov	r0, r3
 801236e:	f000 f8c5 	bl	80124fc <net_access_control>
 8012372:	4603      	mov	r3, r0
 8012374:	2b00      	cmp	r3, #0
 8012376:	d00e      	beq.n	8012396 <net_send+0x8c>
          {
            UNLOCK_SOCK(sock);
            ret = pSocket->pnetif->pdrv->psend(pSocket->ulsocket, buf, len, flags);
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012380:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	6858      	ldr	r0, [r3, #4]
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	68b9      	ldr	r1, [r7, #8]
 801238c:	47a0      	blx	r4
 801238e:	4603      	mov	r3, r0
 8012390:	613b      	str	r3, [r7, #16]
            LOCK_SOCK(sock);

            if ((ret < 0) && (ret != NET_ERROR_DISCONNECTED))
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	2b00      	cmp	r3, #0
        }
        UNLOCK_SOCK(sock);
      }
    }
  }
  return ret;
 8012396:	693b      	ldr	r3, [r7, #16]
}
 8012398:	4618      	mov	r0, r3
 801239a:	371c      	adds	r7, #28
 801239c:	46bd      	mov	sp, r7
 801239e:	bd90      	pop	{r4, r7, pc}

080123a0 <net_recvfrom>:
  * @param  fromlen [in] pointer to unsigned integer, length of the source net_sockaddr_t
  * @retval number of byte received, negative value in case of error or timeout
  */
int32_t net_recvfrom(int32_t sock, uint8_t *buf, uint32_t len, int32_t flags_in, net_sockaddr_t *from,
                     uint32_t *fromlen)
{
 80123a0:	b590      	push	{r4, r7, lr}
 80123a2:	b08b      	sub	sp, #44	; 0x2c
 80123a4:	af02      	add	r7, sp, #8
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	603b      	str	r3, [r7, #0]
  int32_t ret = NET_ERROR_FRAMEWORK;
 80123ae:	f06f 0318 	mvn.w	r3, #24
 80123b2:	617b      	str	r3, [r7, #20]
  int32_t flags = flags_in;
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	61fb      	str	r3, [r7, #28]

  net_socket_t *pSocket;

  if (!is_valid_socket(sock))
 80123b8:	68f8      	ldr	r0, [r7, #12]
 80123ba:	f7ff fd37 	bl	8011e2c <is_valid_socket>
 80123be:	4603      	mov	r3, r0
 80123c0:	f083 0301 	eor.w	r3, r3, #1
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d003      	beq.n	80123d2 <net_recvfrom+0x32>
  {
    NET_DBG_ERROR("Invalid socket.\n");
    ret = NET_ERROR_INVALID_SOCKET;
 80123ca:	f06f 0305 	mvn.w	r3, #5
 80123ce:	617b      	str	r3, [r7, #20]
 80123d0:	e03c      	b.n	801244c <net_recvfrom+0xac>
  }
  else
  {
    if (buf == NULL)
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d103      	bne.n	80123e0 <net_recvfrom+0x40>
    {
      ret = NET_ERROR_INVALID_SOCKET;
 80123d8:	f06f 0305 	mvn.w	r3, #5
 80123dc:	617b      	str	r3, [r7, #20]
 80123de:	e035      	b.n	801244c <net_recvfrom+0xac>
    }
    else
    {
      if (create_low_level_socket(sock) < 0)
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	f7ff fd45 	bl	8011e70 <create_low_level_socket>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	da03      	bge.n	80123f4 <net_recvfrom+0x54>
      {
        NET_DBG_ERROR("low level socket creation failed.\n");
        ret = NET_ERROR_SOCKET_FAILURE;
 80123ec:	f06f 0312 	mvn.w	r3, #18
 80123f0:	617b      	str	r3, [r7, #20]
 80123f2:	e02b      	b.n	801244c <net_recvfrom+0xac>
      }
      else
      {
        pSocket = net_socket_get_and_lock(sock);
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	f7ff fd05 	bl	8011e04 <net_socket_get_and_lock>
 80123fa:	61b8      	str	r0, [r7, #24]
        if (net_access_control(pSocket->pnetif, NET_ACCESS_RECVFROM, &ret))
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f107 0214 	add.w	r2, r7, #20
 8012404:	2107      	movs	r1, #7
 8012406:	4618      	mov	r0, r3
 8012408:	f000 f878 	bl	80124fc <net_access_control>
 801240c:	4603      	mov	r3, r0
 801240e:	2b00      	cmp	r3, #0
 8012410:	d01c      	beq.n	801244c <net_recvfrom+0xac>
        {
          UNLOCK_SOCK(sock);
          if (pSocket->read_timeout == 0)
 8012412:	69bb      	ldr	r3, [r7, #24]
 8012414:	69db      	ldr	r3, [r3, #28]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d101      	bne.n	801241e <net_recvfrom+0x7e>
          {
            flags = (int8_t) NET_MSG_DONTWAIT;
 801241a:	2308      	movs	r3, #8
 801241c:	61fb      	str	r3, [r7, #28]
          }
          ret = pSocket->pnetif->pdrv->precvfrom(pSocket->ulsocket, buf, len, flags, from, fromlen);
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012426:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	6858      	ldr	r0, [r3, #4]
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012430:	9301      	str	r3, [sp, #4]
 8012432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012434:	9300      	str	r3, [sp, #0]
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	68b9      	ldr	r1, [r7, #8]
 801243a:	47a0      	blx	r4
 801243c:	4603      	mov	r3, r0
 801243e:	617b      	str	r3, [r7, #20]
          LOCK_SOCK(sock);
          if ((ret < 0) && (ret != NET_TIMEOUT) && (ret != NET_ERROR_DISCONNECTED))
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	2b00      	cmp	r3, #0
 8012444:	da02      	bge.n	801244c <net_recvfrom+0xac>
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
        }
        UNLOCK_SOCK(sock);
      }
    }
  }
  return ret;
 801244c:	697b      	ldr	r3, [r7, #20]
}
 801244e:	4618      	mov	r0, r3
 8012450:	3724      	adds	r7, #36	; 0x24
 8012452:	46bd      	mov	sp, r7
 8012454:	bd90      	pop	{r4, r7, pc}
	...

08012458 <net_closesocket>:
  * @brief  close a socket
  * @param  sock [in] integer socket number
  * @retval zero on success, negative value in case of error
  */
int32_t net_closesocket(int32_t sock)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_ERROR_FRAMEWORK;
 8012460:	f06f 0318 	mvn.w	r3, #24
 8012464:	60bb      	str	r3, [r7, #8]
  net_socket_t *pSocket;

  if (!is_valid_socket(sock))
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f7ff fce0 	bl	8011e2c <is_valid_socket>
 801246c:	4603      	mov	r3, r0
 801246e:	f083 0301 	eor.w	r3, r3, #1
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b00      	cmp	r3, #0
 8012476:	d003      	beq.n	8012480 <net_closesocket+0x28>
  {
    NET_WARNING("Invalid socket, can not close it.\n");
    ret = NET_ERROR_INVALID_SOCKET;
 8012478:	f06f 0305 	mvn.w	r3, #5
 801247c:	60bb      	str	r3, [r7, #8]
 801247e:	e035      	b.n	80124ec <net_closesocket+0x94>
  }
  else
  {
    pSocket = net_socket_get_and_lock(sock);
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f7ff fcbf 	bl	8011e04 <net_socket_get_and_lock>
 8012486:	60f8      	str	r0, [r7, #12]
      }
      pSocket->is_secure = false;
    }
#endif /* NET_MBEDTLS_HOST_SUPPORT */

    if (check_low_level_socket(sock) < 0)
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f7ff fd65 	bl	8011f58 <check_low_level_socket>
 801248e:	4603      	mov	r3, r0
 8012490:	2b00      	cmp	r3, #0
 8012492:	da0c      	bge.n	80124ae <net_closesocket+0x56>
    {
      NET_WARNING("failed to close :low level socket not existing.\n");
      pSocket = &sockets[sock];
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	222c      	movs	r2, #44	; 0x2c
 8012498:	fb02 f303 	mul.w	r3, r2, r3
 801249c:	4a16      	ldr	r2, [pc, #88]	; (80124f8 <net_closesocket+0xa0>)
 801249e:	4413      	add	r3, r2
 80124a0:	60fb      	str	r3, [r7, #12]
      pSocket->status = SOCKET_NOT_ALIVE;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2200      	movs	r2, #0
 80124a6:	721a      	strb	r2, [r3, #8]
      ret = NET_OK;
 80124a8:	2300      	movs	r3, #0
 80124aa:	60bb      	str	r3, [r7, #8]
 80124ac:	e01e      	b.n	80124ec <net_closesocket+0x94>
    }
    else
    {
      if (net_access_control(pSocket->pnetif, NET_ACCESS_CLOSE, &ret))
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	f107 0208 	add.w	r2, r7, #8
 80124b6:	2108      	movs	r1, #8
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 f81f 	bl	80124fc <net_access_control>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d013      	beq.n	80124ec <net_closesocket+0x94>
      {
        UNLOCK_SOCK(sock);
        ret = pSocket->pnetif->pdrv->pclose(pSocket->ulsocket, pSocket->cloneserver);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80124cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	6850      	ldr	r0, [r2, #4]
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	7e12      	ldrb	r2, [r2, #24]
 80124d6:	4611      	mov	r1, r2
 80124d8:	4798      	blx	r3
 80124da:	4603      	mov	r3, r0
 80124dc:	60bb      	str	r3, [r7, #8]

        if (ret != NET_OK)
        {
          NET_DBG_ERROR("Socket cannot be closed.\n");
        }
        pSocket->ulsocket = -1;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124e4:	605a      	str	r2, [r3, #4]
        pSocket->status = SOCKET_NOT_ALIVE;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2200      	movs	r2, #0
 80124ea:	721a      	strb	r2, [r3, #8]
      }
    }
    UNLOCK_SOCK(sock);
  }

  return ret;
 80124ec:	68bb      	ldr	r3, [r7, #8]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	200031d8 	.word	0x200031d8

080124fc <net_access_control>:

/** @defgroup Socket
  * @}
  */
bool net_access_control(net_if_handle_t *pnetif, net_access_t func, int32_t *code)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b087      	sub	sp, #28
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	460b      	mov	r3, r1
 8012506:	607a      	str	r2, [r7, #4]
 8012508:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 801250a:	2301      	movs	r3, #1
 801250c:	75fb      	strb	r3, [r7, #23]
  if ((pnetif == NULL) || (pnetif->state == NET_STATE_CONNECTION_LOST))
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d004      	beq.n	801251e <net_access_control+0x22>
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 801251a:	2b08      	cmp	r3, #8
 801251c:	d104      	bne.n	8012528 <net_access_control+0x2c>
  {
    /* send, recv function return zero, so user application should normally retry transfer */
    ret = false;
 801251e:	2300      	movs	r3, #0
 8012520:	75fb      	strb	r3, [r7, #23]
    *code = 0;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2200      	movs	r2, #0
 8012526:	601a      	str	r2, [r3, #0]
  }

  switch (func)
 8012528:	7afb      	ldrb	r3, [r7, #11]
 801252a:	2b09      	cmp	r3, #9
 801252c:	d82f      	bhi.n	801258e <net_access_control+0x92>
 801252e:	a201      	add	r2, pc, #4	; (adr r2, 8012534 <net_access_control+0x38>)
 8012530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012534:	0801255d 	.word	0x0801255d
 8012538:	08012599 	.word	0x08012599
 801253c:	08012599 	.word	0x08012599
 8012540:	08012599 	.word	0x08012599
 8012544:	08012569 	.word	0x08012569
 8012548:	08012571 	.word	0x08012571
 801254c:	08012579 	.word	0x08012579
 8012550:	08012581 	.word	0x08012581
 8012554:	08012563 	.word	0x08012563
 8012558:	08012589 	.word	0x08012589
  {
    case NET_ACCESS_SOCKET:
      ret = true;
 801255c:	2301      	movs	r3, #1
 801255e:	75fb      	strb	r3, [r7, #23]
      break;
 8012560:	e01b      	b.n	801259a <net_access_control+0x9e>

    case NET_ACCESS_CONNECT:
      break;

    case NET_ACCESS_CLOSE:
      ret = true;
 8012562:	2301      	movs	r3, #1
 8012564:	75fb      	strb	r3, [r7, #23]
      break;
 8012566:	e018      	b.n	801259a <net_access_control+0x9e>

    case NET_ACCESS_SEND:
      *code = 0;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2200      	movs	r2, #0
 801256c:	601a      	str	r2, [r3, #0]
      break;
 801256e:	e014      	b.n	801259a <net_access_control+0x9e>

    case NET_ACCESS_SENDTO:
      *code = 0;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2200      	movs	r2, #0
 8012574:	601a      	str	r2, [r3, #0]
      break;
 8012576:	e010      	b.n	801259a <net_access_control+0x9e>

    case NET_ACCESS_RECV:
      *code = 0;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2200      	movs	r2, #0
 801257c:	601a      	str	r2, [r3, #0]
      break;
 801257e:	e00c      	b.n	801259a <net_access_control+0x9e>

    case NET_ACCESS_RECVFROM:
      *code = 0;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2200      	movs	r2, #0
 8012584:	601a      	str	r2, [r3, #0]
      break;
 8012586:	e008      	b.n	801259a <net_access_control+0x9e>

    case NET_ACCESS_SETSOCKOPT:
      ret = true;
 8012588:	2301      	movs	r3, #1
 801258a:	75fb      	strb	r3, [r7, #23]
      break;
 801258c:	e005      	b.n	801259a <net_access_control+0x9e>

    default:
      *code = NET_ERROR_FRAMEWORK;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f06f 0218 	mvn.w	r2, #24
 8012594:	601a      	str	r2, [r3, #0]
      break;
 8012596:	e000      	b.n	801259a <net_access_control+0x9e>
      break;
 8012598:	bf00      	nop
  }
  return ret;
 801259a:	7dfb      	ldrb	r3, [r7, #23]
}
 801259c:	4618      	mov	r0, r3
 801259e:	371c      	adds	r7, #28
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <set_state>:
static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event);
int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event);


static void set_state(net_if_handle_t *pnetif, net_state_t state)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	460b      	mov	r3, r1
 80125b2:	70fb      	strb	r3, [r7, #3]
  pnetif->state = state;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	78fa      	ldrb	r2, [r7, #3]
 80125b8:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 80125bc:	78fa      	ldrb	r2, [r7, #3]
 80125be:	2300      	movs	r3, #0
 80125c0:	2100      	movs	r1, #0
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff fb3b 	bl	8011c3e <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 80125c8:	bf00      	nop
 80125ca:	3708      	adds	r7, #8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <net_state_initialized>:


static int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	460b      	mov	r3, r1
 80125da:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80125dc:	2300      	movs	r3, #0
 80125de:	60fb      	str	r3, [r7, #12]
  switch (event)
 80125e0:	78fb      	ldrb	r3, [r7, #3]
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d002      	beq.n	80125ec <net_state_initialized+0x1c>
 80125e6:	2b05      	cmp	r3, #5
 80125e8:	d012      	beq.n	8012610 <net_state_initialized+0x40>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 80125ea:	e026      	b.n	801263a <net_state_initialized+0x6a>
      set_state(pnetif, NET_STATE_STARTING);
 80125ec:	2102      	movs	r1, #2
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7ff ffda 	bl	80125a8 <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	4798      	blx	r3
 8012600:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d015      	beq.n	8012634 <net_state_initialized+0x64>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012608:	f06f 0310 	mvn.w	r3, #16
 801260c:	60fb      	str	r3, [r7, #12]
      break;
 801260e:	e011      	b.n	8012634 <net_state_initialized+0x64>
      ret = pnetif->pdrv->if_deinit(pnetif);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012616:	689b      	ldr	r3, [r3, #8]
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	4798      	blx	r3
 801261c:	60f8      	str	r0, [r7, #12]
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 801261e:	2100      	movs	r1, #0
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7ff ffc1 	bl	80125a8 <set_state>
      if (NET_OK != ret)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d005      	beq.n	8012638 <net_state_initialized+0x68>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801262c:	f06f 0310 	mvn.w	r3, #16
 8012630:	60fb      	str	r3, [r7, #12]
      break;
 8012632:	e001      	b.n	8012638 <net_state_initialized+0x68>
      break;
 8012634:	bf00      	nop
 8012636:	e000      	b.n	801263a <net_state_initialized+0x6a>
      break;
 8012638:	bf00      	nop
  }
  return ret;
 801263a:	68fb      	ldr	r3, [r7, #12]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <net_state_starting>:


static int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t event)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	460b      	mov	r3, r1
 801264e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8012650:	2300      	movs	r3, #0
 8012652:	60fb      	str	r3, [r7, #12]
  switch (event)
 8012654:	78fb      	ldrb	r3, [r7, #3]
 8012656:	2b04      	cmp	r3, #4
 8012658:	d006      	beq.n	8012668 <net_state_starting+0x24>
 801265a:	2b07      	cmp	r3, #7
 801265c:	d116      	bne.n	801268c <net_state_starting+0x48>
  {
    case  NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 801265e:	2103      	movs	r1, #3
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7ff ffa1 	bl	80125a8 <set_state>
      break;
 8012666:	e014      	b.n	8012692 <net_state_starting+0x4e>

    case  NET_EVENT_CMD_STOP:
      set_state(pnetif, NET_STATE_INITIALIZED);
 8012668:	2101      	movs	r1, #1
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7ff ff9c 	bl	80125a8 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012676:	691b      	ldr	r3, [r3, #16]
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	4798      	blx	r3
 801267c:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d005      	beq.n	8012690 <net_state_starting+0x4c>
      {
        NET_DBG_ERROR("Interface cannot stop.");
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012684:	f06f 0310 	mvn.w	r3, #16
 8012688:	60fb      	str	r3, [r7, #12]
      }
      break;
 801268a:	e001      	b.n	8012690 <net_state_starting+0x4c>
    default:
      break;
 801268c:	bf00      	nop
 801268e:	e000      	b.n	8012692 <net_state_starting+0x4e>
      break;
 8012690:	bf00      	nop
  }
  return ret;
 8012692:	68fb      	ldr	r3, [r7, #12]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <net_state_ready>:


static int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	460b      	mov	r3, r1
 80126a6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80126a8:	2300      	movs	r3, #0
 80126aa:	60fb      	str	r3, [r7, #12]
  switch (event)
 80126ac:	78fb      	ldrb	r3, [r7, #3]
 80126ae:	2b02      	cmp	r3, #2
 80126b0:	d002      	beq.n	80126b8 <net_state_ready+0x1c>
 80126b2:	2b04      	cmp	r3, #4
 80126b4:	d012      	beq.n	80126dc <net_state_ready+0x40>
        ret = NET_ERROR_INTERFACE_FAILURE;
      }
      break;

    default:
      break;
 80126b6:	e026      	b.n	8012706 <net_state_ready+0x6a>
      set_state(pnetif, NET_STATE_CONNECTING);
 80126b8:	2104      	movs	r1, #4
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7ff ff74 	bl	80125a8 <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	4798      	blx	r3
 80126cc:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d015      	beq.n	8012700 <net_state_ready+0x64>
        ret = NET_ERROR_INTERFACE_FAILURE;
 80126d4:	f06f 0310 	mvn.w	r3, #16
 80126d8:	60fb      	str	r3, [r7, #12]
      break;
 80126da:	e011      	b.n	8012700 <net_state_ready+0x64>
      set_state(pnetif, NET_STATE_STOPPING);
 80126dc:	2106      	movs	r1, #6
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7ff ff62 	bl	80125a8 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80126ea:	691b      	ldr	r3, [r3, #16]
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	4798      	blx	r3
 80126f0:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d005      	beq.n	8012704 <net_state_ready+0x68>
        ret = NET_ERROR_INTERFACE_FAILURE;
 80126f8:	f06f 0310 	mvn.w	r3, #16
 80126fc:	60fb      	str	r3, [r7, #12]
      break;
 80126fe:	e001      	b.n	8012704 <net_state_ready+0x68>
      break;
 8012700:	bf00      	nop
 8012702:	e000      	b.n	8012706 <net_state_ready+0x6a>
      break;
 8012704:	bf00      	nop
  }
  return ret;
 8012706:	68fb      	ldr	r3, [r7, #12]
}
 8012708:	4618      	mov	r0, r3
 801270a:	3710      	adds	r7, #16
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <net_state_connecting>:


static int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	460b      	mov	r3, r1
 801271a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 801271c:	2300      	movs	r3, #0
 801271e:	60fb      	str	r3, [r7, #12]
  switch (event)
 8012720:	78fb      	ldrb	r3, [r7, #3]
 8012722:	2b03      	cmp	r3, #3
 8012724:	d006      	beq.n	8012734 <net_state_connecting+0x24>
 8012726:	2b0a      	cmp	r3, #10
 8012728:	d109      	bne.n	801273e <net_state_connecting+0x2e>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 801272a:	2105      	movs	r1, #5
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff ff3b 	bl	80125a8 <set_state>
      break;
 8012732:	e005      	b.n	8012740 <net_state_connecting+0x30>

    case NET_EVENT_CMD_DISCONNECT:
      set_state(pnetif, NET_STATE_READY);
 8012734:	2103      	movs	r1, #3
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f7ff ff36 	bl	80125a8 <set_state>
      break;
 801273c:	e000      	b.n	8012740 <net_state_connecting+0x30>

    default:
      break;
 801273e:	bf00      	nop
  }
  return ret;
 8012740:	68fb      	ldr	r3, [r7, #12]
}
 8012742:	4618      	mov	r0, r3
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <net_state_connected>:


static int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 801274a:	b580      	push	{r7, lr}
 801274c:	b084      	sub	sp, #16
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
 8012752:	460b      	mov	r3, r1
 8012754:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 8012756:	2300      	movs	r3, #0
 8012758:	60fb      	str	r3, [r7, #12]
  switch (event)
 801275a:	78fb      	ldrb	r3, [r7, #3]
 801275c:	2b0a      	cmp	r3, #10
 801275e:	d01d      	beq.n	801279c <net_state_connected+0x52>
 8012760:	2b0a      	cmp	r3, #10
 8012762:	dc20      	bgt.n	80127a6 <net_state_connected+0x5c>
 8012764:	2b03      	cmp	r3, #3
 8012766:	d002      	beq.n	801276e <net_state_connected+0x24>
 8012768:	2b09      	cmp	r3, #9
 801276a:	d012      	beq.n	8012792 <net_state_connected+0x48>
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
      break;

    default:
      break;
 801276c:	e01b      	b.n	80127a6 <net_state_connected+0x5c>
      set_state(pnetif, NET_STATE_DISCONNECTING);
 801276e:	2107      	movs	r1, #7
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7ff ff19 	bl	80125a8 <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801277c:	69db      	ldr	r3, [r3, #28]
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	4798      	blx	r3
 8012782:	60f8      	str	r0, [r7, #12]
      if (NET_OK != ret)
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d00f      	beq.n	80127aa <net_state_connected+0x60>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801278a:	f06f 0310 	mvn.w	r3, #16
 801278e:	60fb      	str	r3, [r7, #12]
      break;
 8012790:	e00b      	b.n	80127aa <net_state_connected+0x60>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 8012792:	2108      	movs	r1, #8
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f7ff ff07 	bl	80125a8 <set_state>
      break;
 801279a:	e007      	b.n	80127ac <net_state_connected+0x62>
      set_state(pnetif, NET_STATE_CONNECTED);
 801279c:	2105      	movs	r1, #5
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7ff ff02 	bl	80125a8 <set_state>
      break;
 80127a4:	e002      	b.n	80127ac <net_state_connected+0x62>
      break;
 80127a6:	bf00      	nop
 80127a8:	e000      	b.n	80127ac <net_state_connected+0x62>
      break;
 80127aa:	bf00      	nop
  }
  return ret;
 80127ac:	68fb      	ldr	r3, [r7, #12]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <net_state_disconnecting>:


static int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b084      	sub	sp, #16
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	460b      	mov	r3, r1
 80127c0:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80127c2:	2300      	movs	r3, #0
 80127c4:	60fb      	str	r3, [r7, #12]
  switch (event)
 80127c6:	78fb      	ldrb	r3, [r7, #3]
 80127c8:	2b07      	cmp	r3, #7
 80127ca:	d104      	bne.n	80127d6 <net_state_disconnecting+0x20>
  {
    case  NET_EVENT_INTERFACE_READY:
      set_state(pnetif, NET_STATE_READY);
 80127cc:	2103      	movs	r1, #3
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f7ff feea 	bl	80125a8 <set_state>
      break;
 80127d4:	e000      	b.n	80127d8 <net_state_disconnecting+0x22>

    default:
      break;
 80127d6:	bf00      	nop
  }
  return ret;
 80127d8:	68fb      	ldr	r3, [r7, #12]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <net_state_stopping>:


static int32_t net_state_stopping(net_if_handle_t *pnetif, net_state_event_t event)
{
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b084      	sub	sp, #16
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	460b      	mov	r3, r1
 80127ec:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 80127ee:	2300      	movs	r3, #0
 80127f0:	60fb      	str	r3, [r7, #12]
  switch (event)
 80127f2:	78fb      	ldrb	r3, [r7, #3]
 80127f4:	2b06      	cmp	r3, #6
 80127f6:	d104      	bne.n	8012802 <net_state_stopping+0x20>
  {
    case  NET_EVENT_INTERFACE_INITIALIZED:
      set_state(pnetif, NET_STATE_INITIALIZED);
 80127f8:	2101      	movs	r1, #1
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7ff fed4 	bl	80125a8 <set_state>
      break;
 8012800:	e000      	b.n	8012804 <net_state_stopping+0x22>

    default:
      break;
 8012802:	bf00      	nop
  }
  return ret;
 8012804:	68fb      	ldr	r3, [r7, #12]
}
 8012806:	4618      	mov	r0, r3
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}

0801280e <net_state_connection_lost>:


static int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
 801280e:	b580      	push	{r7, lr}
 8012810:	b084      	sub	sp, #16
 8012812:	af00      	add	r7, sp, #0
 8012814:	6078      	str	r0, [r7, #4]
 8012816:	460b      	mov	r3, r1
 8012818:	70fb      	strb	r3, [r7, #3]
  int32_t ret = NET_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	60fb      	str	r3, [r7, #12]
  switch (event)
 801281e:	78fb      	ldrb	r3, [r7, #3]
 8012820:	2b08      	cmp	r3, #8
 8012822:	d104      	bne.n	801282e <net_state_connection_lost+0x20>
  {
    case NET_EVENT_LINK_UP:
      set_state(pnetif, NET_STATE_CONNECTING);
 8012824:	2104      	movs	r1, #4
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7ff febe 	bl	80125a8 <set_state>
      break;
 801282c:	e000      	b.n	8012830 <net_state_connection_lost+0x22>

    default:
      break;
 801282e:	bf00      	nop
  }
  return ret;
 8012830:	68fb      	ldr	r3, [r7, #12]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
	...

0801283c <net_state_manage_event>:



int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b084      	sub	sp, #16
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	460b      	mov	r3, r1
 8012846:	70fb      	strb	r3, [r7, #3]
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7ff f9b1 	bl	8011bb0 <netif_check>
 801284e:	60b8      	str	r0, [r7, #8]
  if (pnetif == NULL)
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d103      	bne.n	801285e <net_state_manage_event+0x22>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
 8012856:	f06f 0303 	mvn.w	r3, #3
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	e054      	b.n	8012908 <net_state_manage_event+0xcc>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8012864:	3b01      	subs	r3, #1
 8012866:	2b07      	cmp	r3, #7
 8012868:	d84a      	bhi.n	8012900 <net_state_manage_event+0xc4>
 801286a:	a201      	add	r2, pc, #4	; (adr r2, 8012870 <net_state_manage_event+0x34>)
 801286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012870:	08012891 	.word	0x08012891
 8012874:	0801289f 	.word	0x0801289f
 8012878:	080128ad 	.word	0x080128ad
 801287c:	080128bb 	.word	0x080128bb
 8012880:	080128c9 	.word	0x080128c9
 8012884:	080128f3 	.word	0x080128f3
 8012888:	080128d7 	.word	0x080128d7
 801288c:	080128e5 	.word	0x080128e5
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 8012890:	78fb      	ldrb	r3, [r7, #3]
 8012892:	4619      	mov	r1, r3
 8012894:	68b8      	ldr	r0, [r7, #8]
 8012896:	f7ff fe9b 	bl	80125d0 <net_state_initialized>
 801289a:	60f8      	str	r0, [r7, #12]
        break;
 801289c:	e034      	b.n	8012908 <net_state_manage_event+0xcc>

      case  NET_STATE_STARTING:
        ret = net_state_starting(pnetif, event);
 801289e:	78fb      	ldrb	r3, [r7, #3]
 80128a0:	4619      	mov	r1, r3
 80128a2:	68b8      	ldr	r0, [r7, #8]
 80128a4:	f7ff fece 	bl	8012644 <net_state_starting>
 80128a8:	60f8      	str	r0, [r7, #12]
        break;
 80128aa:	e02d      	b.n	8012908 <net_state_manage_event+0xcc>

      case  NET_STATE_READY:
        ret = net_state_ready(pnetif, event);
 80128ac:	78fb      	ldrb	r3, [r7, #3]
 80128ae:	4619      	mov	r1, r3
 80128b0:	68b8      	ldr	r0, [r7, #8]
 80128b2:	f7ff fef3 	bl	801269c <net_state_ready>
 80128b6:	60f8      	str	r0, [r7, #12]
        break;
 80128b8:	e026      	b.n	8012908 <net_state_manage_event+0xcc>

      case  NET_STATE_CONNECTING:
        ret = net_state_connecting(pnetif, event);
 80128ba:	78fb      	ldrb	r3, [r7, #3]
 80128bc:	4619      	mov	r1, r3
 80128be:	68b8      	ldr	r0, [r7, #8]
 80128c0:	f7ff ff26 	bl	8012710 <net_state_connecting>
 80128c4:	60f8      	str	r0, [r7, #12]
        break;
 80128c6:	e01f      	b.n	8012908 <net_state_manage_event+0xcc>

      case  NET_STATE_CONNECTED:
        ret = net_state_connected(pnetif, event);
 80128c8:	78fb      	ldrb	r3, [r7, #3]
 80128ca:	4619      	mov	r1, r3
 80128cc:	68b8      	ldr	r0, [r7, #8]
 80128ce:	f7ff ff3c 	bl	801274a <net_state_connected>
 80128d2:	60f8      	str	r0, [r7, #12]
        break;
 80128d4:	e018      	b.n	8012908 <net_state_manage_event+0xcc>
      case  NET_STATE_DISCONNECTING:
        ret = net_state_disconnecting(pnetif, event);
 80128d6:	78fb      	ldrb	r3, [r7, #3]
 80128d8:	4619      	mov	r1, r3
 80128da:	68b8      	ldr	r0, [r7, #8]
 80128dc:	f7ff ff6b 	bl	80127b6 <net_state_disconnecting>
 80128e0:	60f8      	str	r0, [r7, #12]
        break;
 80128e2:	e011      	b.n	8012908 <net_state_manage_event+0xcc>

      case  NET_STATE_CONNECTION_LOST:
        ret = net_state_connection_lost(pnetif, event);
 80128e4:	78fb      	ldrb	r3, [r7, #3]
 80128e6:	4619      	mov	r1, r3
 80128e8:	68b8      	ldr	r0, [r7, #8]
 80128ea:	f7ff ff90 	bl	801280e <net_state_connection_lost>
 80128ee:	60f8      	str	r0, [r7, #12]
        break;
 80128f0:	e00a      	b.n	8012908 <net_state_manage_event+0xcc>

      case  NET_STATE_STOPPING:
        ret = net_state_stopping(pnetif, event);
 80128f2:	78fb      	ldrb	r3, [r7, #3]
 80128f4:	4619      	mov	r1, r3
 80128f6:	68b8      	ldr	r0, [r7, #8]
 80128f8:	f7ff ff73 	bl	80127e2 <net_state_stopping>
 80128fc:	60f8      	str	r0, [r7, #12]
        break;
 80128fe:	e003      	b.n	8012908 <net_state_manage_event+0xcc>

      default:
        ret = NET_ERROR_INVALID_STATE;
 8012900:	f06f 031b 	mvn.w	r3, #27
 8012904:	60fb      	str	r3, [r7, #12]
        break;
 8012906:	bf00      	nop
    }
  }
  return ret;
 8012908:	68fb      	ldr	r3, [r7, #12]
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop

08012914 <mx_wifi_driver>:
  * @brief                   wifi driver init
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
int32_t mx_wifi_driver(net_if_handle_t *pnetif)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  /* init lwip library here if not already done by another network interface */
#if (MX_WIFI_NETWORK_BYPASS_MODE == 1)
  net_ip_init();
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */

  return mx_wifi_if_init(pnetif);
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 f805 	bl	801292c <mx_wifi_if_init>
 8012922:	4603      	mov	r3, r0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3708      	adds	r7, #8
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <mx_wifi_if_init>:
  * @brief                   mxchip wifi driver interface init
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_init(net_if_handle_t *pnetif)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  int32_t ret;
  void *ptmp;

  /* create netif and set mxchip wifi functions */
  ptmp = NET_MALLOC(sizeof(net_if_drv_t));
 8012934:	2088      	movs	r0, #136	; 0x88
 8012936:	f000 ff13 	bl	8013760 <malloc>
 801293a:	4603      	mov	r3, r0
 801293c:	613b      	str	r3, [r7, #16]
  if (ptmp != NULL)
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d077      	beq.n	8012a34 <mx_wifi_if_init+0x108>
  {
    net_if_drv_t *const p = (net_if_drv_t *)ptmp;
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	60fb      	str	r3, [r7, #12]

    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2200      	movs	r2, #0
 801294c:	701a      	strb	r2, [r3, #0]

    p->if_init = mx_wifi_if_init;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	4a3c      	ldr	r2, [pc, #240]	; (8012a44 <mx_wifi_if_init+0x118>)
 8012952:	605a      	str	r2, [r3, #4]
    p->if_deinit = mx_wifi_if_deinit;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4a3c      	ldr	r2, [pc, #240]	; (8012a48 <mx_wifi_if_init+0x11c>)
 8012958:	609a      	str	r2, [r3, #8]

    p->if_start = mx_wifi_if_start;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	4a3b      	ldr	r2, [pc, #236]	; (8012a4c <mx_wifi_if_init+0x120>)
 801295e:	60da      	str	r2, [r3, #12]
    p->if_stop = mx_wifi_if_stop;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	4a3b      	ldr	r2, [pc, #236]	; (8012a50 <mx_wifi_if_init+0x124>)
 8012964:	611a      	str	r2, [r3, #16]
    p->if_yield = mx_wifi_if_yield;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	4a3a      	ldr	r2, [pc, #232]	; (8012a54 <mx_wifi_if_init+0x128>)
 801296a:	615a      	str	r2, [r3, #20]

    p->if_connect = mx_wifi_if_connect;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	4a3a      	ldr	r2, [pc, #232]	; (8012a58 <mx_wifi_if_init+0x12c>)
 8012970:	619a      	str	r2, [r3, #24]
    p->if_disconnect = mx_wifi_if_disconnect;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	4a39      	ldr	r2, [pc, #228]	; (8012a5c <mx_wifi_if_init+0x130>)
 8012976:	61da      	str	r2, [r3, #28]

    /* socket functions */
#if (MX_WIFI_NETWORK_BYPASS_MODE == 0)
    p->psocket = mx_wifi_socket;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	4a39      	ldr	r2, [pc, #228]	; (8012a60 <mx_wifi_if_init+0x134>)
 801297c:	635a      	str	r2, [r3, #52]	; 0x34
    p->pbind = mx_wifi_bind;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	4a38      	ldr	r2, [pc, #224]	; (8012a64 <mx_wifi_if_init+0x138>)
 8012982:	639a      	str	r2, [r3, #56]	; 0x38
    p->plisten = mx_wifi_listen;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	4a38      	ldr	r2, [pc, #224]	; (8012a68 <mx_wifi_if_init+0x13c>)
 8012988:	63da      	str	r2, [r3, #60]	; 0x3c
    p->paccept = mx_wifi_accept;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	4a37      	ldr	r2, [pc, #220]	; (8012a6c <mx_wifi_if_init+0x140>)
 801298e:	641a      	str	r2, [r3, #64]	; 0x40
    p->pconnect = mx_wifi_connect;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	4a37      	ldr	r2, [pc, #220]	; (8012a70 <mx_wifi_if_init+0x144>)
 8012994:	645a      	str	r2, [r3, #68]	; 0x44
    p->psend = mx_wifi_send;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	4a36      	ldr	r2, [pc, #216]	; (8012a74 <mx_wifi_if_init+0x148>)
 801299a:	649a      	str	r2, [r3, #72]	; 0x48
    p->precv = mx_wifi_recv;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	4a36      	ldr	r2, [pc, #216]	; (8012a78 <mx_wifi_if_init+0x14c>)
 80129a0:	64da      	str	r2, [r3, #76]	; 0x4c
    p->psendto = mx_wifi_sendto;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	4a35      	ldr	r2, [pc, #212]	; (8012a7c <mx_wifi_if_init+0x150>)
 80129a6:	651a      	str	r2, [r3, #80]	; 0x50
    p->precvfrom = mx_wifi_recvfrom;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	4a35      	ldr	r2, [pc, #212]	; (8012a80 <mx_wifi_if_init+0x154>)
 80129ac:	655a      	str	r2, [r3, #84]	; 0x54
    p->psetsockopt = mx_wifi_setsockopt;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	4a34      	ldr	r2, [pc, #208]	; (8012a84 <mx_wifi_if_init+0x158>)
 80129b2:	659a      	str	r2, [r3, #88]	; 0x58
    p->pgetsockopt = mx_wifi_getsockopt;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	4a34      	ldr	r2, [pc, #208]	; (8012a88 <mx_wifi_if_init+0x15c>)
 80129b8:	65da      	str	r2, [r3, #92]	; 0x5c
    p->pgetsockname = mx_wifi_getsockname;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	4a33      	ldr	r2, [pc, #204]	; (8012a8c <mx_wifi_if_init+0x160>)
 80129be:	661a      	str	r2, [r3, #96]	; 0x60
    p->pgetpeername = mx_wifi_getpeername;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	4a33      	ldr	r2, [pc, #204]	; (8012a90 <mx_wifi_if_init+0x164>)
 80129c4:	665a      	str	r2, [r3, #100]	; 0x64
    p->pclose = mx_wifi_close;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	4a32      	ldr	r2, [pc, #200]	; (8012a94 <mx_wifi_if_init+0x168>)
 80129ca:	669a      	str	r2, [r3, #104]	; 0x68
    p->pshutdown = mx_wifi_shutdown;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	4a32      	ldr	r2, [pc, #200]	; (8012a98 <mx_wifi_if_init+0x16c>)
 80129d0:	66da      	str	r2, [r3, #108]	; 0x6c
    p->pgethostbyname = mx_wifi_gethostbyname;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	4a31      	ldr	r2, [pc, #196]	; (8012a9c <mx_wifi_if_init+0x170>)
 80129d6:	671a      	str	r2, [r3, #112]	; 0x70
    p->pping = mx_wifi_ping;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	4a31      	ldr	r2, [pc, #196]	; (8012aa0 <mx_wifi_if_init+0x174>)
 80129dc:	675a      	str	r2, [r3, #116]	; 0x74

#endif /* MX_WIFI_NETWORK_BYPASS_MODE */


    /* wifi function */
    ptmp = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 80129de:	202c      	movs	r0, #44	; 0x2c
 80129e0:	f000 febe 	bl	8013760 <malloc>
 80129e4:	4603      	mov	r3, r0
 80129e6:	613b      	str	r3, [r7, #16]
    if (NULL == ptmp)
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d106      	bne.n	80129fc <mx_wifi_if_init+0xd0>
    {
      NET_DBG_ERROR("can't allocate memory for mx_wifi_driver class\n");
      NET_FREE(p);
 80129ee:	68f8      	ldr	r0, [r7, #12]
 80129f0:	f000 febe 	bl	8013770 <free>
      ret = NET_ERROR_NO_MEMORY;
 80129f4:	f06f 0307 	mvn.w	r3, #7
 80129f8:	617b      	str	r3, [r7, #20]
 80129fa:	e01e      	b.n	8012a3a <mx_wifi_if_init+0x10e>
    }
    else
    {
      p->extension.wifi = (net_if_wifi_class_extension_t *)ptmp;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	693a      	ldr	r2, [r7, #16]
 8012a00:	679a      	str	r2, [r3, #120]	; 0x78
      /* dhcp mode */
      pnetif->dhcp_mode = true;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2201      	movs	r2, #1
 8012a06:	f883 2020 	strb.w	r2, [r3, #32]
      pnetif->pdrv = p;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
      /* scan function */
      p->extension.wifi->scan = mx_wifi_scan;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a16:	4a23      	ldr	r2, [pc, #140]	; (8012aa4 <mx_wifi_if_init+0x178>)
 8012a18:	601a      	str	r2, [r3, #0]
      p->extension.wifi->get_scan_results = mx_wifi_get_scan_result;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a1e:	4a22      	ldr	r2, [pc, #136]	; (8012aa8 <mx_wifi_if_init+0x17c>)
 8012a20:	605a      	str	r2, [r3, #4]
      p->extension.wifi->mode = NET_WIFI_MODE_STA;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a26:	2200      	movs	r2, #0
 8012a28:	771a      	strb	r2, [r3, #28]

      ret = hw_start(pnetif);
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f000 f884 	bl	8012b38 <hw_start>
 8012a30:	6178      	str	r0, [r7, #20]
 8012a32:	e002      	b.n	8012a3a <mx_wifi_if_init+0x10e>
    }
  }
  else
  {
    NET_DBG_ERROR("can't allocate memory for mx_wifi_driver class\n");
    ret = NET_ERROR_NO_MEMORY;
 8012a34:	f06f 0307 	mvn.w	r3, #7
 8012a38:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8012a3a:	697b      	ldr	r3, [r7, #20]
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3718      	adds	r7, #24
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	0801292d 	.word	0x0801292d
 8012a48:	08012aad 	.word	0x08012aad
 8012a4c:	08012b07 	.word	0x08012b07
 8012a50:	08012c65 	.word	0x08012c65
 8012a54:	08012cd5 	.word	0x08012cd5
 8012a58:	0801309b 	.word	0x0801309b
 8012a5c:	0801307d 	.word	0x0801307d
 8012a60:	08013329 	.word	0x08013329
 8012a64:	080133bb 	.word	0x080133bb
 8012a68:	08013409 	.word	0x08013409
 8012a6c:	0801342f 	.word	0x0801342f
 8012a70:	0801346b 	.word	0x0801346b
 8012a74:	080134f3 	.word	0x080134f3
 8012a78:	08013523 	.word	0x08013523
 8012a7c:	08013567 	.word	0x08013567
 8012a80:	080135c3 	.word	0x080135c3
 8012a84:	08013353 	.word	0x08013353
 8012a88:	08013387 	.word	0x08013387
 8012a8c:	080136b1 	.word	0x080136b1
 8012a90:	080136df 	.word	0x080136df
 8012a94:	080134cd 	.word	0x080134cd
 8012a98:	080134a7 	.word	0x080134a7
 8012a9c:	08013621 	.word	0x08013621
 8012aa0:	08013665 	.word	0x08013665
 8012aa4:	080131bb 	.word	0x080131bb
 8012aa8:	080131f9 	.word	0x080131f9

08012aac <mx_wifi_if_deinit>:
  * @brief                   mxchip wifi driver interface deinit
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_deinit(net_if_handle_t *pnetif)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  int32_t ret = NET_OK;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	60fb      	str	r3, [r7, #12]
  MX_WIFIObject_t  *pMxWifiObj = wifi_obj_get();
 8012ab8:	f7f0 fe58 	bl	800376c <wifi_obj_get>
 8012abc:	60b8      	str	r0, [r7, #8]

#if (MX_WIFI_NETWORK_BYPASS_MODE == 1)
  (void)MX_WIFI_Network_bypass_mode_set(pMxWifiObj, 0, NULL, NULL);
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */

  if (MX_WIFI_STATUS_OK != MX_WIFI_DeInit(pMxWifiObj))
 8012abe:	68b8      	ldr	r0, [r7, #8]
 8012ac0:	f7f4 fbbc 	bl	800723c <MX_WIFI_DeInit>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d002      	beq.n	8012ad0 <mx_wifi_if_deinit+0x24>
  {
    ret = NET_ERROR_GENERIC;
 8012aca:	f06f 031c 	mvn.w	r3, #28
 8012ace:	60fb      	str	r3, [r7, #12]
  }
  NET_FREE(pnetif->pdrv->extension.wifi);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 fe49 	bl	8013770 <free>
  pnetif->pdrv->extension.wifi = NULL;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	679a      	str	r2, [r3, #120]	; 0x78
  NET_FREE(pnetif->pdrv);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012aee:	4618      	mov	r0, r3
 8012af0:	f000 fe3e 	bl	8013770 <free>
  pnetif->pdrv = NULL;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2200      	movs	r2, #0
 8012af8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  return ret;
 8012afc:	68fb      	ldr	r3, [r7, #12]
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3710      	adds	r7, #16
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}

08012b06 <mx_wifi_if_start>:
  * @brief                   mxchip wifi driver start
  * @param  pnetif           net interface pointer
  * @return int32_t          0 is success, otherwise failed
  */
static int32_t mx_wifi_if_start(net_if_handle_t *pnetif)
{
 8012b06:	b580      	push	{r7, lr}
 8012b08:	b084      	sub	sp, #16
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b16:	7f1b      	ldrb	r3, [r3, #28]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d104      	bne.n	8012b26 <mx_wifi_if_start+0x20>
  {
    ret =  mx_wifi_if_start_station(pnetif);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 f99b 	bl	8012e58 <mx_wifi_if_start_station>
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	e003      	b.n	8012b2e <mx_wifi_if_start+0x28>
  }
  else
  {
    ret =  mx_wifi_if_start_softap(pnetif);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 f9ee 	bl	8012f08 <mx_wifi_if_start_softap>
 8012b2c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <hw_start>:


static int32_t hw_start(net_if_handle_t *pnetif)
{
 8012b38:	b5b0      	push	{r4, r5, r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  MX_WIFIObject_t *pMxWifiObj;

  if (mxwifi_probe(&pnetif->pdrv->context) == NET_OK)
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012b46:	3330      	adds	r3, #48	; 0x30
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7f0 fde7 	bl	800371c <mxwifi_probe>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d17f      	bne.n	8012c54 <hw_start+0x11c>
  {
    DEBUG_LOG("MX_WIFI IO [OK]\r\n");
    pMxWifiObj = wifi_obj_get();
 8012b54:	f7f0 fe0a 	bl	800376c <wifi_obj_get>
 8012b58:	60b8      	str	r0, [r7, #8]

    if (pMxWifiObj->Runtime.interfaces == 0U)
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d104      	bne.n	8012b6e <hw_start+0x36>
    {
      /* wifi module hardware reboot */
      DEBUG_LOG("MX_WIFI REBOOT(HW) ...\r\n");
      ret = MX_WIFI_HardResetModule(pMxWifiObj);
 8012b64:	68b8      	ldr	r0, [r7, #8]
 8012b66:	f7f4 fabd 	bl	80070e4 <MX_WIFI_HardResetModule>
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	e001      	b.n	8012b72 <hw_start+0x3a>
    }
    else
    {
      ret = MX_WIFI_STATUS_OK;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	60fb      	str	r3, [r7, #12]
    }
    if (MX_WIFI_STATUS_OK != ret)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d003      	beq.n	8012b80 <hw_start+0x48>
    {
      ret = NET_ERROR_DEVICE_ERROR;
 8012b78:	f06f 030c 	mvn.w	r3, #12
 8012b7c:	60fb      	str	r3, [r7, #12]
 8012b7e:	e06c      	b.n	8012c5a <hw_start+0x122>
    else
    {
      /* wait for mxchip wifi reboot */

      /* Init the WiFi module */
      if (MX_WIFI_STATUS_OK != MX_WIFI_Init(pMxWifiObj))
 8012b80:	68b8      	ldr	r0, [r7, #8]
 8012b82:	f7f4 facf 	bl	8007124 <MX_WIFI_Init>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d003      	beq.n	8012b94 <hw_start+0x5c>
      {
        ret = NET_ERROR_INTERFACE_FAILURE;
 8012b8c:	f06f 0310 	mvn.w	r3, #16
 8012b90:	60fb      	str	r3, [r7, #12]
 8012b92:	e062      	b.n	8012c5a <hw_start+0x122>
      }
      else
      {
        DEBUG_LOG("MX_WIFI_Init [OK]\r\n");
        /* Retrieve the WiFi module information */
        (void)strncpy(pnetif->DeviceName, (char_t *)pMxWifiObj->SysInfo.Product_Name,
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f103 0425 	add.w	r4, r3, #37	; 0x25
 8012b9a:	68bb      	ldr	r3, [r7, #8]
 8012b9c:	f103 0514 	add.w	r5, r3, #20
                      MIN(strlen((char_t *)pMxWifiObj->SysInfo.Product_Name) + 1, (uint32_t) NET_DEVICE_NAME_LEN));
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	3314      	adds	r3, #20
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7ed fb71 	bl	800028c <strlen>
 8012baa:	4603      	mov	r3, r0
 8012bac:	3301      	adds	r3, #1
        (void)strncpy(pnetif->DeviceName, (char_t *)pMxWifiObj->SysInfo.Product_Name,
 8012bae:	2b3f      	cmp	r3, #63	; 0x3f
 8012bb0:	d807      	bhi.n	8012bc2 <hw_start+0x8a>
                      MIN(strlen((char_t *)pMxWifiObj->SysInfo.Product_Name) + 1, (uint32_t) NET_DEVICE_NAME_LEN));
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	3314      	adds	r3, #20
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ed fb68 	bl	800028c <strlen>
 8012bbc:	4603      	mov	r3, r0
        (void)strncpy(pnetif->DeviceName, (char_t *)pMxWifiObj->SysInfo.Product_Name,
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	e000      	b.n	8012bc4 <hw_start+0x8c>
 8012bc2:	2340      	movs	r3, #64	; 0x40
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	4629      	mov	r1, r5
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f001 fe4c 	bl	8014866 <strncpy>
        (void)strncpy(pnetif->DeviceID, (char_t *)pMxWifiObj->SysInfo.Product_ID,
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f103 0465 	add.w	r4, r3, #101	; 0x65
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	f103 0534 	add.w	r5, r3, #52	; 0x34
                      MIN(strlen((char_t *)pMxWifiObj->SysInfo.Product_ID) + 1, (uint32_t) NET_DEVICE_ID_LEN));
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	3334      	adds	r3, #52	; 0x34
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ed fb54 	bl	800028c <strlen>
 8012be4:	4603      	mov	r3, r0
 8012be6:	3301      	adds	r3, #1
        (void)strncpy(pnetif->DeviceID, (char_t *)pMxWifiObj->SysInfo.Product_ID,
 8012be8:	2b3f      	cmp	r3, #63	; 0x3f
 8012bea:	d807      	bhi.n	8012bfc <hw_start+0xc4>
                      MIN(strlen((char_t *)pMxWifiObj->SysInfo.Product_ID) + 1, (uint32_t) NET_DEVICE_ID_LEN));
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	3334      	adds	r3, #52	; 0x34
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7ed fb4b 	bl	800028c <strlen>
 8012bf6:	4603      	mov	r3, r0
        (void)strncpy(pnetif->DeviceID, (char_t *)pMxWifiObj->SysInfo.Product_ID,
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	e000      	b.n	8012bfe <hw_start+0xc6>
 8012bfc:	2340      	movs	r3, #64	; 0x40
 8012bfe:	461a      	mov	r2, r3
 8012c00:	4629      	mov	r1, r5
 8012c02:	4620      	mov	r0, r4
 8012c04:	f001 fe2f 	bl	8014866 <strncpy>
        (void)strncpy(pnetif->DeviceVer, (char_t *)pMxWifiObj->SysInfo.FW_Rev,
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f103 04a5 	add.w	r4, r3, #165	; 0xa5
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	f103 0554 	add.w	r5, r3, #84	; 0x54
                      MIN(strlen((char_t *)pMxWifiObj->SysInfo.FW_Rev) + 1, (uint32_t) NET_DEVICE_VER_LEN));
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	3354      	adds	r3, #84	; 0x54
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7ed fb37 	bl	800028c <strlen>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	3301      	adds	r3, #1
        (void)strncpy(pnetif->DeviceVer, (char_t *)pMxWifiObj->SysInfo.FW_Rev,
 8012c22:	2b3f      	cmp	r3, #63	; 0x3f
 8012c24:	d807      	bhi.n	8012c36 <hw_start+0xfe>
                      MIN(strlen((char_t *)pMxWifiObj->SysInfo.FW_Rev) + 1, (uint32_t) NET_DEVICE_VER_LEN));
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	3354      	adds	r3, #84	; 0x54
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7ed fb2e 	bl	800028c <strlen>
 8012c30:	4603      	mov	r3, r0
        (void)strncpy(pnetif->DeviceVer, (char_t *)pMxWifiObj->SysInfo.FW_Rev,
 8012c32:	3301      	adds	r3, #1
 8012c34:	e000      	b.n	8012c38 <hw_start+0x100>
 8012c36:	2340      	movs	r3, #64	; 0x40
 8012c38:	461a      	mov	r2, r3
 8012c3a:	4629      	mov	r1, r5
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f001 fe12 	bl	8014866 <strncpy>

        (void)MX_WIFI_GetMACAddress(pMxWifiObj, pnetif->macaddr.mac);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	33e5      	adds	r3, #229	; 0xe5
 8012c46:	4619      	mov	r1, r3
 8012c48:	68b8      	ldr	r0, [r7, #8]
 8012c4a:	f7f4 fb3d 	bl	80072c8 <MX_WIFI_GetMACAddress>
          ret = NET_ERROR_MODULE_INITIALIZATION;
        }
        else
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */
        {
          ret = NET_OK;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	60fb      	str	r3, [r7, #12]
 8012c52:	e002      	b.n	8012c5a <hw_start+0x122>
      }
    }
  }
  else
  {
    ret = NET_ERROR_DEVICE_ERROR;
 8012c54:	f06f 030c 	mvn.w	r3, #12
 8012c58:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bdb0      	pop	{r4, r5, r7, pc}

08012c64 <mx_wifi_if_stop>:
  * @brief                   mxchip wifi driver interface stop
  * @param  pnetif           net interface pointer
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_stop(net_if_handle_t *pnetif)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8012c6c:	f7f0 fd7e 	bl	800376c <wifi_obj_get>
 8012c70:	60f8      	str	r0, [r7, #12]
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c7a:	7f1b      	ldrb	r3, [r3, #28]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d118      	bne.n	8012cb2 <mx_wifi_if_stop+0x4e>
  {
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c88:	699b      	ldr	r3, [r3, #24]
 8012c8a:	689b      	ldr	r3, [r3, #8]
 8012c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012c90:	d008      	beq.n	8012ca4 <mx_wifi_if_stop+0x40>
        ((int32_t)NET_WIFI_SM_WPS_SECURE == pnetif->pdrv->extension.wifi->credentials->security_mode))
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c9a:	699b      	ldr	r3, [r3, #24]
 8012c9c:	689b      	ldr	r3, [r3, #8]
    if (((int32_t)NET_WIFI_SM_WPS_OPEN == pnetif->pdrv->extension.wifi->credentials->security_mode) || \
 8012c9e:	4a0c      	ldr	r2, [pc, #48]	; (8012cd0 <mx_wifi_if_stop+0x6c>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d102      	bne.n	8012caa <mx_wifi_if_stop+0x46>
    {
      (void)MX_WIFI_WPS_Stop(pMxWifiObj);
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f7f4 fdbd 	bl	8007824 <MX_WIFI_WPS_Stop>
    }
    (void)MX_WIFI_Disconnect(pMxWifiObj);
 8012caa:	68f8      	ldr	r0, [r7, #12]
 8012cac:	f7f4 fd7d 	bl	80077aa <MX_WIFI_Disconnect>
 8012cb0:	e002      	b.n	8012cb8 <mx_wifi_if_stop+0x54>
  }
  else
  {
    (void)MX_WIFI_StopAP(pMxWifiObj);
 8012cb2:	68f8      	ldr	r0, [r7, #12]
 8012cb4:	f7f4 fe96 	bl	80079e4 <MX_WIFI_StopAP>
  }

  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8012cb8:	2106      	movs	r1, #6
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7ff fdbe 	bl	801283c <net_state_manage_event>
  ret = NET_OK;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	60bb      	str	r3, [r7, #8]

  return ret;
 8012cc4:	68bb      	ldr	r3, [r7, #8]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	10000004 	.word	0x10000004

08012cd4 <mx_wifi_if_yield>:
  * @param  pnetif           net interface
  * @param  timeout          timeout in ms
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_yield(net_if_handle_t *pnetif, uint32_t timeout)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8012cde:	f7f0 fd45 	bl	800376c <wifi_obj_get>
 8012ce2:	60f8      	str	r0, [r7, #12]

  (void)pnetif;
  ret = MX_WIFI_IO_YIELD(pMxWifiObj, timeout);
 8012ce4:	6839      	ldr	r1, [r7, #0]
 8012ce6:	68f8      	ldr	r0, [r7, #12]
 8012ce8:	f7f4 fadc 	bl	80072a4 <MX_WIFI_IO_YIELD>
 8012cec:	60b8      	str	r0, [r7, #8]

  return ret;
 8012cee:	68bb      	ldr	r3, [r7, #8]
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3710      	adds	r7, #16
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <mx_wifi_status_changed>:
  * @param  cate             status cate
  * @param  status           status
  * @param  arg              user arguments
  */
static void mx_wifi_status_changed(uint8_t cate, uint8_t status, void *arg)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b086      	sub	sp, #24
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	4603      	mov	r3, r0
 8012d00:	603a      	str	r2, [r7, #0]
 8012d02:	71fb      	strb	r3, [r7, #7]
 8012d04:	460b      	mov	r3, r1
 8012d06:	71bb      	strb	r3, [r7, #6]
  net_if_handle_t *pnetif;
  net_state_t net_state;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8012d08:	f7f0 fd30 	bl	800376c <wifi_obj_get>
 8012d0c:	6178      	str	r0, [r7, #20]
 8012d0e:	683b      	ldr	r3, [r7, #0]

  (void)memcpy((void *) &pnetif, (void *) &arg, sizeof(pnetif));
 8012d10:	613b      	str	r3, [r7, #16]


  (void) net_if_getState(pnetif, &net_state);
 8012d12:	693b      	ldr	r3, [r7, #16]
 8012d14:	f107 020f 	add.w	r2, r7, #15
 8012d18:	4611      	mov	r1, r2
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7fe fffc 	bl	8011d18 <net_if_getState>

  if ((uint8_t)MC_STATION == cate)
 8012d20:	79fb      	ldrb	r3, [r7, #7]
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d167      	bne.n	8012df6 <mx_wifi_status_changed+0xfe>
  {
    switch (status)
 8012d26:	79bb      	ldrb	r3, [r7, #6]
 8012d28:	2b03      	cmp	r3, #3
 8012d2a:	d01f      	beq.n	8012d6c <mx_wifi_status_changed+0x74>
 8012d2c:	2b03      	cmp	r3, #3
 8012d2e:	f300 808c 	bgt.w	8012e4a <mx_wifi_status_changed+0x152>
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d002      	beq.n	8012d3c <mx_wifi_status_changed+0x44>
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	d012      	beq.n	8012d60 <mx_wifi_status_changed+0x68>
        (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
#endif  /* MX_WIFI_NETWORK_BYPASS_MODE */
        break;

      default:
        break;
 8012d3a:	e086      	b.n	8012e4a <mx_wifi_status_changed+0x152>
        if (NET_STATE_STOPPING == net_state)
 8012d3c:	7bfb      	ldrb	r3, [r7, #15]
 8012d3e:	2b06      	cmp	r3, #6
 8012d40:	d105      	bne.n	8012d4e <mx_wifi_status_changed+0x56>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	2106      	movs	r1, #6
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7ff fd78 	bl	801283c <net_state_manage_event>
        break;
 8012d4c:	e07f      	b.n	8012e4e <mx_wifi_status_changed+0x156>
        else if (NET_STATE_CONNECTED == net_state)
 8012d4e:	7bfb      	ldrb	r3, [r7, #15]
 8012d50:	2b05      	cmp	r3, #5
 8012d52:	d17c      	bne.n	8012e4e <mx_wifi_status_changed+0x156>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	2109      	movs	r1, #9
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7ff fd6f 	bl	801283c <net_state_manage_event>
        break;
 8012d5e:	e076      	b.n	8012e4e <mx_wifi_status_changed+0x156>
        (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	2107      	movs	r1, #7
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7ff fd69 	bl	801283c <net_state_manage_event>
        break;
 8012d6a:	e071      	b.n	8012e50 <mx_wifi_status_changed+0x158>
        pnetif->ipaddr.addr = NET_ARTON(pMxWifiObj->NetSettings.IP_Addr);
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8012d72:	061a      	lsls	r2, r3, #24
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8012d7a:	041b      	lsls	r3, r3, #16
 8012d7c:	431a      	orrs	r2, r3
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8012d84:	021b      	lsls	r3, r3, #8
 8012d86:	431a      	orrs	r2, r3
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 8012d8e:	4619      	mov	r1, r3
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	430a      	orrs	r2, r1
 8012d94:	605a      	str	r2, [r3, #4]
        pnetif->netmask.addr = NET_ARTON(pMxWifiObj->NetSettings.IP_Mask);
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8012d9c:	061a      	lsls	r2, r3, #24
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8012da4:	041b      	lsls	r3, r3, #16
 8012da6:	431a      	orrs	r2, r3
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8012dae:	021b      	lsls	r3, r3, #8
 8012db0:	431a      	orrs	r2, r3
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8012db8:	4619      	mov	r1, r3
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	430a      	orrs	r2, r1
 8012dbe:	60da      	str	r2, [r3, #12]
        pnetif->gateway.addr = NET_ARTON(pMxWifiObj->NetSettings.Gateway_Addr);
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8012dc6:	061a      	lsls	r2, r3, #24
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8012dce:	041b      	lsls	r3, r3, #16
 8012dd0:	431a      	orrs	r2, r3
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8012dd8:	021b      	lsls	r3, r3, #8
 8012dda:	431a      	orrs	r2, r3
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8012de2:	4619      	mov	r1, r3
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	430a      	orrs	r2, r1
 8012de8:	609a      	str	r2, [r3, #8]
        (void)net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	210a      	movs	r1, #10
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7ff fd24 	bl	801283c <net_state_manage_event>
        break;
 8012df4:	e02c      	b.n	8012e50 <mx_wifi_status_changed+0x158>
    }
  }
  else if ((uint8_t)MC_SOFTAP == cate)
 8012df6:	79fb      	ldrb	r3, [r7, #7]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d129      	bne.n	8012e50 <mx_wifi_status_changed+0x158>
  {
    switch (status)
 8012dfc:	79bb      	ldrb	r3, [r7, #6]
 8012dfe:	2b04      	cmp	r3, #4
 8012e00:	d002      	beq.n	8012e08 <mx_wifi_status_changed+0x110>
 8012e02:	2b05      	cmp	r3, #5
 8012e04:	d00f      	beq.n	8012e26 <mx_wifi_status_changed+0x12e>
#endif /* NET_USE_LWIP_DEFINITIONS */
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
        break;

      default:
        break;
 8012e06:	e023      	b.n	8012e50 <mx_wifi_status_changed+0x158>
        if (NET_STATE_CONNECTED == net_state)
 8012e08:	7bfb      	ldrb	r3, [r7, #15]
 8012e0a:	2b05      	cmp	r3, #5
 8012e0c:	d105      	bne.n	8012e1a <mx_wifi_status_changed+0x122>
          (void)net_state_manage_event(pnetif, NET_EVENT_LINK_DOWN);
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	2109      	movs	r1, #9
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff fd12 	bl	801283c <net_state_manage_event>
        break;
 8012e18:	e01a      	b.n	8012e50 <mx_wifi_status_changed+0x158>
          (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	2107      	movs	r1, #7
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff fd0c 	bl	801283c <net_state_manage_event>
        break;
 8012e24:	e014      	b.n	8012e50 <mx_wifi_status_changed+0x158>
        pnetif->ipaddr.addr = pnetif->static_ipaddr.addr;
 8012e26:	693a      	ldr	r2, [r7, #16]
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	6912      	ldr	r2, [r2, #16]
 8012e2c:	605a      	str	r2, [r3, #4]
        pnetif->gateway.addr = pnetif->static_gateway.addr;
 8012e2e:	693a      	ldr	r2, [r7, #16]
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	6952      	ldr	r2, [r2, #20]
 8012e34:	609a      	str	r2, [r3, #8]
        pnetif->netmask.addr = pnetif->static_netmask.addr;
 8012e36:	693a      	ldr	r2, [r7, #16]
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	6992      	ldr	r2, [r2, #24]
 8012e3c:	60da      	str	r2, [r3, #12]
        (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	2107      	movs	r1, #7
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff fcfa 	bl	801283c <net_state_manage_event>
        break;
 8012e48:	e002      	b.n	8012e50 <mx_wifi_status_changed+0x158>
        break;
 8012e4a:	bf00      	nop
 8012e4c:	e000      	b.n	8012e50 <mx_wifi_status_changed+0x158>
        break;
 8012e4e:	bf00      	nop
  }
  else
  {
    /* nothing */
  }
}
 8012e50:	bf00      	nop
 8012e52:	3718      	adds	r7, #24
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <mx_wifi_if_start_station>:
  * @brief                   mxchip wifi connect to AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_station(net_if_handle_t *pnetif)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b086      	sub	sp, #24
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  MX_WIFI_SecurityType_t secure_type;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8012e60:	f7f0 fc84 	bl	800376c <wifi_obj_get>
 8012e64:	6138      	str	r0, [r7, #16]
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e6e:	699b      	ldr	r3, [r3, #24]
 8012e70:	60fb      	str	r3, [r7, #12]

  if (false == pnetif->dhcp_mode)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e78:	f083 0301 	eor.w	r3, r3, #1
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d016      	beq.n	8012eb0 <mx_wifi_if_start_station+0x58>
  {
    pMxWifiObj->NetSettings.DHCP_IsEnabled = 0;
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	2200      	movs	r2, #0
 8012e86:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
    (void)memcpy(pMxWifiObj->NetSettings.IP6_Addr[0], &(pnetif->static_ipaddr.u_addr.ip6), 16);
    (void)memcpy(pMxWifiObj->NetSettings.IP6_Mask, &(pnetif->static_netmask.u_addr.ip6), 16);
    (void)memcpy(pMxWifiObj->NetSettings.Gateway6_Addr, &(pnetif->static_gateway.u_addr.ip6), 16);
#else
    /* ipv4 */
    (void)memcpy(pMxWifiObj->NetSettings.IP_Addr, &(pnetif->static_ipaddr), 4);
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	33d9      	adds	r3, #217	; 0xd9
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	3210      	adds	r2, #16
 8012e92:	6812      	ldr	r2, [r2, #0]
 8012e94:	601a      	str	r2, [r3, #0]
    (void)memcpy(pMxWifiObj->NetSettings.IP_Mask, &(pnetif->static_netmask), 4);
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	33dd      	adds	r3, #221	; 0xdd
 8012e9a:	687a      	ldr	r2, [r7, #4]
 8012e9c:	3218      	adds	r2, #24
 8012e9e:	6812      	ldr	r2, [r2, #0]
 8012ea0:	601a      	str	r2, [r3, #0]
    (void)memcpy(pMxWifiObj->NetSettings.Gateway_Addr, &(pnetif->static_gateway), 4);
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	33e1      	adds	r3, #225	; 0xe1
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	3214      	adds	r2, #20
 8012eaa:	6812      	ldr	r2, [r2, #0]
 8012eac:	601a      	str	r2, [r3, #0]
 8012eae:	e003      	b.n	8012eb8 <mx_wifi_if_start_station+0x60>
#endif /* NET_USE_IPV6 */
  }
  else
  {
    pMxWifiObj->NetSettings.DHCP_IsEnabled = 1;
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
  }

  (void)MX_WIFI_RegisterStatusCallback(pMxWifiObj, mx_wifi_status_changed, pnetif);
 8012eb8:	687a      	ldr	r2, [r7, #4]
 8012eba:	4911      	ldr	r1, [pc, #68]	; (8012f00 <mx_wifi_if_start_station+0xa8>)
 8012ebc:	6938      	ldr	r0, [r7, #16]
 8012ebe:	f7f4 faaf 	bl	8007420 <MX_WIFI_RegisterStatusCallback>

  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	689b      	ldr	r3, [r3, #8]
 8012ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012eca:	d004      	beq.n	8012ed6 <mx_wifi_if_start_station+0x7e>
      ((int32_t)NET_WIFI_SM_WPS_SECURE == credentials->security_mode))
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	689b      	ldr	r3, [r3, #8]
  if (((int32_t)NET_WIFI_SM_WPS_OPEN == credentials->security_mode) || \
 8012ed0:	4a0c      	ldr	r2, [pc, #48]	; (8012f04 <mx_wifi_if_start_station+0xac>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d104      	bne.n	8012ee0 <mx_wifi_if_start_station+0x88>
  {
    ret = MX_WIFI_WPS_Connect(pMxWifiObj);
 8012ed6:	6938      	ldr	r0, [r7, #16]
 8012ed8:	f7f4 fc96 	bl	8007808 <MX_WIFI_WPS_Connect>
 8012edc:	6178      	str	r0, [r7, #20]
 8012ede:	e00a      	b.n	8012ef6 <mx_wifi_if_start_station+0x9e>
  }
  else
  {
    /* NOTE: secure type is auto for mxchip wifi */
    secure_type = MX_WIFI_SEC_AUTO;
 8012ee0:	2307      	movs	r3, #7
 8012ee2:	72fb      	strb	r3, [r7, #11]
    ret = MX_WIFI_Connect(pMxWifiObj, credentials->ssid, credentials->psk, secure_type);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	6819      	ldr	r1, [r3, #0]
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	685a      	ldr	r2, [r3, #4]
 8012eec:	7afb      	ldrb	r3, [r7, #11]
 8012eee:	6938      	ldr	r0, [r7, #16]
 8012ef0:	f7f4 fb3c 	bl	800756c <MX_WIFI_Connect>
 8012ef4:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8012ef6:	697b      	ldr	r3, [r7, #20]
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3718      	adds	r7, #24
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	08012cf9 	.word	0x08012cf9
 8012f04:	10000004 	.word	0x10000004

08012f08 <mx_wifi_if_start_softap>:
  * @brief                   mxchip wifi start AP mode
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_start_softap(net_if_handle_t *pnetif)
{
 8012f08:	b5b0      	push	{r4, r5, r7, lr}
 8012f0a:	b0b0      	sub	sp, #192	; 0xc0
 8012f0c:	af02      	add	r7, sp, #8
 8012f0e:	6078      	str	r0, [r7, #4]
#if NET_USE_IPV6
  /* this is independent of what is supported by IP stack IPv6 or Ipv4 */
  return NET_ERROR_UNSUPPORTED;
#else
  int32_t ret = NET_ERROR_GENERIC;
 8012f10:	f06f 031c 	mvn.w	r3, #28
 8012f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  MX_WIFI_APSettings_t ap_cfg;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8012f18:	f7f0 fc28 	bl	800376c <wifi_obj_get>
 8012f1c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f28:	699b      	ldr	r3, [r3, #24]
 8012f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  (void) memset(&ap_cfg, 0, sizeof(ap_cfg));
 8012f2e:	f107 0308 	add.w	r3, r7, #8
 8012f32:	22a3      	movs	r2, #163	; 0xa3
 8012f34:	2100      	movs	r1, #0
 8012f36:	4618      	mov	r0, r3
 8012f38:	f000 fc3f 	bl	80137ba <memset>

  if (credentials != NULL)
 8012f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d012      	beq.n	8012f6a <mx_wifi_if_start_softap+0x62>
  {
    (void) strcpy(ap_cfg.SSID, credentials->ssid);
 8012f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012f48:	681a      	ldr	r2, [r3, #0]
 8012f4a:	f107 0308 	add.w	r3, r7, #8
 8012f4e:	4611      	mov	r1, r2
 8012f50:	4618      	mov	r0, r3
 8012f52:	f001 fc6c 	bl	801482e <strcpy>
    (void) strcpy(ap_cfg.pswd, credentials->psk);
 8012f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012f5a:	685a      	ldr	r2, [r3, #4]
 8012f5c:	f107 0308 	add.w	r3, r7, #8
 8012f60:	3321      	adds	r3, #33	; 0x21
 8012f62:	4611      	mov	r1, r2
 8012f64:	4618      	mov	r0, r3
 8012f66:	f001 fc62 	bl	801482e <strcpy>
  }

  ap_cfg.channel = pnetif->pdrv->extension.wifi->access_channel;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f72:	7f5b      	ldrb	r3, [r3, #29]
 8012f74:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  (void) sprintf(ap_cfg.ip.localip, "%ld.%ld.%ld.%ld", ADDR(pnetif->static_ipaddr.u_addr.ip4.addr));
  (void) sprintf(ap_cfg.ip.gateway, "%ld.%ld.%ld.%ld", ADDR(pnetif->static_gateway.u_addr.ip4.addr));
  (void) sprintf(ap_cfg.ip.netmask, "%ld.%ld.%ld.%ld", ADDR(pnetif->static_netmask.u_addr.ip4.addr));
  (void) sprintf(ap_cfg.ip.dnserver, "%ld.%ld.%ld.%ld", ADDR(pnetif->static_dnserver.u_addr.ip4.addr));
#else
  (void) sprintf(ap_cfg.ip.localip, "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"", ADDR(pnetif->static_ipaddr.addr));
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	691b      	ldr	r3, [r3, #16]
 8012f7c:	b2dc      	uxtb	r4, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	0a1b      	lsrs	r3, r3, #8
 8012f84:	b2dd      	uxtb	r5, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	691b      	ldr	r3, [r3, #16]
 8012f8a:	0c1b      	lsrs	r3, r3, #16
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	6912      	ldr	r2, [r2, #16]
 8012f92:	0e12      	lsrs	r2, r2, #24
 8012f94:	f107 0108 	add.w	r1, r7, #8
 8012f98:	f101 0063 	add.w	r0, r1, #99	; 0x63
 8012f9c:	9201      	str	r2, [sp, #4]
 8012f9e:	9300      	str	r3, [sp, #0]
 8012fa0:	462b      	mov	r3, r5
 8012fa2:	4622      	mov	r2, r4
 8012fa4:	4933      	ldr	r1, [pc, #204]	; (8013074 <mx_wifi_if_start_softap+0x16c>)
 8012fa6:	f001 fc13 	bl	80147d0 <siprintf>
  (void) sprintf(ap_cfg.ip.gateway, "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"", ADDR(pnetif->static_gateway.addr));
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	695b      	ldr	r3, [r3, #20]
 8012fae:	b2dc      	uxtb	r4, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	695b      	ldr	r3, [r3, #20]
 8012fb4:	0a1b      	lsrs	r3, r3, #8
 8012fb6:	b2dd      	uxtb	r5, r3
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	695b      	ldr	r3, [r3, #20]
 8012fbc:	0c1b      	lsrs	r3, r3, #16
 8012fbe:	b2db      	uxtb	r3, r3
 8012fc0:	687a      	ldr	r2, [r7, #4]
 8012fc2:	6952      	ldr	r2, [r2, #20]
 8012fc4:	0e12      	lsrs	r2, r2, #24
 8012fc6:	f107 0108 	add.w	r1, r7, #8
 8012fca:	f101 0083 	add.w	r0, r1, #131	; 0x83
 8012fce:	9201      	str	r2, [sp, #4]
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	462b      	mov	r3, r5
 8012fd4:	4622      	mov	r2, r4
 8012fd6:	4927      	ldr	r1, [pc, #156]	; (8013074 <mx_wifi_if_start_softap+0x16c>)
 8012fd8:	f001 fbfa 	bl	80147d0 <siprintf>
  (void) sprintf(ap_cfg.ip.netmask, "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"", ADDR(pnetif->static_netmask.addr));
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	699b      	ldr	r3, [r3, #24]
 8012fe0:	b2dc      	uxtb	r4, r3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	699b      	ldr	r3, [r3, #24]
 8012fe6:	0a1b      	lsrs	r3, r3, #8
 8012fe8:	b2dd      	uxtb	r5, r3
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	699b      	ldr	r3, [r3, #24]
 8012fee:	0c1b      	lsrs	r3, r3, #16
 8012ff0:	b2db      	uxtb	r3, r3
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	6992      	ldr	r2, [r2, #24]
 8012ff6:	0e12      	lsrs	r2, r2, #24
 8012ff8:	f107 0108 	add.w	r1, r7, #8
 8012ffc:	f101 0073 	add.w	r0, r1, #115	; 0x73
 8013000:	9201      	str	r2, [sp, #4]
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	462b      	mov	r3, r5
 8013006:	4622      	mov	r2, r4
 8013008:	491a      	ldr	r1, [pc, #104]	; (8013074 <mx_wifi_if_start_softap+0x16c>)
 801300a:	f001 fbe1 	bl	80147d0 <siprintf>
  (void) sprintf(ap_cfg.ip.dnserver, "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32"", ADDR(pnetif->static_dnserver.addr));
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	69db      	ldr	r3, [r3, #28]
 8013012:	b2dc      	uxtb	r4, r3
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	69db      	ldr	r3, [r3, #28]
 8013018:	0a1b      	lsrs	r3, r3, #8
 801301a:	b2dd      	uxtb	r5, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	69db      	ldr	r3, [r3, #28]
 8013020:	0c1b      	lsrs	r3, r3, #16
 8013022:	b2db      	uxtb	r3, r3
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	69d2      	ldr	r2, [r2, #28]
 8013028:	0e12      	lsrs	r2, r2, #24
 801302a:	f107 0108 	add.w	r1, r7, #8
 801302e:	f101 0093 	add.w	r0, r1, #147	; 0x93
 8013032:	9201      	str	r2, [sp, #4]
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	462b      	mov	r3, r5
 8013038:	4622      	mov	r2, r4
 801303a:	490e      	ldr	r1, [pc, #56]	; (8013074 <mx_wifi_if_start_softap+0x16c>)
 801303c:	f001 fbc8 	bl	80147d0 <siprintf>
#endif /* NET_USE_LWIP_DEFINITIONS */

  (void)MX_WIFI_RegisterStatusCallback(pMxWifiObj, mx_wifi_status_changed, pnetif);
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	490d      	ldr	r1, [pc, #52]	; (8013078 <mx_wifi_if_start_softap+0x170>)
 8013044:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8013048:	f7f4 f9ea 	bl	8007420 <MX_WIFI_RegisterStatusCallback>

  if (MX_WIFI_STATUS_OK == MX_WIFI_StartAP(pMxWifiObj, &ap_cfg))
 801304c:	f107 0308 	add.w	r3, r7, #8
 8013050:	4619      	mov	r1, r3
 8013052:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8013056:	f7f4 fc57 	bl	8007908 <MX_WIFI_StartAP>
 801305a:	4603      	mov	r3, r0
 801305c:	2b00      	cmp	r3, #0
 801305e:	d102      	bne.n	8013066 <mx_wifi_if_start_softap+0x15e>
  {
    ret = NET_OK;
 8013060:	2300      	movs	r3, #0
 8013062:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  }

  return ret;
 8013066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
#endif /* NET_USE_IPV6 */
}
 801306a:	4618      	mov	r0, r3
 801306c:	37b8      	adds	r7, #184	; 0xb8
 801306e:	46bd      	mov	sp, r7
 8013070:	bdb0      	pop	{r4, r5, r7, pc}
 8013072:	bf00      	nop
 8013074:	08018d64 	.word	0x08018d64
 8013078:	08012cf9 	.word	0x08012cf9

0801307c <mx_wifi_if_disconnect>:
  * @brief                   mxchip wifi disconnect from AP
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_disconnect(net_if_handle_t *pnetif)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
      (void)MX_WIFI_Network_bypass_mode_set(pMxWifiObj, 0, NULL, NULL);
      (void)net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
    }
  }
#else
  ret = NET_OK;
 8013084:	2300      	movs	r3, #0
 8013086:	60fb      	str	r3, [r7, #12]
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8013088:	2107      	movs	r1, #7
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7ff fbd6 	bl	801283c <net_state_manage_event>
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */
  return ret;
 8013090:	68fb      	ldr	r3, [r7, #12]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <mx_wifi_if_connect>:
  * @brief                   mxchip wifi start IP services
  * @param  pnetif           net interface
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_if_connect(net_if_handle_t *pnetif)
{
 801309a:	b590      	push	{r4, r7, lr}
 801309c:	b087      	sub	sp, #28
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
  {
    NET_DBG_ERROR("can't add interface (netif)\n");
  }
#else
  mwifi_if_t wifi_if;
  ret = NET_OK;
 80130a2:	2300      	movs	r3, #0
 80130a4:	617b      	str	r3, [r7, #20]
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_AP)
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80130ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130ae:	7f1b      	ldrb	r3, [r3, #28]
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d102      	bne.n	80130ba <mx_wifi_if_connect+0x20>
  {
    wifi_if = MC_SOFTAP;
 80130b4:	2300      	movs	r3, #0
 80130b6:	74fb      	strb	r3, [r7, #19]
 80130b8:	e001      	b.n	80130be <mx_wifi_if_connect+0x24>
  }
  else
  {
    wifi_if = MC_STATION;
 80130ba:	2301      	movs	r3, #1
 80130bc:	74fb      	strb	r3, [r7, #19]
    NET_DBG_ERROR("can't get ipv6 address!\n");
    ret = NET_ERROR_NO_ADDRESS;
  }
#else
  uint8_t ip[4];
  int32_t retry = 3;
 80130be:	2303      	movs	r3, #3
 80130c0:	60fb      	str	r3, [r7, #12]
  while (retry > 0)
 80130c2:	e072      	b.n	80131aa <mx_wifi_if_connect+0x110>
  {
    retry--;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	3b01      	subs	r3, #1
 80130c8:	60fb      	str	r3, [r7, #12]
    if (MX_WIFI_STATUS_OK == MX_WIFI_GetIPAddress(wifi_obj_get(), &(ip[0]), wifi_if))
 80130ca:	f7f0 fb4f 	bl	800376c <wifi_obj_get>
 80130ce:	7cfa      	ldrb	r2, [r7, #19]
 80130d0:	f107 0308 	add.w	r3, r7, #8
 80130d4:	4619      	mov	r1, r3
 80130d6:	f7f4 fbb3 	bl	8007840 <MX_WIFI_GetIPAddress>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d15d      	bne.n	801319c <mx_wifi_if_connect+0x102>
    {
      pnetif->ipaddr.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Addr);
 80130e0:	f7f0 fb44 	bl	800376c <wifi_obj_get>
 80130e4:	4603      	mov	r3, r0
 80130e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80130ea:	061c      	lsls	r4, r3, #24
 80130ec:	f7f0 fb3e 	bl	800376c <wifi_obj_get>
 80130f0:	4603      	mov	r3, r0
 80130f2:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80130f6:	041b      	lsls	r3, r3, #16
 80130f8:	431c      	orrs	r4, r3
 80130fa:	f7f0 fb37 	bl	800376c <wifi_obj_get>
 80130fe:	4603      	mov	r3, r0
 8013100:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8013104:	021b      	lsls	r3, r3, #8
 8013106:	431c      	orrs	r4, r3
 8013108:	f7f0 fb30 	bl	800376c <wifi_obj_get>
 801310c:	4603      	mov	r3, r0
 801310e:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 8013112:	ea44 0203 	orr.w	r2, r4, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	605a      	str	r2, [r3, #4]
      pnetif->netmask.addr = NET_ARTON(wifi_obj_get()->NetSettings.IP_Mask);
 801311a:	f7f0 fb27 	bl	800376c <wifi_obj_get>
 801311e:	4603      	mov	r3, r0
 8013120:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8013124:	061c      	lsls	r4, r3, #24
 8013126:	f7f0 fb21 	bl	800376c <wifi_obj_get>
 801312a:	4603      	mov	r3, r0
 801312c:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8013130:	041b      	lsls	r3, r3, #16
 8013132:	431c      	orrs	r4, r3
 8013134:	f7f0 fb1a 	bl	800376c <wifi_obj_get>
 8013138:	4603      	mov	r3, r0
 801313a:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 801313e:	021b      	lsls	r3, r3, #8
 8013140:	431c      	orrs	r4, r3
 8013142:	f7f0 fb13 	bl	800376c <wifi_obj_get>
 8013146:	4603      	mov	r3, r0
 8013148:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 801314c:	ea44 0203 	orr.w	r2, r4, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	60da      	str	r2, [r3, #12]
      pnetif->gateway.addr = NET_ARTON(wifi_obj_get()->NetSettings.Gateway_Addr);
 8013154:	f7f0 fb0a 	bl	800376c <wifi_obj_get>
 8013158:	4603      	mov	r3, r0
 801315a:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 801315e:	061c      	lsls	r4, r3, #24
 8013160:	f7f0 fb04 	bl	800376c <wifi_obj_get>
 8013164:	4603      	mov	r3, r0
 8013166:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 801316a:	041b      	lsls	r3, r3, #16
 801316c:	431c      	orrs	r4, r3
 801316e:	f7f0 fafd 	bl	800376c <wifi_obj_get>
 8013172:	4603      	mov	r3, r0
 8013174:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8013178:	021b      	lsls	r3, r3, #8
 801317a:	431c      	orrs	r4, r3
 801317c:	f7f0 faf6 	bl	800376c <wifi_obj_get>
 8013180:	4603      	mov	r3, r0
 8013182:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8013186:	ea44 0203 	orr.w	r2, r4, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	609a      	str	r2, [r3, #8]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 801318e:	210a      	movs	r1, #10
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f7ff fb53 	bl	801283c <net_state_manage_event>
      ret = NET_OK;
 8013196:	2300      	movs	r3, #0
 8013198:	617b      	str	r3, [r7, #20]
      break;
 801319a:	e009      	b.n	80131b0 <mx_wifi_if_connect+0x116>
    }
    else
    {
      ret = NET_ERROR_NO_ADDRESS;
 801319c:	f06f 0306 	mvn.w	r3, #6
 80131a0:	617b      	str	r3, [r7, #20]
#ifdef NET_USE_RTOS
      osDelay(1000);
#else
      HAL_Delay(1000);
 80131a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80131a6:	f7f5 fb7f 	bl	80088a8 <HAL_Delay>
  while (retry > 0)
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	dc89      	bgt.n	80130c4 <mx_wifi_if_connect+0x2a>
    }
  }
#endif  /* NET_USE_IPV6 */
#endif /* MX_WIFI_NETWORK_BYPASS_MODE */

  return ret;
 80131b0:	697b      	ldr	r3, [r7, #20]
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	371c      	adds	r7, #28
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd90      	pop	{r4, r7, pc}

080131ba <mx_wifi_scan>:
  * @param  mode             scan mode
  * @param  ssid             ssid to scan in active mode
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_scan(net_if_handle_t *pnetif, net_wifi_scan_mode_t mode, char *ssid)
{
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b088      	sub	sp, #32
 80131be:	af00      	add	r7, sp, #0
 80131c0:	60f8      	str	r0, [r7, #12]
 80131c2:	460b      	mov	r3, r1
 80131c4:	607a      	str	r2, [r7, #4]
 80131c6:	72fb      	strb	r3, [r7, #11]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 80131c8:	f7f0 fad0 	bl	800376c <wifi_obj_get>
 80131cc:	61b8      	str	r0, [r7, #24]
  uint32_t len = 0u;
 80131ce:	2300      	movs	r3, #0
 80131d0:	61fb      	str	r3, [r7, #28]

  (void) pnetif;

  if (ssid != NULL)
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d003      	beq.n	80131e0 <mx_wifi_scan+0x26>
  {
    len = strlen(ssid);
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7ed f857 	bl	800028c <strlen>
 80131de:	61f8      	str	r0, [r7, #28]
  }
  ret = MX_WIFI_Scan(pMxWifiObj, (uint8_t)mode, ssid, (int32_t) len);
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	7af9      	ldrb	r1, [r7, #11]
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	69b8      	ldr	r0, [r7, #24]
 80131e8:	f7f4 f88b 	bl	8007302 <MX_WIFI_Scan>
 80131ec:	6178      	str	r0, [r7, #20]
  return ret;
 80131ee:	697b      	ldr	r3, [r7, #20]
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	3720      	adds	r7, #32
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}

080131f8 <mx_wifi_get_scan_result>:
  * @param  scan_bss_array_size  bss array size
  * @return int32_t              number of the bss got
  */
static int32_t mx_wifi_get_scan_result(net_if_handle_t *pnetif, net_wifi_scan_results_t *scan_bss_array,
                                       uint8_t scan_bss_array_size)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b08c      	sub	sp, #48	; 0x30
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	4613      	mov	r3, r2
 8013204:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8013206:	f7f0 fab1 	bl	800376c <wifi_obj_get>
 801320a:	61f8      	str	r0, [r7, #28]
  net_wifi_scan_results_t *scan_bss = scan_bss_array;
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	62bb      	str	r3, [r7, #40]	; 0x28
    NET_WIFI_SM_WPA2_TKIP_PSK,  /**< WPA2 /w TKIP */
    NET_WIFI_SM_WPA2_AES_PSK,   /**< WPA2 /w AES */
    NET_WIFI_SM_WPA2_MIXED_PSK  /**< WPA2 /w AES or TKIP */
  };

  if ((NULL == scan_bss_array) || (0u == scan_bss_array_size))
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d002      	beq.n	801321c <mx_wifi_get_scan_result+0x24>
 8013216:	79fb      	ldrb	r3, [r7, #7]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d103      	bne.n	8013224 <mx_wifi_get_scan_result+0x2c>
  {
    ret = NET_ERROR_PARAMETER;
 801321c:	f06f 0303 	mvn.w	r3, #3
 8013220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013222:	e077      	b.n	8013314 <mx_wifi_get_scan_result+0x11c>
  }
  else
  {
    /* create buff for mc_wifi results */
    void *ptmp = NET_MALLOC(sizeof(mwifi_ap_info_t) * scan_bss_array_size);
 8013224:	79fa      	ldrb	r2, [r7, #7]
 8013226:	4613      	mov	r3, r2
 8013228:	005b      	lsls	r3, r3, #1
 801322a:	4413      	add	r3, r2
 801322c:	011b      	lsls	r3, r3, #4
 801322e:	4618      	mov	r0, r3
 8013230:	f000 fa96 	bl	8013760 <malloc>
 8013234:	4603      	mov	r3, r0
 8013236:	61bb      	str	r3, [r7, #24]

    if (NULL == ptmp)
 8013238:	69bb      	ldr	r3, [r7, #24]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d103      	bne.n	8013246 <mx_wifi_get_scan_result+0x4e>
    {
      ret = NET_ERROR_NO_MEMORY;
 801323e:	f06f 0307 	mvn.w	r3, #7
 8013242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013244:	e066      	b.n	8013314 <mx_wifi_get_scan_result+0x11c>
    }
    else
    {
      mwifi_ap_info_t *ap_info;
      mwifi_ap_info_t *const ap_list_head = (mwifi_ap_info_t *)ptmp;
 8013246:	69bb      	ldr	r3, [r7, #24]
 8013248:	617b      	str	r3, [r7, #20]
      ap_info = ap_list_head;
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	627b      	str	r3, [r7, #36]	; 0x24
      (void) memset(ap_list_head, 0, sizeof(mwifi_ap_info_t) * scan_bss_array_size);
 801324e:	79fa      	ldrb	r2, [r7, #7]
 8013250:	4613      	mov	r3, r2
 8013252:	005b      	lsls	r3, r3, #1
 8013254:	4413      	add	r3, r2
 8013256:	011b      	lsls	r3, r3, #4
 8013258:	461a      	mov	r2, r3
 801325a:	2100      	movs	r1, #0
 801325c:	6978      	ldr	r0, [r7, #20]
 801325e:	f000 faac 	bl	80137ba <memset>

      /* get real mc_wifi scan results data */
      const uint8_t number = (uint8_t) MX_WIFI_Get_scan_result(pMxWifiObj, (uint8_t *) ap_info, scan_bss_array_size);
 8013262:	79fb      	ldrb	r3, [r7, #7]
 8013264:	461a      	mov	r2, r3
 8013266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013268:	69f8      	ldr	r0, [r7, #28]
 801326a:	f7f4 f8aa 	bl	80073c2 <MX_WIFI_Get_scan_result>
 801326e:	4603      	mov	r3, r0
 8013270:	74fb      	strb	r3, [r7, #19]

      /* transfer to ST bss info */
      for (uint32_t i = 0U; i < number; i++)
 8013272:	2300      	movs	r3, #0
 8013274:	623b      	str	r3, [r7, #32]
 8013276:	e044      	b.n	8013302 <mx_wifi_get_scan_result+0x10a>
      {
        (void) memset(scan_bss, 0, sizeof(net_wifi_scan_bss_t));
 8013278:	2234      	movs	r2, #52	; 0x34
 801327a:	2100      	movs	r1, #0
 801327c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801327e:	f000 fa9c 	bl	80137ba <memset>
        (void) memcpy(scan_bss->ssid.value, ap_info->ssid, NET_WIFI_MAX_SSID_SIZE);
 8013282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013284:	1c58      	adds	r0, r3, #1
 8013286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013288:	3304      	adds	r3, #4
 801328a:	2220      	movs	r2, #32
 801328c:	4619      	mov	r1, r3
 801328e:	f000 fa87 	bl	80137a0 <memcpy>
        scan_bss->ssid.length = (uint8_t) strlen(ap_info->ssid);
 8013292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013294:	3304      	adds	r3, #4
 8013296:	4618      	mov	r0, r3
 8013298:	f7ec fff8 	bl	800028c <strlen>
 801329c:	4603      	mov	r3, r0
 801329e:	b2da      	uxtb	r2, r3
 80132a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a2:	701a      	strb	r2, [r3, #0]
        scan_bss->security = mxsec[ap_info->security];
 80132a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80132aa:	461a      	mov	r2, r3
 80132ac:	4b1c      	ldr	r3, [pc, #112]	; (8013320 <mx_wifi_get_scan_result+0x128>)
 80132ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80132b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b4:	629a      	str	r2, [r3, #40]	; 0x28
        (void) memcpy(&scan_bss->bssid, ap_info->bssid, NET_WIFI_MAC_ADDRESS_SIZE);
 80132b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b8:	f103 0021 	add.w	r0, r3, #33	; 0x21
 80132bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132be:	3325      	adds	r3, #37	; 0x25
 80132c0:	2206      	movs	r2, #6
 80132c2:	4619      	mov	r1, r3
 80132c4:	f000 fa6c 	bl	80137a0 <memcpy>
        scan_bss->rssi = (int8_t)ap_info->rssi;
 80132c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	b25a      	sxtb	r2, r3
 80132ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        scan_bss->channel = (uint8_t) ap_info->channel;
 80132d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d6:	f8d3 302b 	ldr.w	r3, [r3, #43]	; 0x2b
 80132da:	b2da      	uxtb	r2, r3
 80132dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        (void) memcpy(scan_bss->country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 80132e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e4:	332d      	adds	r3, #45	; 0x2d
 80132e6:	2204      	movs	r2, #4
 80132e8:	490e      	ldr	r1, [pc, #56]	; (8013324 <mx_wifi_get_scan_result+0x12c>)
 80132ea:	4618      	mov	r0, r3
 80132ec:	f000 fa58 	bl	80137a0 <memcpy>

        scan_bss++;
 80132f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f2:	3334      	adds	r3, #52	; 0x34
 80132f4:	62bb      	str	r3, [r7, #40]	; 0x28
        ap_info++;
 80132f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f8:	3330      	adds	r3, #48	; 0x30
 80132fa:	627b      	str	r3, [r7, #36]	; 0x24
      for (uint32_t i = 0U; i < number; i++)
 80132fc:	6a3b      	ldr	r3, [r7, #32]
 80132fe:	3301      	adds	r3, #1
 8013300:	623b      	str	r3, [r7, #32]
 8013302:	7cfb      	ldrb	r3, [r7, #19]
 8013304:	6a3a      	ldr	r2, [r7, #32]
 8013306:	429a      	cmp	r2, r3
 8013308:	d3b6      	bcc.n	8013278 <mx_wifi_get_scan_result+0x80>
      }
      ret = (int32_t) number;
 801330a:	7cfb      	ldrb	r3, [r7, #19]
 801330c:	62fb      	str	r3, [r7, #44]	; 0x2c
      NET_FREE((void *) ap_list_head);
 801330e:	6978      	ldr	r0, [r7, #20]
 8013310:	f000 fa2e 	bl	8013770 <free>
    }
  }
  return ret;
 8013314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013316:	4618      	mov	r0, r3
 8013318:	3730      	adds	r7, #48	; 0x30
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	200000f0 	.word	0x200000f0
 8013324:	08018d74 	.word	0x08018d74

08013328 <mx_wifi_socket>:
  * @param  type             socket type
  * @param  protocol         socket protocol
  * @return int32_t          socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_socket(int32_t domain, int32_t type, int32_t protocol)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
  int32_t ret;
  MX_WIFIObject_t  *pMxWifiObj = wifi_obj_get();
 8013334:	f7f0 fa1a 	bl	800376c <wifi_obj_get>
 8013338:	6178      	str	r0, [r7, #20]

  ret = MX_WIFI_Socket_create(pMxWifiObj, domain, type, protocol);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	68ba      	ldr	r2, [r7, #8]
 801333e:	68f9      	ldr	r1, [r7, #12]
 8013340:	6978      	ldr	r0, [r7, #20]
 8013342:	f7f4 fb7a 	bl	8007a3a <MX_WIFI_Socket_create>
 8013346:	6138      	str	r0, [r7, #16]
  return ret;
 8013348:	693b      	ldr	r3, [r7, #16]
}
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <mx_wifi_setsockopt>:
  * @param  optvalue         socket option value to set
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed, return error code(< 0)
  */
static int32_t mx_wifi_setsockopt(int32_t sock, int32_t level, int32_t optname, const void *optvalue, uint32_t optlen)
{
 8013352:	b580      	push	{r7, lr}
 8013354:	b088      	sub	sp, #32
 8013356:	af02      	add	r7, sp, #8
 8013358:	60f8      	str	r0, [r7, #12]
 801335a:	60b9      	str	r1, [r7, #8]
 801335c:	607a      	str	r2, [r7, #4]
 801335e:	603b      	str	r3, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t  *pMxWifiObj = wifi_obj_get();
 8013360:	f7f0 fa04 	bl	800376c <wifi_obj_get>
 8013364:	6178      	str	r0, [r7, #20]

  ret = MX_WIFI_Socket_setsockopt(pMxWifiObj, sock, level, optname, optvalue, (int32_t)optlen);
 8013366:	6a3b      	ldr	r3, [r7, #32]
 8013368:	9301      	str	r3, [sp, #4]
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	9300      	str	r3, [sp, #0]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	68ba      	ldr	r2, [r7, #8]
 8013372:	68f9      	ldr	r1, [r7, #12]
 8013374:	6978      	ldr	r0, [r7, #20]
 8013376:	f7f4 fb96 	bl	8007aa6 <MX_WIFI_Socket_setsockopt>
 801337a:	6138      	str	r0, [r7, #16]
  return ret;
 801337c:	693b      	ldr	r3, [r7, #16]
}
 801337e:	4618      	mov	r0, r3
 8013380:	3718      	adds	r7, #24
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <mx_wifi_getsockopt>:
  * @param  optvalue         socket option value
  * @param  optlen           socket option value length
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_getsockopt(int32_t sock, int32_t level, int32_t optname, void *optvalue, uint32_t *optlen)
{
 8013386:	b580      	push	{r7, lr}
 8013388:	b088      	sub	sp, #32
 801338a:	af02      	add	r7, sp, #8
 801338c:	60f8      	str	r0, [r7, #12]
 801338e:	60b9      	str	r1, [r7, #8]
 8013390:	607a      	str	r2, [r7, #4]
 8013392:	603b      	str	r3, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8013394:	f7f0 f9ea 	bl	800376c <wifi_obj_get>
 8013398:	6178      	str	r0, [r7, #20]

  ret = MX_WIFI_Socket_getsockopt(pMxWifiObj, sock, level, optname, optvalue, optlen);
 801339a:	6a3b      	ldr	r3, [r7, #32]
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	68ba      	ldr	r2, [r7, #8]
 80133a6:	68f9      	ldr	r1, [r7, #12]
 80133a8:	6978      	ldr	r0, [r7, #20]
 80133aa:	f7f4 fbd2 	bl	8007b52 <MX_WIFI_Socket_getsockopt>
 80133ae:	6138      	str	r0, [r7, #16]
  return ret;
 80133b0:	693b      	ldr	r3, [r7, #16]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3718      	adds	r7, #24
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}

080133ba <mx_wifi_bind>:
  * @param  addr             address to bind
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed, return error code(<0)
  */
static int32_t mx_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 80133ba:	b590      	push	{r4, r7, lr}
 80133bc:	b08b      	sub	sp, #44	; 0x2c
 80133be:	af00      	add	r7, sp, #0
 80133c0:	60f8      	str	r0, [r7, #12]
 80133c2:	60b9      	str	r1, [r7, #8]
 80133c4:	607a      	str	r2, [r7, #4]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 80133c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133ca:	627b      	str	r3, [r7, #36]	; 0x24
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 80133cc:	f7f0 f9ce 	bl	800376c <wifi_obj_get>
 80133d0:	6238      	str	r0, [r7, #32]

  if ((NULL != addr) && (addrlen == sizeof(struct sockaddr)))
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d012      	beq.n	80133fe <mx_wifi_bind+0x44>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2b10      	cmp	r3, #16
 80133dc:	d10f      	bne.n	80133fe <mx_wifi_bind+0x44>
  {
#if NET_USE_IPV6
    ret = MX_WIFI_Socket_bind(pMxWifiObj, sock, (const struct sockaddr *)addr, (int32_t)addrlen);
#else
    struct sockaddr mx_addr;
    (void)memcpy(&mx_addr, addr, sizeof(mx_addr));
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	f107 0410 	add.w	r4, r7, #16
 80133e4:	6818      	ldr	r0, [r3, #0]
 80133e6:	6859      	ldr	r1, [r3, #4]
 80133e8:	689a      	ldr	r2, [r3, #8]
 80133ea:	68db      	ldr	r3, [r3, #12]
 80133ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ret = MX_WIFI_Socket_bind(pMxWifiObj, sock, &mx_addr, (int32_t)addrlen);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f107 0210 	add.w	r2, r7, #16
 80133f4:	68f9      	ldr	r1, [r7, #12]
 80133f6:	6a38      	ldr	r0, [r7, #32]
 80133f8:	f7f4 fc05 	bl	8007c06 <MX_WIFI_Socket_bind>
 80133fc:	6278      	str	r0, [r7, #36]	; 0x24
#endif /* NET_USE_IPV6 */
  }

  return ret;
 80133fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013400:	4618      	mov	r0, r3
 8013402:	372c      	adds	r7, #44	; 0x2c
 8013404:	46bd      	mov	sp, r7
 8013406:	bd90      	pop	{r4, r7, pc}

08013408 <mx_wifi_listen>:
  * @param  sock             socket fd
  * @param  backlog          max socket to accept
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_listen(int32_t sock, int32_t backlog)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8013412:	f7f0 f9ab 	bl	800376c <wifi_obj_get>
 8013416:	60f8      	str	r0, [r7, #12]

  ret = MX_WIFI_Socket_listen(pMxWifiObj, sock, backlog);
 8013418:	683a      	ldr	r2, [r7, #0]
 801341a:	6879      	ldr	r1, [r7, #4]
 801341c:	68f8      	ldr	r0, [r7, #12]
 801341e:	f7f4 fc41 	bl	8007ca4 <MX_WIFI_Socket_listen>
 8013422:	60b8      	str	r0, [r7, #8]
  return ret;
 8013424:	68bb      	ldr	r3, [r7, #8]
}
 8013426:	4618      	mov	r0, r3
 8013428:	3710      	adds	r7, #16
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}

0801342e <mx_wifi_accept>:
  * @param  addr             address buffer to accept new socket
  * @param  addrlen          address buffer length
  * @return int32_t          accepted socket fd, if failed return error code(<0)
  */
static int32_t mx_wifi_accept(int32_t sock, net_sockaddr_t *addr, uint32_t *addrlen)
{
 801342e:	b590      	push	{r4, r7, lr}
 8013430:	b08b      	sub	sp, #44	; 0x2c
 8013432:	af00      	add	r7, sp, #0
 8013434:	60f8      	str	r0, [r7, #12]
 8013436:	60b9      	str	r1, [r7, #8]
 8013438:	607a      	str	r2, [r7, #4]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 801343a:	f7f0 f997 	bl	800376c <wifi_obj_get>
 801343e:	6278      	str	r0, [r7, #36]	; 0x24

#if NET_USE_IPV6
  ret = MX_WIFI_Socket_accept(pMxWifiObj, sock, (struct sockaddr *)addr, addrlen);
#else
  struct sockaddr mx_addr;
  (void)memcpy(&mx_addr, addr, sizeof(mx_addr));
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	f107 0410 	add.w	r4, r7, #16
 8013446:	6818      	ldr	r0, [r3, #0]
 8013448:	6859      	ldr	r1, [r3, #4]
 801344a:	689a      	ldr	r2, [r3, #8]
 801344c:	68db      	ldr	r3, [r3, #12]
 801344e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  ret = MX_WIFI_Socket_accept(pMxWifiObj, sock, &mx_addr, addrlen);
 8013450:	f107 0210 	add.w	r2, r7, #16
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	68f9      	ldr	r1, [r7, #12]
 8013458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801345a:	f7f4 fc63 	bl	8007d24 <MX_WIFI_Socket_accept>
 801345e:	6238      	str	r0, [r7, #32]
#endif /* NET_USE_IPV6 */

  return ret;
 8013460:	6a3b      	ldr	r3, [r7, #32]
}
 8013462:	4618      	mov	r0, r3
 8013464:	372c      	adds	r7, #44	; 0x2c
 8013466:	46bd      	mov	sp, r7
 8013468:	bd90      	pop	{r4, r7, pc}

0801346a <mx_wifi_connect>:
  * @param  addr             address to connect
  * @param  addrlen          address length
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_connect(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 801346a:	b590      	push	{r4, r7, lr}
 801346c:	b08b      	sub	sp, #44	; 0x2c
 801346e:	af00      	add	r7, sp, #0
 8013470:	60f8      	str	r0, [r7, #12]
 8013472:	60b9      	str	r1, [r7, #8]
 8013474:	607a      	str	r2, [r7, #4]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8013476:	f7f0 f979 	bl	800376c <wifi_obj_get>
 801347a:	6278      	str	r0, [r7, #36]	; 0x24

#if NET_USE_IPV6
  ret = MX_WIFI_Socket_connect(pMxWifiObj, sock, (const struct sockaddr *)addr, (int32_t)addrlen);
#else
  struct sockaddr mx_addr;
  (void)memcpy(&mx_addr, addr, sizeof(mx_addr));
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	f107 0410 	add.w	r4, r7, #16
 8013482:	6818      	ldr	r0, [r3, #0]
 8013484:	6859      	ldr	r1, [r3, #4]
 8013486:	689a      	ldr	r2, [r3, #8]
 8013488:	68db      	ldr	r3, [r3, #12]
 801348a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  ret = MX_WIFI_Socket_connect(pMxWifiObj, sock, &mx_addr, (int32_t)addrlen);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f107 0210 	add.w	r2, r7, #16
 8013492:	68f9      	ldr	r1, [r7, #12]
 8013494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013496:	f7f4 fc96 	bl	8007dc6 <MX_WIFI_Socket_connect>
 801349a:	6238      	str	r0, [r7, #32]
#endif /* NET_USE_IPV6 */

  return ret;
 801349c:	6a3b      	ldr	r3, [r7, #32]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	372c      	adds	r7, #44	; 0x2c
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd90      	pop	{r4, r7, pc}

080134a6 <mx_wifi_shutdown>:
  * @param  sock             socket fd
  * @param  mode             shutdown mode(0,1,2)
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_shutdown(int32_t sock, int32_t mode)
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b084      	sub	sp, #16
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 80134b0:	f7f0 f95c 	bl	800376c <wifi_obj_get>
 80134b4:	60f8      	str	r0, [r7, #12]

  ret = MX_WIFI_Socket_shutdown(pMxWifiObj, sock, mode);
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	6879      	ldr	r1, [r7, #4]
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f7f4 fcd2 	bl	8007e64 <MX_WIFI_Socket_shutdown>
 80134c0:	60b8      	str	r0, [r7, #8]
  return ret;
 80134c2:	68bb      	ldr	r3, [r7, #8]
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3710      	adds	r7, #16
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <mx_wifi_close>:
  * @param  sock             socket fd
  * @param  isaclone         not supported, just compliant for ST connect lib
  * @return int32_t          0 if success, if failed return error code(<0)
  */
static int32_t mx_wifi_close(int32_t sock, bool isaclone)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b084      	sub	sp, #16
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	460b      	mov	r3, r1
 80134d6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 80134d8:	f7f0 f948 	bl	800376c <wifi_obj_get>
 80134dc:	60f8      	str	r0, [r7, #12]

  (void)isaclone;
  ret = MX_WIFI_Socket_close(pMxWifiObj, sock);
 80134de:	6879      	ldr	r1, [r7, #4]
 80134e0:	68f8      	ldr	r0, [r7, #12]
 80134e2:	f7f4 fcff 	bl	8007ee4 <MX_WIFI_Socket_close>
 80134e6:	60b8      	str	r0, [r7, #8]
  return ret;
 80134e8:	68bb      	ldr	r3, [r7, #8]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <mx_wifi_send>:
  * @param  len              data length
  * @param  flags            socket flag
  * @return int32_t          bytes sent, if failed return error code(<0)
  */
static int32_t mx_wifi_send(int32_t sock, uint8_t *buf, int32_t len, int32_t flags)
{
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b088      	sub	sp, #32
 80134f6:	af02      	add	r7, sp, #8
 80134f8:	60f8      	str	r0, [r7, #12]
 80134fa:	60b9      	str	r1, [r7, #8]
 80134fc:	607a      	str	r2, [r7, #4]
 80134fe:	603b      	str	r3, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8013500:	f7f0 f934 	bl	800376c <wifi_obj_get>
 8013504:	6178      	str	r0, [r7, #20]

  ret = MX_WIFI_Socket_send(pMxWifiObj, sock, buf, len, flags);
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	9300      	str	r3, [sp, #0]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	68ba      	ldr	r2, [r7, #8]
 801350e:	68f9      	ldr	r1, [r7, #12]
 8013510:	6978      	ldr	r0, [r7, #20]
 8013512:	f7f4 fd24 	bl	8007f5e <MX_WIFI_Socket_send>
 8013516:	6138      	str	r0, [r7, #16]
  return ret;
 8013518:	693b      	ldr	r3, [r7, #16]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3718      	adds	r7, #24
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <mx_wifi_recv>:
  * @param  len              buffer size
  * @param  flags            socket flag
  * @return int32_t          bytes received, if failed return error code(<0)
  */
static int32_t mx_wifi_recv(int32_t sock, uint8_t *buf, int32_t len, int32_t flags)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b088      	sub	sp, #32
 8013526:	af02      	add	r7, sp, #8
 8013528:	60f8      	str	r0, [r7, #12]
 801352a:	60b9      	str	r1, [r7, #8]
 801352c:	607a      	str	r2, [r7, #4]
 801352e:	603b      	str	r3, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8013530:	f7f0 f91c 	bl	800376c <wifi_obj_get>
 8013534:	6138      	str	r0, [r7, #16]

  ret = MX_WIFI_Socket_recv(pMxWifiObj, sock, buf, len, flags);
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	68ba      	ldr	r2, [r7, #8]
 801353e:	68f9      	ldr	r1, [r7, #12]
 8013540:	6938      	ldr	r0, [r7, #16]
 8013542:	f7f4 fde2 	bl	800810a <MX_WIFI_Socket_recv>
 8013546:	6178      	str	r0, [r7, #20]
  if (MX_WIFI_STATUS_OK != ret)
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d006      	beq.n	801355c <mx_wifi_recv+0x3a>
  {
    if (MX_WIFI_STATUS_TIMEOUT == ret)
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	f113 0f02 	cmn.w	r3, #2
 8013554:	d102      	bne.n	801355c <mx_wifi_recv+0x3a>
    {
      ret = NET_TIMEOUT;
 8013556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801355a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 801355c:	697b      	ldr	r3, [r7, #20]
}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}

08013566 <mx_wifi_sendto>:
  * @param  tolen            size of address to send to
  * @return int32_t          bytes sent. If failed return error code(<0)
  */
static int32_t mx_wifi_sendto(int32_t sock, uint8_t *buf, int32_t len, int32_t flags, net_sockaddr_t *to,
                              uint32_t tolen)
{
 8013566:	b590      	push	{r4, r7, lr}
 8013568:	b08f      	sub	sp, #60	; 0x3c
 801356a:	af04      	add	r7, sp, #16
 801356c:	60f8      	str	r0, [r7, #12]
 801356e:	60b9      	str	r1, [r7, #8]
 8013570:	607a      	str	r2, [r7, #4]
 8013572:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 8013574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013578:	627b      	str	r3, [r7, #36]	; 0x24
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 801357a:	f7f0 f8f7 	bl	800376c <wifi_obj_get>
 801357e:	6238      	str	r0, [r7, #32]

  if ((NULL != to) && (tolen == sizeof(struct sockaddr)))
 8013580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013582:	2b00      	cmp	r3, #0
 8013584:	d018      	beq.n	80135b8 <mx_wifi_sendto+0x52>
 8013586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013588:	2b10      	cmp	r3, #16
 801358a:	d115      	bne.n	80135b8 <mx_wifi_sendto+0x52>
  {
#if NET_USE_IPV6
    ret = MX_WIFI_Socket_sendto(pMxWifiObj, sock, buf, len, flags, (struct sockaddr *)to, (int32_t)tolen);
#else
    struct sockaddr mx_addr;
    (void)memcpy(&mx_addr, to, sizeof(mx_addr));
 801358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358e:	f107 0410 	add.w	r4, r7, #16
 8013592:	6818      	ldr	r0, [r3, #0]
 8013594:	6859      	ldr	r1, [r3, #4]
 8013596:	689a      	ldr	r2, [r3, #8]
 8013598:	68db      	ldr	r3, [r3, #12]
 801359a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ret = MX_WIFI_Socket_sendto(pMxWifiObj, sock, buf, len, flags, &mx_addr, (int32_t)tolen);
 801359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801359e:	9302      	str	r3, [sp, #8]
 80135a0:	f107 0310 	add.w	r3, r7, #16
 80135a4:	9301      	str	r3, [sp, #4]
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	68f9      	ldr	r1, [r7, #12]
 80135b0:	6a38      	ldr	r0, [r7, #32]
 80135b2:	f7f4 fd37 	bl	8008024 <MX_WIFI_Socket_sendto>
 80135b6:	6278      	str	r0, [r7, #36]	; 0x24
#endif /* NET_USE_IPV6 */
  }
  return ret;
 80135b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	372c      	adds	r7, #44	; 0x2c
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd90      	pop	{r4, r7, pc}

080135c2 <mx_wifi_recvfrom>:
  * @param  fromlen          size of address
  * @return int32_t          bytes received, if failed, return error code(<0)
  */
static int32_t mx_wifi_recvfrom(int32_t sock, uint8_t *buf, int32_t len, int32_t flags, net_sockaddr_t *from,
                                uint32_t *fromlen)
{
 80135c2:	b590      	push	{r4, r7, lr}
 80135c4:	b08f      	sub	sp, #60	; 0x3c
 80135c6:	af04      	add	r7, sp, #16
 80135c8:	60f8      	str	r0, [r7, #12]
 80135ca:	60b9      	str	r1, [r7, #8]
 80135cc:	607a      	str	r2, [r7, #4]
 80135ce:	603b      	str	r3, [r7, #0]
  int32_t ret = MX_WIFI_STATUS_ERROR;
 80135d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135d4:	627b      	str	r3, [r7, #36]	; 0x24
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 80135d6:	f7f0 f8c9 	bl	800376c <wifi_obj_get>
 80135da:	6238      	str	r0, [r7, #32]

  if ((NULL != from) && (*fromlen == sizeof(struct sockaddr)))
 80135dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d019      	beq.n	8013616 <mx_wifi_recvfrom+0x54>
 80135e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b10      	cmp	r3, #16
 80135e8:	d115      	bne.n	8013616 <mx_wifi_recvfrom+0x54>
  {
#if NET_USE_IPV6
    ret = MX_WIFI_Socket_recvfrom(pMxWifiObj, sock, buf, len, flags, (struct sockaddr *)from, fromlen);
#else
    struct sockaddr mx_addr;
    (void)memcpy(&mx_addr, from, sizeof(mx_addr));
 80135ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ec:	f107 0410 	add.w	r4, r7, #16
 80135f0:	6818      	ldr	r0, [r3, #0]
 80135f2:	6859      	ldr	r1, [r3, #4]
 80135f4:	689a      	ldr	r2, [r3, #8]
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ret = MX_WIFI_Socket_recvfrom(pMxWifiObj, sock, buf, len, flags, &mx_addr, fromlen);
 80135fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135fc:	9302      	str	r3, [sp, #8]
 80135fe:	f107 0310 	add.w	r3, r7, #16
 8013602:	9301      	str	r3, [sp, #4]
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	68f9      	ldr	r1, [r7, #12]
 801360e:	6a38      	ldr	r0, [r7, #32]
 8013610:	f7f4 fded 	bl	80081ee <MX_WIFI_Socket_recvfrom>
 8013614:	6278      	str	r0, [r7, #36]	; 0x24
#endif /* NET_USE_IPV6 */
  }
  return ret;
 8013616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013618:	4618      	mov	r0, r3
 801361a:	372c      	adds	r7, #44	; 0x2c
 801361c:	46bd      	mov	sp, r7
 801361e:	bd90      	pop	{r4, r7, pc}

08013620 <mx_wifi_gethostbyname>:
  * @param  addr             address of the host
  * @param  name             host name
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_gethostbyname(net_if_handle_t *pnetif, net_sockaddr_t *addr, char_t *name)
{
 8013620:	b5b0      	push	{r4, r5, r7, lr}
 8013622:	b08a      	sub	sp, #40	; 0x28
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 801362c:	f7f0 f89e 	bl	800376c <wifi_obj_get>
 8013630:	6278      	str	r0, [r7, #36]	; 0x24
#endif /* NET_USE_IPV6 */
  {
    /* IPv4 */
    struct sockaddr mx_addr;
    (void)pnetif;
    ret = MX_WIFI_Socket_gethostbyname(pMxWifiObj, &mx_addr, (char_t *)name);
 8013632:	f107 0310 	add.w	r3, r7, #16
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	4619      	mov	r1, r3
 801363a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801363c:	f7f4 fe5b 	bl	80082f6 <MX_WIFI_Socket_gethostbyname>
 8013640:	6238      	str	r0, [r7, #32]
    if (MX_WIFI_STATUS_OK == ret)
 8013642:	6a3b      	ldr	r3, [r7, #32]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d108      	bne.n	801365a <mx_wifi_gethostbyname+0x3a>
    {
      (void)memcpy(addr, &mx_addr, sizeof(mx_addr));
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	461d      	mov	r5, r3
 801364c:	f107 0410 	add.w	r4, r7, #16
 8013650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013652:	6028      	str	r0, [r5, #0]
 8013654:	6069      	str	r1, [r5, #4]
 8013656:	60aa      	str	r2, [r5, #8]
 8013658:	60eb      	str	r3, [r5, #12]
    }
  }
  return ret;
 801365a:	6a3b      	ldr	r3, [r7, #32]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3728      	adds	r7, #40	; 0x28
 8013660:	46bd      	mov	sp, r7
 8013662:	bdb0      	pop	{r4, r5, r7, pc}

08013664 <mx_wifi_ping>:
  * @param  response         response array, size is count
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_ping(net_if_handle_t *pnetif, net_sockaddr_t *addr, int32_t count, int32_t delay,
                            int32_t response[])
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b08e      	sub	sp, #56	; 0x38
 8013668:	af02      	add	r7, sp, #8
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
 8013670:	603b      	str	r3, [r7, #0]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 8013672:	f7f0 f87b 	bl	800376c <wifi_obj_get>
 8013676:	62f8      	str	r0, [r7, #44]	; 0x2c
  (void)pnetif;
#ifdef NET_USE_LWIP_DEFINITIONS
  (void)memcpy(&ip_addr, addr, sizeof(net_ip_addr_t));
#else /* IPv4 only */
  net_sockaddr_in_t addr_in;
  (void)memcpy(&addr_in, addr, sizeof(addr_in));
 8013678:	f107 0314 	add.w	r3, r7, #20
 801367c:	2210      	movs	r2, #16
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	4618      	mov	r0, r3
 8013682:	f000 f88d 	bl	80137a0 <memcpy>
  ip_addr.addr = addr_in.sin_addr.s_addr;
 8013686:	69bb      	ldr	r3, [r7, #24]
 8013688:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* NET_USE_LWIP_DEFINITIONS */

  ret = MX_WIFI_Socket_ping(pMxWifiObj, (char_t *)NET_NTOA(&ip_addr), count, delay, response);
 801368a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801368e:	4618      	mov	r0, r3
 8013690:	f7fe f814 	bl	80116bc <net_ntoa>
 8013694:	4601      	mov	r1, r0
 8013696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136a0:	f7f4 fedc 	bl	800845c <MX_WIFI_Socket_ping>
 80136a4:	62b8      	str	r0, [r7, #40]	; 0x28
  return ret;
 80136a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3730      	adds	r7, #48	; 0x30
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}

080136b0 <mx_wifi_getsockname>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getsockname(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b088      	sub	sp, #32
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	60f8      	str	r0, [r7, #12]
 80136b8:	60b9      	str	r1, [r7, #8]
 80136ba:	607a      	str	r2, [r7, #4]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 80136bc:	f7f0 f856 	bl	800376c <wifi_obj_get>
 80136c0:	61f8      	str	r0, [r7, #28]

  /* net_sockaddr_t is alias of struct sockaddr definition from LwIp or exact redefinition. */
  struct sockaddr *mx_addr = (struct sockaddr *)(/*(void *)*/name);
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	61bb      	str	r3, [r7, #24]
  ret = MX_WIFI_Socket_getsockname(pMxWifiObj, sock, mx_addr, namelen);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	69ba      	ldr	r2, [r7, #24]
 80136ca:	68f9      	ldr	r1, [r7, #12]
 80136cc:	69f8      	ldr	r0, [r7, #28]
 80136ce:	f7f4 ffe1 	bl	8008694 <MX_WIFI_Socket_getsockname>
 80136d2:	6178      	str	r0, [r7, #20]

  return ret;
 80136d4:	697b      	ldr	r3, [r7, #20]
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3720      	adds	r7, #32
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}

080136de <mx_wifi_getpeername>:
  * @param  name             socket name
  * @param  namelen          socket name length
  * @return int32_t          0 if success, otherwise failed
  */
static int32_t mx_wifi_getpeername(int32_t sock, net_sockaddr_t *name, uint32_t *namelen)
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b088      	sub	sp, #32
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	60f8      	str	r0, [r7, #12]
 80136e6:	60b9      	str	r1, [r7, #8]
 80136e8:	607a      	str	r2, [r7, #4]
  int32_t ret;
  MX_WIFIObject_t *pMxWifiObj = wifi_obj_get();
 80136ea:	f7f0 f83f 	bl	800376c <wifi_obj_get>
 80136ee:	61f8      	str	r0, [r7, #28]

  /* net_sockaddr_t is alias of struct sockaddr definition from LwIp or exact redefinition. */
  struct sockaddr *mx_addr = (struct sockaddr *)(/*(void *)*/name);
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	61bb      	str	r3, [r7, #24]

  ret = MX_WIFI_Socket_getpeername(pMxWifiObj, sock, mx_addr, namelen);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	69ba      	ldr	r2, [r7, #24]
 80136f8:	68f9      	ldr	r1, [r7, #12]
 80136fa:	69f8      	ldr	r0, [r7, #28]
 80136fc:	f7f4 ff78 	bl	80085f0 <MX_WIFI_Socket_getpeername>
 8013700:	6178      	str	r0, [r7, #20]

  return ret;
 8013702:	697b      	ldr	r3, [r7, #20]
}
 8013704:	4618      	mov	r0, r3
 8013706:	3720      	adds	r7, #32
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <__errno>:
 801370c:	4b01      	ldr	r3, [pc, #4]	; (8013714 <__errno+0x8>)
 801370e:	6818      	ldr	r0, [r3, #0]
 8013710:	4770      	bx	lr
 8013712:	bf00      	nop
 8013714:	2000010c 	.word	0x2000010c

08013718 <__libc_init_array>:
 8013718:	b570      	push	{r4, r5, r6, lr}
 801371a:	4d0d      	ldr	r5, [pc, #52]	; (8013750 <__libc_init_array+0x38>)
 801371c:	2600      	movs	r6, #0
 801371e:	4c0d      	ldr	r4, [pc, #52]	; (8013754 <__libc_init_array+0x3c>)
 8013720:	1b64      	subs	r4, r4, r5
 8013722:	10a4      	asrs	r4, r4, #2
 8013724:	42a6      	cmp	r6, r4
 8013726:	d109      	bne.n	801373c <__libc_init_array+0x24>
 8013728:	4d0b      	ldr	r5, [pc, #44]	; (8013758 <__libc_init_array+0x40>)
 801372a:	2600      	movs	r6, #0
 801372c:	4c0b      	ldr	r4, [pc, #44]	; (801375c <__libc_init_array+0x44>)
 801372e:	f004 fd71 	bl	8018214 <_init>
 8013732:	1b64      	subs	r4, r4, r5
 8013734:	10a4      	asrs	r4, r4, #2
 8013736:	42a6      	cmp	r6, r4
 8013738:	d105      	bne.n	8013746 <__libc_init_array+0x2e>
 801373a:	bd70      	pop	{r4, r5, r6, pc}
 801373c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013740:	3601      	adds	r6, #1
 8013742:	4798      	blx	r3
 8013744:	e7ee      	b.n	8013724 <__libc_init_array+0xc>
 8013746:	f855 3b04 	ldr.w	r3, [r5], #4
 801374a:	3601      	adds	r6, #1
 801374c:	4798      	blx	r3
 801374e:	e7f2      	b.n	8013736 <__libc_init_array+0x1e>
 8013750:	0818b0a8 	.word	0x0818b0a8
 8013754:	0818b0a8 	.word	0x0818b0a8
 8013758:	0818b0a8 	.word	0x0818b0a8
 801375c:	0818b0ac 	.word	0x0818b0ac

08013760 <malloc>:
 8013760:	4b02      	ldr	r3, [pc, #8]	; (801376c <malloc+0xc>)
 8013762:	4601      	mov	r1, r0
 8013764:	6818      	ldr	r0, [r3, #0]
 8013766:	f000 b89d 	b.w	80138a4 <_malloc_r>
 801376a:	bf00      	nop
 801376c:	2000010c 	.word	0x2000010c

08013770 <free>:
 8013770:	4b02      	ldr	r3, [pc, #8]	; (801377c <free+0xc>)
 8013772:	4601      	mov	r1, r0
 8013774:	6818      	ldr	r0, [r3, #0]
 8013776:	f000 b829 	b.w	80137cc <_free_r>
 801377a:	bf00      	nop
 801377c:	2000010c 	.word	0x2000010c

08013780 <memcmp>:
 8013780:	3901      	subs	r1, #1
 8013782:	4402      	add	r2, r0
 8013784:	b510      	push	{r4, lr}
 8013786:	4290      	cmp	r0, r2
 8013788:	d101      	bne.n	801378e <memcmp+0xe>
 801378a:	2000      	movs	r0, #0
 801378c:	e005      	b.n	801379a <memcmp+0x1a>
 801378e:	7803      	ldrb	r3, [r0, #0]
 8013790:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013794:	42a3      	cmp	r3, r4
 8013796:	d001      	beq.n	801379c <memcmp+0x1c>
 8013798:	1b18      	subs	r0, r3, r4
 801379a:	bd10      	pop	{r4, pc}
 801379c:	3001      	adds	r0, #1
 801379e:	e7f2      	b.n	8013786 <memcmp+0x6>

080137a0 <memcpy>:
 80137a0:	440a      	add	r2, r1
 80137a2:	1e43      	subs	r3, r0, #1
 80137a4:	4291      	cmp	r1, r2
 80137a6:	d100      	bne.n	80137aa <memcpy+0xa>
 80137a8:	4770      	bx	lr
 80137aa:	b510      	push	{r4, lr}
 80137ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137b0:	4291      	cmp	r1, r2
 80137b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137b6:	d1f9      	bne.n	80137ac <memcpy+0xc>
 80137b8:	bd10      	pop	{r4, pc}

080137ba <memset>:
 80137ba:	4402      	add	r2, r0
 80137bc:	4603      	mov	r3, r0
 80137be:	4293      	cmp	r3, r2
 80137c0:	d100      	bne.n	80137c4 <memset+0xa>
 80137c2:	4770      	bx	lr
 80137c4:	f803 1b01 	strb.w	r1, [r3], #1
 80137c8:	e7f9      	b.n	80137be <memset+0x4>
	...

080137cc <_free_r>:
 80137cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137ce:	2900      	cmp	r1, #0
 80137d0:	d043      	beq.n	801385a <_free_r+0x8e>
 80137d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137d6:	1f0c      	subs	r4, r1, #4
 80137d8:	9001      	str	r0, [sp, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	bfb8      	it	lt
 80137de:	18e4      	addlt	r4, r4, r3
 80137e0:	f003 fbee 	bl	8016fc0 <__malloc_lock>
 80137e4:	4a1e      	ldr	r2, [pc, #120]	; (8013860 <_free_r+0x94>)
 80137e6:	9801      	ldr	r0, [sp, #4]
 80137e8:	6813      	ldr	r3, [r2, #0]
 80137ea:	b933      	cbnz	r3, 80137fa <_free_r+0x2e>
 80137ec:	6063      	str	r3, [r4, #4]
 80137ee:	6014      	str	r4, [r2, #0]
 80137f0:	b003      	add	sp, #12
 80137f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137f6:	f003 bbe9 	b.w	8016fcc <__malloc_unlock>
 80137fa:	42a3      	cmp	r3, r4
 80137fc:	d908      	bls.n	8013810 <_free_r+0x44>
 80137fe:	6825      	ldr	r5, [r4, #0]
 8013800:	1961      	adds	r1, r4, r5
 8013802:	428b      	cmp	r3, r1
 8013804:	bf01      	itttt	eq
 8013806:	6819      	ldreq	r1, [r3, #0]
 8013808:	685b      	ldreq	r3, [r3, #4]
 801380a:	1949      	addeq	r1, r1, r5
 801380c:	6021      	streq	r1, [r4, #0]
 801380e:	e7ed      	b.n	80137ec <_free_r+0x20>
 8013810:	461a      	mov	r2, r3
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	b10b      	cbz	r3, 801381a <_free_r+0x4e>
 8013816:	42a3      	cmp	r3, r4
 8013818:	d9fa      	bls.n	8013810 <_free_r+0x44>
 801381a:	6811      	ldr	r1, [r2, #0]
 801381c:	1855      	adds	r5, r2, r1
 801381e:	42a5      	cmp	r5, r4
 8013820:	d10b      	bne.n	801383a <_free_r+0x6e>
 8013822:	6824      	ldr	r4, [r4, #0]
 8013824:	4421      	add	r1, r4
 8013826:	1854      	adds	r4, r2, r1
 8013828:	6011      	str	r1, [r2, #0]
 801382a:	42a3      	cmp	r3, r4
 801382c:	d1e0      	bne.n	80137f0 <_free_r+0x24>
 801382e:	681c      	ldr	r4, [r3, #0]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	4421      	add	r1, r4
 8013834:	6053      	str	r3, [r2, #4]
 8013836:	6011      	str	r1, [r2, #0]
 8013838:	e7da      	b.n	80137f0 <_free_r+0x24>
 801383a:	d902      	bls.n	8013842 <_free_r+0x76>
 801383c:	230c      	movs	r3, #12
 801383e:	6003      	str	r3, [r0, #0]
 8013840:	e7d6      	b.n	80137f0 <_free_r+0x24>
 8013842:	6825      	ldr	r5, [r4, #0]
 8013844:	1961      	adds	r1, r4, r5
 8013846:	428b      	cmp	r3, r1
 8013848:	bf02      	ittt	eq
 801384a:	6819      	ldreq	r1, [r3, #0]
 801384c:	685b      	ldreq	r3, [r3, #4]
 801384e:	1949      	addeq	r1, r1, r5
 8013850:	6063      	str	r3, [r4, #4]
 8013852:	bf08      	it	eq
 8013854:	6021      	streq	r1, [r4, #0]
 8013856:	6054      	str	r4, [r2, #4]
 8013858:	e7ca      	b.n	80137f0 <_free_r+0x24>
 801385a:	b003      	add	sp, #12
 801385c:	bd30      	pop	{r4, r5, pc}
 801385e:	bf00      	nop
 8013860:	200032b4 	.word	0x200032b4

08013864 <sbrk_aligned>:
 8013864:	b570      	push	{r4, r5, r6, lr}
 8013866:	4e0e      	ldr	r6, [pc, #56]	; (80138a0 <sbrk_aligned+0x3c>)
 8013868:	460c      	mov	r4, r1
 801386a:	4605      	mov	r5, r0
 801386c:	6831      	ldr	r1, [r6, #0]
 801386e:	b911      	cbnz	r1, 8013876 <sbrk_aligned+0x12>
 8013870:	f000 ff98 	bl	80147a4 <_sbrk_r>
 8013874:	6030      	str	r0, [r6, #0]
 8013876:	4621      	mov	r1, r4
 8013878:	4628      	mov	r0, r5
 801387a:	f000 ff93 	bl	80147a4 <_sbrk_r>
 801387e:	1c43      	adds	r3, r0, #1
 8013880:	d00a      	beq.n	8013898 <sbrk_aligned+0x34>
 8013882:	1cc4      	adds	r4, r0, #3
 8013884:	f024 0403 	bic.w	r4, r4, #3
 8013888:	42a0      	cmp	r0, r4
 801388a:	d007      	beq.n	801389c <sbrk_aligned+0x38>
 801388c:	1a21      	subs	r1, r4, r0
 801388e:	4628      	mov	r0, r5
 8013890:	f000 ff88 	bl	80147a4 <_sbrk_r>
 8013894:	3001      	adds	r0, #1
 8013896:	d101      	bne.n	801389c <sbrk_aligned+0x38>
 8013898:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801389c:	4620      	mov	r0, r4
 801389e:	bd70      	pop	{r4, r5, r6, pc}
 80138a0:	200032b8 	.word	0x200032b8

080138a4 <_malloc_r>:
 80138a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a8:	1ccd      	adds	r5, r1, #3
 80138aa:	4607      	mov	r7, r0
 80138ac:	f025 0503 	bic.w	r5, r5, #3
 80138b0:	3508      	adds	r5, #8
 80138b2:	2d0c      	cmp	r5, #12
 80138b4:	bf38      	it	cc
 80138b6:	250c      	movcc	r5, #12
 80138b8:	2d00      	cmp	r5, #0
 80138ba:	db01      	blt.n	80138c0 <_malloc_r+0x1c>
 80138bc:	42a9      	cmp	r1, r5
 80138be:	d905      	bls.n	80138cc <_malloc_r+0x28>
 80138c0:	230c      	movs	r3, #12
 80138c2:	2600      	movs	r6, #0
 80138c4:	603b      	str	r3, [r7, #0]
 80138c6:	4630      	mov	r0, r6
 80138c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138cc:	4e2e      	ldr	r6, [pc, #184]	; (8013988 <_malloc_r+0xe4>)
 80138ce:	f003 fb77 	bl	8016fc0 <__malloc_lock>
 80138d2:	6833      	ldr	r3, [r6, #0]
 80138d4:	461c      	mov	r4, r3
 80138d6:	bb34      	cbnz	r4, 8013926 <_malloc_r+0x82>
 80138d8:	4629      	mov	r1, r5
 80138da:	4638      	mov	r0, r7
 80138dc:	f7ff ffc2 	bl	8013864 <sbrk_aligned>
 80138e0:	1c43      	adds	r3, r0, #1
 80138e2:	4604      	mov	r4, r0
 80138e4:	d14d      	bne.n	8013982 <_malloc_r+0xde>
 80138e6:	6834      	ldr	r4, [r6, #0]
 80138e8:	4626      	mov	r6, r4
 80138ea:	2e00      	cmp	r6, #0
 80138ec:	d140      	bne.n	8013970 <_malloc_r+0xcc>
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	4631      	mov	r1, r6
 80138f2:	4638      	mov	r0, r7
 80138f4:	eb04 0803 	add.w	r8, r4, r3
 80138f8:	f000 ff54 	bl	80147a4 <_sbrk_r>
 80138fc:	4580      	cmp	r8, r0
 80138fe:	d13a      	bne.n	8013976 <_malloc_r+0xd2>
 8013900:	6821      	ldr	r1, [r4, #0]
 8013902:	3503      	adds	r5, #3
 8013904:	4638      	mov	r0, r7
 8013906:	1a6d      	subs	r5, r5, r1
 8013908:	f025 0503 	bic.w	r5, r5, #3
 801390c:	3508      	adds	r5, #8
 801390e:	2d0c      	cmp	r5, #12
 8013910:	bf38      	it	cc
 8013912:	250c      	movcc	r5, #12
 8013914:	4629      	mov	r1, r5
 8013916:	f7ff ffa5 	bl	8013864 <sbrk_aligned>
 801391a:	3001      	adds	r0, #1
 801391c:	d02b      	beq.n	8013976 <_malloc_r+0xd2>
 801391e:	6823      	ldr	r3, [r4, #0]
 8013920:	442b      	add	r3, r5
 8013922:	6023      	str	r3, [r4, #0]
 8013924:	e00e      	b.n	8013944 <_malloc_r+0xa0>
 8013926:	6822      	ldr	r2, [r4, #0]
 8013928:	1b52      	subs	r2, r2, r5
 801392a:	d41e      	bmi.n	801396a <_malloc_r+0xc6>
 801392c:	2a0b      	cmp	r2, #11
 801392e:	d916      	bls.n	801395e <_malloc_r+0xba>
 8013930:	1961      	adds	r1, r4, r5
 8013932:	42a3      	cmp	r3, r4
 8013934:	6025      	str	r5, [r4, #0]
 8013936:	bf18      	it	ne
 8013938:	6059      	strne	r1, [r3, #4]
 801393a:	6863      	ldr	r3, [r4, #4]
 801393c:	bf08      	it	eq
 801393e:	6031      	streq	r1, [r6, #0]
 8013940:	5162      	str	r2, [r4, r5]
 8013942:	604b      	str	r3, [r1, #4]
 8013944:	f104 060b 	add.w	r6, r4, #11
 8013948:	4638      	mov	r0, r7
 801394a:	f003 fb3f 	bl	8016fcc <__malloc_unlock>
 801394e:	1d23      	adds	r3, r4, #4
 8013950:	f026 0607 	bic.w	r6, r6, #7
 8013954:	1af2      	subs	r2, r6, r3
 8013956:	d0b6      	beq.n	80138c6 <_malloc_r+0x22>
 8013958:	1b9b      	subs	r3, r3, r6
 801395a:	50a3      	str	r3, [r4, r2]
 801395c:	e7b3      	b.n	80138c6 <_malloc_r+0x22>
 801395e:	6862      	ldr	r2, [r4, #4]
 8013960:	42a3      	cmp	r3, r4
 8013962:	bf0c      	ite	eq
 8013964:	6032      	streq	r2, [r6, #0]
 8013966:	605a      	strne	r2, [r3, #4]
 8013968:	e7ec      	b.n	8013944 <_malloc_r+0xa0>
 801396a:	4623      	mov	r3, r4
 801396c:	6864      	ldr	r4, [r4, #4]
 801396e:	e7b2      	b.n	80138d6 <_malloc_r+0x32>
 8013970:	4634      	mov	r4, r6
 8013972:	6876      	ldr	r6, [r6, #4]
 8013974:	e7b9      	b.n	80138ea <_malloc_r+0x46>
 8013976:	230c      	movs	r3, #12
 8013978:	4638      	mov	r0, r7
 801397a:	603b      	str	r3, [r7, #0]
 801397c:	f003 fb26 	bl	8016fcc <__malloc_unlock>
 8013980:	e7a1      	b.n	80138c6 <_malloc_r+0x22>
 8013982:	6025      	str	r5, [r4, #0]
 8013984:	e7de      	b.n	8013944 <_malloc_r+0xa0>
 8013986:	bf00      	nop
 8013988:	200032b4 	.word	0x200032b4

0801398c <__cvt>:
 801398c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013990:	ec55 4b10 	vmov	r4, r5, d0
 8013994:	2d00      	cmp	r5, #0
 8013996:	460e      	mov	r6, r1
 8013998:	4619      	mov	r1, r3
 801399a:	462b      	mov	r3, r5
 801399c:	bfb4      	ite	lt
 801399e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80139a2:	2300      	movge	r3, #0
 80139a4:	4691      	mov	r9, r2
 80139a6:	bfbf      	itttt	lt
 80139a8:	4622      	movlt	r2, r4
 80139aa:	461d      	movlt	r5, r3
 80139ac:	232d      	movlt	r3, #45	; 0x2d
 80139ae:	4614      	movlt	r4, r2
 80139b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80139b4:	700b      	strb	r3, [r1, #0]
 80139b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139b8:	f023 0820 	bic.w	r8, r3, #32
 80139bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80139c0:	d005      	beq.n	80139ce <__cvt+0x42>
 80139c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80139c6:	d100      	bne.n	80139ca <__cvt+0x3e>
 80139c8:	3601      	adds	r6, #1
 80139ca:	2102      	movs	r1, #2
 80139cc:	e000      	b.n	80139d0 <__cvt+0x44>
 80139ce:	2103      	movs	r1, #3
 80139d0:	ab03      	add	r3, sp, #12
 80139d2:	4632      	mov	r2, r6
 80139d4:	9301      	str	r3, [sp, #4]
 80139d6:	ab02      	add	r3, sp, #8
 80139d8:	ec45 4b10 	vmov	d0, r4, r5
 80139dc:	9300      	str	r3, [sp, #0]
 80139de:	4653      	mov	r3, sl
 80139e0:	f001 ff52 	bl	8015888 <_dtoa_r>
 80139e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80139e8:	4607      	mov	r7, r0
 80139ea:	d102      	bne.n	80139f2 <__cvt+0x66>
 80139ec:	f019 0f01 	tst.w	r9, #1
 80139f0:	d022      	beq.n	8013a38 <__cvt+0xac>
 80139f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80139f6:	eb07 0906 	add.w	r9, r7, r6
 80139fa:	d110      	bne.n	8013a1e <__cvt+0x92>
 80139fc:	783b      	ldrb	r3, [r7, #0]
 80139fe:	2b30      	cmp	r3, #48	; 0x30
 8013a00:	d10a      	bne.n	8013a18 <__cvt+0x8c>
 8013a02:	2200      	movs	r2, #0
 8013a04:	2300      	movs	r3, #0
 8013a06:	4620      	mov	r0, r4
 8013a08:	4629      	mov	r1, r5
 8013a0a:	f7ed f86b 	bl	8000ae4 <__aeabi_dcmpeq>
 8013a0e:	b918      	cbnz	r0, 8013a18 <__cvt+0x8c>
 8013a10:	f1c6 0601 	rsb	r6, r6, #1
 8013a14:	f8ca 6000 	str.w	r6, [sl]
 8013a18:	f8da 3000 	ldr.w	r3, [sl]
 8013a1c:	4499      	add	r9, r3
 8013a1e:	2200      	movs	r2, #0
 8013a20:	2300      	movs	r3, #0
 8013a22:	4620      	mov	r0, r4
 8013a24:	4629      	mov	r1, r5
 8013a26:	f7ed f85d 	bl	8000ae4 <__aeabi_dcmpeq>
 8013a2a:	b108      	cbz	r0, 8013a30 <__cvt+0xa4>
 8013a2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013a30:	2230      	movs	r2, #48	; 0x30
 8013a32:	9b03      	ldr	r3, [sp, #12]
 8013a34:	454b      	cmp	r3, r9
 8013a36:	d307      	bcc.n	8013a48 <__cvt+0xbc>
 8013a38:	9b03      	ldr	r3, [sp, #12]
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a3e:	1bdb      	subs	r3, r3, r7
 8013a40:	6013      	str	r3, [r2, #0]
 8013a42:	b004      	add	sp, #16
 8013a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a48:	1c59      	adds	r1, r3, #1
 8013a4a:	9103      	str	r1, [sp, #12]
 8013a4c:	701a      	strb	r2, [r3, #0]
 8013a4e:	e7f0      	b.n	8013a32 <__cvt+0xa6>

08013a50 <__exponent>:
 8013a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a52:	2900      	cmp	r1, #0
 8013a54:	4603      	mov	r3, r0
 8013a56:	bfb8      	it	lt
 8013a58:	4249      	neglt	r1, r1
 8013a5a:	f803 2b02 	strb.w	r2, [r3], #2
 8013a5e:	bfb4      	ite	lt
 8013a60:	222d      	movlt	r2, #45	; 0x2d
 8013a62:	222b      	movge	r2, #43	; 0x2b
 8013a64:	2909      	cmp	r1, #9
 8013a66:	7042      	strb	r2, [r0, #1]
 8013a68:	dd2a      	ble.n	8013ac0 <__exponent+0x70>
 8013a6a:	f10d 0407 	add.w	r4, sp, #7
 8013a6e:	270a      	movs	r7, #10
 8013a70:	46a4      	mov	ip, r4
 8013a72:	460a      	mov	r2, r1
 8013a74:	46a6      	mov	lr, r4
 8013a76:	3c01      	subs	r4, #1
 8013a78:	2a63      	cmp	r2, #99	; 0x63
 8013a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8013a7e:	fb07 1516 	mls	r5, r7, r6, r1
 8013a82:	4631      	mov	r1, r6
 8013a84:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8013a88:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013a8c:	dcf1      	bgt.n	8013a72 <__exponent+0x22>
 8013a8e:	3130      	adds	r1, #48	; 0x30
 8013a90:	f1ae 0502 	sub.w	r5, lr, #2
 8013a94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013a98:	1c44      	adds	r4, r0, #1
 8013a9a:	4629      	mov	r1, r5
 8013a9c:	4561      	cmp	r1, ip
 8013a9e:	d30a      	bcc.n	8013ab6 <__exponent+0x66>
 8013aa0:	f10d 0209 	add.w	r2, sp, #9
 8013aa4:	eba2 020e 	sub.w	r2, r2, lr
 8013aa8:	4565      	cmp	r5, ip
 8013aaa:	bf88      	it	hi
 8013aac:	2200      	movhi	r2, #0
 8013aae:	4413      	add	r3, r2
 8013ab0:	1a18      	subs	r0, r3, r0
 8013ab2:	b003      	add	sp, #12
 8013ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013aba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013abe:	e7ed      	b.n	8013a9c <__exponent+0x4c>
 8013ac0:	2330      	movs	r3, #48	; 0x30
 8013ac2:	3130      	adds	r1, #48	; 0x30
 8013ac4:	7083      	strb	r3, [r0, #2]
 8013ac6:	1d03      	adds	r3, r0, #4
 8013ac8:	70c1      	strb	r1, [r0, #3]
 8013aca:	e7f1      	b.n	8013ab0 <__exponent+0x60>

08013acc <_printf_float>:
 8013acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad0:	ed2d 8b02 	vpush	{d8}
 8013ad4:	b08d      	sub	sp, #52	; 0x34
 8013ad6:	460c      	mov	r4, r1
 8013ad8:	4616      	mov	r6, r2
 8013ada:	461f      	mov	r7, r3
 8013adc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013ae0:	4605      	mov	r5, r0
 8013ae2:	f003 f9e1 	bl	8016ea8 <_localeconv_r>
 8013ae6:	f8d0 a000 	ldr.w	sl, [r0]
 8013aea:	4650      	mov	r0, sl
 8013aec:	f7ec fbce 	bl	800028c <strlen>
 8013af0:	2300      	movs	r3, #0
 8013af2:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013af6:	ee08 0a10 	vmov	s16, r0
 8013afa:	930a      	str	r3, [sp, #40]	; 0x28
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	9305      	str	r3, [sp, #20]
 8013b00:	f8d8 3000 	ldr.w	r3, [r8]
 8013b04:	3307      	adds	r3, #7
 8013b06:	f023 0307 	bic.w	r3, r3, #7
 8013b0a:	f103 0208 	add.w	r2, r3, #8
 8013b0e:	f8c8 2000 	str.w	r2, [r8]
 8013b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013b1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013b26:	f8cd 8018 	str.w	r8, [sp, #24]
 8013b2a:	9307      	str	r3, [sp, #28]
 8013b2c:	4b9e      	ldr	r3, [pc, #632]	; (8013da8 <_printf_float+0x2dc>)
 8013b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b32:	f7ed f809 	bl	8000b48 <__aeabi_dcmpun>
 8013b36:	bb88      	cbnz	r0, 8013b9c <_printf_float+0xd0>
 8013b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b3c:	4b9a      	ldr	r3, [pc, #616]	; (8013da8 <_printf_float+0x2dc>)
 8013b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b42:	f7ec ffe3 	bl	8000b0c <__aeabi_dcmple>
 8013b46:	bb48      	cbnz	r0, 8013b9c <_printf_float+0xd0>
 8013b48:	2200      	movs	r2, #0
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	4640      	mov	r0, r8
 8013b4e:	4649      	mov	r1, r9
 8013b50:	f7ec ffd2 	bl	8000af8 <__aeabi_dcmplt>
 8013b54:	b110      	cbz	r0, 8013b5c <_printf_float+0x90>
 8013b56:	232d      	movs	r3, #45	; 0x2d
 8013b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b5c:	4b93      	ldr	r3, [pc, #588]	; (8013dac <_printf_float+0x2e0>)
 8013b5e:	4894      	ldr	r0, [pc, #592]	; (8013db0 <_printf_float+0x2e4>)
 8013b60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013b64:	bf94      	ite	ls
 8013b66:	4698      	movls	r8, r3
 8013b68:	4680      	movhi	r8, r0
 8013b6a:	2303      	movs	r3, #3
 8013b6c:	f04f 0900 	mov.w	r9, #0
 8013b70:	6123      	str	r3, [r4, #16]
 8013b72:	9b05      	ldr	r3, [sp, #20]
 8013b74:	f023 0204 	bic.w	r2, r3, #4
 8013b78:	6022      	str	r2, [r4, #0]
 8013b7a:	4633      	mov	r3, r6
 8013b7c:	aa0b      	add	r2, sp, #44	; 0x2c
 8013b7e:	4621      	mov	r1, r4
 8013b80:	4628      	mov	r0, r5
 8013b82:	9700      	str	r7, [sp, #0]
 8013b84:	f000 f9d8 	bl	8013f38 <_printf_common>
 8013b88:	3001      	adds	r0, #1
 8013b8a:	f040 8090 	bne.w	8013cae <_printf_float+0x1e2>
 8013b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b92:	b00d      	add	sp, #52	; 0x34
 8013b94:	ecbd 8b02 	vpop	{d8}
 8013b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9c:	4642      	mov	r2, r8
 8013b9e:	464b      	mov	r3, r9
 8013ba0:	4640      	mov	r0, r8
 8013ba2:	4649      	mov	r1, r9
 8013ba4:	f7ec ffd0 	bl	8000b48 <__aeabi_dcmpun>
 8013ba8:	b140      	cbz	r0, 8013bbc <_printf_float+0xf0>
 8013baa:	464b      	mov	r3, r9
 8013bac:	4881      	ldr	r0, [pc, #516]	; (8013db4 <_printf_float+0x2e8>)
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	bfbc      	itt	lt
 8013bb2:	232d      	movlt	r3, #45	; 0x2d
 8013bb4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013bb8:	4b7f      	ldr	r3, [pc, #508]	; (8013db8 <_printf_float+0x2ec>)
 8013bba:	e7d1      	b.n	8013b60 <_printf_float+0x94>
 8013bbc:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013bc0:	6863      	ldr	r3, [r4, #4]
 8013bc2:	9206      	str	r2, [sp, #24]
 8013bc4:	1c5a      	adds	r2, r3, #1
 8013bc6:	d13f      	bne.n	8013c48 <_printf_float+0x17c>
 8013bc8:	2306      	movs	r3, #6
 8013bca:	6063      	str	r3, [r4, #4]
 8013bcc:	9b05      	ldr	r3, [sp, #20]
 8013bce:	4628      	mov	r0, r5
 8013bd0:	6861      	ldr	r1, [r4, #4]
 8013bd2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	9303      	str	r3, [sp, #12]
 8013bda:	ab0a      	add	r3, sp, #40	; 0x28
 8013bdc:	6022      	str	r2, [r4, #0]
 8013bde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013be2:	ab09      	add	r3, sp, #36	; 0x24
 8013be4:	ec49 8b10 	vmov	d0, r8, r9
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013bee:	f7ff fecd 	bl	801398c <__cvt>
 8013bf2:	9b06      	ldr	r3, [sp, #24]
 8013bf4:	4680      	mov	r8, r0
 8013bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bf8:	2b47      	cmp	r3, #71	; 0x47
 8013bfa:	d108      	bne.n	8013c0e <_printf_float+0x142>
 8013bfc:	1cc8      	adds	r0, r1, #3
 8013bfe:	db02      	blt.n	8013c06 <_printf_float+0x13a>
 8013c00:	6863      	ldr	r3, [r4, #4]
 8013c02:	4299      	cmp	r1, r3
 8013c04:	dd41      	ble.n	8013c8a <_printf_float+0x1be>
 8013c06:	f1ab 0b02 	sub.w	fp, fp, #2
 8013c0a:	fa5f fb8b 	uxtb.w	fp, fp
 8013c0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013c12:	d820      	bhi.n	8013c56 <_printf_float+0x18a>
 8013c14:	3901      	subs	r1, #1
 8013c16:	465a      	mov	r2, fp
 8013c18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013c1c:	9109      	str	r1, [sp, #36]	; 0x24
 8013c1e:	f7ff ff17 	bl	8013a50 <__exponent>
 8013c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c24:	4681      	mov	r9, r0
 8013c26:	1813      	adds	r3, r2, r0
 8013c28:	2a01      	cmp	r2, #1
 8013c2a:	6123      	str	r3, [r4, #16]
 8013c2c:	dc02      	bgt.n	8013c34 <_printf_float+0x168>
 8013c2e:	6822      	ldr	r2, [r4, #0]
 8013c30:	07d2      	lsls	r2, r2, #31
 8013c32:	d501      	bpl.n	8013c38 <_printf_float+0x16c>
 8013c34:	3301      	adds	r3, #1
 8013c36:	6123      	str	r3, [r4, #16]
 8013c38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d09c      	beq.n	8013b7a <_printf_float+0xae>
 8013c40:	232d      	movs	r3, #45	; 0x2d
 8013c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c46:	e798      	b.n	8013b7a <_printf_float+0xae>
 8013c48:	9a06      	ldr	r2, [sp, #24]
 8013c4a:	2a47      	cmp	r2, #71	; 0x47
 8013c4c:	d1be      	bne.n	8013bcc <_printf_float+0x100>
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d1bc      	bne.n	8013bcc <_printf_float+0x100>
 8013c52:	2301      	movs	r3, #1
 8013c54:	e7b9      	b.n	8013bca <_printf_float+0xfe>
 8013c56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013c5a:	d118      	bne.n	8013c8e <_printf_float+0x1c2>
 8013c5c:	2900      	cmp	r1, #0
 8013c5e:	6863      	ldr	r3, [r4, #4]
 8013c60:	dd0b      	ble.n	8013c7a <_printf_float+0x1ae>
 8013c62:	6121      	str	r1, [r4, #16]
 8013c64:	b913      	cbnz	r3, 8013c6c <_printf_float+0x1a0>
 8013c66:	6822      	ldr	r2, [r4, #0]
 8013c68:	07d0      	lsls	r0, r2, #31
 8013c6a:	d502      	bpl.n	8013c72 <_printf_float+0x1a6>
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	440b      	add	r3, r1
 8013c70:	6123      	str	r3, [r4, #16]
 8013c72:	f04f 0900 	mov.w	r9, #0
 8013c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c78:	e7de      	b.n	8013c38 <_printf_float+0x16c>
 8013c7a:	b913      	cbnz	r3, 8013c82 <_printf_float+0x1b6>
 8013c7c:	6822      	ldr	r2, [r4, #0]
 8013c7e:	07d2      	lsls	r2, r2, #31
 8013c80:	d501      	bpl.n	8013c86 <_printf_float+0x1ba>
 8013c82:	3302      	adds	r3, #2
 8013c84:	e7f4      	b.n	8013c70 <_printf_float+0x1a4>
 8013c86:	2301      	movs	r3, #1
 8013c88:	e7f2      	b.n	8013c70 <_printf_float+0x1a4>
 8013c8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c90:	4299      	cmp	r1, r3
 8013c92:	db05      	blt.n	8013ca0 <_printf_float+0x1d4>
 8013c94:	6823      	ldr	r3, [r4, #0]
 8013c96:	6121      	str	r1, [r4, #16]
 8013c98:	07d8      	lsls	r0, r3, #31
 8013c9a:	d5ea      	bpl.n	8013c72 <_printf_float+0x1a6>
 8013c9c:	1c4b      	adds	r3, r1, #1
 8013c9e:	e7e7      	b.n	8013c70 <_printf_float+0x1a4>
 8013ca0:	2900      	cmp	r1, #0
 8013ca2:	bfd4      	ite	le
 8013ca4:	f1c1 0202 	rsble	r2, r1, #2
 8013ca8:	2201      	movgt	r2, #1
 8013caa:	4413      	add	r3, r2
 8013cac:	e7e0      	b.n	8013c70 <_printf_float+0x1a4>
 8013cae:	6823      	ldr	r3, [r4, #0]
 8013cb0:	055a      	lsls	r2, r3, #21
 8013cb2:	d407      	bmi.n	8013cc4 <_printf_float+0x1f8>
 8013cb4:	6923      	ldr	r3, [r4, #16]
 8013cb6:	4642      	mov	r2, r8
 8013cb8:	4631      	mov	r1, r6
 8013cba:	4628      	mov	r0, r5
 8013cbc:	47b8      	blx	r7
 8013cbe:	3001      	adds	r0, #1
 8013cc0:	d12c      	bne.n	8013d1c <_printf_float+0x250>
 8013cc2:	e764      	b.n	8013b8e <_printf_float+0xc2>
 8013cc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013cc8:	f240 80e0 	bls.w	8013e8c <_printf_float+0x3c0>
 8013ccc:	2200      	movs	r2, #0
 8013cce:	2300      	movs	r3, #0
 8013cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013cd4:	f7ec ff06 	bl	8000ae4 <__aeabi_dcmpeq>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d034      	beq.n	8013d46 <_printf_float+0x27a>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	4a37      	ldr	r2, [pc, #220]	; (8013dbc <_printf_float+0x2f0>)
 8013ce0:	4631      	mov	r1, r6
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	47b8      	blx	r7
 8013ce6:	3001      	adds	r0, #1
 8013ce8:	f43f af51 	beq.w	8013b8e <_printf_float+0xc2>
 8013cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	db02      	blt.n	8013cfa <_printf_float+0x22e>
 8013cf4:	6823      	ldr	r3, [r4, #0]
 8013cf6:	07d8      	lsls	r0, r3, #31
 8013cf8:	d510      	bpl.n	8013d1c <_printf_float+0x250>
 8013cfa:	ee18 3a10 	vmov	r3, s16
 8013cfe:	4652      	mov	r2, sl
 8013d00:	4631      	mov	r1, r6
 8013d02:	4628      	mov	r0, r5
 8013d04:	47b8      	blx	r7
 8013d06:	3001      	adds	r0, #1
 8013d08:	f43f af41 	beq.w	8013b8e <_printf_float+0xc2>
 8013d0c:	f04f 0800 	mov.w	r8, #0
 8013d10:	f104 091a 	add.w	r9, r4, #26
 8013d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d16:	3b01      	subs	r3, #1
 8013d18:	4543      	cmp	r3, r8
 8013d1a:	dc09      	bgt.n	8013d30 <_printf_float+0x264>
 8013d1c:	6823      	ldr	r3, [r4, #0]
 8013d1e:	079b      	lsls	r3, r3, #30
 8013d20:	f100 8105 	bmi.w	8013f2e <_printf_float+0x462>
 8013d24:	68e0      	ldr	r0, [r4, #12]
 8013d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d28:	4298      	cmp	r0, r3
 8013d2a:	bfb8      	it	lt
 8013d2c:	4618      	movlt	r0, r3
 8013d2e:	e730      	b.n	8013b92 <_printf_float+0xc6>
 8013d30:	2301      	movs	r3, #1
 8013d32:	464a      	mov	r2, r9
 8013d34:	4631      	mov	r1, r6
 8013d36:	4628      	mov	r0, r5
 8013d38:	47b8      	blx	r7
 8013d3a:	3001      	adds	r0, #1
 8013d3c:	f43f af27 	beq.w	8013b8e <_printf_float+0xc2>
 8013d40:	f108 0801 	add.w	r8, r8, #1
 8013d44:	e7e6      	b.n	8013d14 <_printf_float+0x248>
 8013d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	dc39      	bgt.n	8013dc0 <_printf_float+0x2f4>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	4a1b      	ldr	r2, [pc, #108]	; (8013dbc <_printf_float+0x2f0>)
 8013d50:	4631      	mov	r1, r6
 8013d52:	4628      	mov	r0, r5
 8013d54:	47b8      	blx	r7
 8013d56:	3001      	adds	r0, #1
 8013d58:	f43f af19 	beq.w	8013b8e <_printf_float+0xc2>
 8013d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013d60:	4313      	orrs	r3, r2
 8013d62:	d102      	bne.n	8013d6a <_printf_float+0x29e>
 8013d64:	6823      	ldr	r3, [r4, #0]
 8013d66:	07d9      	lsls	r1, r3, #31
 8013d68:	d5d8      	bpl.n	8013d1c <_printf_float+0x250>
 8013d6a:	ee18 3a10 	vmov	r3, s16
 8013d6e:	4652      	mov	r2, sl
 8013d70:	4631      	mov	r1, r6
 8013d72:	4628      	mov	r0, r5
 8013d74:	47b8      	blx	r7
 8013d76:	3001      	adds	r0, #1
 8013d78:	f43f af09 	beq.w	8013b8e <_printf_float+0xc2>
 8013d7c:	f04f 0900 	mov.w	r9, #0
 8013d80:	f104 0a1a 	add.w	sl, r4, #26
 8013d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d86:	425b      	negs	r3, r3
 8013d88:	454b      	cmp	r3, r9
 8013d8a:	dc01      	bgt.n	8013d90 <_printf_float+0x2c4>
 8013d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d8e:	e792      	b.n	8013cb6 <_printf_float+0x1ea>
 8013d90:	2301      	movs	r3, #1
 8013d92:	4652      	mov	r2, sl
 8013d94:	4631      	mov	r1, r6
 8013d96:	4628      	mov	r0, r5
 8013d98:	47b8      	blx	r7
 8013d9a:	3001      	adds	r0, #1
 8013d9c:	f43f aef7 	beq.w	8013b8e <_printf_float+0xc2>
 8013da0:	f109 0901 	add.w	r9, r9, #1
 8013da4:	e7ee      	b.n	8013d84 <_printf_float+0x2b8>
 8013da6:	bf00      	nop
 8013da8:	7fefffff 	.word	0x7fefffff
 8013dac:	0818abf4 	.word	0x0818abf4
 8013db0:	0818abf8 	.word	0x0818abf8
 8013db4:	0818ac00 	.word	0x0818ac00
 8013db8:	0818abfc 	.word	0x0818abfc
 8013dbc:	0818ac04 	.word	0x0818ac04
 8013dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	bfa8      	it	ge
 8013dc8:	461a      	movge	r2, r3
 8013dca:	2a00      	cmp	r2, #0
 8013dcc:	4691      	mov	r9, r2
 8013dce:	dc37      	bgt.n	8013e40 <_printf_float+0x374>
 8013dd0:	f04f 0b00 	mov.w	fp, #0
 8013dd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013dd8:	f104 021a 	add.w	r2, r4, #26
 8013ddc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dde:	9305      	str	r3, [sp, #20]
 8013de0:	eba3 0309 	sub.w	r3, r3, r9
 8013de4:	455b      	cmp	r3, fp
 8013de6:	dc33      	bgt.n	8013e50 <_printf_float+0x384>
 8013de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dec:	429a      	cmp	r2, r3
 8013dee:	db3b      	blt.n	8013e68 <_printf_float+0x39c>
 8013df0:	6823      	ldr	r3, [r4, #0]
 8013df2:	07da      	lsls	r2, r3, #31
 8013df4:	d438      	bmi.n	8013e68 <_printf_float+0x39c>
 8013df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013df8:	9a05      	ldr	r2, [sp, #20]
 8013dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dfc:	1a9a      	subs	r2, r3, r2
 8013dfe:	eba3 0901 	sub.w	r9, r3, r1
 8013e02:	4591      	cmp	r9, r2
 8013e04:	bfa8      	it	ge
 8013e06:	4691      	movge	r9, r2
 8013e08:	f1b9 0f00 	cmp.w	r9, #0
 8013e0c:	dc35      	bgt.n	8013e7a <_printf_float+0x3ae>
 8013e0e:	f04f 0800 	mov.w	r8, #0
 8013e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e16:	f104 0a1a 	add.w	sl, r4, #26
 8013e1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013e1e:	1a9b      	subs	r3, r3, r2
 8013e20:	eba3 0309 	sub.w	r3, r3, r9
 8013e24:	4543      	cmp	r3, r8
 8013e26:	f77f af79 	ble.w	8013d1c <_printf_float+0x250>
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	4652      	mov	r2, sl
 8013e2e:	4631      	mov	r1, r6
 8013e30:	4628      	mov	r0, r5
 8013e32:	47b8      	blx	r7
 8013e34:	3001      	adds	r0, #1
 8013e36:	f43f aeaa 	beq.w	8013b8e <_printf_float+0xc2>
 8013e3a:	f108 0801 	add.w	r8, r8, #1
 8013e3e:	e7ec      	b.n	8013e1a <_printf_float+0x34e>
 8013e40:	4613      	mov	r3, r2
 8013e42:	4631      	mov	r1, r6
 8013e44:	4642      	mov	r2, r8
 8013e46:	4628      	mov	r0, r5
 8013e48:	47b8      	blx	r7
 8013e4a:	3001      	adds	r0, #1
 8013e4c:	d1c0      	bne.n	8013dd0 <_printf_float+0x304>
 8013e4e:	e69e      	b.n	8013b8e <_printf_float+0xc2>
 8013e50:	2301      	movs	r3, #1
 8013e52:	4631      	mov	r1, r6
 8013e54:	4628      	mov	r0, r5
 8013e56:	9205      	str	r2, [sp, #20]
 8013e58:	47b8      	blx	r7
 8013e5a:	3001      	adds	r0, #1
 8013e5c:	f43f ae97 	beq.w	8013b8e <_printf_float+0xc2>
 8013e60:	f10b 0b01 	add.w	fp, fp, #1
 8013e64:	9a05      	ldr	r2, [sp, #20]
 8013e66:	e7b9      	b.n	8013ddc <_printf_float+0x310>
 8013e68:	ee18 3a10 	vmov	r3, s16
 8013e6c:	4652      	mov	r2, sl
 8013e6e:	4631      	mov	r1, r6
 8013e70:	4628      	mov	r0, r5
 8013e72:	47b8      	blx	r7
 8013e74:	3001      	adds	r0, #1
 8013e76:	d1be      	bne.n	8013df6 <_printf_float+0x32a>
 8013e78:	e689      	b.n	8013b8e <_printf_float+0xc2>
 8013e7a:	9a05      	ldr	r2, [sp, #20]
 8013e7c:	464b      	mov	r3, r9
 8013e7e:	4631      	mov	r1, r6
 8013e80:	4628      	mov	r0, r5
 8013e82:	4442      	add	r2, r8
 8013e84:	47b8      	blx	r7
 8013e86:	3001      	adds	r0, #1
 8013e88:	d1c1      	bne.n	8013e0e <_printf_float+0x342>
 8013e8a:	e680      	b.n	8013b8e <_printf_float+0xc2>
 8013e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e8e:	2a01      	cmp	r2, #1
 8013e90:	dc01      	bgt.n	8013e96 <_printf_float+0x3ca>
 8013e92:	07db      	lsls	r3, r3, #31
 8013e94:	d538      	bpl.n	8013f08 <_printf_float+0x43c>
 8013e96:	2301      	movs	r3, #1
 8013e98:	4642      	mov	r2, r8
 8013e9a:	4631      	mov	r1, r6
 8013e9c:	4628      	mov	r0, r5
 8013e9e:	47b8      	blx	r7
 8013ea0:	3001      	adds	r0, #1
 8013ea2:	f43f ae74 	beq.w	8013b8e <_printf_float+0xc2>
 8013ea6:	ee18 3a10 	vmov	r3, s16
 8013eaa:	4652      	mov	r2, sl
 8013eac:	4631      	mov	r1, r6
 8013eae:	4628      	mov	r0, r5
 8013eb0:	47b8      	blx	r7
 8013eb2:	3001      	adds	r0, #1
 8013eb4:	f43f ae6b 	beq.w	8013b8e <_printf_float+0xc2>
 8013eb8:	2200      	movs	r2, #0
 8013eba:	2300      	movs	r3, #0
 8013ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ec0:	f7ec fe10 	bl	8000ae4 <__aeabi_dcmpeq>
 8013ec4:	b9d8      	cbnz	r0, 8013efe <_printf_float+0x432>
 8013ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ec8:	f108 0201 	add.w	r2, r8, #1
 8013ecc:	3b01      	subs	r3, #1
 8013ece:	4631      	mov	r1, r6
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	47b8      	blx	r7
 8013ed4:	3001      	adds	r0, #1
 8013ed6:	d10e      	bne.n	8013ef6 <_printf_float+0x42a>
 8013ed8:	e659      	b.n	8013b8e <_printf_float+0xc2>
 8013eda:	2301      	movs	r3, #1
 8013edc:	4652      	mov	r2, sl
 8013ede:	4631      	mov	r1, r6
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	47b8      	blx	r7
 8013ee4:	3001      	adds	r0, #1
 8013ee6:	f43f ae52 	beq.w	8013b8e <_printf_float+0xc2>
 8013eea:	f108 0801 	add.w	r8, r8, #1
 8013eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef0:	3b01      	subs	r3, #1
 8013ef2:	4543      	cmp	r3, r8
 8013ef4:	dcf1      	bgt.n	8013eda <_printf_float+0x40e>
 8013ef6:	464b      	mov	r3, r9
 8013ef8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013efc:	e6dc      	b.n	8013cb8 <_printf_float+0x1ec>
 8013efe:	f04f 0800 	mov.w	r8, #0
 8013f02:	f104 0a1a 	add.w	sl, r4, #26
 8013f06:	e7f2      	b.n	8013eee <_printf_float+0x422>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	4642      	mov	r2, r8
 8013f0c:	e7df      	b.n	8013ece <_printf_float+0x402>
 8013f0e:	2301      	movs	r3, #1
 8013f10:	464a      	mov	r2, r9
 8013f12:	4631      	mov	r1, r6
 8013f14:	4628      	mov	r0, r5
 8013f16:	47b8      	blx	r7
 8013f18:	3001      	adds	r0, #1
 8013f1a:	f43f ae38 	beq.w	8013b8e <_printf_float+0xc2>
 8013f1e:	f108 0801 	add.w	r8, r8, #1
 8013f22:	68e3      	ldr	r3, [r4, #12]
 8013f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f26:	1a5b      	subs	r3, r3, r1
 8013f28:	4543      	cmp	r3, r8
 8013f2a:	dcf0      	bgt.n	8013f0e <_printf_float+0x442>
 8013f2c:	e6fa      	b.n	8013d24 <_printf_float+0x258>
 8013f2e:	f04f 0800 	mov.w	r8, #0
 8013f32:	f104 0919 	add.w	r9, r4, #25
 8013f36:	e7f4      	b.n	8013f22 <_printf_float+0x456>

08013f38 <_printf_common>:
 8013f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f3c:	4616      	mov	r6, r2
 8013f3e:	4699      	mov	r9, r3
 8013f40:	688a      	ldr	r2, [r1, #8]
 8013f42:	4607      	mov	r7, r0
 8013f44:	690b      	ldr	r3, [r1, #16]
 8013f46:	460c      	mov	r4, r1
 8013f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f4c:	4293      	cmp	r3, r2
 8013f4e:	bfb8      	it	lt
 8013f50:	4613      	movlt	r3, r2
 8013f52:	6033      	str	r3, [r6, #0]
 8013f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f58:	b10a      	cbz	r2, 8013f5e <_printf_common+0x26>
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	6033      	str	r3, [r6, #0]
 8013f5e:	6823      	ldr	r3, [r4, #0]
 8013f60:	0699      	lsls	r1, r3, #26
 8013f62:	bf42      	ittt	mi
 8013f64:	6833      	ldrmi	r3, [r6, #0]
 8013f66:	3302      	addmi	r3, #2
 8013f68:	6033      	strmi	r3, [r6, #0]
 8013f6a:	6825      	ldr	r5, [r4, #0]
 8013f6c:	f015 0506 	ands.w	r5, r5, #6
 8013f70:	d106      	bne.n	8013f80 <_printf_common+0x48>
 8013f72:	f104 0a19 	add.w	sl, r4, #25
 8013f76:	68e3      	ldr	r3, [r4, #12]
 8013f78:	6832      	ldr	r2, [r6, #0]
 8013f7a:	1a9b      	subs	r3, r3, r2
 8013f7c:	42ab      	cmp	r3, r5
 8013f7e:	dc29      	bgt.n	8013fd4 <_printf_common+0x9c>
 8013f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f84:	1e13      	subs	r3, r2, #0
 8013f86:	6822      	ldr	r2, [r4, #0]
 8013f88:	bf18      	it	ne
 8013f8a:	2301      	movne	r3, #1
 8013f8c:	0692      	lsls	r2, r2, #26
 8013f8e:	d42e      	bmi.n	8013fee <_printf_common+0xb6>
 8013f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f94:	4649      	mov	r1, r9
 8013f96:	4638      	mov	r0, r7
 8013f98:	47c0      	blx	r8
 8013f9a:	3001      	adds	r0, #1
 8013f9c:	d021      	beq.n	8013fe2 <_printf_common+0xaa>
 8013f9e:	6823      	ldr	r3, [r4, #0]
 8013fa0:	341a      	adds	r4, #26
 8013fa2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8013fa6:	f003 0306 	and.w	r3, r3, #6
 8013faa:	6832      	ldr	r2, [r6, #0]
 8013fac:	2600      	movs	r6, #0
 8013fae:	2b04      	cmp	r3, #4
 8013fb0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8013fb4:	bf08      	it	eq
 8013fb6:	1aad      	subeq	r5, r5, r2
 8013fb8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8013fbc:	bf14      	ite	ne
 8013fbe:	2500      	movne	r5, #0
 8013fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	bfc4      	itt	gt
 8013fc8:	1a9b      	subgt	r3, r3, r2
 8013fca:	18ed      	addgt	r5, r5, r3
 8013fcc:	42b5      	cmp	r5, r6
 8013fce:	d11a      	bne.n	8014006 <_printf_common+0xce>
 8013fd0:	2000      	movs	r0, #0
 8013fd2:	e008      	b.n	8013fe6 <_printf_common+0xae>
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	4652      	mov	r2, sl
 8013fd8:	4649      	mov	r1, r9
 8013fda:	4638      	mov	r0, r7
 8013fdc:	47c0      	blx	r8
 8013fde:	3001      	adds	r0, #1
 8013fe0:	d103      	bne.n	8013fea <_printf_common+0xb2>
 8013fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fea:	3501      	adds	r5, #1
 8013fec:	e7c3      	b.n	8013f76 <_printf_common+0x3e>
 8013fee:	18e1      	adds	r1, r4, r3
 8013ff0:	1c5a      	adds	r2, r3, #1
 8013ff2:	2030      	movs	r0, #48	; 0x30
 8013ff4:	3302      	adds	r3, #2
 8013ff6:	4422      	add	r2, r4
 8013ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014004:	e7c4      	b.n	8013f90 <_printf_common+0x58>
 8014006:	2301      	movs	r3, #1
 8014008:	4622      	mov	r2, r4
 801400a:	4649      	mov	r1, r9
 801400c:	4638      	mov	r0, r7
 801400e:	47c0      	blx	r8
 8014010:	3001      	adds	r0, #1
 8014012:	d0e6      	beq.n	8013fe2 <_printf_common+0xaa>
 8014014:	3601      	adds	r6, #1
 8014016:	e7d9      	b.n	8013fcc <_printf_common+0x94>

08014018 <_printf_i>:
 8014018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801401c:	7e0f      	ldrb	r7, [r1, #24]
 801401e:	4691      	mov	r9, r2
 8014020:	4680      	mov	r8, r0
 8014022:	460c      	mov	r4, r1
 8014024:	2f78      	cmp	r7, #120	; 0x78
 8014026:	469a      	mov	sl, r3
 8014028:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801402a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801402e:	d807      	bhi.n	8014040 <_printf_i+0x28>
 8014030:	2f62      	cmp	r7, #98	; 0x62
 8014032:	d80a      	bhi.n	801404a <_printf_i+0x32>
 8014034:	2f00      	cmp	r7, #0
 8014036:	f000 80d8 	beq.w	80141ea <_printf_i+0x1d2>
 801403a:	2f58      	cmp	r7, #88	; 0x58
 801403c:	f000 80a3 	beq.w	8014186 <_printf_i+0x16e>
 8014040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014048:	e03a      	b.n	80140c0 <_printf_i+0xa8>
 801404a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801404e:	2b15      	cmp	r3, #21
 8014050:	d8f6      	bhi.n	8014040 <_printf_i+0x28>
 8014052:	a101      	add	r1, pc, #4	; (adr r1, 8014058 <_printf_i+0x40>)
 8014054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014058:	080140b1 	.word	0x080140b1
 801405c:	080140c5 	.word	0x080140c5
 8014060:	08014041 	.word	0x08014041
 8014064:	08014041 	.word	0x08014041
 8014068:	08014041 	.word	0x08014041
 801406c:	08014041 	.word	0x08014041
 8014070:	080140c5 	.word	0x080140c5
 8014074:	08014041 	.word	0x08014041
 8014078:	08014041 	.word	0x08014041
 801407c:	08014041 	.word	0x08014041
 8014080:	08014041 	.word	0x08014041
 8014084:	080141d1 	.word	0x080141d1
 8014088:	080140f5 	.word	0x080140f5
 801408c:	080141b3 	.word	0x080141b3
 8014090:	08014041 	.word	0x08014041
 8014094:	08014041 	.word	0x08014041
 8014098:	080141f3 	.word	0x080141f3
 801409c:	08014041 	.word	0x08014041
 80140a0:	080140f5 	.word	0x080140f5
 80140a4:	08014041 	.word	0x08014041
 80140a8:	08014041 	.word	0x08014041
 80140ac:	080141bb 	.word	0x080141bb
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	1d1a      	adds	r2, r3, #4
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	602a      	str	r2, [r5, #0]
 80140b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140c0:	2301      	movs	r3, #1
 80140c2:	e0a3      	b.n	801420c <_printf_i+0x1f4>
 80140c4:	6820      	ldr	r0, [r4, #0]
 80140c6:	6829      	ldr	r1, [r5, #0]
 80140c8:	0606      	lsls	r6, r0, #24
 80140ca:	f101 0304 	add.w	r3, r1, #4
 80140ce:	d50a      	bpl.n	80140e6 <_printf_i+0xce>
 80140d0:	680e      	ldr	r6, [r1, #0]
 80140d2:	602b      	str	r3, [r5, #0]
 80140d4:	2e00      	cmp	r6, #0
 80140d6:	da03      	bge.n	80140e0 <_printf_i+0xc8>
 80140d8:	232d      	movs	r3, #45	; 0x2d
 80140da:	4276      	negs	r6, r6
 80140dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140e0:	485e      	ldr	r0, [pc, #376]	; (801425c <_printf_i+0x244>)
 80140e2:	230a      	movs	r3, #10
 80140e4:	e019      	b.n	801411a <_printf_i+0x102>
 80140e6:	680e      	ldr	r6, [r1, #0]
 80140e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80140ec:	602b      	str	r3, [r5, #0]
 80140ee:	bf18      	it	ne
 80140f0:	b236      	sxthne	r6, r6
 80140f2:	e7ef      	b.n	80140d4 <_printf_i+0xbc>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	6820      	ldr	r0, [r4, #0]
 80140f8:	1d19      	adds	r1, r3, #4
 80140fa:	6029      	str	r1, [r5, #0]
 80140fc:	0601      	lsls	r1, r0, #24
 80140fe:	d501      	bpl.n	8014104 <_printf_i+0xec>
 8014100:	681e      	ldr	r6, [r3, #0]
 8014102:	e002      	b.n	801410a <_printf_i+0xf2>
 8014104:	0646      	lsls	r6, r0, #25
 8014106:	d5fb      	bpl.n	8014100 <_printf_i+0xe8>
 8014108:	881e      	ldrh	r6, [r3, #0]
 801410a:	2f6f      	cmp	r7, #111	; 0x6f
 801410c:	4853      	ldr	r0, [pc, #332]	; (801425c <_printf_i+0x244>)
 801410e:	bf0c      	ite	eq
 8014110:	2308      	moveq	r3, #8
 8014112:	230a      	movne	r3, #10
 8014114:	2100      	movs	r1, #0
 8014116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801411a:	6865      	ldr	r5, [r4, #4]
 801411c:	2d00      	cmp	r5, #0
 801411e:	60a5      	str	r5, [r4, #8]
 8014120:	bfa2      	ittt	ge
 8014122:	6821      	ldrge	r1, [r4, #0]
 8014124:	f021 0104 	bicge.w	r1, r1, #4
 8014128:	6021      	strge	r1, [r4, #0]
 801412a:	b90e      	cbnz	r6, 8014130 <_printf_i+0x118>
 801412c:	2d00      	cmp	r5, #0
 801412e:	d04d      	beq.n	80141cc <_printf_i+0x1b4>
 8014130:	4615      	mov	r5, r2
 8014132:	fbb6 f1f3 	udiv	r1, r6, r3
 8014136:	fb03 6711 	mls	r7, r3, r1, r6
 801413a:	5dc7      	ldrb	r7, [r0, r7]
 801413c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014140:	4637      	mov	r7, r6
 8014142:	460e      	mov	r6, r1
 8014144:	42bb      	cmp	r3, r7
 8014146:	d9f4      	bls.n	8014132 <_printf_i+0x11a>
 8014148:	2b08      	cmp	r3, #8
 801414a:	d10b      	bne.n	8014164 <_printf_i+0x14c>
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	07de      	lsls	r6, r3, #31
 8014150:	d508      	bpl.n	8014164 <_printf_i+0x14c>
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	6861      	ldr	r1, [r4, #4]
 8014156:	4299      	cmp	r1, r3
 8014158:	bfde      	ittt	le
 801415a:	2330      	movle	r3, #48	; 0x30
 801415c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014160:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014164:	1b52      	subs	r2, r2, r5
 8014166:	6122      	str	r2, [r4, #16]
 8014168:	464b      	mov	r3, r9
 801416a:	aa03      	add	r2, sp, #12
 801416c:	4621      	mov	r1, r4
 801416e:	4640      	mov	r0, r8
 8014170:	f8cd a000 	str.w	sl, [sp]
 8014174:	f7ff fee0 	bl	8013f38 <_printf_common>
 8014178:	3001      	adds	r0, #1
 801417a:	d14c      	bne.n	8014216 <_printf_i+0x1fe>
 801417c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014180:	b004      	add	sp, #16
 8014182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014186:	4835      	ldr	r0, [pc, #212]	; (801425c <_printf_i+0x244>)
 8014188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801418c:	6829      	ldr	r1, [r5, #0]
 801418e:	6823      	ldr	r3, [r4, #0]
 8014190:	f851 6b04 	ldr.w	r6, [r1], #4
 8014194:	6029      	str	r1, [r5, #0]
 8014196:	061d      	lsls	r5, r3, #24
 8014198:	d514      	bpl.n	80141c4 <_printf_i+0x1ac>
 801419a:	07df      	lsls	r7, r3, #31
 801419c:	bf44      	itt	mi
 801419e:	f043 0320 	orrmi.w	r3, r3, #32
 80141a2:	6023      	strmi	r3, [r4, #0]
 80141a4:	b91e      	cbnz	r6, 80141ae <_printf_i+0x196>
 80141a6:	6823      	ldr	r3, [r4, #0]
 80141a8:	f023 0320 	bic.w	r3, r3, #32
 80141ac:	6023      	str	r3, [r4, #0]
 80141ae:	2310      	movs	r3, #16
 80141b0:	e7b0      	b.n	8014114 <_printf_i+0xfc>
 80141b2:	6823      	ldr	r3, [r4, #0]
 80141b4:	f043 0320 	orr.w	r3, r3, #32
 80141b8:	6023      	str	r3, [r4, #0]
 80141ba:	2378      	movs	r3, #120	; 0x78
 80141bc:	4828      	ldr	r0, [pc, #160]	; (8014260 <_printf_i+0x248>)
 80141be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80141c2:	e7e3      	b.n	801418c <_printf_i+0x174>
 80141c4:	0659      	lsls	r1, r3, #25
 80141c6:	bf48      	it	mi
 80141c8:	b2b6      	uxthmi	r6, r6
 80141ca:	e7e6      	b.n	801419a <_printf_i+0x182>
 80141cc:	4615      	mov	r5, r2
 80141ce:	e7bb      	b.n	8014148 <_printf_i+0x130>
 80141d0:	682b      	ldr	r3, [r5, #0]
 80141d2:	6826      	ldr	r6, [r4, #0]
 80141d4:	1d18      	adds	r0, r3, #4
 80141d6:	6961      	ldr	r1, [r4, #20]
 80141d8:	6028      	str	r0, [r5, #0]
 80141da:	0635      	lsls	r5, r6, #24
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	d501      	bpl.n	80141e4 <_printf_i+0x1cc>
 80141e0:	6019      	str	r1, [r3, #0]
 80141e2:	e002      	b.n	80141ea <_printf_i+0x1d2>
 80141e4:	0670      	lsls	r0, r6, #25
 80141e6:	d5fb      	bpl.n	80141e0 <_printf_i+0x1c8>
 80141e8:	8019      	strh	r1, [r3, #0]
 80141ea:	2300      	movs	r3, #0
 80141ec:	4615      	mov	r5, r2
 80141ee:	6123      	str	r3, [r4, #16]
 80141f0:	e7ba      	b.n	8014168 <_printf_i+0x150>
 80141f2:	682b      	ldr	r3, [r5, #0]
 80141f4:	2100      	movs	r1, #0
 80141f6:	1d1a      	adds	r2, r3, #4
 80141f8:	602a      	str	r2, [r5, #0]
 80141fa:	681d      	ldr	r5, [r3, #0]
 80141fc:	6862      	ldr	r2, [r4, #4]
 80141fe:	4628      	mov	r0, r5
 8014200:	f002 fed0 	bl	8016fa4 <memchr>
 8014204:	b108      	cbz	r0, 801420a <_printf_i+0x1f2>
 8014206:	1b40      	subs	r0, r0, r5
 8014208:	6060      	str	r0, [r4, #4]
 801420a:	6863      	ldr	r3, [r4, #4]
 801420c:	6123      	str	r3, [r4, #16]
 801420e:	2300      	movs	r3, #0
 8014210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014214:	e7a8      	b.n	8014168 <_printf_i+0x150>
 8014216:	6923      	ldr	r3, [r4, #16]
 8014218:	462a      	mov	r2, r5
 801421a:	4649      	mov	r1, r9
 801421c:	4640      	mov	r0, r8
 801421e:	47d0      	blx	sl
 8014220:	3001      	adds	r0, #1
 8014222:	d0ab      	beq.n	801417c <_printf_i+0x164>
 8014224:	6823      	ldr	r3, [r4, #0]
 8014226:	079b      	lsls	r3, r3, #30
 8014228:	d413      	bmi.n	8014252 <_printf_i+0x23a>
 801422a:	68e0      	ldr	r0, [r4, #12]
 801422c:	9b03      	ldr	r3, [sp, #12]
 801422e:	4298      	cmp	r0, r3
 8014230:	bfb8      	it	lt
 8014232:	4618      	movlt	r0, r3
 8014234:	e7a4      	b.n	8014180 <_printf_i+0x168>
 8014236:	2301      	movs	r3, #1
 8014238:	4632      	mov	r2, r6
 801423a:	4649      	mov	r1, r9
 801423c:	4640      	mov	r0, r8
 801423e:	47d0      	blx	sl
 8014240:	3001      	adds	r0, #1
 8014242:	d09b      	beq.n	801417c <_printf_i+0x164>
 8014244:	3501      	adds	r5, #1
 8014246:	68e3      	ldr	r3, [r4, #12]
 8014248:	9903      	ldr	r1, [sp, #12]
 801424a:	1a5b      	subs	r3, r3, r1
 801424c:	42ab      	cmp	r3, r5
 801424e:	dcf2      	bgt.n	8014236 <_printf_i+0x21e>
 8014250:	e7eb      	b.n	801422a <_printf_i+0x212>
 8014252:	2500      	movs	r5, #0
 8014254:	f104 0619 	add.w	r6, r4, #25
 8014258:	e7f5      	b.n	8014246 <_printf_i+0x22e>
 801425a:	bf00      	nop
 801425c:	0818ac06 	.word	0x0818ac06
 8014260:	0818ac17 	.word	0x0818ac17

08014264 <_scanf_float>:
 8014264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014268:	b087      	sub	sp, #28
 801426a:	4617      	mov	r7, r2
 801426c:	468b      	mov	fp, r1
 801426e:	4680      	mov	r8, r0
 8014270:	9303      	str	r3, [sp, #12]
 8014272:	460c      	mov	r4, r1
 8014274:	688b      	ldr	r3, [r1, #8]
 8014276:	1e5a      	subs	r2, r3, #1
 8014278:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801427c:	bf8b      	itete	hi
 801427e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014282:	2300      	movls	r3, #0
 8014284:	195b      	addhi	r3, r3, r5
 8014286:	9302      	strls	r3, [sp, #8]
 8014288:	f04f 0500 	mov.w	r5, #0
 801428c:	bf84      	itt	hi
 801428e:	9302      	strhi	r3, [sp, #8]
 8014290:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014294:	46aa      	mov	sl, r5
 8014296:	46a9      	mov	r9, r5
 8014298:	bf88      	it	hi
 801429a:	608b      	strhi	r3, [r1, #8]
 801429c:	680b      	ldr	r3, [r1, #0]
 801429e:	9501      	str	r5, [sp, #4]
 80142a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80142a4:	f84b 3b1c 	str.w	r3, [fp], #28
 80142a8:	465e      	mov	r6, fp
 80142aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80142ae:	68a2      	ldr	r2, [r4, #8]
 80142b0:	b152      	cbz	r2, 80142c8 <_scanf_float+0x64>
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	2b4e      	cmp	r3, #78	; 0x4e
 80142b8:	d864      	bhi.n	8014384 <_scanf_float+0x120>
 80142ba:	2b40      	cmp	r3, #64	; 0x40
 80142bc:	d83c      	bhi.n	8014338 <_scanf_float+0xd4>
 80142be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80142c2:	b2c8      	uxtb	r0, r1
 80142c4:	280e      	cmp	r0, #14
 80142c6:	d93a      	bls.n	801433e <_scanf_float+0xda>
 80142c8:	f1b9 0f00 	cmp.w	r9, #0
 80142cc:	d003      	beq.n	80142d6 <_scanf_float+0x72>
 80142ce:	6823      	ldr	r3, [r4, #0]
 80142d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80142d4:	6023      	str	r3, [r4, #0]
 80142d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80142da:	f1ba 0f01 	cmp.w	sl, #1
 80142de:	f200 8113 	bhi.w	8014508 <_scanf_float+0x2a4>
 80142e2:	455e      	cmp	r6, fp
 80142e4:	f200 8105 	bhi.w	80144f2 <_scanf_float+0x28e>
 80142e8:	2501      	movs	r5, #1
 80142ea:	4628      	mov	r0, r5
 80142ec:	b007      	add	sp, #28
 80142ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80142f6:	2a0d      	cmp	r2, #13
 80142f8:	d8e6      	bhi.n	80142c8 <_scanf_float+0x64>
 80142fa:	a101      	add	r1, pc, #4	; (adr r1, 8014300 <_scanf_float+0x9c>)
 80142fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014300:	0801443f 	.word	0x0801443f
 8014304:	080142c9 	.word	0x080142c9
 8014308:	080142c9 	.word	0x080142c9
 801430c:	080142c9 	.word	0x080142c9
 8014310:	0801449f 	.word	0x0801449f
 8014314:	08014477 	.word	0x08014477
 8014318:	080142c9 	.word	0x080142c9
 801431c:	080142c9 	.word	0x080142c9
 8014320:	0801444d 	.word	0x0801444d
 8014324:	080142c9 	.word	0x080142c9
 8014328:	080142c9 	.word	0x080142c9
 801432c:	080142c9 	.word	0x080142c9
 8014330:	080142c9 	.word	0x080142c9
 8014334:	08014405 	.word	0x08014405
 8014338:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801433c:	e7db      	b.n	80142f6 <_scanf_float+0x92>
 801433e:	290e      	cmp	r1, #14
 8014340:	d8c2      	bhi.n	80142c8 <_scanf_float+0x64>
 8014342:	a001      	add	r0, pc, #4	; (adr r0, 8014348 <_scanf_float+0xe4>)
 8014344:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014348:	080143f7 	.word	0x080143f7
 801434c:	080142c9 	.word	0x080142c9
 8014350:	080143f7 	.word	0x080143f7
 8014354:	0801448b 	.word	0x0801448b
 8014358:	080142c9 	.word	0x080142c9
 801435c:	080143a5 	.word	0x080143a5
 8014360:	080143e1 	.word	0x080143e1
 8014364:	080143e1 	.word	0x080143e1
 8014368:	080143e1 	.word	0x080143e1
 801436c:	080143e1 	.word	0x080143e1
 8014370:	080143e1 	.word	0x080143e1
 8014374:	080143e1 	.word	0x080143e1
 8014378:	080143e1 	.word	0x080143e1
 801437c:	080143e1 	.word	0x080143e1
 8014380:	080143e1 	.word	0x080143e1
 8014384:	2b6e      	cmp	r3, #110	; 0x6e
 8014386:	d809      	bhi.n	801439c <_scanf_float+0x138>
 8014388:	2b60      	cmp	r3, #96	; 0x60
 801438a:	d8b2      	bhi.n	80142f2 <_scanf_float+0x8e>
 801438c:	2b54      	cmp	r3, #84	; 0x54
 801438e:	d077      	beq.n	8014480 <_scanf_float+0x21c>
 8014390:	2b59      	cmp	r3, #89	; 0x59
 8014392:	d199      	bne.n	80142c8 <_scanf_float+0x64>
 8014394:	2d07      	cmp	r5, #7
 8014396:	d197      	bne.n	80142c8 <_scanf_float+0x64>
 8014398:	2508      	movs	r5, #8
 801439a:	e029      	b.n	80143f0 <_scanf_float+0x18c>
 801439c:	2b74      	cmp	r3, #116	; 0x74
 801439e:	d06f      	beq.n	8014480 <_scanf_float+0x21c>
 80143a0:	2b79      	cmp	r3, #121	; 0x79
 80143a2:	e7f6      	b.n	8014392 <_scanf_float+0x12e>
 80143a4:	6821      	ldr	r1, [r4, #0]
 80143a6:	05c8      	lsls	r0, r1, #23
 80143a8:	d51a      	bpl.n	80143e0 <_scanf_float+0x17c>
 80143aa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80143ae:	9b02      	ldr	r3, [sp, #8]
 80143b0:	f109 0901 	add.w	r9, r9, #1
 80143b4:	6021      	str	r1, [r4, #0]
 80143b6:	b11b      	cbz	r3, 80143c0 <_scanf_float+0x15c>
 80143b8:	3b01      	subs	r3, #1
 80143ba:	3201      	adds	r2, #1
 80143bc:	9302      	str	r3, [sp, #8]
 80143be:	60a2      	str	r2, [r4, #8]
 80143c0:	68a3      	ldr	r3, [r4, #8]
 80143c2:	3b01      	subs	r3, #1
 80143c4:	60a3      	str	r3, [r4, #8]
 80143c6:	6923      	ldr	r3, [r4, #16]
 80143c8:	3301      	adds	r3, #1
 80143ca:	6123      	str	r3, [r4, #16]
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	3b01      	subs	r3, #1
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	607b      	str	r3, [r7, #4]
 80143d4:	f340 8084 	ble.w	80144e0 <_scanf_float+0x27c>
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	3301      	adds	r3, #1
 80143dc:	603b      	str	r3, [r7, #0]
 80143de:	e766      	b.n	80142ae <_scanf_float+0x4a>
 80143e0:	eb1a 0f05 	cmn.w	sl, r5
 80143e4:	f47f af70 	bne.w	80142c8 <_scanf_float+0x64>
 80143e8:	6822      	ldr	r2, [r4, #0]
 80143ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80143ee:	6022      	str	r2, [r4, #0]
 80143f0:	f806 3b01 	strb.w	r3, [r6], #1
 80143f4:	e7e4      	b.n	80143c0 <_scanf_float+0x15c>
 80143f6:	6822      	ldr	r2, [r4, #0]
 80143f8:	0610      	lsls	r0, r2, #24
 80143fa:	f57f af65 	bpl.w	80142c8 <_scanf_float+0x64>
 80143fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014402:	e7f4      	b.n	80143ee <_scanf_float+0x18a>
 8014404:	f1ba 0f00 	cmp.w	sl, #0
 8014408:	d10e      	bne.n	8014428 <_scanf_float+0x1c4>
 801440a:	f1b9 0f00 	cmp.w	r9, #0
 801440e:	d10e      	bne.n	801442e <_scanf_float+0x1ca>
 8014410:	6822      	ldr	r2, [r4, #0]
 8014412:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014416:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801441a:	d108      	bne.n	801442e <_scanf_float+0x1ca>
 801441c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014420:	f04f 0a01 	mov.w	sl, #1
 8014424:	6022      	str	r2, [r4, #0]
 8014426:	e7e3      	b.n	80143f0 <_scanf_float+0x18c>
 8014428:	f1ba 0f02 	cmp.w	sl, #2
 801442c:	d055      	beq.n	80144da <_scanf_float+0x276>
 801442e:	2d01      	cmp	r5, #1
 8014430:	d002      	beq.n	8014438 <_scanf_float+0x1d4>
 8014432:	2d04      	cmp	r5, #4
 8014434:	f47f af48 	bne.w	80142c8 <_scanf_float+0x64>
 8014438:	3501      	adds	r5, #1
 801443a:	b2ed      	uxtb	r5, r5
 801443c:	e7d8      	b.n	80143f0 <_scanf_float+0x18c>
 801443e:	f1ba 0f01 	cmp.w	sl, #1
 8014442:	f47f af41 	bne.w	80142c8 <_scanf_float+0x64>
 8014446:	f04f 0a02 	mov.w	sl, #2
 801444a:	e7d1      	b.n	80143f0 <_scanf_float+0x18c>
 801444c:	b97d      	cbnz	r5, 801446e <_scanf_float+0x20a>
 801444e:	f1b9 0f00 	cmp.w	r9, #0
 8014452:	f47f af3c 	bne.w	80142ce <_scanf_float+0x6a>
 8014456:	6822      	ldr	r2, [r4, #0]
 8014458:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801445c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014460:	f47f af39 	bne.w	80142d6 <_scanf_float+0x72>
 8014464:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014468:	2501      	movs	r5, #1
 801446a:	6022      	str	r2, [r4, #0]
 801446c:	e7c0      	b.n	80143f0 <_scanf_float+0x18c>
 801446e:	2d03      	cmp	r5, #3
 8014470:	d0e2      	beq.n	8014438 <_scanf_float+0x1d4>
 8014472:	2d05      	cmp	r5, #5
 8014474:	e7de      	b.n	8014434 <_scanf_float+0x1d0>
 8014476:	2d02      	cmp	r5, #2
 8014478:	f47f af26 	bne.w	80142c8 <_scanf_float+0x64>
 801447c:	2503      	movs	r5, #3
 801447e:	e7b7      	b.n	80143f0 <_scanf_float+0x18c>
 8014480:	2d06      	cmp	r5, #6
 8014482:	f47f af21 	bne.w	80142c8 <_scanf_float+0x64>
 8014486:	2507      	movs	r5, #7
 8014488:	e7b2      	b.n	80143f0 <_scanf_float+0x18c>
 801448a:	6822      	ldr	r2, [r4, #0]
 801448c:	0591      	lsls	r1, r2, #22
 801448e:	f57f af1b 	bpl.w	80142c8 <_scanf_float+0x64>
 8014492:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014496:	f8cd 9004 	str.w	r9, [sp, #4]
 801449a:	6022      	str	r2, [r4, #0]
 801449c:	e7a8      	b.n	80143f0 <_scanf_float+0x18c>
 801449e:	6822      	ldr	r2, [r4, #0]
 80144a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80144a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80144a8:	d006      	beq.n	80144b8 <_scanf_float+0x254>
 80144aa:	0550      	lsls	r0, r2, #21
 80144ac:	f57f af0c 	bpl.w	80142c8 <_scanf_float+0x64>
 80144b0:	f1b9 0f00 	cmp.w	r9, #0
 80144b4:	f43f af0f 	beq.w	80142d6 <_scanf_float+0x72>
 80144b8:	0591      	lsls	r1, r2, #22
 80144ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80144be:	bf58      	it	pl
 80144c0:	9901      	ldrpl	r1, [sp, #4]
 80144c2:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80144c6:	bf58      	it	pl
 80144c8:	eba9 0101 	subpl.w	r1, r9, r1
 80144cc:	6022      	str	r2, [r4, #0]
 80144ce:	f04f 0900 	mov.w	r9, #0
 80144d2:	bf58      	it	pl
 80144d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80144d8:	e78a      	b.n	80143f0 <_scanf_float+0x18c>
 80144da:	f04f 0a03 	mov.w	sl, #3
 80144de:	e787      	b.n	80143f0 <_scanf_float+0x18c>
 80144e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80144e4:	4639      	mov	r1, r7
 80144e6:	4640      	mov	r0, r8
 80144e8:	4798      	blx	r3
 80144ea:	2800      	cmp	r0, #0
 80144ec:	f43f aedf 	beq.w	80142ae <_scanf_float+0x4a>
 80144f0:	e6ea      	b.n	80142c8 <_scanf_float+0x64>
 80144f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144f6:	463a      	mov	r2, r7
 80144f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144fc:	4640      	mov	r0, r8
 80144fe:	4798      	blx	r3
 8014500:	6923      	ldr	r3, [r4, #16]
 8014502:	3b01      	subs	r3, #1
 8014504:	6123      	str	r3, [r4, #16]
 8014506:	e6ec      	b.n	80142e2 <_scanf_float+0x7e>
 8014508:	1e6b      	subs	r3, r5, #1
 801450a:	2b06      	cmp	r3, #6
 801450c:	d825      	bhi.n	801455a <_scanf_float+0x2f6>
 801450e:	2d02      	cmp	r5, #2
 8014510:	d836      	bhi.n	8014580 <_scanf_float+0x31c>
 8014512:	455e      	cmp	r6, fp
 8014514:	f67f aee8 	bls.w	80142e8 <_scanf_float+0x84>
 8014518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801451c:	463a      	mov	r2, r7
 801451e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014522:	4640      	mov	r0, r8
 8014524:	4798      	blx	r3
 8014526:	6923      	ldr	r3, [r4, #16]
 8014528:	3b01      	subs	r3, #1
 801452a:	6123      	str	r3, [r4, #16]
 801452c:	e7f1      	b.n	8014512 <_scanf_float+0x2ae>
 801452e:	9802      	ldr	r0, [sp, #8]
 8014530:	463a      	mov	r2, r7
 8014532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014536:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801453a:	9002      	str	r0, [sp, #8]
 801453c:	4640      	mov	r0, r8
 801453e:	4798      	blx	r3
 8014540:	6923      	ldr	r3, [r4, #16]
 8014542:	3b01      	subs	r3, #1
 8014544:	6123      	str	r3, [r4, #16]
 8014546:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801454a:	fa5f fa8a 	uxtb.w	sl, sl
 801454e:	f1ba 0f02 	cmp.w	sl, #2
 8014552:	d1ec      	bne.n	801452e <_scanf_float+0x2ca>
 8014554:	3d03      	subs	r5, #3
 8014556:	b2ed      	uxtb	r5, r5
 8014558:	1b76      	subs	r6, r6, r5
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	05da      	lsls	r2, r3, #23
 801455e:	d52e      	bpl.n	80145be <_scanf_float+0x35a>
 8014560:	055b      	lsls	r3, r3, #21
 8014562:	d510      	bpl.n	8014586 <_scanf_float+0x322>
 8014564:	455e      	cmp	r6, fp
 8014566:	f67f aebf 	bls.w	80142e8 <_scanf_float+0x84>
 801456a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801456e:	463a      	mov	r2, r7
 8014570:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014574:	4640      	mov	r0, r8
 8014576:	4798      	blx	r3
 8014578:	6923      	ldr	r3, [r4, #16]
 801457a:	3b01      	subs	r3, #1
 801457c:	6123      	str	r3, [r4, #16]
 801457e:	e7f1      	b.n	8014564 <_scanf_float+0x300>
 8014580:	46aa      	mov	sl, r5
 8014582:	9602      	str	r6, [sp, #8]
 8014584:	e7df      	b.n	8014546 <_scanf_float+0x2e2>
 8014586:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801458a:	1e75      	subs	r5, r6, #1
 801458c:	6923      	ldr	r3, [r4, #16]
 801458e:	2965      	cmp	r1, #101	; 0x65
 8014590:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014594:	6123      	str	r3, [r4, #16]
 8014596:	d00c      	beq.n	80145b2 <_scanf_float+0x34e>
 8014598:	2945      	cmp	r1, #69	; 0x45
 801459a:	d00a      	beq.n	80145b2 <_scanf_float+0x34e>
 801459c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145a0:	463a      	mov	r2, r7
 80145a2:	4640      	mov	r0, r8
 80145a4:	1eb5      	subs	r5, r6, #2
 80145a6:	4798      	blx	r3
 80145a8:	6923      	ldr	r3, [r4, #16]
 80145aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80145ae:	3b01      	subs	r3, #1
 80145b0:	6123      	str	r3, [r4, #16]
 80145b2:	462e      	mov	r6, r5
 80145b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145b8:	463a      	mov	r2, r7
 80145ba:	4640      	mov	r0, r8
 80145bc:	4798      	blx	r3
 80145be:	6825      	ldr	r5, [r4, #0]
 80145c0:	f015 0510 	ands.w	r5, r5, #16
 80145c4:	d159      	bne.n	801467a <_scanf_float+0x416>
 80145c6:	7035      	strb	r5, [r6, #0]
 80145c8:	6823      	ldr	r3, [r4, #0]
 80145ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80145ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80145d2:	d11b      	bne.n	801460c <_scanf_float+0x3a8>
 80145d4:	9b01      	ldr	r3, [sp, #4]
 80145d6:	454b      	cmp	r3, r9
 80145d8:	eba3 0209 	sub.w	r2, r3, r9
 80145dc:	d123      	bne.n	8014626 <_scanf_float+0x3c2>
 80145de:	2200      	movs	r2, #0
 80145e0:	4659      	mov	r1, fp
 80145e2:	4640      	mov	r0, r8
 80145e4:	f000 ff72 	bl	80154cc <_strtod_r>
 80145e8:	6822      	ldr	r2, [r4, #0]
 80145ea:	9b03      	ldr	r3, [sp, #12]
 80145ec:	f012 0f02 	tst.w	r2, #2
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	ec57 6b10 	vmov	r6, r7, d0
 80145f6:	d021      	beq.n	801463c <_scanf_float+0x3d8>
 80145f8:	1d1a      	adds	r2, r3, #4
 80145fa:	9903      	ldr	r1, [sp, #12]
 80145fc:	600a      	str	r2, [r1, #0]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	e9c3 6700 	strd	r6, r7, [r3]
 8014604:	68e3      	ldr	r3, [r4, #12]
 8014606:	3301      	adds	r3, #1
 8014608:	60e3      	str	r3, [r4, #12]
 801460a:	e66e      	b.n	80142ea <_scanf_float+0x86>
 801460c:	9b04      	ldr	r3, [sp, #16]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d0e5      	beq.n	80145de <_scanf_float+0x37a>
 8014612:	9905      	ldr	r1, [sp, #20]
 8014614:	230a      	movs	r3, #10
 8014616:	462a      	mov	r2, r5
 8014618:	4640      	mov	r0, r8
 801461a:	3101      	adds	r1, #1
 801461c:	f000 ffde 	bl	80155dc <_strtol_r>
 8014620:	9b04      	ldr	r3, [sp, #16]
 8014622:	9e05      	ldr	r6, [sp, #20]
 8014624:	1ac2      	subs	r2, r0, r3
 8014626:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801462a:	4915      	ldr	r1, [pc, #84]	; (8014680 <_scanf_float+0x41c>)
 801462c:	429e      	cmp	r6, r3
 801462e:	bf28      	it	cs
 8014630:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014634:	4630      	mov	r0, r6
 8014636:	f000 f8cb 	bl	80147d0 <siprintf>
 801463a:	e7d0      	b.n	80145de <_scanf_float+0x37a>
 801463c:	9903      	ldr	r1, [sp, #12]
 801463e:	f012 0f04 	tst.w	r2, #4
 8014642:	f103 0204 	add.w	r2, r3, #4
 8014646:	600a      	str	r2, [r1, #0]
 8014648:	d1d9      	bne.n	80145fe <_scanf_float+0x39a>
 801464a:	f8d3 8000 	ldr.w	r8, [r3]
 801464e:	ee10 2a10 	vmov	r2, s0
 8014652:	463b      	mov	r3, r7
 8014654:	ee10 0a10 	vmov	r0, s0
 8014658:	4639      	mov	r1, r7
 801465a:	f7ec fa75 	bl	8000b48 <__aeabi_dcmpun>
 801465e:	b128      	cbz	r0, 801466c <_scanf_float+0x408>
 8014660:	4808      	ldr	r0, [pc, #32]	; (8014684 <_scanf_float+0x420>)
 8014662:	f000 f8af 	bl	80147c4 <nanf>
 8014666:	ed88 0a00 	vstr	s0, [r8]
 801466a:	e7cb      	b.n	8014604 <_scanf_float+0x3a0>
 801466c:	4630      	mov	r0, r6
 801466e:	4639      	mov	r1, r7
 8014670:	f7ec fac8 	bl	8000c04 <__aeabi_d2f>
 8014674:	f8c8 0000 	str.w	r0, [r8]
 8014678:	e7c4      	b.n	8014604 <_scanf_float+0x3a0>
 801467a:	2500      	movs	r5, #0
 801467c:	e635      	b.n	80142ea <_scanf_float+0x86>
 801467e:	bf00      	nop
 8014680:	0818ac28 	.word	0x0818ac28
 8014684:	0818b098 	.word	0x0818b098

08014688 <iprintf>:
 8014688:	b40f      	push	{r0, r1, r2, r3}
 801468a:	4b0a      	ldr	r3, [pc, #40]	; (80146b4 <iprintf+0x2c>)
 801468c:	b513      	push	{r0, r1, r4, lr}
 801468e:	681c      	ldr	r4, [r3, #0]
 8014690:	b124      	cbz	r4, 801469c <iprintf+0x14>
 8014692:	69a3      	ldr	r3, [r4, #24]
 8014694:	b913      	cbnz	r3, 801469c <iprintf+0x14>
 8014696:	4620      	mov	r0, r4
 8014698:	f001 fffa 	bl	8016690 <__sinit>
 801469c:	ab05      	add	r3, sp, #20
 801469e:	9a04      	ldr	r2, [sp, #16]
 80146a0:	68a1      	ldr	r1, [r4, #8]
 80146a2:	4620      	mov	r0, r4
 80146a4:	9301      	str	r3, [sp, #4]
 80146a6:	f003 faf7 	bl	8017c98 <_vfiprintf_r>
 80146aa:	b002      	add	sp, #8
 80146ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146b0:	b004      	add	sp, #16
 80146b2:	4770      	bx	lr
 80146b4:	2000010c 	.word	0x2000010c

080146b8 <_puts_r>:
 80146b8:	b570      	push	{r4, r5, r6, lr}
 80146ba:	460e      	mov	r6, r1
 80146bc:	4605      	mov	r5, r0
 80146be:	b118      	cbz	r0, 80146c8 <_puts_r+0x10>
 80146c0:	6983      	ldr	r3, [r0, #24]
 80146c2:	b90b      	cbnz	r3, 80146c8 <_puts_r+0x10>
 80146c4:	f001 ffe4 	bl	8016690 <__sinit>
 80146c8:	69ab      	ldr	r3, [r5, #24]
 80146ca:	68ac      	ldr	r4, [r5, #8]
 80146cc:	b913      	cbnz	r3, 80146d4 <_puts_r+0x1c>
 80146ce:	4628      	mov	r0, r5
 80146d0:	f001 ffde 	bl	8016690 <__sinit>
 80146d4:	4b2c      	ldr	r3, [pc, #176]	; (8014788 <_puts_r+0xd0>)
 80146d6:	429c      	cmp	r4, r3
 80146d8:	d120      	bne.n	801471c <_puts_r+0x64>
 80146da:	686c      	ldr	r4, [r5, #4]
 80146dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146de:	07db      	lsls	r3, r3, #31
 80146e0:	d405      	bmi.n	80146ee <_puts_r+0x36>
 80146e2:	89a3      	ldrh	r3, [r4, #12]
 80146e4:	0598      	lsls	r0, r3, #22
 80146e6:	d402      	bmi.n	80146ee <_puts_r+0x36>
 80146e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146ea:	f002 fbe2 	bl	8016eb2 <__retarget_lock_acquire_recursive>
 80146ee:	89a3      	ldrh	r3, [r4, #12]
 80146f0:	0719      	lsls	r1, r3, #28
 80146f2:	d51d      	bpl.n	8014730 <_puts_r+0x78>
 80146f4:	6923      	ldr	r3, [r4, #16]
 80146f6:	b1db      	cbz	r3, 8014730 <_puts_r+0x78>
 80146f8:	3e01      	subs	r6, #1
 80146fa:	68a3      	ldr	r3, [r4, #8]
 80146fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014700:	3b01      	subs	r3, #1
 8014702:	60a3      	str	r3, [r4, #8]
 8014704:	bb39      	cbnz	r1, 8014756 <_puts_r+0x9e>
 8014706:	2b00      	cmp	r3, #0
 8014708:	da38      	bge.n	801477c <_puts_r+0xc4>
 801470a:	4622      	mov	r2, r4
 801470c:	210a      	movs	r1, #10
 801470e:	4628      	mov	r0, r5
 8014710:	f000 ff66 	bl	80155e0 <__swbuf_r>
 8014714:	3001      	adds	r0, #1
 8014716:	d011      	beq.n	801473c <_puts_r+0x84>
 8014718:	250a      	movs	r5, #10
 801471a:	e011      	b.n	8014740 <_puts_r+0x88>
 801471c:	4b1b      	ldr	r3, [pc, #108]	; (801478c <_puts_r+0xd4>)
 801471e:	429c      	cmp	r4, r3
 8014720:	d101      	bne.n	8014726 <_puts_r+0x6e>
 8014722:	68ac      	ldr	r4, [r5, #8]
 8014724:	e7da      	b.n	80146dc <_puts_r+0x24>
 8014726:	4b1a      	ldr	r3, [pc, #104]	; (8014790 <_puts_r+0xd8>)
 8014728:	429c      	cmp	r4, r3
 801472a:	bf08      	it	eq
 801472c:	68ec      	ldreq	r4, [r5, #12]
 801472e:	e7d5      	b.n	80146dc <_puts_r+0x24>
 8014730:	4621      	mov	r1, r4
 8014732:	4628      	mov	r0, r5
 8014734:	f000 ffa6 	bl	8015684 <__swsetup_r>
 8014738:	2800      	cmp	r0, #0
 801473a:	d0dd      	beq.n	80146f8 <_puts_r+0x40>
 801473c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014742:	07da      	lsls	r2, r3, #31
 8014744:	d405      	bmi.n	8014752 <_puts_r+0x9a>
 8014746:	89a3      	ldrh	r3, [r4, #12]
 8014748:	059b      	lsls	r3, r3, #22
 801474a:	d402      	bmi.n	8014752 <_puts_r+0x9a>
 801474c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801474e:	f002 fbb1 	bl	8016eb4 <__retarget_lock_release_recursive>
 8014752:	4628      	mov	r0, r5
 8014754:	bd70      	pop	{r4, r5, r6, pc}
 8014756:	2b00      	cmp	r3, #0
 8014758:	da04      	bge.n	8014764 <_puts_r+0xac>
 801475a:	69a2      	ldr	r2, [r4, #24]
 801475c:	429a      	cmp	r2, r3
 801475e:	dc06      	bgt.n	801476e <_puts_r+0xb6>
 8014760:	290a      	cmp	r1, #10
 8014762:	d004      	beq.n	801476e <_puts_r+0xb6>
 8014764:	6823      	ldr	r3, [r4, #0]
 8014766:	1c5a      	adds	r2, r3, #1
 8014768:	6022      	str	r2, [r4, #0]
 801476a:	7019      	strb	r1, [r3, #0]
 801476c:	e7c5      	b.n	80146fa <_puts_r+0x42>
 801476e:	4622      	mov	r2, r4
 8014770:	4628      	mov	r0, r5
 8014772:	f000 ff35 	bl	80155e0 <__swbuf_r>
 8014776:	3001      	adds	r0, #1
 8014778:	d1bf      	bne.n	80146fa <_puts_r+0x42>
 801477a:	e7df      	b.n	801473c <_puts_r+0x84>
 801477c:	6823      	ldr	r3, [r4, #0]
 801477e:	250a      	movs	r5, #10
 8014780:	1c5a      	adds	r2, r3, #1
 8014782:	6022      	str	r2, [r4, #0]
 8014784:	701d      	strb	r5, [r3, #0]
 8014786:	e7db      	b.n	8014740 <_puts_r+0x88>
 8014788:	0818ae34 	.word	0x0818ae34
 801478c:	0818ae54 	.word	0x0818ae54
 8014790:	0818ae14 	.word	0x0818ae14

08014794 <puts>:
 8014794:	4b02      	ldr	r3, [pc, #8]	; (80147a0 <puts+0xc>)
 8014796:	4601      	mov	r1, r0
 8014798:	6818      	ldr	r0, [r3, #0]
 801479a:	f7ff bf8d 	b.w	80146b8 <_puts_r>
 801479e:	bf00      	nop
 80147a0:	2000010c 	.word	0x2000010c

080147a4 <_sbrk_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	2300      	movs	r3, #0
 80147a8:	4d05      	ldr	r5, [pc, #20]	; (80147c0 <_sbrk_r+0x1c>)
 80147aa:	4604      	mov	r4, r0
 80147ac:	4608      	mov	r0, r1
 80147ae:	602b      	str	r3, [r5, #0]
 80147b0:	f7ed f836 	bl	8001820 <_sbrk>
 80147b4:	1c43      	adds	r3, r0, #1
 80147b6:	d102      	bne.n	80147be <_sbrk_r+0x1a>
 80147b8:	682b      	ldr	r3, [r5, #0]
 80147ba:	b103      	cbz	r3, 80147be <_sbrk_r+0x1a>
 80147bc:	6023      	str	r3, [r4, #0]
 80147be:	bd38      	pop	{r3, r4, r5, pc}
 80147c0:	200032c0 	.word	0x200032c0

080147c4 <nanf>:
 80147c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80147cc <nanf+0x8>
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop
 80147cc:	7fc00000 	.word	0x7fc00000

080147d0 <siprintf>:
 80147d0:	b40e      	push	{r1, r2, r3}
 80147d2:	b500      	push	{lr}
 80147d4:	b09c      	sub	sp, #112	; 0x70
 80147d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80147da:	ab1d      	add	r3, sp, #116	; 0x74
 80147dc:	9002      	str	r0, [sp, #8]
 80147de:	9006      	str	r0, [sp, #24]
 80147e0:	9107      	str	r1, [sp, #28]
 80147e2:	9104      	str	r1, [sp, #16]
 80147e4:	4808      	ldr	r0, [pc, #32]	; (8014808 <siprintf+0x38>)
 80147e6:	4909      	ldr	r1, [pc, #36]	; (801480c <siprintf+0x3c>)
 80147e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80147ec:	9105      	str	r1, [sp, #20]
 80147ee:	a902      	add	r1, sp, #8
 80147f0:	6800      	ldr	r0, [r0, #0]
 80147f2:	9301      	str	r3, [sp, #4]
 80147f4:	f003 f926 	bl	8017a44 <_svfiprintf_r>
 80147f8:	9b02      	ldr	r3, [sp, #8]
 80147fa:	2200      	movs	r2, #0
 80147fc:	701a      	strb	r2, [r3, #0]
 80147fe:	b01c      	add	sp, #112	; 0x70
 8014800:	f85d eb04 	ldr.w	lr, [sp], #4
 8014804:	b003      	add	sp, #12
 8014806:	4770      	bx	lr
 8014808:	2000010c 	.word	0x2000010c
 801480c:	ffff0208 	.word	0xffff0208

08014810 <strcat>:
 8014810:	4602      	mov	r2, r0
 8014812:	b510      	push	{r4, lr}
 8014814:	7814      	ldrb	r4, [r2, #0]
 8014816:	4613      	mov	r3, r2
 8014818:	3201      	adds	r2, #1
 801481a:	2c00      	cmp	r4, #0
 801481c:	d1fa      	bne.n	8014814 <strcat+0x4>
 801481e:	3b01      	subs	r3, #1
 8014820:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014824:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014828:	2a00      	cmp	r2, #0
 801482a:	d1f9      	bne.n	8014820 <strcat+0x10>
 801482c:	bd10      	pop	{r4, pc}

0801482e <strcpy>:
 801482e:	4603      	mov	r3, r0
 8014830:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014834:	f803 2b01 	strb.w	r2, [r3], #1
 8014838:	2a00      	cmp	r2, #0
 801483a:	d1f9      	bne.n	8014830 <strcpy+0x2>
 801483c:	4770      	bx	lr

0801483e <strncmp>:
 801483e:	b510      	push	{r4, lr}
 8014840:	b17a      	cbz	r2, 8014862 <strncmp+0x24>
 8014842:	4603      	mov	r3, r0
 8014844:	3901      	subs	r1, #1
 8014846:	1884      	adds	r4, r0, r2
 8014848:	f813 0b01 	ldrb.w	r0, [r3], #1
 801484c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014850:	4290      	cmp	r0, r2
 8014852:	d101      	bne.n	8014858 <strncmp+0x1a>
 8014854:	42a3      	cmp	r3, r4
 8014856:	d101      	bne.n	801485c <strncmp+0x1e>
 8014858:	1a80      	subs	r0, r0, r2
 801485a:	bd10      	pop	{r4, pc}
 801485c:	2800      	cmp	r0, #0
 801485e:	d1f3      	bne.n	8014848 <strncmp+0xa>
 8014860:	e7fa      	b.n	8014858 <strncmp+0x1a>
 8014862:	4610      	mov	r0, r2
 8014864:	e7f9      	b.n	801485a <strncmp+0x1c>

08014866 <strncpy>:
 8014866:	3901      	subs	r1, #1
 8014868:	4603      	mov	r3, r0
 801486a:	b510      	push	{r4, lr}
 801486c:	b132      	cbz	r2, 801487c <strncpy+0x16>
 801486e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014872:	3a01      	subs	r2, #1
 8014874:	f803 4b01 	strb.w	r4, [r3], #1
 8014878:	2c00      	cmp	r4, #0
 801487a:	d1f7      	bne.n	801486c <strncpy+0x6>
 801487c:	441a      	add	r2, r3
 801487e:	2100      	movs	r1, #0
 8014880:	4293      	cmp	r3, r2
 8014882:	d100      	bne.n	8014886 <strncpy+0x20>
 8014884:	bd10      	pop	{r4, pc}
 8014886:	f803 1b01 	strb.w	r1, [r3], #1
 801488a:	e7f9      	b.n	8014880 <strncpy+0x1a>

0801488c <sulp>:
 801488c:	b570      	push	{r4, r5, r6, lr}
 801488e:	4604      	mov	r4, r0
 8014890:	460d      	mov	r5, r1
 8014892:	4616      	mov	r6, r2
 8014894:	ec45 4b10 	vmov	d0, r4, r5
 8014898:	f002 ff16 	bl	80176c8 <__ulp>
 801489c:	ec51 0b10 	vmov	r0, r1, d0
 80148a0:	b17e      	cbz	r6, 80148c2 <sulp+0x36>
 80148a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80148a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	dd09      	ble.n	80148c2 <sulp+0x36>
 80148ae:	051b      	lsls	r3, r3, #20
 80148b0:	2400      	movs	r4, #0
 80148b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80148b6:	4622      	mov	r2, r4
 80148b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80148bc:	462b      	mov	r3, r5
 80148be:	f7eb fea9 	bl	8000614 <__aeabi_dmul>
 80148c2:	bd70      	pop	{r4, r5, r6, pc}
 80148c4:	0000      	movs	r0, r0
	...

080148c8 <_strtod_l>:
 80148c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148cc:	461f      	mov	r7, r3
 80148ce:	2300      	movs	r3, #0
 80148d0:	4604      	mov	r4, r0
 80148d2:	4688      	mov	r8, r1
 80148d4:	f04f 0a00 	mov.w	sl, #0
 80148d8:	f04f 0b00 	mov.w	fp, #0
 80148dc:	ed2d 8b02 	vpush	{d8}
 80148e0:	b09d      	sub	sp, #116	; 0x74
 80148e2:	9318      	str	r3, [sp, #96]	; 0x60
 80148e4:	4b9f      	ldr	r3, [pc, #636]	; (8014b64 <_strtod_l+0x29c>)
 80148e6:	9213      	str	r2, [sp, #76]	; 0x4c
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4618      	mov	r0, r3
 80148ec:	9305      	str	r3, [sp, #20]
 80148ee:	f7eb fccd 	bl	800028c <strlen>
 80148f2:	4605      	mov	r5, r0
 80148f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80148f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148fa:	781a      	ldrb	r2, [r3, #0]
 80148fc:	2a2b      	cmp	r2, #43	; 0x2b
 80148fe:	d04e      	beq.n	801499e <_strtod_l+0xd6>
 8014900:	d83b      	bhi.n	801497a <_strtod_l+0xb2>
 8014902:	2a0d      	cmp	r2, #13
 8014904:	d834      	bhi.n	8014970 <_strtod_l+0xa8>
 8014906:	2a08      	cmp	r2, #8
 8014908:	d834      	bhi.n	8014974 <_strtod_l+0xac>
 801490a:	2a00      	cmp	r2, #0
 801490c:	d03e      	beq.n	801498c <_strtod_l+0xc4>
 801490e:	2300      	movs	r3, #0
 8014910:	930a      	str	r3, [sp, #40]	; 0x28
 8014912:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014914:	7833      	ldrb	r3, [r6, #0]
 8014916:	2b30      	cmp	r3, #48	; 0x30
 8014918:	f040 80b0 	bne.w	8014a7c <_strtod_l+0x1b4>
 801491c:	7873      	ldrb	r3, [r6, #1]
 801491e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014922:	2b58      	cmp	r3, #88	; 0x58
 8014924:	d168      	bne.n	80149f8 <_strtod_l+0x130>
 8014926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014928:	a917      	add	r1, sp, #92	; 0x5c
 801492a:	9702      	str	r7, [sp, #8]
 801492c:	4620      	mov	r0, r4
 801492e:	9301      	str	r3, [sp, #4]
 8014930:	ab18      	add	r3, sp, #96	; 0x60
 8014932:	4a8d      	ldr	r2, [pc, #564]	; (8014b68 <_strtod_l+0x2a0>)
 8014934:	9300      	str	r3, [sp, #0]
 8014936:	ab19      	add	r3, sp, #100	; 0x64
 8014938:	f001 ffae 	bl	8016898 <__gethex>
 801493c:	f010 0707 	ands.w	r7, r0, #7
 8014940:	4605      	mov	r5, r0
 8014942:	d005      	beq.n	8014950 <_strtod_l+0x88>
 8014944:	2f06      	cmp	r7, #6
 8014946:	d12c      	bne.n	80149a2 <_strtod_l+0xda>
 8014948:	3601      	adds	r6, #1
 801494a:	2300      	movs	r3, #0
 801494c:	9617      	str	r6, [sp, #92]	; 0x5c
 801494e:	930a      	str	r3, [sp, #40]	; 0x28
 8014950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014952:	2b00      	cmp	r3, #0
 8014954:	f040 858e 	bne.w	8015474 <_strtod_l+0xbac>
 8014958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801495a:	b1eb      	cbz	r3, 8014998 <_strtod_l+0xd0>
 801495c:	4652      	mov	r2, sl
 801495e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014962:	ec43 2b10 	vmov	d0, r2, r3
 8014966:	b01d      	add	sp, #116	; 0x74
 8014968:	ecbd 8b02 	vpop	{d8}
 801496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014970:	2a20      	cmp	r2, #32
 8014972:	d1cc      	bne.n	801490e <_strtod_l+0x46>
 8014974:	3301      	adds	r3, #1
 8014976:	9317      	str	r3, [sp, #92]	; 0x5c
 8014978:	e7be      	b.n	80148f8 <_strtod_l+0x30>
 801497a:	2a2d      	cmp	r2, #45	; 0x2d
 801497c:	d1c7      	bne.n	801490e <_strtod_l+0x46>
 801497e:	2201      	movs	r2, #1
 8014980:	920a      	str	r2, [sp, #40]	; 0x28
 8014982:	1c5a      	adds	r2, r3, #1
 8014984:	9217      	str	r2, [sp, #92]	; 0x5c
 8014986:	785b      	ldrb	r3, [r3, #1]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d1c2      	bne.n	8014912 <_strtod_l+0x4a>
 801498c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801498e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014992:	2b00      	cmp	r3, #0
 8014994:	f040 856c 	bne.w	8015470 <_strtod_l+0xba8>
 8014998:	4652      	mov	r2, sl
 801499a:	465b      	mov	r3, fp
 801499c:	e7e1      	b.n	8014962 <_strtod_l+0x9a>
 801499e:	2200      	movs	r2, #0
 80149a0:	e7ee      	b.n	8014980 <_strtod_l+0xb8>
 80149a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80149a4:	b13a      	cbz	r2, 80149b6 <_strtod_l+0xee>
 80149a6:	2135      	movs	r1, #53	; 0x35
 80149a8:	a81a      	add	r0, sp, #104	; 0x68
 80149aa:	f002 ff96 	bl	80178da <__copybits>
 80149ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80149b0:	4620      	mov	r0, r4
 80149b2:	f002 fb51 	bl	8017058 <_Bfree>
 80149b6:	3f01      	subs	r7, #1
 80149b8:	2f04      	cmp	r7, #4
 80149ba:	d806      	bhi.n	80149ca <_strtod_l+0x102>
 80149bc:	e8df f007 	tbb	[pc, r7]
 80149c0:	1714030a 	.word	0x1714030a
 80149c4:	0a          	.byte	0x0a
 80149c5:	00          	.byte	0x00
 80149c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80149ca:	0728      	lsls	r0, r5, #28
 80149cc:	d5c0      	bpl.n	8014950 <_strtod_l+0x88>
 80149ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80149d2:	e7bd      	b.n	8014950 <_strtod_l+0x88>
 80149d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80149d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80149da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80149de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80149e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80149e6:	e7f0      	b.n	80149ca <_strtod_l+0x102>
 80149e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8014b6c <_strtod_l+0x2a4>
 80149ec:	e7ed      	b.n	80149ca <_strtod_l+0x102>
 80149ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80149f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80149f6:	e7e8      	b.n	80149ca <_strtod_l+0x102>
 80149f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149fa:	1c5a      	adds	r2, r3, #1
 80149fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80149fe:	785b      	ldrb	r3, [r3, #1]
 8014a00:	2b30      	cmp	r3, #48	; 0x30
 8014a02:	d0f9      	beq.n	80149f8 <_strtod_l+0x130>
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d0a3      	beq.n	8014950 <_strtod_l+0x88>
 8014a08:	2301      	movs	r3, #1
 8014a0a:	f04f 0900 	mov.w	r9, #0
 8014a0e:	9304      	str	r3, [sp, #16]
 8014a10:	220a      	movs	r2, #10
 8014a12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a14:	464f      	mov	r7, r9
 8014a16:	f8cd 901c 	str.w	r9, [sp, #28]
 8014a1a:	9308      	str	r3, [sp, #32]
 8014a1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014a1e:	7806      	ldrb	r6, [r0, #0]
 8014a20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014a24:	b2d9      	uxtb	r1, r3
 8014a26:	2909      	cmp	r1, #9
 8014a28:	d92a      	bls.n	8014a80 <_strtod_l+0x1b8>
 8014a2a:	462a      	mov	r2, r5
 8014a2c:	9905      	ldr	r1, [sp, #20]
 8014a2e:	f7ff ff06 	bl	801483e <strncmp>
 8014a32:	b3a0      	cbz	r0, 8014a9e <_strtod_l+0x1d6>
 8014a34:	2000      	movs	r0, #0
 8014a36:	4632      	mov	r2, r6
 8014a38:	463d      	mov	r5, r7
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	9005      	str	r0, [sp, #20]
 8014a3e:	2a65      	cmp	r2, #101	; 0x65
 8014a40:	d001      	beq.n	8014a46 <_strtod_l+0x17e>
 8014a42:	2a45      	cmp	r2, #69	; 0x45
 8014a44:	d118      	bne.n	8014a78 <_strtod_l+0x1b0>
 8014a46:	b91d      	cbnz	r5, 8014a50 <_strtod_l+0x188>
 8014a48:	9a04      	ldr	r2, [sp, #16]
 8014a4a:	4302      	orrs	r2, r0
 8014a4c:	d09e      	beq.n	801498c <_strtod_l+0xc4>
 8014a4e:	2500      	movs	r5, #0
 8014a50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014a54:	f108 0201 	add.w	r2, r8, #1
 8014a58:	9217      	str	r2, [sp, #92]	; 0x5c
 8014a5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014a5e:	2a2b      	cmp	r2, #43	; 0x2b
 8014a60:	d075      	beq.n	8014b4e <_strtod_l+0x286>
 8014a62:	2a2d      	cmp	r2, #45	; 0x2d
 8014a64:	d07b      	beq.n	8014b5e <_strtod_l+0x296>
 8014a66:	f04f 0c00 	mov.w	ip, #0
 8014a6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014a6e:	2909      	cmp	r1, #9
 8014a70:	f240 8082 	bls.w	8014b78 <_strtod_l+0x2b0>
 8014a74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014a78:	2600      	movs	r6, #0
 8014a7a:	e09d      	b.n	8014bb8 <_strtod_l+0x2f0>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	e7c4      	b.n	8014a0a <_strtod_l+0x142>
 8014a80:	2f08      	cmp	r7, #8
 8014a82:	f100 0001 	add.w	r0, r0, #1
 8014a86:	f107 0701 	add.w	r7, r7, #1
 8014a8a:	bfd4      	ite	le
 8014a8c:	9907      	ldrle	r1, [sp, #28]
 8014a8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014a92:	9017      	str	r0, [sp, #92]	; 0x5c
 8014a94:	bfdc      	itt	le
 8014a96:	fb02 3301 	mlale	r3, r2, r1, r3
 8014a9a:	9307      	strle	r3, [sp, #28]
 8014a9c:	e7be      	b.n	8014a1c <_strtod_l+0x154>
 8014a9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014aa0:	195a      	adds	r2, r3, r5
 8014aa2:	9217      	str	r2, [sp, #92]	; 0x5c
 8014aa4:	5d5a      	ldrb	r2, [r3, r5]
 8014aa6:	2f00      	cmp	r7, #0
 8014aa8:	d036      	beq.n	8014b18 <_strtod_l+0x250>
 8014aaa:	463d      	mov	r5, r7
 8014aac:	9005      	str	r0, [sp, #20]
 8014aae:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014ab2:	2b09      	cmp	r3, #9
 8014ab4:	d912      	bls.n	8014adc <_strtod_l+0x214>
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	e7c1      	b.n	8014a3e <_strtod_l+0x176>
 8014aba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014abc:	3001      	adds	r0, #1
 8014abe:	1c5a      	adds	r2, r3, #1
 8014ac0:	9217      	str	r2, [sp, #92]	; 0x5c
 8014ac2:	785a      	ldrb	r2, [r3, #1]
 8014ac4:	2a30      	cmp	r2, #48	; 0x30
 8014ac6:	d0f8      	beq.n	8014aba <_strtod_l+0x1f2>
 8014ac8:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014acc:	2b08      	cmp	r3, #8
 8014ace:	f200 84d6 	bhi.w	801547e <_strtod_l+0xbb6>
 8014ad2:	9005      	str	r0, [sp, #20]
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ad8:	4605      	mov	r5, r0
 8014ada:	9308      	str	r3, [sp, #32]
 8014adc:	3a30      	subs	r2, #48	; 0x30
 8014ade:	f100 0301 	add.w	r3, r0, #1
 8014ae2:	d013      	beq.n	8014b0c <_strtod_l+0x244>
 8014ae4:	9905      	ldr	r1, [sp, #20]
 8014ae6:	eb00 0e05 	add.w	lr, r0, r5
 8014aea:	4419      	add	r1, r3
 8014aec:	462b      	mov	r3, r5
 8014aee:	9105      	str	r1, [sp, #20]
 8014af0:	210a      	movs	r1, #10
 8014af2:	4573      	cmp	r3, lr
 8014af4:	d112      	bne.n	8014b1c <_strtod_l+0x254>
 8014af6:	182b      	adds	r3, r5, r0
 8014af8:	3501      	adds	r5, #1
 8014afa:	2b08      	cmp	r3, #8
 8014afc:	4405      	add	r5, r0
 8014afe:	dc1c      	bgt.n	8014b3a <_strtod_l+0x272>
 8014b00:	9907      	ldr	r1, [sp, #28]
 8014b02:	230a      	movs	r3, #10
 8014b04:	fb03 2301 	mla	r3, r3, r1, r2
 8014b08:	9307      	str	r3, [sp, #28]
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b0e:	4618      	mov	r0, r3
 8014b10:	1c51      	adds	r1, r2, #1
 8014b12:	9117      	str	r1, [sp, #92]	; 0x5c
 8014b14:	7852      	ldrb	r2, [r2, #1]
 8014b16:	e7ca      	b.n	8014aae <_strtod_l+0x1e6>
 8014b18:	4638      	mov	r0, r7
 8014b1a:	e7d3      	b.n	8014ac4 <_strtod_l+0x1fc>
 8014b1c:	2b08      	cmp	r3, #8
 8014b1e:	dc04      	bgt.n	8014b2a <_strtod_l+0x262>
 8014b20:	9e07      	ldr	r6, [sp, #28]
 8014b22:	434e      	muls	r6, r1
 8014b24:	9607      	str	r6, [sp, #28]
 8014b26:	3301      	adds	r3, #1
 8014b28:	e7e3      	b.n	8014af2 <_strtod_l+0x22a>
 8014b2a:	f103 0c01 	add.w	ip, r3, #1
 8014b2e:	f1bc 0f10 	cmp.w	ip, #16
 8014b32:	bfd8      	it	le
 8014b34:	fb01 f909 	mulle.w	r9, r1, r9
 8014b38:	e7f5      	b.n	8014b26 <_strtod_l+0x25e>
 8014b3a:	2d10      	cmp	r5, #16
 8014b3c:	bfdc      	itt	le
 8014b3e:	230a      	movle	r3, #10
 8014b40:	fb03 2909 	mlale	r9, r3, r9, r2
 8014b44:	e7e1      	b.n	8014b0a <_strtod_l+0x242>
 8014b46:	2300      	movs	r3, #0
 8014b48:	9305      	str	r3, [sp, #20]
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	e77c      	b.n	8014a48 <_strtod_l+0x180>
 8014b4e:	f04f 0c00 	mov.w	ip, #0
 8014b52:	f108 0202 	add.w	r2, r8, #2
 8014b56:	9217      	str	r2, [sp, #92]	; 0x5c
 8014b58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014b5c:	e785      	b.n	8014a6a <_strtod_l+0x1a2>
 8014b5e:	f04f 0c01 	mov.w	ip, #1
 8014b62:	e7f6      	b.n	8014b52 <_strtod_l+0x28a>
 8014b64:	0818aedc 	.word	0x0818aedc
 8014b68:	0818ac30 	.word	0x0818ac30
 8014b6c:	7ff00000 	.word	0x7ff00000
 8014b70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b72:	1c51      	adds	r1, r2, #1
 8014b74:	9117      	str	r1, [sp, #92]	; 0x5c
 8014b76:	7852      	ldrb	r2, [r2, #1]
 8014b78:	2a30      	cmp	r2, #48	; 0x30
 8014b7a:	d0f9      	beq.n	8014b70 <_strtod_l+0x2a8>
 8014b7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014b80:	2908      	cmp	r1, #8
 8014b82:	f63f af79 	bhi.w	8014a78 <_strtod_l+0x1b0>
 8014b86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014b8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b8c:	9206      	str	r2, [sp, #24]
 8014b8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b90:	1c51      	adds	r1, r2, #1
 8014b92:	9117      	str	r1, [sp, #92]	; 0x5c
 8014b94:	7852      	ldrb	r2, [r2, #1]
 8014b96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014b9a:	2e09      	cmp	r6, #9
 8014b9c:	d937      	bls.n	8014c0e <_strtod_l+0x346>
 8014b9e:	9e06      	ldr	r6, [sp, #24]
 8014ba0:	1b89      	subs	r1, r1, r6
 8014ba2:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014ba6:	2908      	cmp	r1, #8
 8014ba8:	dc02      	bgt.n	8014bb0 <_strtod_l+0x2e8>
 8014baa:	4576      	cmp	r6, lr
 8014bac:	bfa8      	it	ge
 8014bae:	4676      	movge	r6, lr
 8014bb0:	f1bc 0f00 	cmp.w	ip, #0
 8014bb4:	d000      	beq.n	8014bb8 <_strtod_l+0x2f0>
 8014bb6:	4276      	negs	r6, r6
 8014bb8:	2d00      	cmp	r5, #0
 8014bba:	d14d      	bne.n	8014c58 <_strtod_l+0x390>
 8014bbc:	9904      	ldr	r1, [sp, #16]
 8014bbe:	4301      	orrs	r1, r0
 8014bc0:	f47f aec6 	bne.w	8014950 <_strtod_l+0x88>
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	f47f aee1 	bne.w	801498c <_strtod_l+0xc4>
 8014bca:	2a69      	cmp	r2, #105	; 0x69
 8014bcc:	d027      	beq.n	8014c1e <_strtod_l+0x356>
 8014bce:	dc24      	bgt.n	8014c1a <_strtod_l+0x352>
 8014bd0:	2a49      	cmp	r2, #73	; 0x49
 8014bd2:	d024      	beq.n	8014c1e <_strtod_l+0x356>
 8014bd4:	2a4e      	cmp	r2, #78	; 0x4e
 8014bd6:	f47f aed9 	bne.w	801498c <_strtod_l+0xc4>
 8014bda:	499f      	ldr	r1, [pc, #636]	; (8014e58 <_strtod_l+0x590>)
 8014bdc:	a817      	add	r0, sp, #92	; 0x5c
 8014bde:	f002 f8b3 	bl	8016d48 <__match>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	f43f aed2 	beq.w	801498c <_strtod_l+0xc4>
 8014be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	2b28      	cmp	r3, #40	; 0x28
 8014bee:	d12d      	bne.n	8014c4c <_strtod_l+0x384>
 8014bf0:	aa1a      	add	r2, sp, #104	; 0x68
 8014bf2:	499a      	ldr	r1, [pc, #616]	; (8014e5c <_strtod_l+0x594>)
 8014bf4:	a817      	add	r0, sp, #92	; 0x5c
 8014bf6:	f002 f8bb 	bl	8016d70 <__hexnan>
 8014bfa:	2805      	cmp	r0, #5
 8014bfc:	d126      	bne.n	8014c4c <_strtod_l+0x384>
 8014bfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014c04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014c08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014c0c:	e6a0      	b.n	8014950 <_strtod_l+0x88>
 8014c0e:	210a      	movs	r1, #10
 8014c10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014c14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014c18:	e7b9      	b.n	8014b8e <_strtod_l+0x2c6>
 8014c1a:	2a6e      	cmp	r2, #110	; 0x6e
 8014c1c:	e7db      	b.n	8014bd6 <_strtod_l+0x30e>
 8014c1e:	4990      	ldr	r1, [pc, #576]	; (8014e60 <_strtod_l+0x598>)
 8014c20:	a817      	add	r0, sp, #92	; 0x5c
 8014c22:	f002 f891 	bl	8016d48 <__match>
 8014c26:	2800      	cmp	r0, #0
 8014c28:	f43f aeb0 	beq.w	801498c <_strtod_l+0xc4>
 8014c2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c2e:	a817      	add	r0, sp, #92	; 0x5c
 8014c30:	498c      	ldr	r1, [pc, #560]	; (8014e64 <_strtod_l+0x59c>)
 8014c32:	3b01      	subs	r3, #1
 8014c34:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c36:	f002 f887 	bl	8016d48 <__match>
 8014c3a:	b910      	cbnz	r0, 8014c42 <_strtod_l+0x37a>
 8014c3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c3e:	3301      	adds	r3, #1
 8014c40:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8014e74 <_strtod_l+0x5ac>
 8014c46:	f04f 0a00 	mov.w	sl, #0
 8014c4a:	e681      	b.n	8014950 <_strtod_l+0x88>
 8014c4c:	4886      	ldr	r0, [pc, #536]	; (8014e68 <_strtod_l+0x5a0>)
 8014c4e:	f003 f953 	bl	8017ef8 <nan>
 8014c52:	ec5b ab10 	vmov	sl, fp, d0
 8014c56:	e67b      	b.n	8014950 <_strtod_l+0x88>
 8014c58:	9b05      	ldr	r3, [sp, #20]
 8014c5a:	2f00      	cmp	r7, #0
 8014c5c:	bf08      	it	eq
 8014c5e:	462f      	moveq	r7, r5
 8014c60:	2d10      	cmp	r5, #16
 8014c62:	9807      	ldr	r0, [sp, #28]
 8014c64:	eba6 0303 	sub.w	r3, r6, r3
 8014c68:	46a8      	mov	r8, r5
 8014c6a:	bfa8      	it	ge
 8014c6c:	f04f 0810 	movge.w	r8, #16
 8014c70:	9306      	str	r3, [sp, #24]
 8014c72:	f7eb fc55 	bl	8000520 <__aeabi_ui2d>
 8014c76:	2d09      	cmp	r5, #9
 8014c78:	4682      	mov	sl, r0
 8014c7a:	468b      	mov	fp, r1
 8014c7c:	dd13      	ble.n	8014ca6 <_strtod_l+0x3de>
 8014c7e:	4b7b      	ldr	r3, [pc, #492]	; (8014e6c <_strtod_l+0x5a4>)
 8014c80:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014c84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014c88:	f7eb fcc4 	bl	8000614 <__aeabi_dmul>
 8014c8c:	4682      	mov	sl, r0
 8014c8e:	468b      	mov	fp, r1
 8014c90:	4648      	mov	r0, r9
 8014c92:	f7eb fc45 	bl	8000520 <__aeabi_ui2d>
 8014c96:	4602      	mov	r2, r0
 8014c98:	460b      	mov	r3, r1
 8014c9a:	4650      	mov	r0, sl
 8014c9c:	4659      	mov	r1, fp
 8014c9e:	f7eb fb03 	bl	80002a8 <__adddf3>
 8014ca2:	4682      	mov	sl, r0
 8014ca4:	468b      	mov	fp, r1
 8014ca6:	2d0f      	cmp	r5, #15
 8014ca8:	dc38      	bgt.n	8014d1c <_strtod_l+0x454>
 8014caa:	9b06      	ldr	r3, [sp, #24]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f43f ae4f 	beq.w	8014950 <_strtod_l+0x88>
 8014cb2:	dd24      	ble.n	8014cfe <_strtod_l+0x436>
 8014cb4:	2b16      	cmp	r3, #22
 8014cb6:	dc0b      	bgt.n	8014cd0 <_strtod_l+0x408>
 8014cb8:	496c      	ldr	r1, [pc, #432]	; (8014e6c <_strtod_l+0x5a4>)
 8014cba:	4652      	mov	r2, sl
 8014cbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014cc0:	465b      	mov	r3, fp
 8014cc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cc6:	f7eb fca5 	bl	8000614 <__aeabi_dmul>
 8014cca:	4682      	mov	sl, r0
 8014ccc:	468b      	mov	fp, r1
 8014cce:	e63f      	b.n	8014950 <_strtod_l+0x88>
 8014cd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014cd4:	9a06      	ldr	r2, [sp, #24]
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	db20      	blt.n	8014d1c <_strtod_l+0x454>
 8014cda:	f1c5 050f 	rsb	r5, r5, #15
 8014cde:	4c63      	ldr	r4, [pc, #396]	; (8014e6c <_strtod_l+0x5a4>)
 8014ce0:	4652      	mov	r2, sl
 8014ce2:	465b      	mov	r3, fp
 8014ce4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cec:	f7eb fc92 	bl	8000614 <__aeabi_dmul>
 8014cf0:	9b06      	ldr	r3, [sp, #24]
 8014cf2:	1b5d      	subs	r5, r3, r5
 8014cf4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014cf8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014cfc:	e7e3      	b.n	8014cc6 <_strtod_l+0x3fe>
 8014cfe:	9b06      	ldr	r3, [sp, #24]
 8014d00:	3316      	adds	r3, #22
 8014d02:	db0b      	blt.n	8014d1c <_strtod_l+0x454>
 8014d04:	9b05      	ldr	r3, [sp, #20]
 8014d06:	4650      	mov	r0, sl
 8014d08:	4659      	mov	r1, fp
 8014d0a:	1b9e      	subs	r6, r3, r6
 8014d0c:	4b57      	ldr	r3, [pc, #348]	; (8014e6c <_strtod_l+0x5a4>)
 8014d0e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8014d12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014d16:	f7eb fda7 	bl	8000868 <__aeabi_ddiv>
 8014d1a:	e7d6      	b.n	8014cca <_strtod_l+0x402>
 8014d1c:	eba5 0808 	sub.w	r8, r5, r8
 8014d20:	9b06      	ldr	r3, [sp, #24]
 8014d22:	4498      	add	r8, r3
 8014d24:	f1b8 0f00 	cmp.w	r8, #0
 8014d28:	dd74      	ble.n	8014e14 <_strtod_l+0x54c>
 8014d2a:	f018 030f 	ands.w	r3, r8, #15
 8014d2e:	d00a      	beq.n	8014d46 <_strtod_l+0x47e>
 8014d30:	494e      	ldr	r1, [pc, #312]	; (8014e6c <_strtod_l+0x5a4>)
 8014d32:	4652      	mov	r2, sl
 8014d34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014d38:	465b      	mov	r3, fp
 8014d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d3e:	f7eb fc69 	bl	8000614 <__aeabi_dmul>
 8014d42:	4682      	mov	sl, r0
 8014d44:	468b      	mov	fp, r1
 8014d46:	f038 080f 	bics.w	r8, r8, #15
 8014d4a:	d04f      	beq.n	8014dec <_strtod_l+0x524>
 8014d4c:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014d50:	dd22      	ble.n	8014d98 <_strtod_l+0x4d0>
 8014d52:	2500      	movs	r5, #0
 8014d54:	462e      	mov	r6, r5
 8014d56:	9507      	str	r5, [sp, #28]
 8014d58:	9505      	str	r5, [sp, #20]
 8014d5a:	2322      	movs	r3, #34	; 0x22
 8014d5c:	f8df b114 	ldr.w	fp, [pc, #276]	; 8014e74 <_strtod_l+0x5ac>
 8014d60:	f04f 0a00 	mov.w	sl, #0
 8014d64:	6023      	str	r3, [r4, #0]
 8014d66:	9b07      	ldr	r3, [sp, #28]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f43f adf1 	beq.w	8014950 <_strtod_l+0x88>
 8014d6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d70:	4620      	mov	r0, r4
 8014d72:	f002 f971 	bl	8017058 <_Bfree>
 8014d76:	9905      	ldr	r1, [sp, #20]
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f002 f96d 	bl	8017058 <_Bfree>
 8014d7e:	4631      	mov	r1, r6
 8014d80:	4620      	mov	r0, r4
 8014d82:	f002 f969 	bl	8017058 <_Bfree>
 8014d86:	9907      	ldr	r1, [sp, #28]
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f002 f965 	bl	8017058 <_Bfree>
 8014d8e:	4629      	mov	r1, r5
 8014d90:	4620      	mov	r0, r4
 8014d92:	f002 f961 	bl	8017058 <_Bfree>
 8014d96:	e5db      	b.n	8014950 <_strtod_l+0x88>
 8014d98:	4b35      	ldr	r3, [pc, #212]	; (8014e70 <_strtod_l+0x5a8>)
 8014d9a:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014d9e:	4650      	mov	r0, sl
 8014da0:	4659      	mov	r1, fp
 8014da2:	9304      	str	r3, [sp, #16]
 8014da4:	2300      	movs	r3, #0
 8014da6:	4699      	mov	r9, r3
 8014da8:	f1b8 0f01 	cmp.w	r8, #1
 8014dac:	dc21      	bgt.n	8014df2 <_strtod_l+0x52a>
 8014dae:	b10b      	cbz	r3, 8014db4 <_strtod_l+0x4ec>
 8014db0:	4682      	mov	sl, r0
 8014db2:	468b      	mov	fp, r1
 8014db4:	4b2e      	ldr	r3, [pc, #184]	; (8014e70 <_strtod_l+0x5a8>)
 8014db6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014dba:	4652      	mov	r2, sl
 8014dbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014dc0:	465b      	mov	r3, fp
 8014dc2:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014dc6:	f7eb fc25 	bl	8000614 <__aeabi_dmul>
 8014dca:	4b2a      	ldr	r3, [pc, #168]	; (8014e74 <_strtod_l+0x5ac>)
 8014dcc:	460a      	mov	r2, r1
 8014dce:	4682      	mov	sl, r0
 8014dd0:	400b      	ands	r3, r1
 8014dd2:	4929      	ldr	r1, [pc, #164]	; (8014e78 <_strtod_l+0x5b0>)
 8014dd4:	428b      	cmp	r3, r1
 8014dd6:	d8bc      	bhi.n	8014d52 <_strtod_l+0x48a>
 8014dd8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014ddc:	428b      	cmp	r3, r1
 8014dde:	bf86      	itte	hi
 8014de0:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014e7c <_strtod_l+0x5b4>
 8014de4:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8014de8:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014dec:	2300      	movs	r3, #0
 8014dee:	9304      	str	r3, [sp, #16]
 8014df0:	e083      	b.n	8014efa <_strtod_l+0x632>
 8014df2:	f018 0f01 	tst.w	r8, #1
 8014df6:	d005      	beq.n	8014e04 <_strtod_l+0x53c>
 8014df8:	9b04      	ldr	r3, [sp, #16]
 8014dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfe:	f7eb fc09 	bl	8000614 <__aeabi_dmul>
 8014e02:	2301      	movs	r3, #1
 8014e04:	9a04      	ldr	r2, [sp, #16]
 8014e06:	f109 0901 	add.w	r9, r9, #1
 8014e0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014e0e:	3208      	adds	r2, #8
 8014e10:	9204      	str	r2, [sp, #16]
 8014e12:	e7c9      	b.n	8014da8 <_strtod_l+0x4e0>
 8014e14:	d0ea      	beq.n	8014dec <_strtod_l+0x524>
 8014e16:	f1c8 0800 	rsb	r8, r8, #0
 8014e1a:	f018 020f 	ands.w	r2, r8, #15
 8014e1e:	d00a      	beq.n	8014e36 <_strtod_l+0x56e>
 8014e20:	4b12      	ldr	r3, [pc, #72]	; (8014e6c <_strtod_l+0x5a4>)
 8014e22:	4650      	mov	r0, sl
 8014e24:	4659      	mov	r1, fp
 8014e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2e:	f7eb fd1b 	bl	8000868 <__aeabi_ddiv>
 8014e32:	4682      	mov	sl, r0
 8014e34:	468b      	mov	fp, r1
 8014e36:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014e3a:	d0d7      	beq.n	8014dec <_strtod_l+0x524>
 8014e3c:	f1b8 0f1f 	cmp.w	r8, #31
 8014e40:	dd1e      	ble.n	8014e80 <_strtod_l+0x5b8>
 8014e42:	2500      	movs	r5, #0
 8014e44:	462e      	mov	r6, r5
 8014e46:	9507      	str	r5, [sp, #28]
 8014e48:	9505      	str	r5, [sp, #20]
 8014e4a:	2322      	movs	r3, #34	; 0x22
 8014e4c:	f04f 0a00 	mov.w	sl, #0
 8014e50:	f04f 0b00 	mov.w	fp, #0
 8014e54:	6023      	str	r3, [r4, #0]
 8014e56:	e786      	b.n	8014d66 <_strtod_l+0x49e>
 8014e58:	0818ac01 	.word	0x0818ac01
 8014e5c:	0818ac44 	.word	0x0818ac44
 8014e60:	0818abf9 	.word	0x0818abf9
 8014e64:	0818ad84 	.word	0x0818ad84
 8014e68:	0818b098 	.word	0x0818b098
 8014e6c:	0818af78 	.word	0x0818af78
 8014e70:	0818af50 	.word	0x0818af50
 8014e74:	7ff00000 	.word	0x7ff00000
 8014e78:	7ca00000 	.word	0x7ca00000
 8014e7c:	7fefffff 	.word	0x7fefffff
 8014e80:	f018 0310 	ands.w	r3, r8, #16
 8014e84:	4650      	mov	r0, sl
 8014e86:	4659      	mov	r1, fp
 8014e88:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8015234 <_strtod_l+0x96c>
 8014e8c:	bf18      	it	ne
 8014e8e:	236a      	movne	r3, #106	; 0x6a
 8014e90:	9304      	str	r3, [sp, #16]
 8014e92:	2300      	movs	r3, #0
 8014e94:	f018 0f01 	tst.w	r8, #1
 8014e98:	d004      	beq.n	8014ea4 <_strtod_l+0x5dc>
 8014e9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014e9e:	f7eb fbb9 	bl	8000614 <__aeabi_dmul>
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014ea8:	f109 0908 	add.w	r9, r9, #8
 8014eac:	d1f2      	bne.n	8014e94 <_strtod_l+0x5cc>
 8014eae:	b10b      	cbz	r3, 8014eb4 <_strtod_l+0x5ec>
 8014eb0:	4682      	mov	sl, r0
 8014eb2:	468b      	mov	fp, r1
 8014eb4:	9b04      	ldr	r3, [sp, #16]
 8014eb6:	b1c3      	cbz	r3, 8014eea <_strtod_l+0x622>
 8014eb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014ebc:	4659      	mov	r1, fp
 8014ebe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	dd11      	ble.n	8014eea <_strtod_l+0x622>
 8014ec6:	2b1f      	cmp	r3, #31
 8014ec8:	f340 8121 	ble.w	801510e <_strtod_l+0x846>
 8014ecc:	2b34      	cmp	r3, #52	; 0x34
 8014ece:	f04f 0a00 	mov.w	sl, #0
 8014ed2:	bfdb      	ittet	le
 8014ed4:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014ed8:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8014edc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014ee0:	fa03 f202 	lslle.w	r2, r3, r2
 8014ee4:	bfd8      	it	le
 8014ee6:	ea02 0b01 	andle.w	fp, r2, r1
 8014eea:	2200      	movs	r2, #0
 8014eec:	2300      	movs	r3, #0
 8014eee:	4650      	mov	r0, sl
 8014ef0:	4659      	mov	r1, fp
 8014ef2:	f7eb fdf7 	bl	8000ae4 <__aeabi_dcmpeq>
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	d1a3      	bne.n	8014e42 <_strtod_l+0x57a>
 8014efa:	9b07      	ldr	r3, [sp, #28]
 8014efc:	463a      	mov	r2, r7
 8014efe:	9908      	ldr	r1, [sp, #32]
 8014f00:	4620      	mov	r0, r4
 8014f02:	9300      	str	r3, [sp, #0]
 8014f04:	462b      	mov	r3, r5
 8014f06:	f002 f911 	bl	801712c <__s2b>
 8014f0a:	9007      	str	r0, [sp, #28]
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	f43f af20 	beq.w	8014d52 <_strtod_l+0x48a>
 8014f12:	9b05      	ldr	r3, [sp, #20]
 8014f14:	2500      	movs	r5, #0
 8014f16:	1b9e      	subs	r6, r3, r6
 8014f18:	9b06      	ldr	r3, [sp, #24]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	bfb4      	ite	lt
 8014f1e:	4633      	movlt	r3, r6
 8014f20:	2300      	movge	r3, #0
 8014f22:	462e      	mov	r6, r5
 8014f24:	930c      	str	r3, [sp, #48]	; 0x30
 8014f26:	9b06      	ldr	r3, [sp, #24]
 8014f28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014f2c:	9312      	str	r3, [sp, #72]	; 0x48
 8014f2e:	9b07      	ldr	r3, [sp, #28]
 8014f30:	4620      	mov	r0, r4
 8014f32:	6859      	ldr	r1, [r3, #4]
 8014f34:	f002 f850 	bl	8016fd8 <_Balloc>
 8014f38:	9005      	str	r0, [sp, #20]
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	f43f af0d 	beq.w	8014d5a <_strtod_l+0x492>
 8014f40:	9b07      	ldr	r3, [sp, #28]
 8014f42:	300c      	adds	r0, #12
 8014f44:	691a      	ldr	r2, [r3, #16]
 8014f46:	f103 010c 	add.w	r1, r3, #12
 8014f4a:	3202      	adds	r2, #2
 8014f4c:	0092      	lsls	r2, r2, #2
 8014f4e:	f7fe fc27 	bl	80137a0 <memcpy>
 8014f52:	aa1a      	add	r2, sp, #104	; 0x68
 8014f54:	a919      	add	r1, sp, #100	; 0x64
 8014f56:	4620      	mov	r0, r4
 8014f58:	ec4b ab10 	vmov	d0, sl, fp
 8014f5c:	f002 fc2e 	bl	80177bc <__d2b>
 8014f60:	9018      	str	r0, [sp, #96]	; 0x60
 8014f62:	ec4b ab18 	vmov	d8, sl, fp
 8014f66:	2800      	cmp	r0, #0
 8014f68:	f43f aef7 	beq.w	8014d5a <_strtod_l+0x492>
 8014f6c:	2101      	movs	r1, #1
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f002 f976 	bl	8017260 <__i2b>
 8014f74:	4606      	mov	r6, r0
 8014f76:	2800      	cmp	r0, #0
 8014f78:	f43f aeef 	beq.w	8014d5a <_strtod_l+0x492>
 8014f7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f7e:	9904      	ldr	r1, [sp, #16]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	eba3 0801 	sub.w	r8, r3, r1
 8014f86:	bfa9      	itett	ge
 8014f88:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8014f8a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014f8c:	eb03 0902 	addge.w	r9, r3, r2
 8014f90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014f92:	bfb8      	it	lt
 8014f94:	1ad7      	sublt	r7, r2, r3
 8014f96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014f98:	4ba1      	ldr	r3, [pc, #644]	; (8015220 <_strtod_l+0x958>)
 8014f9a:	4490      	add	r8, r2
 8014f9c:	bfb8      	it	lt
 8014f9e:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8014fa2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014fa6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014faa:	4598      	cmp	r8, r3
 8014fac:	f280 80c3 	bge.w	8015136 <_strtod_l+0x86e>
 8014fb0:	eba3 0308 	sub.w	r3, r3, r8
 8014fb4:	2101      	movs	r1, #1
 8014fb6:	2b1f      	cmp	r3, #31
 8014fb8:	eba2 0203 	sub.w	r2, r2, r3
 8014fbc:	f300 80ae 	bgt.w	801511c <_strtod_l+0x854>
 8014fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8014fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	9308      	str	r3, [sp, #32]
 8014fca:	eb09 0802 	add.w	r8, r9, r2
 8014fce:	9b04      	ldr	r3, [sp, #16]
 8014fd0:	4417      	add	r7, r2
 8014fd2:	45c1      	cmp	r9, r8
 8014fd4:	441f      	add	r7, r3
 8014fd6:	464b      	mov	r3, r9
 8014fd8:	bfa8      	it	ge
 8014fda:	4643      	movge	r3, r8
 8014fdc:	42bb      	cmp	r3, r7
 8014fde:	bfa8      	it	ge
 8014fe0:	463b      	movge	r3, r7
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	bfc2      	ittt	gt
 8014fe6:	eba8 0803 	subgt.w	r8, r8, r3
 8014fea:	1aff      	subgt	r7, r7, r3
 8014fec:	eba9 0903 	subgt.w	r9, r9, r3
 8014ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	dd17      	ble.n	8015026 <_strtod_l+0x75e>
 8014ff6:	4631      	mov	r1, r6
 8014ff8:	461a      	mov	r2, r3
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	f002 f9ee 	bl	80173dc <__pow5mult>
 8015000:	4606      	mov	r6, r0
 8015002:	2800      	cmp	r0, #0
 8015004:	f43f aea9 	beq.w	8014d5a <_strtod_l+0x492>
 8015008:	4601      	mov	r1, r0
 801500a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801500c:	4620      	mov	r0, r4
 801500e:	f002 f93d 	bl	801728c <__multiply>
 8015012:	900b      	str	r0, [sp, #44]	; 0x2c
 8015014:	2800      	cmp	r0, #0
 8015016:	f43f aea0 	beq.w	8014d5a <_strtod_l+0x492>
 801501a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801501c:	4620      	mov	r0, r4
 801501e:	f002 f81b 	bl	8017058 <_Bfree>
 8015022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015024:	9318      	str	r3, [sp, #96]	; 0x60
 8015026:	f1b8 0f00 	cmp.w	r8, #0
 801502a:	f300 8089 	bgt.w	8015140 <_strtod_l+0x878>
 801502e:	9b06      	ldr	r3, [sp, #24]
 8015030:	2b00      	cmp	r3, #0
 8015032:	dd08      	ble.n	8015046 <_strtod_l+0x77e>
 8015034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015036:	4620      	mov	r0, r4
 8015038:	9905      	ldr	r1, [sp, #20]
 801503a:	f002 f9cf 	bl	80173dc <__pow5mult>
 801503e:	9005      	str	r0, [sp, #20]
 8015040:	2800      	cmp	r0, #0
 8015042:	f43f ae8a 	beq.w	8014d5a <_strtod_l+0x492>
 8015046:	2f00      	cmp	r7, #0
 8015048:	dd08      	ble.n	801505c <_strtod_l+0x794>
 801504a:	463a      	mov	r2, r7
 801504c:	9905      	ldr	r1, [sp, #20]
 801504e:	4620      	mov	r0, r4
 8015050:	f002 fa1e 	bl	8017490 <__lshift>
 8015054:	9005      	str	r0, [sp, #20]
 8015056:	2800      	cmp	r0, #0
 8015058:	f43f ae7f 	beq.w	8014d5a <_strtod_l+0x492>
 801505c:	f1b9 0f00 	cmp.w	r9, #0
 8015060:	dd08      	ble.n	8015074 <_strtod_l+0x7ac>
 8015062:	4631      	mov	r1, r6
 8015064:	464a      	mov	r2, r9
 8015066:	4620      	mov	r0, r4
 8015068:	f002 fa12 	bl	8017490 <__lshift>
 801506c:	4606      	mov	r6, r0
 801506e:	2800      	cmp	r0, #0
 8015070:	f43f ae73 	beq.w	8014d5a <_strtod_l+0x492>
 8015074:	9a05      	ldr	r2, [sp, #20]
 8015076:	4620      	mov	r0, r4
 8015078:	9918      	ldr	r1, [sp, #96]	; 0x60
 801507a:	f002 fa95 	bl	80175a8 <__mdiff>
 801507e:	4605      	mov	r5, r0
 8015080:	2800      	cmp	r0, #0
 8015082:	f43f ae6a 	beq.w	8014d5a <_strtod_l+0x492>
 8015086:	68c3      	ldr	r3, [r0, #12]
 8015088:	4631      	mov	r1, r6
 801508a:	930b      	str	r3, [sp, #44]	; 0x2c
 801508c:	2300      	movs	r3, #0
 801508e:	60c3      	str	r3, [r0, #12]
 8015090:	f002 fa6e 	bl	8017570 <__mcmp>
 8015094:	2800      	cmp	r0, #0
 8015096:	da5d      	bge.n	8015154 <_strtod_l+0x88c>
 8015098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801509a:	ea53 030a 	orrs.w	r3, r3, sl
 801509e:	d17f      	bne.n	80151a0 <_strtod_l+0x8d8>
 80150a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d17b      	bne.n	80151a0 <_strtod_l+0x8d8>
 80150a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80150ac:	0d1b      	lsrs	r3, r3, #20
 80150ae:	051b      	lsls	r3, r3, #20
 80150b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80150b4:	d974      	bls.n	80151a0 <_strtod_l+0x8d8>
 80150b6:	696b      	ldr	r3, [r5, #20]
 80150b8:	b913      	cbnz	r3, 80150c0 <_strtod_l+0x7f8>
 80150ba:	692b      	ldr	r3, [r5, #16]
 80150bc:	2b01      	cmp	r3, #1
 80150be:	dd6f      	ble.n	80151a0 <_strtod_l+0x8d8>
 80150c0:	4629      	mov	r1, r5
 80150c2:	2201      	movs	r2, #1
 80150c4:	4620      	mov	r0, r4
 80150c6:	f002 f9e3 	bl	8017490 <__lshift>
 80150ca:	4631      	mov	r1, r6
 80150cc:	4605      	mov	r5, r0
 80150ce:	f002 fa4f 	bl	8017570 <__mcmp>
 80150d2:	2800      	cmp	r0, #0
 80150d4:	dd64      	ble.n	80151a0 <_strtod_l+0x8d8>
 80150d6:	9904      	ldr	r1, [sp, #16]
 80150d8:	465b      	mov	r3, fp
 80150da:	4a52      	ldr	r2, [pc, #328]	; (8015224 <_strtod_l+0x95c>)
 80150dc:	2900      	cmp	r1, #0
 80150de:	d07f      	beq.n	80151e0 <_strtod_l+0x918>
 80150e0:	ea02 010b 	and.w	r1, r2, fp
 80150e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80150e8:	dc7a      	bgt.n	80151e0 <_strtod_l+0x918>
 80150ea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80150ee:	f77f aeac 	ble.w	8014e4a <_strtod_l+0x582>
 80150f2:	4b4d      	ldr	r3, [pc, #308]	; (8015228 <_strtod_l+0x960>)
 80150f4:	4650      	mov	r0, sl
 80150f6:	4659      	mov	r1, fp
 80150f8:	2200      	movs	r2, #0
 80150fa:	f7eb fa8b 	bl	8000614 <__aeabi_dmul>
 80150fe:	460b      	mov	r3, r1
 8015100:	4682      	mov	sl, r0
 8015102:	468b      	mov	fp, r1
 8015104:	4303      	orrs	r3, r0
 8015106:	bf04      	itt	eq
 8015108:	2322      	moveq	r3, #34	; 0x22
 801510a:	6023      	streq	r3, [r4, #0]
 801510c:	e62f      	b.n	8014d6e <_strtod_l+0x4a6>
 801510e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015112:	fa02 f303 	lsl.w	r3, r2, r3
 8015116:	ea03 0a0a 	and.w	sl, r3, sl
 801511a:	e6e6      	b.n	8014eea <_strtod_l+0x622>
 801511c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015120:	910d      	str	r1, [sp, #52]	; 0x34
 8015122:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8015126:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801512a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801512e:	fa01 f308 	lsl.w	r3, r1, r8
 8015132:	9308      	str	r3, [sp, #32]
 8015134:	e749      	b.n	8014fca <_strtod_l+0x702>
 8015136:	2300      	movs	r3, #0
 8015138:	9308      	str	r3, [sp, #32]
 801513a:	2301      	movs	r3, #1
 801513c:	930d      	str	r3, [sp, #52]	; 0x34
 801513e:	e744      	b.n	8014fca <_strtod_l+0x702>
 8015140:	4642      	mov	r2, r8
 8015142:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015144:	4620      	mov	r0, r4
 8015146:	f002 f9a3 	bl	8017490 <__lshift>
 801514a:	9018      	str	r0, [sp, #96]	; 0x60
 801514c:	2800      	cmp	r0, #0
 801514e:	f47f af6e 	bne.w	801502e <_strtod_l+0x766>
 8015152:	e602      	b.n	8014d5a <_strtod_l+0x492>
 8015154:	465f      	mov	r7, fp
 8015156:	d16f      	bne.n	8015238 <_strtod_l+0x970>
 8015158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801515a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801515e:	b342      	cbz	r2, 80151b2 <_strtod_l+0x8ea>
 8015160:	4a32      	ldr	r2, [pc, #200]	; (801522c <_strtod_l+0x964>)
 8015162:	4293      	cmp	r3, r2
 8015164:	d128      	bne.n	80151b8 <_strtod_l+0x8f0>
 8015166:	9b04      	ldr	r3, [sp, #16]
 8015168:	4651      	mov	r1, sl
 801516a:	b1eb      	cbz	r3, 80151a8 <_strtod_l+0x8e0>
 801516c:	4b2d      	ldr	r3, [pc, #180]	; (8015224 <_strtod_l+0x95c>)
 801516e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015172:	403b      	ands	r3, r7
 8015174:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015178:	d819      	bhi.n	80151ae <_strtod_l+0x8e6>
 801517a:	0d1b      	lsrs	r3, r3, #20
 801517c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015180:	fa02 f303 	lsl.w	r3, r2, r3
 8015184:	4299      	cmp	r1, r3
 8015186:	d117      	bne.n	80151b8 <_strtod_l+0x8f0>
 8015188:	4b29      	ldr	r3, [pc, #164]	; (8015230 <_strtod_l+0x968>)
 801518a:	429f      	cmp	r7, r3
 801518c:	d102      	bne.n	8015194 <_strtod_l+0x8cc>
 801518e:	3101      	adds	r1, #1
 8015190:	f43f ade3 	beq.w	8014d5a <_strtod_l+0x492>
 8015194:	4b23      	ldr	r3, [pc, #140]	; (8015224 <_strtod_l+0x95c>)
 8015196:	f04f 0a00 	mov.w	sl, #0
 801519a:	403b      	ands	r3, r7
 801519c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80151a0:	9b04      	ldr	r3, [sp, #16]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d1a5      	bne.n	80150f2 <_strtod_l+0x82a>
 80151a6:	e5e2      	b.n	8014d6e <_strtod_l+0x4a6>
 80151a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151ac:	e7ea      	b.n	8015184 <_strtod_l+0x8bc>
 80151ae:	4613      	mov	r3, r2
 80151b0:	e7e8      	b.n	8015184 <_strtod_l+0x8bc>
 80151b2:	ea53 030a 	orrs.w	r3, r3, sl
 80151b6:	d08e      	beq.n	80150d6 <_strtod_l+0x80e>
 80151b8:	9b08      	ldr	r3, [sp, #32]
 80151ba:	b1db      	cbz	r3, 80151f4 <_strtod_l+0x92c>
 80151bc:	423b      	tst	r3, r7
 80151be:	d0ef      	beq.n	80151a0 <_strtod_l+0x8d8>
 80151c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151c2:	4650      	mov	r0, sl
 80151c4:	9a04      	ldr	r2, [sp, #16]
 80151c6:	4659      	mov	r1, fp
 80151c8:	b1c3      	cbz	r3, 80151fc <_strtod_l+0x934>
 80151ca:	f7ff fb5f 	bl	801488c <sulp>
 80151ce:	4602      	mov	r2, r0
 80151d0:	460b      	mov	r3, r1
 80151d2:	ec51 0b18 	vmov	r0, r1, d8
 80151d6:	f7eb f867 	bl	80002a8 <__adddf3>
 80151da:	4682      	mov	sl, r0
 80151dc:	468b      	mov	fp, r1
 80151de:	e7df      	b.n	80151a0 <_strtod_l+0x8d8>
 80151e0:	4013      	ands	r3, r2
 80151e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80151e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80151ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80151ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80151f2:	e7d5      	b.n	80151a0 <_strtod_l+0x8d8>
 80151f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151f6:	ea13 0f0a 	tst.w	r3, sl
 80151fa:	e7e0      	b.n	80151be <_strtod_l+0x8f6>
 80151fc:	f7ff fb46 	bl	801488c <sulp>
 8015200:	4602      	mov	r2, r0
 8015202:	460b      	mov	r3, r1
 8015204:	ec51 0b18 	vmov	r0, r1, d8
 8015208:	f7eb f84c 	bl	80002a4 <__aeabi_dsub>
 801520c:	2200      	movs	r2, #0
 801520e:	2300      	movs	r3, #0
 8015210:	4682      	mov	sl, r0
 8015212:	468b      	mov	fp, r1
 8015214:	f7eb fc66 	bl	8000ae4 <__aeabi_dcmpeq>
 8015218:	2800      	cmp	r0, #0
 801521a:	d0c1      	beq.n	80151a0 <_strtod_l+0x8d8>
 801521c:	e615      	b.n	8014e4a <_strtod_l+0x582>
 801521e:	bf00      	nop
 8015220:	fffffc02 	.word	0xfffffc02
 8015224:	7ff00000 	.word	0x7ff00000
 8015228:	39500000 	.word	0x39500000
 801522c:	000fffff 	.word	0x000fffff
 8015230:	7fefffff 	.word	0x7fefffff
 8015234:	0818ac58 	.word	0x0818ac58
 8015238:	4631      	mov	r1, r6
 801523a:	4628      	mov	r0, r5
 801523c:	f002 fb1a 	bl	8017874 <__ratio>
 8015240:	2200      	movs	r2, #0
 8015242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015246:	ee10 0a10 	vmov	r0, s0
 801524a:	ec59 8b10 	vmov	r8, r9, d0
 801524e:	4649      	mov	r1, r9
 8015250:	f7eb fc5c 	bl	8000b0c <__aeabi_dcmple>
 8015254:	2800      	cmp	r0, #0
 8015256:	d07a      	beq.n	801534e <_strtod_l+0xa86>
 8015258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801525a:	2b00      	cmp	r3, #0
 801525c:	d04a      	beq.n	80152f4 <_strtod_l+0xa2c>
 801525e:	2200      	movs	r2, #0
 8015260:	4b93      	ldr	r3, [pc, #588]	; (80154b0 <_strtod_l+0xbe8>)
 8015262:	f04f 0800 	mov.w	r8, #0
 8015266:	f8df 9248 	ldr.w	r9, [pc, #584]	; 80154b0 <_strtod_l+0xbe8>
 801526a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801526e:	4b91      	ldr	r3, [pc, #580]	; (80154b4 <_strtod_l+0xbec>)
 8015270:	403b      	ands	r3, r7
 8015272:	930d      	str	r3, [sp, #52]	; 0x34
 8015274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015276:	4b90      	ldr	r3, [pc, #576]	; (80154b8 <_strtod_l+0xbf0>)
 8015278:	429a      	cmp	r2, r3
 801527a:	f040 80b0 	bne.w	80153de <_strtod_l+0xb16>
 801527e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8015282:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015286:	ec4b ab10 	vmov	d0, sl, fp
 801528a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801528e:	f002 fa1b 	bl	80176c8 <__ulp>
 8015292:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015296:	ec53 2b10 	vmov	r2, r3, d0
 801529a:	f7eb f9bb 	bl	8000614 <__aeabi_dmul>
 801529e:	4652      	mov	r2, sl
 80152a0:	465b      	mov	r3, fp
 80152a2:	f7eb f801 	bl	80002a8 <__adddf3>
 80152a6:	460b      	mov	r3, r1
 80152a8:	4982      	ldr	r1, [pc, #520]	; (80154b4 <_strtod_l+0xbec>)
 80152aa:	4682      	mov	sl, r0
 80152ac:	4a83      	ldr	r2, [pc, #524]	; (80154bc <_strtod_l+0xbf4>)
 80152ae:	4019      	ands	r1, r3
 80152b0:	4291      	cmp	r1, r2
 80152b2:	d960      	bls.n	8015376 <_strtod_l+0xaae>
 80152b4:	ee18 3a90 	vmov	r3, s17
 80152b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80152bc:	4293      	cmp	r3, r2
 80152be:	d104      	bne.n	80152ca <_strtod_l+0xa02>
 80152c0:	ee18 3a10 	vmov	r3, s16
 80152c4:	3301      	adds	r3, #1
 80152c6:	f43f ad48 	beq.w	8014d5a <_strtod_l+0x492>
 80152ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80154c8 <_strtod_l+0xc00>
 80152ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80152d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80152d4:	4620      	mov	r0, r4
 80152d6:	f001 febf 	bl	8017058 <_Bfree>
 80152da:	9905      	ldr	r1, [sp, #20]
 80152dc:	4620      	mov	r0, r4
 80152de:	f001 febb 	bl	8017058 <_Bfree>
 80152e2:	4631      	mov	r1, r6
 80152e4:	4620      	mov	r0, r4
 80152e6:	f001 feb7 	bl	8017058 <_Bfree>
 80152ea:	4629      	mov	r1, r5
 80152ec:	4620      	mov	r0, r4
 80152ee:	f001 feb3 	bl	8017058 <_Bfree>
 80152f2:	e61c      	b.n	8014f2e <_strtod_l+0x666>
 80152f4:	f1ba 0f00 	cmp.w	sl, #0
 80152f8:	d11b      	bne.n	8015332 <_strtod_l+0xa6a>
 80152fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80152fe:	b9f3      	cbnz	r3, 801533e <_strtod_l+0xa76>
 8015300:	2200      	movs	r2, #0
 8015302:	4b6b      	ldr	r3, [pc, #428]	; (80154b0 <_strtod_l+0xbe8>)
 8015304:	4640      	mov	r0, r8
 8015306:	4649      	mov	r1, r9
 8015308:	f7eb fbf6 	bl	8000af8 <__aeabi_dcmplt>
 801530c:	b9d0      	cbnz	r0, 8015344 <_strtod_l+0xa7c>
 801530e:	4640      	mov	r0, r8
 8015310:	4649      	mov	r1, r9
 8015312:	2200      	movs	r2, #0
 8015314:	4b6a      	ldr	r3, [pc, #424]	; (80154c0 <_strtod_l+0xbf8>)
 8015316:	f7eb f97d 	bl	8000614 <__aeabi_dmul>
 801531a:	4680      	mov	r8, r0
 801531c:	4689      	mov	r9, r1
 801531e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015322:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8015326:	9315      	str	r3, [sp, #84]	; 0x54
 8015328:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801532c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015330:	e79d      	b.n	801526e <_strtod_l+0x9a6>
 8015332:	f1ba 0f01 	cmp.w	sl, #1
 8015336:	d102      	bne.n	801533e <_strtod_l+0xa76>
 8015338:	2f00      	cmp	r7, #0
 801533a:	f43f ad86 	beq.w	8014e4a <_strtod_l+0x582>
 801533e:	2200      	movs	r2, #0
 8015340:	4b60      	ldr	r3, [pc, #384]	; (80154c4 <_strtod_l+0xbfc>)
 8015342:	e78e      	b.n	8015262 <_strtod_l+0x99a>
 8015344:	f04f 0800 	mov.w	r8, #0
 8015348:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80154c0 <_strtod_l+0xbf8>
 801534c:	e7e7      	b.n	801531e <_strtod_l+0xa56>
 801534e:	4b5c      	ldr	r3, [pc, #368]	; (80154c0 <_strtod_l+0xbf8>)
 8015350:	4640      	mov	r0, r8
 8015352:	4649      	mov	r1, r9
 8015354:	2200      	movs	r2, #0
 8015356:	f7eb f95d 	bl	8000614 <__aeabi_dmul>
 801535a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801535c:	4680      	mov	r8, r0
 801535e:	4689      	mov	r9, r1
 8015360:	b933      	cbnz	r3, 8015370 <_strtod_l+0xaa8>
 8015362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015366:	900e      	str	r0, [sp, #56]	; 0x38
 8015368:	930f      	str	r3, [sp, #60]	; 0x3c
 801536a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801536e:	e7dd      	b.n	801532c <_strtod_l+0xa64>
 8015370:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8015374:	e7f9      	b.n	801536a <_strtod_l+0xaa2>
 8015376:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801537a:	9b04      	ldr	r3, [sp, #16]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d1a8      	bne.n	80152d2 <_strtod_l+0xa0a>
 8015380:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015386:	0d1b      	lsrs	r3, r3, #20
 8015388:	051b      	lsls	r3, r3, #20
 801538a:	429a      	cmp	r2, r3
 801538c:	d1a1      	bne.n	80152d2 <_strtod_l+0xa0a>
 801538e:	4640      	mov	r0, r8
 8015390:	4649      	mov	r1, r9
 8015392:	f7eb fc9f 	bl	8000cd4 <__aeabi_d2lz>
 8015396:	f7eb f90f 	bl	80005b8 <__aeabi_l2d>
 801539a:	4602      	mov	r2, r0
 801539c:	460b      	mov	r3, r1
 801539e:	4640      	mov	r0, r8
 80153a0:	4649      	mov	r1, r9
 80153a2:	f7ea ff7f 	bl	80002a4 <__aeabi_dsub>
 80153a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80153aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80153ac:	4680      	mov	r8, r0
 80153ae:	ea43 030a 	orr.w	r3, r3, sl
 80153b2:	4689      	mov	r9, r1
 80153b4:	4313      	orrs	r3, r2
 80153b6:	d055      	beq.n	8015464 <_strtod_l+0xb9c>
 80153b8:	a335      	add	r3, pc, #212	; (adr r3, 8015490 <_strtod_l+0xbc8>)
 80153ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153be:	f7eb fb9b 	bl	8000af8 <__aeabi_dcmplt>
 80153c2:	2800      	cmp	r0, #0
 80153c4:	f47f acd3 	bne.w	8014d6e <_strtod_l+0x4a6>
 80153c8:	4640      	mov	r0, r8
 80153ca:	4649      	mov	r1, r9
 80153cc:	a332      	add	r3, pc, #200	; (adr r3, 8015498 <_strtod_l+0xbd0>)
 80153ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d2:	f7eb fbaf 	bl	8000b34 <__aeabi_dcmpgt>
 80153d6:	2800      	cmp	r0, #0
 80153d8:	f43f af7b 	beq.w	80152d2 <_strtod_l+0xa0a>
 80153dc:	e4c7      	b.n	8014d6e <_strtod_l+0x4a6>
 80153de:	9b04      	ldr	r3, [sp, #16]
 80153e0:	b333      	cbz	r3, 8015430 <_strtod_l+0xb68>
 80153e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80153e8:	d822      	bhi.n	8015430 <_strtod_l+0xb68>
 80153ea:	4640      	mov	r0, r8
 80153ec:	4649      	mov	r1, r9
 80153ee:	a32c      	add	r3, pc, #176	; (adr r3, 80154a0 <_strtod_l+0xbd8>)
 80153f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f4:	f7eb fb8a 	bl	8000b0c <__aeabi_dcmple>
 80153f8:	b1a0      	cbz	r0, 8015424 <_strtod_l+0xb5c>
 80153fa:	4649      	mov	r1, r9
 80153fc:	4640      	mov	r0, r8
 80153fe:	f7eb fbe1 	bl	8000bc4 <__aeabi_d2uiz>
 8015402:	2801      	cmp	r0, #1
 8015404:	bf38      	it	cc
 8015406:	2001      	movcc	r0, #1
 8015408:	f7eb f88a 	bl	8000520 <__aeabi_ui2d>
 801540c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801540e:	4680      	mov	r8, r0
 8015410:	4689      	mov	r9, r1
 8015412:	bb23      	cbnz	r3, 801545e <_strtod_l+0xb96>
 8015414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015418:	9010      	str	r0, [sp, #64]	; 0x40
 801541a:	9311      	str	r3, [sp, #68]	; 0x44
 801541c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015420:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015428:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801542c:	1a9b      	subs	r3, r3, r2
 801542e:	9309      	str	r3, [sp, #36]	; 0x24
 8015430:	eeb0 0a48 	vmov.f32	s0, s16
 8015434:	eef0 0a68 	vmov.f32	s1, s17
 8015438:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801543c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015440:	f002 f942 	bl	80176c8 <__ulp>
 8015444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015448:	ec53 2b10 	vmov	r2, r3, d0
 801544c:	f7eb f8e2 	bl	8000614 <__aeabi_dmul>
 8015450:	ec53 2b18 	vmov	r2, r3, d8
 8015454:	f7ea ff28 	bl	80002a8 <__adddf3>
 8015458:	4682      	mov	sl, r0
 801545a:	468b      	mov	fp, r1
 801545c:	e78d      	b.n	801537a <_strtod_l+0xab2>
 801545e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8015462:	e7db      	b.n	801541c <_strtod_l+0xb54>
 8015464:	a310      	add	r3, pc, #64	; (adr r3, 80154a8 <_strtod_l+0xbe0>)
 8015466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801546a:	f7eb fb45 	bl	8000af8 <__aeabi_dcmplt>
 801546e:	e7b2      	b.n	80153d6 <_strtod_l+0xb0e>
 8015470:	2300      	movs	r3, #0
 8015472:	930a      	str	r3, [sp, #40]	; 0x28
 8015474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015476:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015478:	6013      	str	r3, [r2, #0]
 801547a:	f7ff ba6d 	b.w	8014958 <_strtod_l+0x90>
 801547e:	2a65      	cmp	r2, #101	; 0x65
 8015480:	f43f ab61 	beq.w	8014b46 <_strtod_l+0x27e>
 8015484:	2a45      	cmp	r2, #69	; 0x45
 8015486:	f43f ab5e 	beq.w	8014b46 <_strtod_l+0x27e>
 801548a:	2301      	movs	r3, #1
 801548c:	f7ff bb96 	b.w	8014bbc <_strtod_l+0x2f4>
 8015490:	94a03595 	.word	0x94a03595
 8015494:	3fdfffff 	.word	0x3fdfffff
 8015498:	35afe535 	.word	0x35afe535
 801549c:	3fe00000 	.word	0x3fe00000
 80154a0:	ffc00000 	.word	0xffc00000
 80154a4:	41dfffff 	.word	0x41dfffff
 80154a8:	94a03595 	.word	0x94a03595
 80154ac:	3fcfffff 	.word	0x3fcfffff
 80154b0:	3ff00000 	.word	0x3ff00000
 80154b4:	7ff00000 	.word	0x7ff00000
 80154b8:	7fe00000 	.word	0x7fe00000
 80154bc:	7c9fffff 	.word	0x7c9fffff
 80154c0:	3fe00000 	.word	0x3fe00000
 80154c4:	bff00000 	.word	0xbff00000
 80154c8:	7fefffff 	.word	0x7fefffff

080154cc <_strtod_r>:
 80154cc:	4b01      	ldr	r3, [pc, #4]	; (80154d4 <_strtod_r+0x8>)
 80154ce:	f7ff b9fb 	b.w	80148c8 <_strtod_l>
 80154d2:	bf00      	nop
 80154d4:	20000174 	.word	0x20000174

080154d8 <_strtol_l.constprop.0>:
 80154d8:	2b01      	cmp	r3, #1
 80154da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154de:	d001      	beq.n	80154e4 <_strtol_l.constprop.0+0xc>
 80154e0:	2b24      	cmp	r3, #36	; 0x24
 80154e2:	d906      	bls.n	80154f2 <_strtol_l.constprop.0+0x1a>
 80154e4:	f7fe f912 	bl	801370c <__errno>
 80154e8:	2316      	movs	r3, #22
 80154ea:	6003      	str	r3, [r0, #0]
 80154ec:	2000      	movs	r0, #0
 80154ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154f2:	460d      	mov	r5, r1
 80154f4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 80155d8 <_strtol_l.constprop.0+0x100>
 80154f8:	462e      	mov	r6, r5
 80154fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8015502:	f017 0708 	ands.w	r7, r7, #8
 8015506:	d1f7      	bne.n	80154f8 <_strtol_l.constprop.0+0x20>
 8015508:	2c2d      	cmp	r4, #45	; 0x2d
 801550a:	d132      	bne.n	8015572 <_strtol_l.constprop.0+0x9a>
 801550c:	782c      	ldrb	r4, [r5, #0]
 801550e:	2701      	movs	r7, #1
 8015510:	1cb5      	adds	r5, r6, #2
 8015512:	2b00      	cmp	r3, #0
 8015514:	d05b      	beq.n	80155ce <_strtol_l.constprop.0+0xf6>
 8015516:	2b10      	cmp	r3, #16
 8015518:	d109      	bne.n	801552e <_strtol_l.constprop.0+0x56>
 801551a:	2c30      	cmp	r4, #48	; 0x30
 801551c:	d107      	bne.n	801552e <_strtol_l.constprop.0+0x56>
 801551e:	782c      	ldrb	r4, [r5, #0]
 8015520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015524:	2c58      	cmp	r4, #88	; 0x58
 8015526:	d14d      	bne.n	80155c4 <_strtol_l.constprop.0+0xec>
 8015528:	786c      	ldrb	r4, [r5, #1]
 801552a:	2310      	movs	r3, #16
 801552c:	3502      	adds	r5, #2
 801552e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015532:	f04f 0c00 	mov.w	ip, #0
 8015536:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801553a:	4666      	mov	r6, ip
 801553c:	fbb8 f9f3 	udiv	r9, r8, r3
 8015540:	fb03 8a19 	mls	sl, r3, r9, r8
 8015544:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015548:	f1be 0f09 	cmp.w	lr, #9
 801554c:	d816      	bhi.n	801557c <_strtol_l.constprop.0+0xa4>
 801554e:	4674      	mov	r4, lr
 8015550:	42a3      	cmp	r3, r4
 8015552:	dd24      	ble.n	801559e <_strtol_l.constprop.0+0xc6>
 8015554:	f1bc 0f00 	cmp.w	ip, #0
 8015558:	db1e      	blt.n	8015598 <_strtol_l.constprop.0+0xc0>
 801555a:	45b1      	cmp	r9, r6
 801555c:	d31c      	bcc.n	8015598 <_strtol_l.constprop.0+0xc0>
 801555e:	d101      	bne.n	8015564 <_strtol_l.constprop.0+0x8c>
 8015560:	45a2      	cmp	sl, r4
 8015562:	db19      	blt.n	8015598 <_strtol_l.constprop.0+0xc0>
 8015564:	fb06 4603 	mla	r6, r6, r3, r4
 8015568:	f04f 0c01 	mov.w	ip, #1
 801556c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015570:	e7e8      	b.n	8015544 <_strtol_l.constprop.0+0x6c>
 8015572:	2c2b      	cmp	r4, #43	; 0x2b
 8015574:	bf04      	itt	eq
 8015576:	782c      	ldrbeq	r4, [r5, #0]
 8015578:	1cb5      	addeq	r5, r6, #2
 801557a:	e7ca      	b.n	8015512 <_strtol_l.constprop.0+0x3a>
 801557c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015580:	f1be 0f19 	cmp.w	lr, #25
 8015584:	d801      	bhi.n	801558a <_strtol_l.constprop.0+0xb2>
 8015586:	3c37      	subs	r4, #55	; 0x37
 8015588:	e7e2      	b.n	8015550 <_strtol_l.constprop.0+0x78>
 801558a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801558e:	f1be 0f19 	cmp.w	lr, #25
 8015592:	d804      	bhi.n	801559e <_strtol_l.constprop.0+0xc6>
 8015594:	3c57      	subs	r4, #87	; 0x57
 8015596:	e7db      	b.n	8015550 <_strtol_l.constprop.0+0x78>
 8015598:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801559c:	e7e6      	b.n	801556c <_strtol_l.constprop.0+0x94>
 801559e:	f1bc 0f00 	cmp.w	ip, #0
 80155a2:	da05      	bge.n	80155b0 <_strtol_l.constprop.0+0xd8>
 80155a4:	2322      	movs	r3, #34	; 0x22
 80155a6:	4646      	mov	r6, r8
 80155a8:	6003      	str	r3, [r0, #0]
 80155aa:	b942      	cbnz	r2, 80155be <_strtol_l.constprop.0+0xe6>
 80155ac:	4630      	mov	r0, r6
 80155ae:	e79e      	b.n	80154ee <_strtol_l.constprop.0+0x16>
 80155b0:	b107      	cbz	r7, 80155b4 <_strtol_l.constprop.0+0xdc>
 80155b2:	4276      	negs	r6, r6
 80155b4:	2a00      	cmp	r2, #0
 80155b6:	d0f9      	beq.n	80155ac <_strtol_l.constprop.0+0xd4>
 80155b8:	f1bc 0f00 	cmp.w	ip, #0
 80155bc:	d000      	beq.n	80155c0 <_strtol_l.constprop.0+0xe8>
 80155be:	1e69      	subs	r1, r5, #1
 80155c0:	6011      	str	r1, [r2, #0]
 80155c2:	e7f3      	b.n	80155ac <_strtol_l.constprop.0+0xd4>
 80155c4:	2430      	movs	r4, #48	; 0x30
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d1b1      	bne.n	801552e <_strtol_l.constprop.0+0x56>
 80155ca:	2308      	movs	r3, #8
 80155cc:	e7af      	b.n	801552e <_strtol_l.constprop.0+0x56>
 80155ce:	2c30      	cmp	r4, #48	; 0x30
 80155d0:	d0a5      	beq.n	801551e <_strtol_l.constprop.0+0x46>
 80155d2:	230a      	movs	r3, #10
 80155d4:	e7ab      	b.n	801552e <_strtol_l.constprop.0+0x56>
 80155d6:	bf00      	nop
 80155d8:	0818ac81 	.word	0x0818ac81

080155dc <_strtol_r>:
 80155dc:	f7ff bf7c 	b.w	80154d8 <_strtol_l.constprop.0>

080155e0 <__swbuf_r>:
 80155e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155e2:	460e      	mov	r6, r1
 80155e4:	4614      	mov	r4, r2
 80155e6:	4605      	mov	r5, r0
 80155e8:	b118      	cbz	r0, 80155f2 <__swbuf_r+0x12>
 80155ea:	6983      	ldr	r3, [r0, #24]
 80155ec:	b90b      	cbnz	r3, 80155f2 <__swbuf_r+0x12>
 80155ee:	f001 f84f 	bl	8016690 <__sinit>
 80155f2:	4b21      	ldr	r3, [pc, #132]	; (8015678 <__swbuf_r+0x98>)
 80155f4:	429c      	cmp	r4, r3
 80155f6:	d12b      	bne.n	8015650 <__swbuf_r+0x70>
 80155f8:	686c      	ldr	r4, [r5, #4]
 80155fa:	69a3      	ldr	r3, [r4, #24]
 80155fc:	60a3      	str	r3, [r4, #8]
 80155fe:	89a3      	ldrh	r3, [r4, #12]
 8015600:	071a      	lsls	r2, r3, #28
 8015602:	d52f      	bpl.n	8015664 <__swbuf_r+0x84>
 8015604:	6923      	ldr	r3, [r4, #16]
 8015606:	b36b      	cbz	r3, 8015664 <__swbuf_r+0x84>
 8015608:	6923      	ldr	r3, [r4, #16]
 801560a:	b2f6      	uxtb	r6, r6
 801560c:	6820      	ldr	r0, [r4, #0]
 801560e:	4637      	mov	r7, r6
 8015610:	1ac0      	subs	r0, r0, r3
 8015612:	6963      	ldr	r3, [r4, #20]
 8015614:	4283      	cmp	r3, r0
 8015616:	dc04      	bgt.n	8015622 <__swbuf_r+0x42>
 8015618:	4621      	mov	r1, r4
 801561a:	4628      	mov	r0, r5
 801561c:	f000 ffa4 	bl	8016568 <_fflush_r>
 8015620:	bb30      	cbnz	r0, 8015670 <__swbuf_r+0x90>
 8015622:	68a3      	ldr	r3, [r4, #8]
 8015624:	3001      	adds	r0, #1
 8015626:	3b01      	subs	r3, #1
 8015628:	60a3      	str	r3, [r4, #8]
 801562a:	6823      	ldr	r3, [r4, #0]
 801562c:	1c5a      	adds	r2, r3, #1
 801562e:	6022      	str	r2, [r4, #0]
 8015630:	701e      	strb	r6, [r3, #0]
 8015632:	6963      	ldr	r3, [r4, #20]
 8015634:	4283      	cmp	r3, r0
 8015636:	d004      	beq.n	8015642 <__swbuf_r+0x62>
 8015638:	89a3      	ldrh	r3, [r4, #12]
 801563a:	07db      	lsls	r3, r3, #31
 801563c:	d506      	bpl.n	801564c <__swbuf_r+0x6c>
 801563e:	2e0a      	cmp	r6, #10
 8015640:	d104      	bne.n	801564c <__swbuf_r+0x6c>
 8015642:	4621      	mov	r1, r4
 8015644:	4628      	mov	r0, r5
 8015646:	f000 ff8f 	bl	8016568 <_fflush_r>
 801564a:	b988      	cbnz	r0, 8015670 <__swbuf_r+0x90>
 801564c:	4638      	mov	r0, r7
 801564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015650:	4b0a      	ldr	r3, [pc, #40]	; (801567c <__swbuf_r+0x9c>)
 8015652:	429c      	cmp	r4, r3
 8015654:	d101      	bne.n	801565a <__swbuf_r+0x7a>
 8015656:	68ac      	ldr	r4, [r5, #8]
 8015658:	e7cf      	b.n	80155fa <__swbuf_r+0x1a>
 801565a:	4b09      	ldr	r3, [pc, #36]	; (8015680 <__swbuf_r+0xa0>)
 801565c:	429c      	cmp	r4, r3
 801565e:	bf08      	it	eq
 8015660:	68ec      	ldreq	r4, [r5, #12]
 8015662:	e7ca      	b.n	80155fa <__swbuf_r+0x1a>
 8015664:	4621      	mov	r1, r4
 8015666:	4628      	mov	r0, r5
 8015668:	f000 f80c 	bl	8015684 <__swsetup_r>
 801566c:	2800      	cmp	r0, #0
 801566e:	d0cb      	beq.n	8015608 <__swbuf_r+0x28>
 8015670:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015674:	e7ea      	b.n	801564c <__swbuf_r+0x6c>
 8015676:	bf00      	nop
 8015678:	0818ae34 	.word	0x0818ae34
 801567c:	0818ae54 	.word	0x0818ae54
 8015680:	0818ae14 	.word	0x0818ae14

08015684 <__swsetup_r>:
 8015684:	4b32      	ldr	r3, [pc, #200]	; (8015750 <__swsetup_r+0xcc>)
 8015686:	b570      	push	{r4, r5, r6, lr}
 8015688:	681d      	ldr	r5, [r3, #0]
 801568a:	4606      	mov	r6, r0
 801568c:	460c      	mov	r4, r1
 801568e:	b125      	cbz	r5, 801569a <__swsetup_r+0x16>
 8015690:	69ab      	ldr	r3, [r5, #24]
 8015692:	b913      	cbnz	r3, 801569a <__swsetup_r+0x16>
 8015694:	4628      	mov	r0, r5
 8015696:	f000 fffb 	bl	8016690 <__sinit>
 801569a:	4b2e      	ldr	r3, [pc, #184]	; (8015754 <__swsetup_r+0xd0>)
 801569c:	429c      	cmp	r4, r3
 801569e:	d10f      	bne.n	80156c0 <__swsetup_r+0x3c>
 80156a0:	686c      	ldr	r4, [r5, #4]
 80156a2:	89a3      	ldrh	r3, [r4, #12]
 80156a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80156a8:	0719      	lsls	r1, r3, #28
 80156aa:	d42c      	bmi.n	8015706 <__swsetup_r+0x82>
 80156ac:	06dd      	lsls	r5, r3, #27
 80156ae:	d411      	bmi.n	80156d4 <__swsetup_r+0x50>
 80156b0:	2309      	movs	r3, #9
 80156b2:	6033      	str	r3, [r6, #0]
 80156b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80156b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80156bc:	81a3      	strh	r3, [r4, #12]
 80156be:	e03e      	b.n	801573e <__swsetup_r+0xba>
 80156c0:	4b25      	ldr	r3, [pc, #148]	; (8015758 <__swsetup_r+0xd4>)
 80156c2:	429c      	cmp	r4, r3
 80156c4:	d101      	bne.n	80156ca <__swsetup_r+0x46>
 80156c6:	68ac      	ldr	r4, [r5, #8]
 80156c8:	e7eb      	b.n	80156a2 <__swsetup_r+0x1e>
 80156ca:	4b24      	ldr	r3, [pc, #144]	; (801575c <__swsetup_r+0xd8>)
 80156cc:	429c      	cmp	r4, r3
 80156ce:	bf08      	it	eq
 80156d0:	68ec      	ldreq	r4, [r5, #12]
 80156d2:	e7e6      	b.n	80156a2 <__swsetup_r+0x1e>
 80156d4:	0758      	lsls	r0, r3, #29
 80156d6:	d512      	bpl.n	80156fe <__swsetup_r+0x7a>
 80156d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156da:	b141      	cbz	r1, 80156ee <__swsetup_r+0x6a>
 80156dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80156e0:	4299      	cmp	r1, r3
 80156e2:	d002      	beq.n	80156ea <__swsetup_r+0x66>
 80156e4:	4630      	mov	r0, r6
 80156e6:	f7fe f871 	bl	80137cc <_free_r>
 80156ea:	2300      	movs	r3, #0
 80156ec:	6363      	str	r3, [r4, #52]	; 0x34
 80156ee:	89a3      	ldrh	r3, [r4, #12]
 80156f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80156f4:	81a3      	strh	r3, [r4, #12]
 80156f6:	2300      	movs	r3, #0
 80156f8:	6063      	str	r3, [r4, #4]
 80156fa:	6923      	ldr	r3, [r4, #16]
 80156fc:	6023      	str	r3, [r4, #0]
 80156fe:	89a3      	ldrh	r3, [r4, #12]
 8015700:	f043 0308 	orr.w	r3, r3, #8
 8015704:	81a3      	strh	r3, [r4, #12]
 8015706:	6923      	ldr	r3, [r4, #16]
 8015708:	b94b      	cbnz	r3, 801571e <__swsetup_r+0x9a>
 801570a:	89a3      	ldrh	r3, [r4, #12]
 801570c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015714:	d003      	beq.n	801571e <__swsetup_r+0x9a>
 8015716:	4621      	mov	r1, r4
 8015718:	4630      	mov	r0, r6
 801571a:	f001 fbf1 	bl	8016f00 <__smakebuf_r>
 801571e:	89a0      	ldrh	r0, [r4, #12]
 8015720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015724:	f010 0301 	ands.w	r3, r0, #1
 8015728:	d00a      	beq.n	8015740 <__swsetup_r+0xbc>
 801572a:	2300      	movs	r3, #0
 801572c:	60a3      	str	r3, [r4, #8]
 801572e:	6963      	ldr	r3, [r4, #20]
 8015730:	425b      	negs	r3, r3
 8015732:	61a3      	str	r3, [r4, #24]
 8015734:	6923      	ldr	r3, [r4, #16]
 8015736:	b943      	cbnz	r3, 801574a <__swsetup_r+0xc6>
 8015738:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801573c:	d1ba      	bne.n	80156b4 <__swsetup_r+0x30>
 801573e:	bd70      	pop	{r4, r5, r6, pc}
 8015740:	0781      	lsls	r1, r0, #30
 8015742:	bf58      	it	pl
 8015744:	6963      	ldrpl	r3, [r4, #20]
 8015746:	60a3      	str	r3, [r4, #8]
 8015748:	e7f4      	b.n	8015734 <__swsetup_r+0xb0>
 801574a:	2000      	movs	r0, #0
 801574c:	e7f7      	b.n	801573e <__swsetup_r+0xba>
 801574e:	bf00      	nop
 8015750:	2000010c 	.word	0x2000010c
 8015754:	0818ae34 	.word	0x0818ae34
 8015758:	0818ae54 	.word	0x0818ae54
 801575c:	0818ae14 	.word	0x0818ae14

08015760 <quorem>:
 8015760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015764:	6903      	ldr	r3, [r0, #16]
 8015766:	4607      	mov	r7, r0
 8015768:	690c      	ldr	r4, [r1, #16]
 801576a:	42a3      	cmp	r3, r4
 801576c:	f2c0 8087 	blt.w	801587e <quorem+0x11e>
 8015770:	3c01      	subs	r4, #1
 8015772:	f100 0514 	add.w	r5, r0, #20
 8015776:	f101 0814 	add.w	r8, r1, #20
 801577a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801577e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015782:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015786:	9301      	str	r3, [sp, #4]
 8015788:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801578c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015790:	3301      	adds	r3, #1
 8015792:	429a      	cmp	r2, r3
 8015794:	fbb2 f6f3 	udiv	r6, r2, r3
 8015798:	d335      	bcc.n	8015806 <quorem+0xa6>
 801579a:	f04f 0e00 	mov.w	lr, #0
 801579e:	4640      	mov	r0, r8
 80157a0:	46ac      	mov	ip, r5
 80157a2:	46f2      	mov	sl, lr
 80157a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80157a8:	b293      	uxth	r3, r2
 80157aa:	4581      	cmp	r9, r0
 80157ac:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80157b0:	fb06 e303 	mla	r3, r6, r3, lr
 80157b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	fb06 e202 	mla	r2, r6, r2, lr
 80157be:	ebaa 0303 	sub.w	r3, sl, r3
 80157c2:	f8dc a000 	ldr.w	sl, [ip]
 80157c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80157ca:	fa1f fa8a 	uxth.w	sl, sl
 80157ce:	b292      	uxth	r2, r2
 80157d0:	4453      	add	r3, sl
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	f8dc 3000 	ldr.w	r3, [ip]
 80157d8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 80157dc:	9b00      	ldr	r3, [sp, #0]
 80157de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80157e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80157e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80157ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80157ee:	f84c 3b04 	str.w	r3, [ip], #4
 80157f2:	d2d7      	bcs.n	80157a4 <quorem+0x44>
 80157f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80157f8:	b92b      	cbnz	r3, 8015806 <quorem+0xa6>
 80157fa:	9b01      	ldr	r3, [sp, #4]
 80157fc:	3b04      	subs	r3, #4
 80157fe:	429d      	cmp	r5, r3
 8015800:	461a      	mov	r2, r3
 8015802:	d330      	bcc.n	8015866 <quorem+0x106>
 8015804:	613c      	str	r4, [r7, #16]
 8015806:	4638      	mov	r0, r7
 8015808:	f001 feb2 	bl	8017570 <__mcmp>
 801580c:	2800      	cmp	r0, #0
 801580e:	db26      	blt.n	801585e <quorem+0xfe>
 8015810:	3601      	adds	r6, #1
 8015812:	4628      	mov	r0, r5
 8015814:	f04f 0c00 	mov.w	ip, #0
 8015818:	f858 1b04 	ldr.w	r1, [r8], #4
 801581c:	f8d0 e000 	ldr.w	lr, [r0]
 8015820:	b28b      	uxth	r3, r1
 8015822:	45c1      	cmp	r9, r8
 8015824:	fa1f f28e 	uxth.w	r2, lr
 8015828:	ebac 0303 	sub.w	r3, ip, r3
 801582c:	4413      	add	r3, r2
 801582e:	ea4f 4211 	mov.w	r2, r1, lsr #16
 8015832:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015836:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801583a:	b29b      	uxth	r3, r3
 801583c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015844:	f840 3b04 	str.w	r3, [r0], #4
 8015848:	d2e6      	bcs.n	8015818 <quorem+0xb8>
 801584a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801584e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015852:	b922      	cbnz	r2, 801585e <quorem+0xfe>
 8015854:	3b04      	subs	r3, #4
 8015856:	429d      	cmp	r5, r3
 8015858:	461a      	mov	r2, r3
 801585a:	d30a      	bcc.n	8015872 <quorem+0x112>
 801585c:	613c      	str	r4, [r7, #16]
 801585e:	4630      	mov	r0, r6
 8015860:	b003      	add	sp, #12
 8015862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015866:	6812      	ldr	r2, [r2, #0]
 8015868:	3b04      	subs	r3, #4
 801586a:	2a00      	cmp	r2, #0
 801586c:	d1ca      	bne.n	8015804 <quorem+0xa4>
 801586e:	3c01      	subs	r4, #1
 8015870:	e7c5      	b.n	80157fe <quorem+0x9e>
 8015872:	6812      	ldr	r2, [r2, #0]
 8015874:	3b04      	subs	r3, #4
 8015876:	2a00      	cmp	r2, #0
 8015878:	d1f0      	bne.n	801585c <quorem+0xfc>
 801587a:	3c01      	subs	r4, #1
 801587c:	e7eb      	b.n	8015856 <quorem+0xf6>
 801587e:	2000      	movs	r0, #0
 8015880:	e7ee      	b.n	8015860 <quorem+0x100>
 8015882:	0000      	movs	r0, r0
 8015884:	0000      	movs	r0, r0
	...

08015888 <_dtoa_r>:
 8015888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801588e:	4604      	mov	r4, r0
 8015890:	ee10 aa10 	vmov	sl, s0
 8015894:	ed2d 8b04 	vpush	{d8-d9}
 8015898:	b093      	sub	sp, #76	; 0x4c
 801589a:	ec57 6b10 	vmov	r6, r7, d0
 801589e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80158a2:	46bb      	mov	fp, r7
 80158a4:	9106      	str	r1, [sp, #24]
 80158a6:	9209      	str	r2, [sp, #36]	; 0x24
 80158a8:	930c      	str	r3, [sp, #48]	; 0x30
 80158aa:	b975      	cbnz	r5, 80158ca <_dtoa_r+0x42>
 80158ac:	2010      	movs	r0, #16
 80158ae:	f7fd ff57 	bl	8013760 <malloc>
 80158b2:	4602      	mov	r2, r0
 80158b4:	6260      	str	r0, [r4, #36]	; 0x24
 80158b6:	b920      	cbnz	r0, 80158c2 <_dtoa_r+0x3a>
 80158b8:	4ba7      	ldr	r3, [pc, #668]	; (8015b58 <_dtoa_r+0x2d0>)
 80158ba:	21ea      	movs	r1, #234	; 0xea
 80158bc:	48a7      	ldr	r0, [pc, #668]	; (8015b5c <_dtoa_r+0x2d4>)
 80158be:	f002 fb85 	bl	8017fcc <__assert_func>
 80158c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80158c6:	6005      	str	r5, [r0, #0]
 80158c8:	60c5      	str	r5, [r0, #12]
 80158ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158cc:	6819      	ldr	r1, [r3, #0]
 80158ce:	b151      	cbz	r1, 80158e6 <_dtoa_r+0x5e>
 80158d0:	685a      	ldr	r2, [r3, #4]
 80158d2:	2301      	movs	r3, #1
 80158d4:	4620      	mov	r0, r4
 80158d6:	4093      	lsls	r3, r2
 80158d8:	604a      	str	r2, [r1, #4]
 80158da:	608b      	str	r3, [r1, #8]
 80158dc:	f001 fbbc 	bl	8017058 <_Bfree>
 80158e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158e2:	2200      	movs	r2, #0
 80158e4:	601a      	str	r2, [r3, #0]
 80158e6:	1e3b      	subs	r3, r7, #0
 80158e8:	bfad      	iteet	ge
 80158ea:	2300      	movge	r3, #0
 80158ec:	2201      	movlt	r2, #1
 80158ee:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80158f2:	f8c8 3000 	strge.w	r3, [r8]
 80158f6:	4b9a      	ldr	r3, [pc, #616]	; (8015b60 <_dtoa_r+0x2d8>)
 80158f8:	bfb8      	it	lt
 80158fa:	f8c8 2000 	strlt.w	r2, [r8]
 80158fe:	ea33 030b 	bics.w	r3, r3, fp
 8015902:	d11b      	bne.n	801593c <_dtoa_r+0xb4>
 8015904:	f242 730f 	movw	r3, #9999	; 0x270f
 8015908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801590a:	6013      	str	r3, [r2, #0]
 801590c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015910:	4333      	orrs	r3, r6
 8015912:	f000 858f 	beq.w	8016434 <_dtoa_r+0xbac>
 8015916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015918:	b963      	cbnz	r3, 8015934 <_dtoa_r+0xac>
 801591a:	4b92      	ldr	r3, [pc, #584]	; (8015b64 <_dtoa_r+0x2dc>)
 801591c:	e022      	b.n	8015964 <_dtoa_r+0xdc>
 801591e:	4b92      	ldr	r3, [pc, #584]	; (8015b68 <_dtoa_r+0x2e0>)
 8015920:	9301      	str	r3, [sp, #4]
 8015922:	3308      	adds	r3, #8
 8015924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015926:	6013      	str	r3, [r2, #0]
 8015928:	9801      	ldr	r0, [sp, #4]
 801592a:	b013      	add	sp, #76	; 0x4c
 801592c:	ecbd 8b04 	vpop	{d8-d9}
 8015930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015934:	4b8b      	ldr	r3, [pc, #556]	; (8015b64 <_dtoa_r+0x2dc>)
 8015936:	9301      	str	r3, [sp, #4]
 8015938:	3303      	adds	r3, #3
 801593a:	e7f3      	b.n	8015924 <_dtoa_r+0x9c>
 801593c:	2200      	movs	r2, #0
 801593e:	2300      	movs	r3, #0
 8015940:	4650      	mov	r0, sl
 8015942:	4659      	mov	r1, fp
 8015944:	f7eb f8ce 	bl	8000ae4 <__aeabi_dcmpeq>
 8015948:	4680      	mov	r8, r0
 801594a:	ec4b ab19 	vmov	d9, sl, fp
 801594e:	b158      	cbz	r0, 8015968 <_dtoa_r+0xe0>
 8015950:	2301      	movs	r3, #1
 8015952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015954:	6013      	str	r3, [r2, #0]
 8015956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015958:	2b00      	cmp	r3, #0
 801595a:	f000 8568 	beq.w	801642e <_dtoa_r+0xba6>
 801595e:	4883      	ldr	r0, [pc, #524]	; (8015b6c <_dtoa_r+0x2e4>)
 8015960:	6018      	str	r0, [r3, #0]
 8015962:	1e43      	subs	r3, r0, #1
 8015964:	9301      	str	r3, [sp, #4]
 8015966:	e7df      	b.n	8015928 <_dtoa_r+0xa0>
 8015968:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801596c:	aa10      	add	r2, sp, #64	; 0x40
 801596e:	a911      	add	r1, sp, #68	; 0x44
 8015970:	4620      	mov	r0, r4
 8015972:	ec4b ab10 	vmov	d0, sl, fp
 8015976:	f001 ff21 	bl	80177bc <__d2b>
 801597a:	ee08 0a10 	vmov	s16, r0
 801597e:	2d00      	cmp	r5, #0
 8015980:	f000 8082 	beq.w	8015a88 <_dtoa_r+0x200>
 8015984:	ee19 3a90 	vmov	r3, s19
 8015988:	4656      	mov	r6, sl
 801598a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801598e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015996:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801599a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801599e:	2200      	movs	r2, #0
 80159a0:	4b73      	ldr	r3, [pc, #460]	; (8015b70 <_dtoa_r+0x2e8>)
 80159a2:	4630      	mov	r0, r6
 80159a4:	4639      	mov	r1, r7
 80159a6:	f7ea fc7d 	bl	80002a4 <__aeabi_dsub>
 80159aa:	a365      	add	r3, pc, #404	; (adr r3, 8015b40 <_dtoa_r+0x2b8>)
 80159ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b0:	f7ea fe30 	bl	8000614 <__aeabi_dmul>
 80159b4:	a364      	add	r3, pc, #400	; (adr r3, 8015b48 <_dtoa_r+0x2c0>)
 80159b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ba:	f7ea fc75 	bl	80002a8 <__adddf3>
 80159be:	4606      	mov	r6, r0
 80159c0:	460f      	mov	r7, r1
 80159c2:	4628      	mov	r0, r5
 80159c4:	f7ea fdbc 	bl	8000540 <__aeabi_i2d>
 80159c8:	a361      	add	r3, pc, #388	; (adr r3, 8015b50 <_dtoa_r+0x2c8>)
 80159ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ce:	f7ea fe21 	bl	8000614 <__aeabi_dmul>
 80159d2:	4602      	mov	r2, r0
 80159d4:	460b      	mov	r3, r1
 80159d6:	4630      	mov	r0, r6
 80159d8:	4639      	mov	r1, r7
 80159da:	f7ea fc65 	bl	80002a8 <__adddf3>
 80159de:	4606      	mov	r6, r0
 80159e0:	460f      	mov	r7, r1
 80159e2:	f7eb f8c7 	bl	8000b74 <__aeabi_d2iz>
 80159e6:	2200      	movs	r2, #0
 80159e8:	9000      	str	r0, [sp, #0]
 80159ea:	2300      	movs	r3, #0
 80159ec:	4630      	mov	r0, r6
 80159ee:	4639      	mov	r1, r7
 80159f0:	f7eb f882 	bl	8000af8 <__aeabi_dcmplt>
 80159f4:	b150      	cbz	r0, 8015a0c <_dtoa_r+0x184>
 80159f6:	9800      	ldr	r0, [sp, #0]
 80159f8:	f7ea fda2 	bl	8000540 <__aeabi_i2d>
 80159fc:	4632      	mov	r2, r6
 80159fe:	463b      	mov	r3, r7
 8015a00:	f7eb f870 	bl	8000ae4 <__aeabi_dcmpeq>
 8015a04:	b910      	cbnz	r0, 8015a0c <_dtoa_r+0x184>
 8015a06:	9b00      	ldr	r3, [sp, #0]
 8015a08:	3b01      	subs	r3, #1
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	9b00      	ldr	r3, [sp, #0]
 8015a0e:	2b16      	cmp	r3, #22
 8015a10:	d859      	bhi.n	8015ac6 <_dtoa_r+0x23e>
 8015a12:	9a00      	ldr	r2, [sp, #0]
 8015a14:	4b57      	ldr	r3, [pc, #348]	; (8015b74 <_dtoa_r+0x2ec>)
 8015a16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a1a:	ec51 0b19 	vmov	r0, r1, d9
 8015a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a22:	f7eb f869 	bl	8000af8 <__aeabi_dcmplt>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d04f      	beq.n	8015aca <_dtoa_r+0x242>
 8015a2a:	9b00      	ldr	r3, [sp, #0]
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	9300      	str	r3, [sp, #0]
 8015a30:	2300      	movs	r3, #0
 8015a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a36:	1b5d      	subs	r5, r3, r5
 8015a38:	1e6b      	subs	r3, r5, #1
 8015a3a:	9305      	str	r3, [sp, #20]
 8015a3c:	bf49      	itett	mi
 8015a3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8015a42:	2300      	movpl	r3, #0
 8015a44:	9304      	strmi	r3, [sp, #16]
 8015a46:	2300      	movmi	r3, #0
 8015a48:	bf54      	ite	pl
 8015a4a:	9304      	strpl	r3, [sp, #16]
 8015a4c:	9305      	strmi	r3, [sp, #20]
 8015a4e:	9b00      	ldr	r3, [sp, #0]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	db3c      	blt.n	8015ace <_dtoa_r+0x246>
 8015a54:	9b05      	ldr	r3, [sp, #20]
 8015a56:	9a00      	ldr	r2, [sp, #0]
 8015a58:	4413      	add	r3, r2
 8015a5a:	920a      	str	r2, [sp, #40]	; 0x28
 8015a5c:	9305      	str	r3, [sp, #20]
 8015a5e:	2300      	movs	r3, #0
 8015a60:	9307      	str	r3, [sp, #28]
 8015a62:	9b06      	ldr	r3, [sp, #24]
 8015a64:	2b09      	cmp	r3, #9
 8015a66:	f200 8089 	bhi.w	8015b7c <_dtoa_r+0x2f4>
 8015a6a:	2b05      	cmp	r3, #5
 8015a6c:	bfc5      	ittet	gt
 8015a6e:	3b04      	subgt	r3, #4
 8015a70:	2500      	movgt	r5, #0
 8015a72:	2501      	movle	r5, #1
 8015a74:	9306      	strgt	r3, [sp, #24]
 8015a76:	9b06      	ldr	r3, [sp, #24]
 8015a78:	3b02      	subs	r3, #2
 8015a7a:	2b03      	cmp	r3, #3
 8015a7c:	f200 8089 	bhi.w	8015b92 <_dtoa_r+0x30a>
 8015a80:	e8df f003 	tbb	[pc, r3]
 8015a84:	5a393b2e 	.word	0x5a393b2e
 8015a88:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015a8c:	441d      	add	r5, r3
 8015a8e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015a92:	2b20      	cmp	r3, #32
 8015a94:	bfc6      	itte	gt
 8015a96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015a9a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015a9e:	f1c3 0320 	rsble	r3, r3, #32
 8015aa2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8015aa6:	bfc5      	ittet	gt
 8015aa8:	fa0b f303 	lslgt.w	r3, fp, r3
 8015aac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015ab0:	fa06 f003 	lslle.w	r0, r6, r3
 8015ab4:	4318      	orrgt	r0, r3
 8015ab6:	f7ea fd33 	bl	8000520 <__aeabi_ui2d>
 8015aba:	2301      	movs	r3, #1
 8015abc:	4606      	mov	r6, r0
 8015abe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8015ac4:	e76b      	b.n	801599e <_dtoa_r+0x116>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	e7b3      	b.n	8015a32 <_dtoa_r+0x1aa>
 8015aca:	900b      	str	r0, [sp, #44]	; 0x2c
 8015acc:	e7b2      	b.n	8015a34 <_dtoa_r+0x1ac>
 8015ace:	9b04      	ldr	r3, [sp, #16]
 8015ad0:	9a00      	ldr	r2, [sp, #0]
 8015ad2:	1a9b      	subs	r3, r3, r2
 8015ad4:	9304      	str	r3, [sp, #16]
 8015ad6:	4253      	negs	r3, r2
 8015ad8:	9307      	str	r3, [sp, #28]
 8015ada:	2300      	movs	r3, #0
 8015adc:	930a      	str	r3, [sp, #40]	; 0x28
 8015ade:	e7c0      	b.n	8015a62 <_dtoa_r+0x1da>
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	9308      	str	r3, [sp, #32]
 8015ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	dc56      	bgt.n	8015b98 <_dtoa_r+0x310>
 8015aea:	2301      	movs	r3, #1
 8015aec:	461a      	mov	r2, r3
 8015aee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015af2:	9209      	str	r2, [sp, #36]	; 0x24
 8015af4:	e00c      	b.n	8015b10 <_dtoa_r+0x288>
 8015af6:	2301      	movs	r3, #1
 8015af8:	e7f3      	b.n	8015ae2 <_dtoa_r+0x25a>
 8015afa:	2300      	movs	r3, #0
 8015afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015afe:	9308      	str	r3, [sp, #32]
 8015b00:	9b00      	ldr	r3, [sp, #0]
 8015b02:	4413      	add	r3, r2
 8015b04:	9302      	str	r3, [sp, #8]
 8015b06:	3301      	adds	r3, #1
 8015b08:	2b01      	cmp	r3, #1
 8015b0a:	9303      	str	r3, [sp, #12]
 8015b0c:	bfb8      	it	lt
 8015b0e:	2301      	movlt	r3, #1
 8015b10:	2200      	movs	r2, #0
 8015b12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015b14:	6042      	str	r2, [r0, #4]
 8015b16:	2204      	movs	r2, #4
 8015b18:	f102 0614 	add.w	r6, r2, #20
 8015b1c:	6841      	ldr	r1, [r0, #4]
 8015b1e:	429e      	cmp	r6, r3
 8015b20:	d93e      	bls.n	8015ba0 <_dtoa_r+0x318>
 8015b22:	4620      	mov	r0, r4
 8015b24:	f001 fa58 	bl	8016fd8 <_Balloc>
 8015b28:	9001      	str	r0, [sp, #4]
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	d13c      	bne.n	8015ba8 <_dtoa_r+0x320>
 8015b2e:	4b12      	ldr	r3, [pc, #72]	; (8015b78 <_dtoa_r+0x2f0>)
 8015b30:	4602      	mov	r2, r0
 8015b32:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015b36:	e6c1      	b.n	80158bc <_dtoa_r+0x34>
 8015b38:	2301      	movs	r3, #1
 8015b3a:	e7df      	b.n	8015afc <_dtoa_r+0x274>
 8015b3c:	f3af 8000 	nop.w
 8015b40:	636f4361 	.word	0x636f4361
 8015b44:	3fd287a7 	.word	0x3fd287a7
 8015b48:	8b60c8b3 	.word	0x8b60c8b3
 8015b4c:	3fc68a28 	.word	0x3fc68a28
 8015b50:	509f79fb 	.word	0x509f79fb
 8015b54:	3fd34413 	.word	0x3fd34413
 8015b58:	0818ad8e 	.word	0x0818ad8e
 8015b5c:	0818ada5 	.word	0x0818ada5
 8015b60:	7ff00000 	.word	0x7ff00000
 8015b64:	0818ad8a 	.word	0x0818ad8a
 8015b68:	0818ad81 	.word	0x0818ad81
 8015b6c:	0818ac05 	.word	0x0818ac05
 8015b70:	3ff80000 	.word	0x3ff80000
 8015b74:	0818af78 	.word	0x0818af78
 8015b78:	0818ae00 	.word	0x0818ae00
 8015b7c:	2501      	movs	r5, #1
 8015b7e:	2300      	movs	r3, #0
 8015b80:	9508      	str	r5, [sp, #32]
 8015b82:	9306      	str	r3, [sp, #24]
 8015b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b88:	2200      	movs	r2, #0
 8015b8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015b8e:	2312      	movs	r3, #18
 8015b90:	e7af      	b.n	8015af2 <_dtoa_r+0x26a>
 8015b92:	2301      	movs	r3, #1
 8015b94:	9308      	str	r3, [sp, #32]
 8015b96:	e7f5      	b.n	8015b84 <_dtoa_r+0x2fc>
 8015b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015b9e:	e7b7      	b.n	8015b10 <_dtoa_r+0x288>
 8015ba0:	3101      	adds	r1, #1
 8015ba2:	0052      	lsls	r2, r2, #1
 8015ba4:	6041      	str	r1, [r0, #4]
 8015ba6:	e7b7      	b.n	8015b18 <_dtoa_r+0x290>
 8015ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015baa:	9a01      	ldr	r2, [sp, #4]
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	9b03      	ldr	r3, [sp, #12]
 8015bb0:	2b0e      	cmp	r3, #14
 8015bb2:	f200 809d 	bhi.w	8015cf0 <_dtoa_r+0x468>
 8015bb6:	2d00      	cmp	r5, #0
 8015bb8:	f000 809a 	beq.w	8015cf0 <_dtoa_r+0x468>
 8015bbc:	9b00      	ldr	r3, [sp, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	dd32      	ble.n	8015c28 <_dtoa_r+0x3a0>
 8015bc2:	f003 030f 	and.w	r3, r3, #15
 8015bc6:	4ab6      	ldr	r2, [pc, #728]	; (8015ea0 <_dtoa_r+0x618>)
 8015bc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015bd0:	9b00      	ldr	r3, [sp, #0]
 8015bd2:	05d8      	lsls	r0, r3, #23
 8015bd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015bd8:	d516      	bpl.n	8015c08 <_dtoa_r+0x380>
 8015bda:	4bb2      	ldr	r3, [pc, #712]	; (8015ea4 <_dtoa_r+0x61c>)
 8015bdc:	f007 070f 	and.w	r7, r7, #15
 8015be0:	2503      	movs	r5, #3
 8015be2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015be6:	ec51 0b19 	vmov	r0, r1, d9
 8015bea:	f7ea fe3d 	bl	8000868 <__aeabi_ddiv>
 8015bee:	4682      	mov	sl, r0
 8015bf0:	468b      	mov	fp, r1
 8015bf2:	4eac      	ldr	r6, [pc, #688]	; (8015ea4 <_dtoa_r+0x61c>)
 8015bf4:	b957      	cbnz	r7, 8015c0c <_dtoa_r+0x384>
 8015bf6:	4642      	mov	r2, r8
 8015bf8:	464b      	mov	r3, r9
 8015bfa:	4650      	mov	r0, sl
 8015bfc:	4659      	mov	r1, fp
 8015bfe:	f7ea fe33 	bl	8000868 <__aeabi_ddiv>
 8015c02:	4682      	mov	sl, r0
 8015c04:	468b      	mov	fp, r1
 8015c06:	e028      	b.n	8015c5a <_dtoa_r+0x3d2>
 8015c08:	2502      	movs	r5, #2
 8015c0a:	e7f2      	b.n	8015bf2 <_dtoa_r+0x36a>
 8015c0c:	07f9      	lsls	r1, r7, #31
 8015c0e:	d508      	bpl.n	8015c22 <_dtoa_r+0x39a>
 8015c10:	4640      	mov	r0, r8
 8015c12:	4649      	mov	r1, r9
 8015c14:	3501      	adds	r5, #1
 8015c16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015c1a:	f7ea fcfb 	bl	8000614 <__aeabi_dmul>
 8015c1e:	4680      	mov	r8, r0
 8015c20:	4689      	mov	r9, r1
 8015c22:	107f      	asrs	r7, r7, #1
 8015c24:	3608      	adds	r6, #8
 8015c26:	e7e5      	b.n	8015bf4 <_dtoa_r+0x36c>
 8015c28:	f000 809b 	beq.w	8015d62 <_dtoa_r+0x4da>
 8015c2c:	9b00      	ldr	r3, [sp, #0]
 8015c2e:	2502      	movs	r5, #2
 8015c30:	4f9c      	ldr	r7, [pc, #624]	; (8015ea4 <_dtoa_r+0x61c>)
 8015c32:	425e      	negs	r6, r3
 8015c34:	4b9a      	ldr	r3, [pc, #616]	; (8015ea0 <_dtoa_r+0x618>)
 8015c36:	f006 020f 	and.w	r2, r6, #15
 8015c3a:	1136      	asrs	r6, r6, #4
 8015c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c40:	ec51 0b19 	vmov	r0, r1, d9
 8015c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c48:	f7ea fce4 	bl	8000614 <__aeabi_dmul>
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	4682      	mov	sl, r0
 8015c50:	468b      	mov	fp, r1
 8015c52:	2e00      	cmp	r6, #0
 8015c54:	d17a      	bne.n	8015d4c <_dtoa_r+0x4c4>
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d1d3      	bne.n	8015c02 <_dtoa_r+0x37a>
 8015c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	f000 8082 	beq.w	8015d66 <_dtoa_r+0x4de>
 8015c62:	2200      	movs	r2, #0
 8015c64:	4b90      	ldr	r3, [pc, #576]	; (8015ea8 <_dtoa_r+0x620>)
 8015c66:	4650      	mov	r0, sl
 8015c68:	4659      	mov	r1, fp
 8015c6a:	f7ea ff45 	bl	8000af8 <__aeabi_dcmplt>
 8015c6e:	2800      	cmp	r0, #0
 8015c70:	d079      	beq.n	8015d66 <_dtoa_r+0x4de>
 8015c72:	9b03      	ldr	r3, [sp, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d076      	beq.n	8015d66 <_dtoa_r+0x4de>
 8015c78:	9b02      	ldr	r3, [sp, #8]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	dd36      	ble.n	8015cec <_dtoa_r+0x464>
 8015c7e:	9b00      	ldr	r3, [sp, #0]
 8015c80:	4650      	mov	r0, sl
 8015c82:	4659      	mov	r1, fp
 8015c84:	2200      	movs	r2, #0
 8015c86:	1e5f      	subs	r7, r3, #1
 8015c88:	4b88      	ldr	r3, [pc, #544]	; (8015eac <_dtoa_r+0x624>)
 8015c8a:	f7ea fcc3 	bl	8000614 <__aeabi_dmul>
 8015c8e:	3501      	adds	r5, #1
 8015c90:	4682      	mov	sl, r0
 8015c92:	468b      	mov	fp, r1
 8015c94:	9e02      	ldr	r6, [sp, #8]
 8015c96:	4628      	mov	r0, r5
 8015c98:	46d0      	mov	r8, sl
 8015c9a:	f7ea fc51 	bl	8000540 <__aeabi_i2d>
 8015c9e:	4652      	mov	r2, sl
 8015ca0:	465b      	mov	r3, fp
 8015ca2:	46d9      	mov	r9, fp
 8015ca4:	f7ea fcb6 	bl	8000614 <__aeabi_dmul>
 8015ca8:	2200      	movs	r2, #0
 8015caa:	4b81      	ldr	r3, [pc, #516]	; (8015eb0 <_dtoa_r+0x628>)
 8015cac:	f7ea fafc 	bl	80002a8 <__adddf3>
 8015cb0:	4682      	mov	sl, r0
 8015cb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015cb6:	2e00      	cmp	r6, #0
 8015cb8:	d158      	bne.n	8015d6c <_dtoa_r+0x4e4>
 8015cba:	2200      	movs	r2, #0
 8015cbc:	4b7d      	ldr	r3, [pc, #500]	; (8015eb4 <_dtoa_r+0x62c>)
 8015cbe:	4640      	mov	r0, r8
 8015cc0:	4649      	mov	r1, r9
 8015cc2:	f7ea faef 	bl	80002a4 <__aeabi_dsub>
 8015cc6:	4652      	mov	r2, sl
 8015cc8:	465b      	mov	r3, fp
 8015cca:	4680      	mov	r8, r0
 8015ccc:	4689      	mov	r9, r1
 8015cce:	f7ea ff31 	bl	8000b34 <__aeabi_dcmpgt>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	f040 8293 	bne.w	80161fe <_dtoa_r+0x976>
 8015cd8:	4652      	mov	r2, sl
 8015cda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015cde:	4640      	mov	r0, r8
 8015ce0:	4649      	mov	r1, r9
 8015ce2:	f7ea ff09 	bl	8000af8 <__aeabi_dcmplt>
 8015ce6:	2800      	cmp	r0, #0
 8015ce8:	f040 8287 	bne.w	80161fa <_dtoa_r+0x972>
 8015cec:	ec5b ab19 	vmov	sl, fp, d9
 8015cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	f2c0 8148 	blt.w	8015f88 <_dtoa_r+0x700>
 8015cf8:	9a00      	ldr	r2, [sp, #0]
 8015cfa:	2a0e      	cmp	r2, #14
 8015cfc:	f300 8144 	bgt.w	8015f88 <_dtoa_r+0x700>
 8015d00:	4b67      	ldr	r3, [pc, #412]	; (8015ea0 <_dtoa_r+0x618>)
 8015d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	f280 80d5 	bge.w	8015ebc <_dtoa_r+0x634>
 8015d12:	9b03      	ldr	r3, [sp, #12]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	f300 80d1 	bgt.w	8015ebc <_dtoa_r+0x634>
 8015d1a:	f040 826d 	bne.w	80161f8 <_dtoa_r+0x970>
 8015d1e:	2200      	movs	r2, #0
 8015d20:	4b64      	ldr	r3, [pc, #400]	; (8015eb4 <_dtoa_r+0x62c>)
 8015d22:	4640      	mov	r0, r8
 8015d24:	4649      	mov	r1, r9
 8015d26:	f7ea fc75 	bl	8000614 <__aeabi_dmul>
 8015d2a:	4652      	mov	r2, sl
 8015d2c:	465b      	mov	r3, fp
 8015d2e:	f7ea fef7 	bl	8000b20 <__aeabi_dcmpge>
 8015d32:	9e03      	ldr	r6, [sp, #12]
 8015d34:	4637      	mov	r7, r6
 8015d36:	2800      	cmp	r0, #0
 8015d38:	f040 8243 	bne.w	80161c2 <_dtoa_r+0x93a>
 8015d3c:	2331      	movs	r3, #49	; 0x31
 8015d3e:	9d01      	ldr	r5, [sp, #4]
 8015d40:	f805 3b01 	strb.w	r3, [r5], #1
 8015d44:	9b00      	ldr	r3, [sp, #0]
 8015d46:	3301      	adds	r3, #1
 8015d48:	9300      	str	r3, [sp, #0]
 8015d4a:	e23e      	b.n	80161ca <_dtoa_r+0x942>
 8015d4c:	07f2      	lsls	r2, r6, #31
 8015d4e:	d505      	bpl.n	8015d5c <_dtoa_r+0x4d4>
 8015d50:	3501      	adds	r5, #1
 8015d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015d56:	f7ea fc5d 	bl	8000614 <__aeabi_dmul>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	1076      	asrs	r6, r6, #1
 8015d5e:	3708      	adds	r7, #8
 8015d60:	e777      	b.n	8015c52 <_dtoa_r+0x3ca>
 8015d62:	2502      	movs	r5, #2
 8015d64:	e779      	b.n	8015c5a <_dtoa_r+0x3d2>
 8015d66:	9f00      	ldr	r7, [sp, #0]
 8015d68:	9e03      	ldr	r6, [sp, #12]
 8015d6a:	e794      	b.n	8015c96 <_dtoa_r+0x40e>
 8015d6c:	9901      	ldr	r1, [sp, #4]
 8015d6e:	4b4c      	ldr	r3, [pc, #304]	; (8015ea0 <_dtoa_r+0x618>)
 8015d70:	4431      	add	r1, r6
 8015d72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015d76:	910d      	str	r1, [sp, #52]	; 0x34
 8015d78:	9908      	ldr	r1, [sp, #32]
 8015d7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015d7e:	2900      	cmp	r1, #0
 8015d80:	d043      	beq.n	8015e0a <_dtoa_r+0x582>
 8015d82:	2000      	movs	r0, #0
 8015d84:	494c      	ldr	r1, [pc, #304]	; (8015eb8 <_dtoa_r+0x630>)
 8015d86:	f7ea fd6f 	bl	8000868 <__aeabi_ddiv>
 8015d8a:	4652      	mov	r2, sl
 8015d8c:	465b      	mov	r3, fp
 8015d8e:	f7ea fa89 	bl	80002a4 <__aeabi_dsub>
 8015d92:	9d01      	ldr	r5, [sp, #4]
 8015d94:	4682      	mov	sl, r0
 8015d96:	468b      	mov	fp, r1
 8015d98:	4649      	mov	r1, r9
 8015d9a:	4640      	mov	r0, r8
 8015d9c:	f7ea feea 	bl	8000b74 <__aeabi_d2iz>
 8015da0:	4606      	mov	r6, r0
 8015da2:	f7ea fbcd 	bl	8000540 <__aeabi_i2d>
 8015da6:	4602      	mov	r2, r0
 8015da8:	3630      	adds	r6, #48	; 0x30
 8015daa:	460b      	mov	r3, r1
 8015dac:	4640      	mov	r0, r8
 8015dae:	4649      	mov	r1, r9
 8015db0:	f7ea fa78 	bl	80002a4 <__aeabi_dsub>
 8015db4:	4652      	mov	r2, sl
 8015db6:	465b      	mov	r3, fp
 8015db8:	f805 6b01 	strb.w	r6, [r5], #1
 8015dbc:	4680      	mov	r8, r0
 8015dbe:	4689      	mov	r9, r1
 8015dc0:	f7ea fe9a 	bl	8000af8 <__aeabi_dcmplt>
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d163      	bne.n	8015e90 <_dtoa_r+0x608>
 8015dc8:	4642      	mov	r2, r8
 8015dca:	464b      	mov	r3, r9
 8015dcc:	2000      	movs	r0, #0
 8015dce:	4936      	ldr	r1, [pc, #216]	; (8015ea8 <_dtoa_r+0x620>)
 8015dd0:	f7ea fa68 	bl	80002a4 <__aeabi_dsub>
 8015dd4:	4652      	mov	r2, sl
 8015dd6:	465b      	mov	r3, fp
 8015dd8:	f7ea fe8e 	bl	8000af8 <__aeabi_dcmplt>
 8015ddc:	2800      	cmp	r0, #0
 8015dde:	f040 80b5 	bne.w	8015f4c <_dtoa_r+0x6c4>
 8015de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015de4:	429d      	cmp	r5, r3
 8015de6:	d081      	beq.n	8015cec <_dtoa_r+0x464>
 8015de8:	2200      	movs	r2, #0
 8015dea:	4b30      	ldr	r3, [pc, #192]	; (8015eac <_dtoa_r+0x624>)
 8015dec:	4650      	mov	r0, sl
 8015dee:	4659      	mov	r1, fp
 8015df0:	f7ea fc10 	bl	8000614 <__aeabi_dmul>
 8015df4:	2200      	movs	r2, #0
 8015df6:	4682      	mov	sl, r0
 8015df8:	468b      	mov	fp, r1
 8015dfa:	4640      	mov	r0, r8
 8015dfc:	4649      	mov	r1, r9
 8015dfe:	4b2b      	ldr	r3, [pc, #172]	; (8015eac <_dtoa_r+0x624>)
 8015e00:	f7ea fc08 	bl	8000614 <__aeabi_dmul>
 8015e04:	4680      	mov	r8, r0
 8015e06:	4689      	mov	r9, r1
 8015e08:	e7c6      	b.n	8015d98 <_dtoa_r+0x510>
 8015e0a:	4650      	mov	r0, sl
 8015e0c:	4659      	mov	r1, fp
 8015e0e:	f7ea fc01 	bl	8000614 <__aeabi_dmul>
 8015e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e14:	4682      	mov	sl, r0
 8015e16:	468b      	mov	fp, r1
 8015e18:	9d01      	ldr	r5, [sp, #4]
 8015e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e1c:	4649      	mov	r1, r9
 8015e1e:	4640      	mov	r0, r8
 8015e20:	f7ea fea8 	bl	8000b74 <__aeabi_d2iz>
 8015e24:	4606      	mov	r6, r0
 8015e26:	f7ea fb8b 	bl	8000540 <__aeabi_i2d>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	4640      	mov	r0, r8
 8015e30:	4649      	mov	r1, r9
 8015e32:	3630      	adds	r6, #48	; 0x30
 8015e34:	f7ea fa36 	bl	80002a4 <__aeabi_dsub>
 8015e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e3a:	f805 6b01 	strb.w	r6, [r5], #1
 8015e3e:	4680      	mov	r8, r0
 8015e40:	429d      	cmp	r5, r3
 8015e42:	4689      	mov	r9, r1
 8015e44:	f04f 0200 	mov.w	r2, #0
 8015e48:	d124      	bne.n	8015e94 <_dtoa_r+0x60c>
 8015e4a:	4b1b      	ldr	r3, [pc, #108]	; (8015eb8 <_dtoa_r+0x630>)
 8015e4c:	4650      	mov	r0, sl
 8015e4e:	4659      	mov	r1, fp
 8015e50:	f7ea fa2a 	bl	80002a8 <__adddf3>
 8015e54:	4602      	mov	r2, r0
 8015e56:	460b      	mov	r3, r1
 8015e58:	4640      	mov	r0, r8
 8015e5a:	4649      	mov	r1, r9
 8015e5c:	f7ea fe6a 	bl	8000b34 <__aeabi_dcmpgt>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d173      	bne.n	8015f4c <_dtoa_r+0x6c4>
 8015e64:	4652      	mov	r2, sl
 8015e66:	465b      	mov	r3, fp
 8015e68:	2000      	movs	r0, #0
 8015e6a:	4913      	ldr	r1, [pc, #76]	; (8015eb8 <_dtoa_r+0x630>)
 8015e6c:	f7ea fa1a 	bl	80002a4 <__aeabi_dsub>
 8015e70:	4602      	mov	r2, r0
 8015e72:	460b      	mov	r3, r1
 8015e74:	4640      	mov	r0, r8
 8015e76:	4649      	mov	r1, r9
 8015e78:	f7ea fe3e 	bl	8000af8 <__aeabi_dcmplt>
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	f43f af35 	beq.w	8015cec <_dtoa_r+0x464>
 8015e82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015e84:	1e6b      	subs	r3, r5, #1
 8015e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015e8c:	2b30      	cmp	r3, #48	; 0x30
 8015e8e:	d0f8      	beq.n	8015e82 <_dtoa_r+0x5fa>
 8015e90:	9700      	str	r7, [sp, #0]
 8015e92:	e049      	b.n	8015f28 <_dtoa_r+0x6a0>
 8015e94:	4b05      	ldr	r3, [pc, #20]	; (8015eac <_dtoa_r+0x624>)
 8015e96:	f7ea fbbd 	bl	8000614 <__aeabi_dmul>
 8015e9a:	4680      	mov	r8, r0
 8015e9c:	4689      	mov	r9, r1
 8015e9e:	e7bd      	b.n	8015e1c <_dtoa_r+0x594>
 8015ea0:	0818af78 	.word	0x0818af78
 8015ea4:	0818af50 	.word	0x0818af50
 8015ea8:	3ff00000 	.word	0x3ff00000
 8015eac:	40240000 	.word	0x40240000
 8015eb0:	401c0000 	.word	0x401c0000
 8015eb4:	40140000 	.word	0x40140000
 8015eb8:	3fe00000 	.word	0x3fe00000
 8015ebc:	4656      	mov	r6, sl
 8015ebe:	465f      	mov	r7, fp
 8015ec0:	9d01      	ldr	r5, [sp, #4]
 8015ec2:	4642      	mov	r2, r8
 8015ec4:	464b      	mov	r3, r9
 8015ec6:	4630      	mov	r0, r6
 8015ec8:	4639      	mov	r1, r7
 8015eca:	f7ea fccd 	bl	8000868 <__aeabi_ddiv>
 8015ece:	f7ea fe51 	bl	8000b74 <__aeabi_d2iz>
 8015ed2:	4682      	mov	sl, r0
 8015ed4:	f7ea fb34 	bl	8000540 <__aeabi_i2d>
 8015ed8:	4642      	mov	r2, r8
 8015eda:	464b      	mov	r3, r9
 8015edc:	f7ea fb9a 	bl	8000614 <__aeabi_dmul>
 8015ee0:	4602      	mov	r2, r0
 8015ee2:	4630      	mov	r0, r6
 8015ee4:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015ee8:	460b      	mov	r3, r1
 8015eea:	4639      	mov	r1, r7
 8015eec:	f7ea f9da 	bl	80002a4 <__aeabi_dsub>
 8015ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8015ef4:	9e01      	ldr	r6, [sp, #4]
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	9f03      	ldr	r7, [sp, #12]
 8015efa:	460b      	mov	r3, r1
 8015efc:	1bae      	subs	r6, r5, r6
 8015efe:	42b7      	cmp	r7, r6
 8015f00:	d135      	bne.n	8015f6e <_dtoa_r+0x6e6>
 8015f02:	f7ea f9d1 	bl	80002a8 <__adddf3>
 8015f06:	4642      	mov	r2, r8
 8015f08:	464b      	mov	r3, r9
 8015f0a:	4606      	mov	r6, r0
 8015f0c:	460f      	mov	r7, r1
 8015f0e:	f7ea fe11 	bl	8000b34 <__aeabi_dcmpgt>
 8015f12:	b9d0      	cbnz	r0, 8015f4a <_dtoa_r+0x6c2>
 8015f14:	4642      	mov	r2, r8
 8015f16:	464b      	mov	r3, r9
 8015f18:	4630      	mov	r0, r6
 8015f1a:	4639      	mov	r1, r7
 8015f1c:	f7ea fde2 	bl	8000ae4 <__aeabi_dcmpeq>
 8015f20:	b110      	cbz	r0, 8015f28 <_dtoa_r+0x6a0>
 8015f22:	f01a 0f01 	tst.w	sl, #1
 8015f26:	d110      	bne.n	8015f4a <_dtoa_r+0x6c2>
 8015f28:	4620      	mov	r0, r4
 8015f2a:	ee18 1a10 	vmov	r1, s16
 8015f2e:	f001 f893 	bl	8017058 <_Bfree>
 8015f32:	2300      	movs	r3, #0
 8015f34:	9800      	ldr	r0, [sp, #0]
 8015f36:	702b      	strb	r3, [r5, #0]
 8015f38:	3001      	adds	r0, #1
 8015f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f3c:	6018      	str	r0, [r3, #0]
 8015f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	f43f acf1 	beq.w	8015928 <_dtoa_r+0xa0>
 8015f46:	601d      	str	r5, [r3, #0]
 8015f48:	e4ee      	b.n	8015928 <_dtoa_r+0xa0>
 8015f4a:	9f00      	ldr	r7, [sp, #0]
 8015f4c:	462b      	mov	r3, r5
 8015f4e:	461d      	mov	r5, r3
 8015f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f54:	2a39      	cmp	r2, #57	; 0x39
 8015f56:	d106      	bne.n	8015f66 <_dtoa_r+0x6de>
 8015f58:	9a01      	ldr	r2, [sp, #4]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d1f7      	bne.n	8015f4e <_dtoa_r+0x6c6>
 8015f5e:	2230      	movs	r2, #48	; 0x30
 8015f60:	9901      	ldr	r1, [sp, #4]
 8015f62:	3701      	adds	r7, #1
 8015f64:	700a      	strb	r2, [r1, #0]
 8015f66:	781a      	ldrb	r2, [r3, #0]
 8015f68:	3201      	adds	r2, #1
 8015f6a:	701a      	strb	r2, [r3, #0]
 8015f6c:	e790      	b.n	8015e90 <_dtoa_r+0x608>
 8015f6e:	2200      	movs	r2, #0
 8015f70:	4ba4      	ldr	r3, [pc, #656]	; (8016204 <_dtoa_r+0x97c>)
 8015f72:	f7ea fb4f 	bl	8000614 <__aeabi_dmul>
 8015f76:	2200      	movs	r2, #0
 8015f78:	2300      	movs	r3, #0
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	460f      	mov	r7, r1
 8015f7e:	f7ea fdb1 	bl	8000ae4 <__aeabi_dcmpeq>
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d09d      	beq.n	8015ec2 <_dtoa_r+0x63a>
 8015f86:	e7cf      	b.n	8015f28 <_dtoa_r+0x6a0>
 8015f88:	9a08      	ldr	r2, [sp, #32]
 8015f8a:	2a00      	cmp	r2, #0
 8015f8c:	f000 80d5 	beq.w	801613a <_dtoa_r+0x8b2>
 8015f90:	9a06      	ldr	r2, [sp, #24]
 8015f92:	2a01      	cmp	r2, #1
 8015f94:	f300 80b9 	bgt.w	801610a <_dtoa_r+0x882>
 8015f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f9a:	2a00      	cmp	r2, #0
 8015f9c:	f000 80b1 	beq.w	8016102 <_dtoa_r+0x87a>
 8015fa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015fa4:	9e07      	ldr	r6, [sp, #28]
 8015fa6:	9d04      	ldr	r5, [sp, #16]
 8015fa8:	9a04      	ldr	r2, [sp, #16]
 8015faa:	2101      	movs	r1, #1
 8015fac:	4620      	mov	r0, r4
 8015fae:	441a      	add	r2, r3
 8015fb0:	9204      	str	r2, [sp, #16]
 8015fb2:	9a05      	ldr	r2, [sp, #20]
 8015fb4:	441a      	add	r2, r3
 8015fb6:	9205      	str	r2, [sp, #20]
 8015fb8:	f001 f952 	bl	8017260 <__i2b>
 8015fbc:	4607      	mov	r7, r0
 8015fbe:	2d00      	cmp	r5, #0
 8015fc0:	dd0c      	ble.n	8015fdc <_dtoa_r+0x754>
 8015fc2:	9b05      	ldr	r3, [sp, #20]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	dd09      	ble.n	8015fdc <_dtoa_r+0x754>
 8015fc8:	42ab      	cmp	r3, r5
 8015fca:	9a04      	ldr	r2, [sp, #16]
 8015fcc:	bfa8      	it	ge
 8015fce:	462b      	movge	r3, r5
 8015fd0:	1ad2      	subs	r2, r2, r3
 8015fd2:	1aed      	subs	r5, r5, r3
 8015fd4:	9204      	str	r2, [sp, #16]
 8015fd6:	9a05      	ldr	r2, [sp, #20]
 8015fd8:	1ad3      	subs	r3, r2, r3
 8015fda:	9305      	str	r3, [sp, #20]
 8015fdc:	9b07      	ldr	r3, [sp, #28]
 8015fde:	b31b      	cbz	r3, 8016028 <_dtoa_r+0x7a0>
 8015fe0:	9b08      	ldr	r3, [sp, #32]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f000 80ad 	beq.w	8016142 <_dtoa_r+0x8ba>
 8015fe8:	2e00      	cmp	r6, #0
 8015fea:	dd13      	ble.n	8016014 <_dtoa_r+0x78c>
 8015fec:	4639      	mov	r1, r7
 8015fee:	4632      	mov	r2, r6
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	f001 f9f3 	bl	80173dc <__pow5mult>
 8015ff6:	ee18 2a10 	vmov	r2, s16
 8015ffa:	4601      	mov	r1, r0
 8015ffc:	4607      	mov	r7, r0
 8015ffe:	4620      	mov	r0, r4
 8016000:	f001 f944 	bl	801728c <__multiply>
 8016004:	4680      	mov	r8, r0
 8016006:	ee18 1a10 	vmov	r1, s16
 801600a:	4620      	mov	r0, r4
 801600c:	ee08 8a10 	vmov	s16, r8
 8016010:	f001 f822 	bl	8017058 <_Bfree>
 8016014:	9b07      	ldr	r3, [sp, #28]
 8016016:	1b9a      	subs	r2, r3, r6
 8016018:	d006      	beq.n	8016028 <_dtoa_r+0x7a0>
 801601a:	ee18 1a10 	vmov	r1, s16
 801601e:	4620      	mov	r0, r4
 8016020:	f001 f9dc 	bl	80173dc <__pow5mult>
 8016024:	ee08 0a10 	vmov	s16, r0
 8016028:	2101      	movs	r1, #1
 801602a:	4620      	mov	r0, r4
 801602c:	f001 f918 	bl	8017260 <__i2b>
 8016030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016032:	4606      	mov	r6, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	f340 8086 	ble.w	8016146 <_dtoa_r+0x8be>
 801603a:	461a      	mov	r2, r3
 801603c:	4601      	mov	r1, r0
 801603e:	4620      	mov	r0, r4
 8016040:	f001 f9cc 	bl	80173dc <__pow5mult>
 8016044:	9b06      	ldr	r3, [sp, #24]
 8016046:	4606      	mov	r6, r0
 8016048:	2b01      	cmp	r3, #1
 801604a:	dd7f      	ble.n	801614c <_dtoa_r+0x8c4>
 801604c:	f04f 0800 	mov.w	r8, #0
 8016050:	6933      	ldr	r3, [r6, #16]
 8016052:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016056:	6918      	ldr	r0, [r3, #16]
 8016058:	f001 f8b2 	bl	80171c0 <__hi0bits>
 801605c:	f1c0 0020 	rsb	r0, r0, #32
 8016060:	9b05      	ldr	r3, [sp, #20]
 8016062:	4418      	add	r0, r3
 8016064:	f010 001f 	ands.w	r0, r0, #31
 8016068:	f000 8091 	beq.w	801618e <_dtoa_r+0x906>
 801606c:	f1c0 0320 	rsb	r3, r0, #32
 8016070:	2b04      	cmp	r3, #4
 8016072:	f340 8089 	ble.w	8016188 <_dtoa_r+0x900>
 8016076:	f1c0 001c 	rsb	r0, r0, #28
 801607a:	9b04      	ldr	r3, [sp, #16]
 801607c:	4405      	add	r5, r0
 801607e:	4403      	add	r3, r0
 8016080:	9304      	str	r3, [sp, #16]
 8016082:	9b05      	ldr	r3, [sp, #20]
 8016084:	4403      	add	r3, r0
 8016086:	9305      	str	r3, [sp, #20]
 8016088:	9b04      	ldr	r3, [sp, #16]
 801608a:	2b00      	cmp	r3, #0
 801608c:	dd07      	ble.n	801609e <_dtoa_r+0x816>
 801608e:	ee18 1a10 	vmov	r1, s16
 8016092:	461a      	mov	r2, r3
 8016094:	4620      	mov	r0, r4
 8016096:	f001 f9fb 	bl	8017490 <__lshift>
 801609a:	ee08 0a10 	vmov	s16, r0
 801609e:	9b05      	ldr	r3, [sp, #20]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	dd05      	ble.n	80160b0 <_dtoa_r+0x828>
 80160a4:	4631      	mov	r1, r6
 80160a6:	461a      	mov	r2, r3
 80160a8:	4620      	mov	r0, r4
 80160aa:	f001 f9f1 	bl	8017490 <__lshift>
 80160ae:	4606      	mov	r6, r0
 80160b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d06d      	beq.n	8016192 <_dtoa_r+0x90a>
 80160b6:	4631      	mov	r1, r6
 80160b8:	ee18 0a10 	vmov	r0, s16
 80160bc:	f001 fa58 	bl	8017570 <__mcmp>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	da66      	bge.n	8016192 <_dtoa_r+0x90a>
 80160c4:	9b00      	ldr	r3, [sp, #0]
 80160c6:	ee18 1a10 	vmov	r1, s16
 80160ca:	220a      	movs	r2, #10
 80160cc:	4620      	mov	r0, r4
 80160ce:	3b01      	subs	r3, #1
 80160d0:	9300      	str	r3, [sp, #0]
 80160d2:	2300      	movs	r3, #0
 80160d4:	f000 ffe2 	bl	801709c <__multadd>
 80160d8:	9b08      	ldr	r3, [sp, #32]
 80160da:	ee08 0a10 	vmov	s16, r0
 80160de:	2b00      	cmp	r3, #0
 80160e0:	f000 81af 	beq.w	8016442 <_dtoa_r+0xbba>
 80160e4:	2300      	movs	r3, #0
 80160e6:	4639      	mov	r1, r7
 80160e8:	220a      	movs	r2, #10
 80160ea:	4620      	mov	r0, r4
 80160ec:	f000 ffd6 	bl	801709c <__multadd>
 80160f0:	9b02      	ldr	r3, [sp, #8]
 80160f2:	4607      	mov	r7, r0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f300 808d 	bgt.w	8016214 <_dtoa_r+0x98c>
 80160fa:	9b06      	ldr	r3, [sp, #24]
 80160fc:	2b02      	cmp	r3, #2
 80160fe:	dc50      	bgt.n	80161a2 <_dtoa_r+0x91a>
 8016100:	e088      	b.n	8016214 <_dtoa_r+0x98c>
 8016102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016104:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016108:	e74c      	b.n	8015fa4 <_dtoa_r+0x71c>
 801610a:	9b03      	ldr	r3, [sp, #12]
 801610c:	1e5e      	subs	r6, r3, #1
 801610e:	9b07      	ldr	r3, [sp, #28]
 8016110:	42b3      	cmp	r3, r6
 8016112:	bfb7      	itett	lt
 8016114:	9b07      	ldrlt	r3, [sp, #28]
 8016116:	1b9e      	subge	r6, r3, r6
 8016118:	9607      	strlt	r6, [sp, #28]
 801611a:	1af2      	sublt	r2, r6, r3
 801611c:	bfbf      	itttt	lt
 801611e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016120:	2600      	movlt	r6, #0
 8016122:	189b      	addlt	r3, r3, r2
 8016124:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016126:	9b03      	ldr	r3, [sp, #12]
 8016128:	2b00      	cmp	r3, #0
 801612a:	bfb7      	itett	lt
 801612c:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8016130:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016134:	1a9d      	sublt	r5, r3, r2
 8016136:	2300      	movlt	r3, #0
 8016138:	e736      	b.n	8015fa8 <_dtoa_r+0x720>
 801613a:	9e07      	ldr	r6, [sp, #28]
 801613c:	9d04      	ldr	r5, [sp, #16]
 801613e:	9f08      	ldr	r7, [sp, #32]
 8016140:	e73d      	b.n	8015fbe <_dtoa_r+0x736>
 8016142:	9a07      	ldr	r2, [sp, #28]
 8016144:	e769      	b.n	801601a <_dtoa_r+0x792>
 8016146:	9b06      	ldr	r3, [sp, #24]
 8016148:	2b01      	cmp	r3, #1
 801614a:	dc18      	bgt.n	801617e <_dtoa_r+0x8f6>
 801614c:	f1ba 0f00 	cmp.w	sl, #0
 8016150:	d115      	bne.n	801617e <_dtoa_r+0x8f6>
 8016152:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016156:	b993      	cbnz	r3, 801617e <_dtoa_r+0x8f6>
 8016158:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801615c:	0d1b      	lsrs	r3, r3, #20
 801615e:	051b      	lsls	r3, r3, #20
 8016160:	b183      	cbz	r3, 8016184 <_dtoa_r+0x8fc>
 8016162:	9b04      	ldr	r3, [sp, #16]
 8016164:	f04f 0801 	mov.w	r8, #1
 8016168:	3301      	adds	r3, #1
 801616a:	9304      	str	r3, [sp, #16]
 801616c:	9b05      	ldr	r3, [sp, #20]
 801616e:	3301      	adds	r3, #1
 8016170:	9305      	str	r3, [sp, #20]
 8016172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016174:	2b00      	cmp	r3, #0
 8016176:	f47f af6b 	bne.w	8016050 <_dtoa_r+0x7c8>
 801617a:	2001      	movs	r0, #1
 801617c:	e770      	b.n	8016060 <_dtoa_r+0x7d8>
 801617e:	f04f 0800 	mov.w	r8, #0
 8016182:	e7f6      	b.n	8016172 <_dtoa_r+0x8ea>
 8016184:	4698      	mov	r8, r3
 8016186:	e7f4      	b.n	8016172 <_dtoa_r+0x8ea>
 8016188:	f43f af7e 	beq.w	8016088 <_dtoa_r+0x800>
 801618c:	4618      	mov	r0, r3
 801618e:	301c      	adds	r0, #28
 8016190:	e773      	b.n	801607a <_dtoa_r+0x7f2>
 8016192:	9b03      	ldr	r3, [sp, #12]
 8016194:	2b00      	cmp	r3, #0
 8016196:	dc37      	bgt.n	8016208 <_dtoa_r+0x980>
 8016198:	9b06      	ldr	r3, [sp, #24]
 801619a:	2b02      	cmp	r3, #2
 801619c:	dd34      	ble.n	8016208 <_dtoa_r+0x980>
 801619e:	9b03      	ldr	r3, [sp, #12]
 80161a0:	9302      	str	r3, [sp, #8]
 80161a2:	9b02      	ldr	r3, [sp, #8]
 80161a4:	b96b      	cbnz	r3, 80161c2 <_dtoa_r+0x93a>
 80161a6:	4631      	mov	r1, r6
 80161a8:	2205      	movs	r2, #5
 80161aa:	4620      	mov	r0, r4
 80161ac:	f000 ff76 	bl	801709c <__multadd>
 80161b0:	4601      	mov	r1, r0
 80161b2:	4606      	mov	r6, r0
 80161b4:	ee18 0a10 	vmov	r0, s16
 80161b8:	f001 f9da 	bl	8017570 <__mcmp>
 80161bc:	2800      	cmp	r0, #0
 80161be:	f73f adbd 	bgt.w	8015d3c <_dtoa_r+0x4b4>
 80161c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161c4:	9d01      	ldr	r5, [sp, #4]
 80161c6:	43db      	mvns	r3, r3
 80161c8:	9300      	str	r3, [sp, #0]
 80161ca:	f04f 0800 	mov.w	r8, #0
 80161ce:	4631      	mov	r1, r6
 80161d0:	4620      	mov	r0, r4
 80161d2:	f000 ff41 	bl	8017058 <_Bfree>
 80161d6:	2f00      	cmp	r7, #0
 80161d8:	f43f aea6 	beq.w	8015f28 <_dtoa_r+0x6a0>
 80161dc:	f1b8 0f00 	cmp.w	r8, #0
 80161e0:	d005      	beq.n	80161ee <_dtoa_r+0x966>
 80161e2:	45b8      	cmp	r8, r7
 80161e4:	d003      	beq.n	80161ee <_dtoa_r+0x966>
 80161e6:	4641      	mov	r1, r8
 80161e8:	4620      	mov	r0, r4
 80161ea:	f000 ff35 	bl	8017058 <_Bfree>
 80161ee:	4639      	mov	r1, r7
 80161f0:	4620      	mov	r0, r4
 80161f2:	f000 ff31 	bl	8017058 <_Bfree>
 80161f6:	e697      	b.n	8015f28 <_dtoa_r+0x6a0>
 80161f8:	2600      	movs	r6, #0
 80161fa:	4637      	mov	r7, r6
 80161fc:	e7e1      	b.n	80161c2 <_dtoa_r+0x93a>
 80161fe:	9700      	str	r7, [sp, #0]
 8016200:	4637      	mov	r7, r6
 8016202:	e59b      	b.n	8015d3c <_dtoa_r+0x4b4>
 8016204:	40240000 	.word	0x40240000
 8016208:	9b08      	ldr	r3, [sp, #32]
 801620a:	2b00      	cmp	r3, #0
 801620c:	f000 80ca 	beq.w	80163a4 <_dtoa_r+0xb1c>
 8016210:	9b03      	ldr	r3, [sp, #12]
 8016212:	9302      	str	r3, [sp, #8]
 8016214:	2d00      	cmp	r5, #0
 8016216:	dd05      	ble.n	8016224 <_dtoa_r+0x99c>
 8016218:	4639      	mov	r1, r7
 801621a:	462a      	mov	r2, r5
 801621c:	4620      	mov	r0, r4
 801621e:	f001 f937 	bl	8017490 <__lshift>
 8016222:	4607      	mov	r7, r0
 8016224:	f1b8 0f00 	cmp.w	r8, #0
 8016228:	d05b      	beq.n	80162e2 <_dtoa_r+0xa5a>
 801622a:	6879      	ldr	r1, [r7, #4]
 801622c:	4620      	mov	r0, r4
 801622e:	f000 fed3 	bl	8016fd8 <_Balloc>
 8016232:	4605      	mov	r5, r0
 8016234:	b928      	cbnz	r0, 8016242 <_dtoa_r+0x9ba>
 8016236:	4b87      	ldr	r3, [pc, #540]	; (8016454 <_dtoa_r+0xbcc>)
 8016238:	4602      	mov	r2, r0
 801623a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801623e:	f7ff bb3d 	b.w	80158bc <_dtoa_r+0x34>
 8016242:	693a      	ldr	r2, [r7, #16]
 8016244:	f107 010c 	add.w	r1, r7, #12
 8016248:	300c      	adds	r0, #12
 801624a:	3202      	adds	r2, #2
 801624c:	0092      	lsls	r2, r2, #2
 801624e:	f7fd faa7 	bl	80137a0 <memcpy>
 8016252:	2201      	movs	r2, #1
 8016254:	4629      	mov	r1, r5
 8016256:	4620      	mov	r0, r4
 8016258:	f001 f91a 	bl	8017490 <__lshift>
 801625c:	9b01      	ldr	r3, [sp, #4]
 801625e:	46b8      	mov	r8, r7
 8016260:	4607      	mov	r7, r0
 8016262:	f103 0901 	add.w	r9, r3, #1
 8016266:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801626a:	4413      	add	r3, r2
 801626c:	9305      	str	r3, [sp, #20]
 801626e:	f00a 0301 	and.w	r3, sl, #1
 8016272:	9304      	str	r3, [sp, #16]
 8016274:	4631      	mov	r1, r6
 8016276:	ee18 0a10 	vmov	r0, s16
 801627a:	f7ff fa71 	bl	8015760 <quorem>
 801627e:	4641      	mov	r1, r8
 8016280:	9002      	str	r0, [sp, #8]
 8016282:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016286:	ee18 0a10 	vmov	r0, s16
 801628a:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801628e:	f001 f96f 	bl	8017570 <__mcmp>
 8016292:	463a      	mov	r2, r7
 8016294:	9003      	str	r0, [sp, #12]
 8016296:	4631      	mov	r1, r6
 8016298:	4620      	mov	r0, r4
 801629a:	f001 f985 	bl	80175a8 <__mdiff>
 801629e:	68c2      	ldr	r2, [r0, #12]
 80162a0:	4605      	mov	r5, r0
 80162a2:	bb02      	cbnz	r2, 80162e6 <_dtoa_r+0xa5e>
 80162a4:	4601      	mov	r1, r0
 80162a6:	ee18 0a10 	vmov	r0, s16
 80162aa:	f001 f961 	bl	8017570 <__mcmp>
 80162ae:	4602      	mov	r2, r0
 80162b0:	4629      	mov	r1, r5
 80162b2:	4620      	mov	r0, r4
 80162b4:	9207      	str	r2, [sp, #28]
 80162b6:	f000 fecf 	bl	8017058 <_Bfree>
 80162ba:	464d      	mov	r5, r9
 80162bc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80162c0:	ea43 0102 	orr.w	r1, r3, r2
 80162c4:	9b04      	ldr	r3, [sp, #16]
 80162c6:	430b      	orrs	r3, r1
 80162c8:	d10f      	bne.n	80162ea <_dtoa_r+0xa62>
 80162ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80162ce:	d02a      	beq.n	8016326 <_dtoa_r+0xa9e>
 80162d0:	9b03      	ldr	r3, [sp, #12]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	dd02      	ble.n	80162dc <_dtoa_r+0xa54>
 80162d6:	9b02      	ldr	r3, [sp, #8]
 80162d8:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80162dc:	f88b a000 	strb.w	sl, [fp]
 80162e0:	e775      	b.n	80161ce <_dtoa_r+0x946>
 80162e2:	4638      	mov	r0, r7
 80162e4:	e7ba      	b.n	801625c <_dtoa_r+0x9d4>
 80162e6:	2201      	movs	r2, #1
 80162e8:	e7e2      	b.n	80162b0 <_dtoa_r+0xa28>
 80162ea:	9b03      	ldr	r3, [sp, #12]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	db04      	blt.n	80162fa <_dtoa_r+0xa72>
 80162f0:	9906      	ldr	r1, [sp, #24]
 80162f2:	430b      	orrs	r3, r1
 80162f4:	9904      	ldr	r1, [sp, #16]
 80162f6:	430b      	orrs	r3, r1
 80162f8:	d122      	bne.n	8016340 <_dtoa_r+0xab8>
 80162fa:	2a00      	cmp	r2, #0
 80162fc:	ddee      	ble.n	80162dc <_dtoa_r+0xa54>
 80162fe:	ee18 1a10 	vmov	r1, s16
 8016302:	2201      	movs	r2, #1
 8016304:	4620      	mov	r0, r4
 8016306:	f001 f8c3 	bl	8017490 <__lshift>
 801630a:	4631      	mov	r1, r6
 801630c:	ee08 0a10 	vmov	s16, r0
 8016310:	f001 f92e 	bl	8017570 <__mcmp>
 8016314:	2800      	cmp	r0, #0
 8016316:	dc03      	bgt.n	8016320 <_dtoa_r+0xa98>
 8016318:	d1e0      	bne.n	80162dc <_dtoa_r+0xa54>
 801631a:	f01a 0f01 	tst.w	sl, #1
 801631e:	d0dd      	beq.n	80162dc <_dtoa_r+0xa54>
 8016320:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016324:	d1d7      	bne.n	80162d6 <_dtoa_r+0xa4e>
 8016326:	2339      	movs	r3, #57	; 0x39
 8016328:	f88b 3000 	strb.w	r3, [fp]
 801632c:	462b      	mov	r3, r5
 801632e:	461d      	mov	r5, r3
 8016330:	3b01      	subs	r3, #1
 8016332:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016336:	2a39      	cmp	r2, #57	; 0x39
 8016338:	d070      	beq.n	801641c <_dtoa_r+0xb94>
 801633a:	3201      	adds	r2, #1
 801633c:	701a      	strb	r2, [r3, #0]
 801633e:	e746      	b.n	80161ce <_dtoa_r+0x946>
 8016340:	2a00      	cmp	r2, #0
 8016342:	dd07      	ble.n	8016354 <_dtoa_r+0xacc>
 8016344:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016348:	d0ed      	beq.n	8016326 <_dtoa_r+0xa9e>
 801634a:	f10a 0301 	add.w	r3, sl, #1
 801634e:	f88b 3000 	strb.w	r3, [fp]
 8016352:	e73c      	b.n	80161ce <_dtoa_r+0x946>
 8016354:	9b05      	ldr	r3, [sp, #20]
 8016356:	f809 ac01 	strb.w	sl, [r9, #-1]
 801635a:	4599      	cmp	r9, r3
 801635c:	d046      	beq.n	80163ec <_dtoa_r+0xb64>
 801635e:	ee18 1a10 	vmov	r1, s16
 8016362:	2300      	movs	r3, #0
 8016364:	220a      	movs	r2, #10
 8016366:	4620      	mov	r0, r4
 8016368:	f000 fe98 	bl	801709c <__multadd>
 801636c:	45b8      	cmp	r8, r7
 801636e:	ee08 0a10 	vmov	s16, r0
 8016372:	f04f 0300 	mov.w	r3, #0
 8016376:	f04f 020a 	mov.w	r2, #10
 801637a:	4641      	mov	r1, r8
 801637c:	4620      	mov	r0, r4
 801637e:	d106      	bne.n	801638e <_dtoa_r+0xb06>
 8016380:	f000 fe8c 	bl	801709c <__multadd>
 8016384:	4680      	mov	r8, r0
 8016386:	4607      	mov	r7, r0
 8016388:	f109 0901 	add.w	r9, r9, #1
 801638c:	e772      	b.n	8016274 <_dtoa_r+0x9ec>
 801638e:	f000 fe85 	bl	801709c <__multadd>
 8016392:	4639      	mov	r1, r7
 8016394:	4680      	mov	r8, r0
 8016396:	2300      	movs	r3, #0
 8016398:	220a      	movs	r2, #10
 801639a:	4620      	mov	r0, r4
 801639c:	f000 fe7e 	bl	801709c <__multadd>
 80163a0:	4607      	mov	r7, r0
 80163a2:	e7f1      	b.n	8016388 <_dtoa_r+0xb00>
 80163a4:	9b03      	ldr	r3, [sp, #12]
 80163a6:	9302      	str	r3, [sp, #8]
 80163a8:	9d01      	ldr	r5, [sp, #4]
 80163aa:	4631      	mov	r1, r6
 80163ac:	ee18 0a10 	vmov	r0, s16
 80163b0:	f7ff f9d6 	bl	8015760 <quorem>
 80163b4:	9b01      	ldr	r3, [sp, #4]
 80163b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80163ba:	f805 ab01 	strb.w	sl, [r5], #1
 80163be:	1aea      	subs	r2, r5, r3
 80163c0:	9b02      	ldr	r3, [sp, #8]
 80163c2:	4293      	cmp	r3, r2
 80163c4:	dd09      	ble.n	80163da <_dtoa_r+0xb52>
 80163c6:	ee18 1a10 	vmov	r1, s16
 80163ca:	2300      	movs	r3, #0
 80163cc:	220a      	movs	r2, #10
 80163ce:	4620      	mov	r0, r4
 80163d0:	f000 fe64 	bl	801709c <__multadd>
 80163d4:	ee08 0a10 	vmov	s16, r0
 80163d8:	e7e7      	b.n	80163aa <_dtoa_r+0xb22>
 80163da:	9b02      	ldr	r3, [sp, #8]
 80163dc:	f04f 0800 	mov.w	r8, #0
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	bfcc      	ite	gt
 80163e4:	461d      	movgt	r5, r3
 80163e6:	2501      	movle	r5, #1
 80163e8:	9b01      	ldr	r3, [sp, #4]
 80163ea:	441d      	add	r5, r3
 80163ec:	ee18 1a10 	vmov	r1, s16
 80163f0:	2201      	movs	r2, #1
 80163f2:	4620      	mov	r0, r4
 80163f4:	f001 f84c 	bl	8017490 <__lshift>
 80163f8:	4631      	mov	r1, r6
 80163fa:	ee08 0a10 	vmov	s16, r0
 80163fe:	f001 f8b7 	bl	8017570 <__mcmp>
 8016402:	2800      	cmp	r0, #0
 8016404:	dc92      	bgt.n	801632c <_dtoa_r+0xaa4>
 8016406:	d102      	bne.n	801640e <_dtoa_r+0xb86>
 8016408:	f01a 0f01 	tst.w	sl, #1
 801640c:	d18e      	bne.n	801632c <_dtoa_r+0xaa4>
 801640e:	462b      	mov	r3, r5
 8016410:	461d      	mov	r5, r3
 8016412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016416:	2a30      	cmp	r2, #48	; 0x30
 8016418:	d0fa      	beq.n	8016410 <_dtoa_r+0xb88>
 801641a:	e6d8      	b.n	80161ce <_dtoa_r+0x946>
 801641c:	9a01      	ldr	r2, [sp, #4]
 801641e:	429a      	cmp	r2, r3
 8016420:	d185      	bne.n	801632e <_dtoa_r+0xaa6>
 8016422:	9b00      	ldr	r3, [sp, #0]
 8016424:	3301      	adds	r3, #1
 8016426:	9300      	str	r3, [sp, #0]
 8016428:	2331      	movs	r3, #49	; 0x31
 801642a:	7013      	strb	r3, [r2, #0]
 801642c:	e6cf      	b.n	80161ce <_dtoa_r+0x946>
 801642e:	4b0a      	ldr	r3, [pc, #40]	; (8016458 <_dtoa_r+0xbd0>)
 8016430:	f7ff ba98 	b.w	8015964 <_dtoa_r+0xdc>
 8016434:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016436:	2b00      	cmp	r3, #0
 8016438:	f47f aa71 	bne.w	801591e <_dtoa_r+0x96>
 801643c:	4b07      	ldr	r3, [pc, #28]	; (801645c <_dtoa_r+0xbd4>)
 801643e:	f7ff ba91 	b.w	8015964 <_dtoa_r+0xdc>
 8016442:	9b02      	ldr	r3, [sp, #8]
 8016444:	2b00      	cmp	r3, #0
 8016446:	dcaf      	bgt.n	80163a8 <_dtoa_r+0xb20>
 8016448:	9b06      	ldr	r3, [sp, #24]
 801644a:	2b02      	cmp	r3, #2
 801644c:	f73f aea9 	bgt.w	80161a2 <_dtoa_r+0x91a>
 8016450:	e7aa      	b.n	80163a8 <_dtoa_r+0xb20>
 8016452:	bf00      	nop
 8016454:	0818ae00 	.word	0x0818ae00
 8016458:	0818ac04 	.word	0x0818ac04
 801645c:	0818ad81 	.word	0x0818ad81

08016460 <__sflush_r>:
 8016460:	898a      	ldrh	r2, [r1, #12]
 8016462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016466:	4605      	mov	r5, r0
 8016468:	0710      	lsls	r0, r2, #28
 801646a:	460c      	mov	r4, r1
 801646c:	d458      	bmi.n	8016520 <__sflush_r+0xc0>
 801646e:	684b      	ldr	r3, [r1, #4]
 8016470:	2b00      	cmp	r3, #0
 8016472:	dc05      	bgt.n	8016480 <__sflush_r+0x20>
 8016474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016476:	2b00      	cmp	r3, #0
 8016478:	dc02      	bgt.n	8016480 <__sflush_r+0x20>
 801647a:	2000      	movs	r0, #0
 801647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016482:	2e00      	cmp	r6, #0
 8016484:	d0f9      	beq.n	801647a <__sflush_r+0x1a>
 8016486:	2300      	movs	r3, #0
 8016488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801648c:	682f      	ldr	r7, [r5, #0]
 801648e:	602b      	str	r3, [r5, #0]
 8016490:	d032      	beq.n	80164f8 <__sflush_r+0x98>
 8016492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016494:	89a3      	ldrh	r3, [r4, #12]
 8016496:	075a      	lsls	r2, r3, #29
 8016498:	d505      	bpl.n	80164a6 <__sflush_r+0x46>
 801649a:	6863      	ldr	r3, [r4, #4]
 801649c:	1ac0      	subs	r0, r0, r3
 801649e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80164a0:	b10b      	cbz	r3, 80164a6 <__sflush_r+0x46>
 80164a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80164a4:	1ac0      	subs	r0, r0, r3
 80164a6:	2300      	movs	r3, #0
 80164a8:	4602      	mov	r2, r0
 80164aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80164ac:	4628      	mov	r0, r5
 80164ae:	6a21      	ldr	r1, [r4, #32]
 80164b0:	47b0      	blx	r6
 80164b2:	1c43      	adds	r3, r0, #1
 80164b4:	89a3      	ldrh	r3, [r4, #12]
 80164b6:	d106      	bne.n	80164c6 <__sflush_r+0x66>
 80164b8:	6829      	ldr	r1, [r5, #0]
 80164ba:	291d      	cmp	r1, #29
 80164bc:	d82c      	bhi.n	8016518 <__sflush_r+0xb8>
 80164be:	4a29      	ldr	r2, [pc, #164]	; (8016564 <__sflush_r+0x104>)
 80164c0:	40ca      	lsrs	r2, r1
 80164c2:	07d6      	lsls	r6, r2, #31
 80164c4:	d528      	bpl.n	8016518 <__sflush_r+0xb8>
 80164c6:	2200      	movs	r2, #0
 80164c8:	04d9      	lsls	r1, r3, #19
 80164ca:	6062      	str	r2, [r4, #4]
 80164cc:	6922      	ldr	r2, [r4, #16]
 80164ce:	6022      	str	r2, [r4, #0]
 80164d0:	d504      	bpl.n	80164dc <__sflush_r+0x7c>
 80164d2:	1c42      	adds	r2, r0, #1
 80164d4:	d101      	bne.n	80164da <__sflush_r+0x7a>
 80164d6:	682b      	ldr	r3, [r5, #0]
 80164d8:	b903      	cbnz	r3, 80164dc <__sflush_r+0x7c>
 80164da:	6560      	str	r0, [r4, #84]	; 0x54
 80164dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164de:	602f      	str	r7, [r5, #0]
 80164e0:	2900      	cmp	r1, #0
 80164e2:	d0ca      	beq.n	801647a <__sflush_r+0x1a>
 80164e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164e8:	4299      	cmp	r1, r3
 80164ea:	d002      	beq.n	80164f2 <__sflush_r+0x92>
 80164ec:	4628      	mov	r0, r5
 80164ee:	f7fd f96d 	bl	80137cc <_free_r>
 80164f2:	2000      	movs	r0, #0
 80164f4:	6360      	str	r0, [r4, #52]	; 0x34
 80164f6:	e7c1      	b.n	801647c <__sflush_r+0x1c>
 80164f8:	6a21      	ldr	r1, [r4, #32]
 80164fa:	2301      	movs	r3, #1
 80164fc:	4628      	mov	r0, r5
 80164fe:	47b0      	blx	r6
 8016500:	1c41      	adds	r1, r0, #1
 8016502:	d1c7      	bne.n	8016494 <__sflush_r+0x34>
 8016504:	682b      	ldr	r3, [r5, #0]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d0c4      	beq.n	8016494 <__sflush_r+0x34>
 801650a:	2b1d      	cmp	r3, #29
 801650c:	d001      	beq.n	8016512 <__sflush_r+0xb2>
 801650e:	2b16      	cmp	r3, #22
 8016510:	d101      	bne.n	8016516 <__sflush_r+0xb6>
 8016512:	602f      	str	r7, [r5, #0]
 8016514:	e7b1      	b.n	801647a <__sflush_r+0x1a>
 8016516:	89a3      	ldrh	r3, [r4, #12]
 8016518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801651c:	81a3      	strh	r3, [r4, #12]
 801651e:	e7ad      	b.n	801647c <__sflush_r+0x1c>
 8016520:	690f      	ldr	r7, [r1, #16]
 8016522:	2f00      	cmp	r7, #0
 8016524:	d0a9      	beq.n	801647a <__sflush_r+0x1a>
 8016526:	0793      	lsls	r3, r2, #30
 8016528:	680e      	ldr	r6, [r1, #0]
 801652a:	600f      	str	r7, [r1, #0]
 801652c:	bf0c      	ite	eq
 801652e:	694b      	ldreq	r3, [r1, #20]
 8016530:	2300      	movne	r3, #0
 8016532:	eba6 0807 	sub.w	r8, r6, r7
 8016536:	608b      	str	r3, [r1, #8]
 8016538:	f1b8 0f00 	cmp.w	r8, #0
 801653c:	dd9d      	ble.n	801647a <__sflush_r+0x1a>
 801653e:	4643      	mov	r3, r8
 8016540:	463a      	mov	r2, r7
 8016542:	6a21      	ldr	r1, [r4, #32]
 8016544:	4628      	mov	r0, r5
 8016546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016548:	47b0      	blx	r6
 801654a:	2800      	cmp	r0, #0
 801654c:	dc06      	bgt.n	801655c <__sflush_r+0xfc>
 801654e:	89a3      	ldrh	r3, [r4, #12]
 8016550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016558:	81a3      	strh	r3, [r4, #12]
 801655a:	e78f      	b.n	801647c <__sflush_r+0x1c>
 801655c:	4407      	add	r7, r0
 801655e:	eba8 0800 	sub.w	r8, r8, r0
 8016562:	e7e9      	b.n	8016538 <__sflush_r+0xd8>
 8016564:	20400001 	.word	0x20400001

08016568 <_fflush_r>:
 8016568:	b538      	push	{r3, r4, r5, lr}
 801656a:	690b      	ldr	r3, [r1, #16]
 801656c:	4605      	mov	r5, r0
 801656e:	460c      	mov	r4, r1
 8016570:	b913      	cbnz	r3, 8016578 <_fflush_r+0x10>
 8016572:	2500      	movs	r5, #0
 8016574:	4628      	mov	r0, r5
 8016576:	bd38      	pop	{r3, r4, r5, pc}
 8016578:	b118      	cbz	r0, 8016582 <_fflush_r+0x1a>
 801657a:	6983      	ldr	r3, [r0, #24]
 801657c:	b90b      	cbnz	r3, 8016582 <_fflush_r+0x1a>
 801657e:	f000 f887 	bl	8016690 <__sinit>
 8016582:	4b14      	ldr	r3, [pc, #80]	; (80165d4 <_fflush_r+0x6c>)
 8016584:	429c      	cmp	r4, r3
 8016586:	d11b      	bne.n	80165c0 <_fflush_r+0x58>
 8016588:	686c      	ldr	r4, [r5, #4]
 801658a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d0ef      	beq.n	8016572 <_fflush_r+0xa>
 8016592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016594:	07d0      	lsls	r0, r2, #31
 8016596:	d404      	bmi.n	80165a2 <_fflush_r+0x3a>
 8016598:	0599      	lsls	r1, r3, #22
 801659a:	d402      	bmi.n	80165a2 <_fflush_r+0x3a>
 801659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801659e:	f000 fc88 	bl	8016eb2 <__retarget_lock_acquire_recursive>
 80165a2:	4628      	mov	r0, r5
 80165a4:	4621      	mov	r1, r4
 80165a6:	f7ff ff5b 	bl	8016460 <__sflush_r>
 80165aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165ac:	4605      	mov	r5, r0
 80165ae:	07da      	lsls	r2, r3, #31
 80165b0:	d4e0      	bmi.n	8016574 <_fflush_r+0xc>
 80165b2:	89a3      	ldrh	r3, [r4, #12]
 80165b4:	059b      	lsls	r3, r3, #22
 80165b6:	d4dd      	bmi.n	8016574 <_fflush_r+0xc>
 80165b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165ba:	f000 fc7b 	bl	8016eb4 <__retarget_lock_release_recursive>
 80165be:	e7d9      	b.n	8016574 <_fflush_r+0xc>
 80165c0:	4b05      	ldr	r3, [pc, #20]	; (80165d8 <_fflush_r+0x70>)
 80165c2:	429c      	cmp	r4, r3
 80165c4:	d101      	bne.n	80165ca <_fflush_r+0x62>
 80165c6:	68ac      	ldr	r4, [r5, #8]
 80165c8:	e7df      	b.n	801658a <_fflush_r+0x22>
 80165ca:	4b04      	ldr	r3, [pc, #16]	; (80165dc <_fflush_r+0x74>)
 80165cc:	429c      	cmp	r4, r3
 80165ce:	bf08      	it	eq
 80165d0:	68ec      	ldreq	r4, [r5, #12]
 80165d2:	e7da      	b.n	801658a <_fflush_r+0x22>
 80165d4:	0818ae34 	.word	0x0818ae34
 80165d8:	0818ae54 	.word	0x0818ae54
 80165dc:	0818ae14 	.word	0x0818ae14

080165e0 <std>:
 80165e0:	2300      	movs	r3, #0
 80165e2:	b510      	push	{r4, lr}
 80165e4:	4604      	mov	r4, r0
 80165e6:	6083      	str	r3, [r0, #8]
 80165e8:	8181      	strh	r1, [r0, #12]
 80165ea:	4619      	mov	r1, r3
 80165ec:	6643      	str	r3, [r0, #100]	; 0x64
 80165ee:	81c2      	strh	r2, [r0, #14]
 80165f0:	2208      	movs	r2, #8
 80165f2:	6183      	str	r3, [r0, #24]
 80165f4:	e9c0 3300 	strd	r3, r3, [r0]
 80165f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165fc:	305c      	adds	r0, #92	; 0x5c
 80165fe:	f7fd f8dc 	bl	80137ba <memset>
 8016602:	4b05      	ldr	r3, [pc, #20]	; (8016618 <std+0x38>)
 8016604:	6224      	str	r4, [r4, #32]
 8016606:	6263      	str	r3, [r4, #36]	; 0x24
 8016608:	4b04      	ldr	r3, [pc, #16]	; (801661c <std+0x3c>)
 801660a:	62a3      	str	r3, [r4, #40]	; 0x28
 801660c:	4b04      	ldr	r3, [pc, #16]	; (8016620 <std+0x40>)
 801660e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016610:	4b04      	ldr	r3, [pc, #16]	; (8016624 <std+0x44>)
 8016612:	6323      	str	r3, [r4, #48]	; 0x30
 8016614:	bd10      	pop	{r4, pc}
 8016616:	bf00      	nop
 8016618:	08017f09 	.word	0x08017f09
 801661c:	08017f2b 	.word	0x08017f2b
 8016620:	08017f63 	.word	0x08017f63
 8016624:	08017f87 	.word	0x08017f87

08016628 <_cleanup_r>:
 8016628:	4901      	ldr	r1, [pc, #4]	; (8016630 <_cleanup_r+0x8>)
 801662a:	f000 b8af 	b.w	801678c <_fwalk_reent>
 801662e:	bf00      	nop
 8016630:	08016569 	.word	0x08016569

08016634 <__sfmoreglue>:
 8016634:	b570      	push	{r4, r5, r6, lr}
 8016636:	2268      	movs	r2, #104	; 0x68
 8016638:	1e4d      	subs	r5, r1, #1
 801663a:	460e      	mov	r6, r1
 801663c:	4355      	muls	r5, r2
 801663e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016642:	f7fd f92f 	bl	80138a4 <_malloc_r>
 8016646:	4604      	mov	r4, r0
 8016648:	b140      	cbz	r0, 801665c <__sfmoreglue+0x28>
 801664a:	2100      	movs	r1, #0
 801664c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016650:	e9c0 1600 	strd	r1, r6, [r0]
 8016654:	300c      	adds	r0, #12
 8016656:	60a0      	str	r0, [r4, #8]
 8016658:	f7fd f8af 	bl	80137ba <memset>
 801665c:	4620      	mov	r0, r4
 801665e:	bd70      	pop	{r4, r5, r6, pc}

08016660 <__sfp_lock_acquire>:
 8016660:	4801      	ldr	r0, [pc, #4]	; (8016668 <__sfp_lock_acquire+0x8>)
 8016662:	f000 bc26 	b.w	8016eb2 <__retarget_lock_acquire_recursive>
 8016666:	bf00      	nop
 8016668:	200032bd 	.word	0x200032bd

0801666c <__sfp_lock_release>:
 801666c:	4801      	ldr	r0, [pc, #4]	; (8016674 <__sfp_lock_release+0x8>)
 801666e:	f000 bc21 	b.w	8016eb4 <__retarget_lock_release_recursive>
 8016672:	bf00      	nop
 8016674:	200032bd 	.word	0x200032bd

08016678 <__sinit_lock_acquire>:
 8016678:	4801      	ldr	r0, [pc, #4]	; (8016680 <__sinit_lock_acquire+0x8>)
 801667a:	f000 bc1a 	b.w	8016eb2 <__retarget_lock_acquire_recursive>
 801667e:	bf00      	nop
 8016680:	200032be 	.word	0x200032be

08016684 <__sinit_lock_release>:
 8016684:	4801      	ldr	r0, [pc, #4]	; (801668c <__sinit_lock_release+0x8>)
 8016686:	f000 bc15 	b.w	8016eb4 <__retarget_lock_release_recursive>
 801668a:	bf00      	nop
 801668c:	200032be 	.word	0x200032be

08016690 <__sinit>:
 8016690:	b510      	push	{r4, lr}
 8016692:	4604      	mov	r4, r0
 8016694:	f7ff fff0 	bl	8016678 <__sinit_lock_acquire>
 8016698:	69a3      	ldr	r3, [r4, #24]
 801669a:	b11b      	cbz	r3, 80166a4 <__sinit+0x14>
 801669c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166a0:	f7ff bff0 	b.w	8016684 <__sinit_lock_release>
 80166a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80166a8:	6523      	str	r3, [r4, #80]	; 0x50
 80166aa:	4620      	mov	r0, r4
 80166ac:	4b12      	ldr	r3, [pc, #72]	; (80166f8 <__sinit+0x68>)
 80166ae:	4a13      	ldr	r2, [pc, #76]	; (80166fc <__sinit+0x6c>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	62a2      	str	r2, [r4, #40]	; 0x28
 80166b4:	42a3      	cmp	r3, r4
 80166b6:	bf04      	itt	eq
 80166b8:	2301      	moveq	r3, #1
 80166ba:	61a3      	streq	r3, [r4, #24]
 80166bc:	f000 f820 	bl	8016700 <__sfp>
 80166c0:	6060      	str	r0, [r4, #4]
 80166c2:	4620      	mov	r0, r4
 80166c4:	f000 f81c 	bl	8016700 <__sfp>
 80166c8:	60a0      	str	r0, [r4, #8]
 80166ca:	4620      	mov	r0, r4
 80166cc:	f000 f818 	bl	8016700 <__sfp>
 80166d0:	2200      	movs	r2, #0
 80166d2:	2104      	movs	r1, #4
 80166d4:	60e0      	str	r0, [r4, #12]
 80166d6:	6860      	ldr	r0, [r4, #4]
 80166d8:	f7ff ff82 	bl	80165e0 <std>
 80166dc:	2201      	movs	r2, #1
 80166de:	2109      	movs	r1, #9
 80166e0:	68a0      	ldr	r0, [r4, #8]
 80166e2:	f7ff ff7d 	bl	80165e0 <std>
 80166e6:	2202      	movs	r2, #2
 80166e8:	2112      	movs	r1, #18
 80166ea:	68e0      	ldr	r0, [r4, #12]
 80166ec:	f7ff ff78 	bl	80165e0 <std>
 80166f0:	2301      	movs	r3, #1
 80166f2:	61a3      	str	r3, [r4, #24]
 80166f4:	e7d2      	b.n	801669c <__sinit+0xc>
 80166f6:	bf00      	nop
 80166f8:	0818abf0 	.word	0x0818abf0
 80166fc:	08016629 	.word	0x08016629

08016700 <__sfp>:
 8016700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016702:	4607      	mov	r7, r0
 8016704:	f7ff ffac 	bl	8016660 <__sfp_lock_acquire>
 8016708:	4b1e      	ldr	r3, [pc, #120]	; (8016784 <__sfp+0x84>)
 801670a:	681e      	ldr	r6, [r3, #0]
 801670c:	69b3      	ldr	r3, [r6, #24]
 801670e:	b913      	cbnz	r3, 8016716 <__sfp+0x16>
 8016710:	4630      	mov	r0, r6
 8016712:	f7ff ffbd 	bl	8016690 <__sinit>
 8016716:	3648      	adds	r6, #72	; 0x48
 8016718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801671c:	3b01      	subs	r3, #1
 801671e:	d503      	bpl.n	8016728 <__sfp+0x28>
 8016720:	6833      	ldr	r3, [r6, #0]
 8016722:	b30b      	cbz	r3, 8016768 <__sfp+0x68>
 8016724:	6836      	ldr	r6, [r6, #0]
 8016726:	e7f7      	b.n	8016718 <__sfp+0x18>
 8016728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801672c:	b9d5      	cbnz	r5, 8016764 <__sfp+0x64>
 801672e:	4b16      	ldr	r3, [pc, #88]	; (8016788 <__sfp+0x88>)
 8016730:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016734:	6665      	str	r5, [r4, #100]	; 0x64
 8016736:	60e3      	str	r3, [r4, #12]
 8016738:	f000 fbba 	bl	8016eb0 <__retarget_lock_init_recursive>
 801673c:	f7ff ff96 	bl	801666c <__sfp_lock_release>
 8016740:	2208      	movs	r2, #8
 8016742:	4629      	mov	r1, r5
 8016744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016748:	6025      	str	r5, [r4, #0]
 801674a:	61a5      	str	r5, [r4, #24]
 801674c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016754:	f7fd f831 	bl	80137ba <memset>
 8016758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801675c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016760:	4620      	mov	r0, r4
 8016762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016764:	3468      	adds	r4, #104	; 0x68
 8016766:	e7d9      	b.n	801671c <__sfp+0x1c>
 8016768:	2104      	movs	r1, #4
 801676a:	4638      	mov	r0, r7
 801676c:	f7ff ff62 	bl	8016634 <__sfmoreglue>
 8016770:	4604      	mov	r4, r0
 8016772:	6030      	str	r0, [r6, #0]
 8016774:	2800      	cmp	r0, #0
 8016776:	d1d5      	bne.n	8016724 <__sfp+0x24>
 8016778:	f7ff ff78 	bl	801666c <__sfp_lock_release>
 801677c:	230c      	movs	r3, #12
 801677e:	603b      	str	r3, [r7, #0]
 8016780:	e7ee      	b.n	8016760 <__sfp+0x60>
 8016782:	bf00      	nop
 8016784:	0818abf0 	.word	0x0818abf0
 8016788:	ffff0001 	.word	0xffff0001

0801678c <_fwalk_reent>:
 801678c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016790:	4606      	mov	r6, r0
 8016792:	4688      	mov	r8, r1
 8016794:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016798:	2700      	movs	r7, #0
 801679a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801679e:	f1b9 0901 	subs.w	r9, r9, #1
 80167a2:	d505      	bpl.n	80167b0 <_fwalk_reent+0x24>
 80167a4:	6824      	ldr	r4, [r4, #0]
 80167a6:	2c00      	cmp	r4, #0
 80167a8:	d1f7      	bne.n	801679a <_fwalk_reent+0xe>
 80167aa:	4638      	mov	r0, r7
 80167ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167b0:	89ab      	ldrh	r3, [r5, #12]
 80167b2:	2b01      	cmp	r3, #1
 80167b4:	d907      	bls.n	80167c6 <_fwalk_reent+0x3a>
 80167b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167ba:	3301      	adds	r3, #1
 80167bc:	d003      	beq.n	80167c6 <_fwalk_reent+0x3a>
 80167be:	4629      	mov	r1, r5
 80167c0:	4630      	mov	r0, r6
 80167c2:	47c0      	blx	r8
 80167c4:	4307      	orrs	r7, r0
 80167c6:	3568      	adds	r5, #104	; 0x68
 80167c8:	e7e9      	b.n	801679e <_fwalk_reent+0x12>

080167ca <rshift>:
 80167ca:	6903      	ldr	r3, [r0, #16]
 80167cc:	114a      	asrs	r2, r1, #5
 80167ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80167d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167d6:	f100 0414 	add.w	r4, r0, #20
 80167da:	dd45      	ble.n	8016868 <rshift+0x9e>
 80167dc:	f011 011f 	ands.w	r1, r1, #31
 80167e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80167e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80167e8:	d10c      	bne.n	8016804 <rshift+0x3a>
 80167ea:	f100 0710 	add.w	r7, r0, #16
 80167ee:	4629      	mov	r1, r5
 80167f0:	42b1      	cmp	r1, r6
 80167f2:	d334      	bcc.n	801685e <rshift+0x94>
 80167f4:	1a9b      	subs	r3, r3, r2
 80167f6:	1eea      	subs	r2, r5, #3
 80167f8:	009b      	lsls	r3, r3, #2
 80167fa:	4296      	cmp	r6, r2
 80167fc:	bf38      	it	cc
 80167fe:	2300      	movcc	r3, #0
 8016800:	4423      	add	r3, r4
 8016802:	e015      	b.n	8016830 <rshift+0x66>
 8016804:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016808:	f1c1 0820 	rsb	r8, r1, #32
 801680c:	f105 0e04 	add.w	lr, r5, #4
 8016810:	46a1      	mov	r9, r4
 8016812:	40cf      	lsrs	r7, r1
 8016814:	4576      	cmp	r6, lr
 8016816:	46f4      	mov	ip, lr
 8016818:	d815      	bhi.n	8016846 <rshift+0x7c>
 801681a:	1a9a      	subs	r2, r3, r2
 801681c:	3501      	adds	r5, #1
 801681e:	0092      	lsls	r2, r2, #2
 8016820:	3a04      	subs	r2, #4
 8016822:	42ae      	cmp	r6, r5
 8016824:	bf38      	it	cc
 8016826:	2200      	movcc	r2, #0
 8016828:	18a3      	adds	r3, r4, r2
 801682a:	50a7      	str	r7, [r4, r2]
 801682c:	b107      	cbz	r7, 8016830 <rshift+0x66>
 801682e:	3304      	adds	r3, #4
 8016830:	1b1a      	subs	r2, r3, r4
 8016832:	42a3      	cmp	r3, r4
 8016834:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016838:	bf08      	it	eq
 801683a:	2300      	moveq	r3, #0
 801683c:	6102      	str	r2, [r0, #16]
 801683e:	bf08      	it	eq
 8016840:	6143      	streq	r3, [r0, #20]
 8016842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016846:	f8dc c000 	ldr.w	ip, [ip]
 801684a:	fa0c fc08 	lsl.w	ip, ip, r8
 801684e:	ea4c 0707 	orr.w	r7, ip, r7
 8016852:	f849 7b04 	str.w	r7, [r9], #4
 8016856:	f85e 7b04 	ldr.w	r7, [lr], #4
 801685a:	40cf      	lsrs	r7, r1
 801685c:	e7da      	b.n	8016814 <rshift+0x4a>
 801685e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016862:	f847 cf04 	str.w	ip, [r7, #4]!
 8016866:	e7c3      	b.n	80167f0 <rshift+0x26>
 8016868:	4623      	mov	r3, r4
 801686a:	e7e1      	b.n	8016830 <rshift+0x66>

0801686c <__hexdig_fun>:
 801686c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016870:	2b09      	cmp	r3, #9
 8016872:	d802      	bhi.n	801687a <__hexdig_fun+0xe>
 8016874:	3820      	subs	r0, #32
 8016876:	b2c0      	uxtb	r0, r0
 8016878:	4770      	bx	lr
 801687a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801687e:	2b05      	cmp	r3, #5
 8016880:	d801      	bhi.n	8016886 <__hexdig_fun+0x1a>
 8016882:	3847      	subs	r0, #71	; 0x47
 8016884:	e7f7      	b.n	8016876 <__hexdig_fun+0xa>
 8016886:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801688a:	2b05      	cmp	r3, #5
 801688c:	d801      	bhi.n	8016892 <__hexdig_fun+0x26>
 801688e:	3827      	subs	r0, #39	; 0x27
 8016890:	e7f1      	b.n	8016876 <__hexdig_fun+0xa>
 8016892:	2000      	movs	r0, #0
 8016894:	4770      	bx	lr
	...

08016898 <__gethex>:
 8016898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801689c:	ed2d 8b02 	vpush	{d8}
 80168a0:	b089      	sub	sp, #36	; 0x24
 80168a2:	ee08 0a10 	vmov	s16, r0
 80168a6:	468b      	mov	fp, r1
 80168a8:	4690      	mov	r8, r2
 80168aa:	9304      	str	r3, [sp, #16]
 80168ac:	4bb2      	ldr	r3, [pc, #712]	; (8016b78 <__gethex+0x2e0>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	4618      	mov	r0, r3
 80168b2:	9301      	str	r3, [sp, #4]
 80168b4:	f7e9 fcea 	bl	800028c <strlen>
 80168b8:	9b01      	ldr	r3, [sp, #4]
 80168ba:	f8db 2000 	ldr.w	r2, [fp]
 80168be:	4682      	mov	sl, r0
 80168c0:	4403      	add	r3, r0
 80168c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80168c6:	9305      	str	r3, [sp, #20]
 80168c8:	1c93      	adds	r3, r2, #2
 80168ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80168ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80168d2:	32fe      	adds	r2, #254	; 0xfe
 80168d4:	18d1      	adds	r1, r2, r3
 80168d6:	461f      	mov	r7, r3
 80168d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80168dc:	9100      	str	r1, [sp, #0]
 80168de:	2830      	cmp	r0, #48	; 0x30
 80168e0:	d0f8      	beq.n	80168d4 <__gethex+0x3c>
 80168e2:	f7ff ffc3 	bl	801686c <__hexdig_fun>
 80168e6:	4604      	mov	r4, r0
 80168e8:	2800      	cmp	r0, #0
 80168ea:	d139      	bne.n	8016960 <__gethex+0xc8>
 80168ec:	4652      	mov	r2, sl
 80168ee:	9901      	ldr	r1, [sp, #4]
 80168f0:	4638      	mov	r0, r7
 80168f2:	f7fd ffa4 	bl	801483e <strncmp>
 80168f6:	4605      	mov	r5, r0
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d167      	bne.n	80169cc <__gethex+0x134>
 80168fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016900:	eb07 060a 	add.w	r6, r7, sl
 8016904:	f7ff ffb2 	bl	801686c <__hexdig_fun>
 8016908:	2800      	cmp	r0, #0
 801690a:	d061      	beq.n	80169d0 <__gethex+0x138>
 801690c:	4633      	mov	r3, r6
 801690e:	7818      	ldrb	r0, [r3, #0]
 8016910:	461f      	mov	r7, r3
 8016912:	3301      	adds	r3, #1
 8016914:	2830      	cmp	r0, #48	; 0x30
 8016916:	d0fa      	beq.n	801690e <__gethex+0x76>
 8016918:	f7ff ffa8 	bl	801686c <__hexdig_fun>
 801691c:	fab0 f480 	clz	r4, r0
 8016920:	2301      	movs	r3, #1
 8016922:	4635      	mov	r5, r6
 8016924:	0964      	lsrs	r4, r4, #5
 8016926:	9300      	str	r3, [sp, #0]
 8016928:	463a      	mov	r2, r7
 801692a:	4616      	mov	r6, r2
 801692c:	3201      	adds	r2, #1
 801692e:	7830      	ldrb	r0, [r6, #0]
 8016930:	f7ff ff9c 	bl	801686c <__hexdig_fun>
 8016934:	2800      	cmp	r0, #0
 8016936:	d1f8      	bne.n	801692a <__gethex+0x92>
 8016938:	4652      	mov	r2, sl
 801693a:	9901      	ldr	r1, [sp, #4]
 801693c:	4630      	mov	r0, r6
 801693e:	f7fd ff7e 	bl	801483e <strncmp>
 8016942:	b980      	cbnz	r0, 8016966 <__gethex+0xce>
 8016944:	b94d      	cbnz	r5, 801695a <__gethex+0xc2>
 8016946:	eb06 050a 	add.w	r5, r6, sl
 801694a:	462a      	mov	r2, r5
 801694c:	4616      	mov	r6, r2
 801694e:	3201      	adds	r2, #1
 8016950:	7830      	ldrb	r0, [r6, #0]
 8016952:	f7ff ff8b 	bl	801686c <__hexdig_fun>
 8016956:	2800      	cmp	r0, #0
 8016958:	d1f8      	bne.n	801694c <__gethex+0xb4>
 801695a:	1bad      	subs	r5, r5, r6
 801695c:	00ad      	lsls	r5, r5, #2
 801695e:	e004      	b.n	801696a <__gethex+0xd2>
 8016960:	2400      	movs	r4, #0
 8016962:	4625      	mov	r5, r4
 8016964:	e7e0      	b.n	8016928 <__gethex+0x90>
 8016966:	2d00      	cmp	r5, #0
 8016968:	d1f7      	bne.n	801695a <__gethex+0xc2>
 801696a:	7833      	ldrb	r3, [r6, #0]
 801696c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016970:	2b50      	cmp	r3, #80	; 0x50
 8016972:	d13b      	bne.n	80169ec <__gethex+0x154>
 8016974:	7873      	ldrb	r3, [r6, #1]
 8016976:	2b2b      	cmp	r3, #43	; 0x2b
 8016978:	d02c      	beq.n	80169d4 <__gethex+0x13c>
 801697a:	2b2d      	cmp	r3, #45	; 0x2d
 801697c:	d02e      	beq.n	80169dc <__gethex+0x144>
 801697e:	1c71      	adds	r1, r6, #1
 8016980:	f04f 0900 	mov.w	r9, #0
 8016984:	7808      	ldrb	r0, [r1, #0]
 8016986:	f7ff ff71 	bl	801686c <__hexdig_fun>
 801698a:	1e43      	subs	r3, r0, #1
 801698c:	b2db      	uxtb	r3, r3
 801698e:	2b18      	cmp	r3, #24
 8016990:	d82c      	bhi.n	80169ec <__gethex+0x154>
 8016992:	f1a0 0210 	sub.w	r2, r0, #16
 8016996:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801699a:	f7ff ff67 	bl	801686c <__hexdig_fun>
 801699e:	1e43      	subs	r3, r0, #1
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	2b18      	cmp	r3, #24
 80169a4:	d91d      	bls.n	80169e2 <__gethex+0x14a>
 80169a6:	f1b9 0f00 	cmp.w	r9, #0
 80169aa:	d000      	beq.n	80169ae <__gethex+0x116>
 80169ac:	4252      	negs	r2, r2
 80169ae:	4415      	add	r5, r2
 80169b0:	f8cb 1000 	str.w	r1, [fp]
 80169b4:	b1e4      	cbz	r4, 80169f0 <__gethex+0x158>
 80169b6:	9b00      	ldr	r3, [sp, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	bf14      	ite	ne
 80169bc:	2700      	movne	r7, #0
 80169be:	2706      	moveq	r7, #6
 80169c0:	4638      	mov	r0, r7
 80169c2:	b009      	add	sp, #36	; 0x24
 80169c4:	ecbd 8b02 	vpop	{d8}
 80169c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169cc:	463e      	mov	r6, r7
 80169ce:	4625      	mov	r5, r4
 80169d0:	2401      	movs	r4, #1
 80169d2:	e7ca      	b.n	801696a <__gethex+0xd2>
 80169d4:	f04f 0900 	mov.w	r9, #0
 80169d8:	1cb1      	adds	r1, r6, #2
 80169da:	e7d3      	b.n	8016984 <__gethex+0xec>
 80169dc:	f04f 0901 	mov.w	r9, #1
 80169e0:	e7fa      	b.n	80169d8 <__gethex+0x140>
 80169e2:	230a      	movs	r3, #10
 80169e4:	fb03 0202 	mla	r2, r3, r2, r0
 80169e8:	3a10      	subs	r2, #16
 80169ea:	e7d4      	b.n	8016996 <__gethex+0xfe>
 80169ec:	4631      	mov	r1, r6
 80169ee:	e7df      	b.n	80169b0 <__gethex+0x118>
 80169f0:	1bf3      	subs	r3, r6, r7
 80169f2:	4621      	mov	r1, r4
 80169f4:	3b01      	subs	r3, #1
 80169f6:	2b07      	cmp	r3, #7
 80169f8:	dc0b      	bgt.n	8016a12 <__gethex+0x17a>
 80169fa:	ee18 0a10 	vmov	r0, s16
 80169fe:	f000 faeb 	bl	8016fd8 <_Balloc>
 8016a02:	4604      	mov	r4, r0
 8016a04:	b940      	cbnz	r0, 8016a18 <__gethex+0x180>
 8016a06:	4b5d      	ldr	r3, [pc, #372]	; (8016b7c <__gethex+0x2e4>)
 8016a08:	4602      	mov	r2, r0
 8016a0a:	21de      	movs	r1, #222	; 0xde
 8016a0c:	485c      	ldr	r0, [pc, #368]	; (8016b80 <__gethex+0x2e8>)
 8016a0e:	f001 fadd 	bl	8017fcc <__assert_func>
 8016a12:	3101      	adds	r1, #1
 8016a14:	105b      	asrs	r3, r3, #1
 8016a16:	e7ee      	b.n	80169f6 <__gethex+0x15e>
 8016a18:	f100 0914 	add.w	r9, r0, #20
 8016a1c:	f04f 0b00 	mov.w	fp, #0
 8016a20:	f1ca 0301 	rsb	r3, sl, #1
 8016a24:	f8cd 9008 	str.w	r9, [sp, #8]
 8016a28:	f8cd b000 	str.w	fp, [sp]
 8016a2c:	9306      	str	r3, [sp, #24]
 8016a2e:	42b7      	cmp	r7, r6
 8016a30:	d340      	bcc.n	8016ab4 <__gethex+0x21c>
 8016a32:	9802      	ldr	r0, [sp, #8]
 8016a34:	9b00      	ldr	r3, [sp, #0]
 8016a36:	f840 3b04 	str.w	r3, [r0], #4
 8016a3a:	eba0 0009 	sub.w	r0, r0, r9
 8016a3e:	1080      	asrs	r0, r0, #2
 8016a40:	0146      	lsls	r6, r0, #5
 8016a42:	6120      	str	r0, [r4, #16]
 8016a44:	4618      	mov	r0, r3
 8016a46:	f000 fbbb 	bl	80171c0 <__hi0bits>
 8016a4a:	1a30      	subs	r0, r6, r0
 8016a4c:	f8d8 6000 	ldr.w	r6, [r8]
 8016a50:	42b0      	cmp	r0, r6
 8016a52:	dd63      	ble.n	8016b1c <__gethex+0x284>
 8016a54:	1b87      	subs	r7, r0, r6
 8016a56:	4620      	mov	r0, r4
 8016a58:	4639      	mov	r1, r7
 8016a5a:	f000 ff61 	bl	8017920 <__any_on>
 8016a5e:	4682      	mov	sl, r0
 8016a60:	b1a8      	cbz	r0, 8016a8e <__gethex+0x1f6>
 8016a62:	1e7b      	subs	r3, r7, #1
 8016a64:	f04f 0a01 	mov.w	sl, #1
 8016a68:	1159      	asrs	r1, r3, #5
 8016a6a:	f003 021f 	and.w	r2, r3, #31
 8016a6e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016a72:	fa0a f202 	lsl.w	r2, sl, r2
 8016a76:	420a      	tst	r2, r1
 8016a78:	d009      	beq.n	8016a8e <__gethex+0x1f6>
 8016a7a:	4553      	cmp	r3, sl
 8016a7c:	dd05      	ble.n	8016a8a <__gethex+0x1f2>
 8016a7e:	1eb9      	subs	r1, r7, #2
 8016a80:	4620      	mov	r0, r4
 8016a82:	f000 ff4d 	bl	8017920 <__any_on>
 8016a86:	2800      	cmp	r0, #0
 8016a88:	d145      	bne.n	8016b16 <__gethex+0x27e>
 8016a8a:	f04f 0a02 	mov.w	sl, #2
 8016a8e:	443d      	add	r5, r7
 8016a90:	4639      	mov	r1, r7
 8016a92:	4620      	mov	r0, r4
 8016a94:	f7ff fe99 	bl	80167ca <rshift>
 8016a98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a9c:	42ab      	cmp	r3, r5
 8016a9e:	da4c      	bge.n	8016b3a <__gethex+0x2a2>
 8016aa0:	4621      	mov	r1, r4
 8016aa2:	ee18 0a10 	vmov	r0, s16
 8016aa6:	f000 fad7 	bl	8017058 <_Bfree>
 8016aaa:	2300      	movs	r3, #0
 8016aac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016aae:	27a3      	movs	r7, #163	; 0xa3
 8016ab0:	6013      	str	r3, [r2, #0]
 8016ab2:	e785      	b.n	80169c0 <__gethex+0x128>
 8016ab4:	1e73      	subs	r3, r6, #1
 8016ab6:	9a05      	ldr	r2, [sp, #20]
 8016ab8:	9303      	str	r3, [sp, #12]
 8016aba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016abe:	4293      	cmp	r3, r2
 8016ac0:	d019      	beq.n	8016af6 <__gethex+0x25e>
 8016ac2:	f1bb 0f20 	cmp.w	fp, #32
 8016ac6:	d107      	bne.n	8016ad8 <__gethex+0x240>
 8016ac8:	9b02      	ldr	r3, [sp, #8]
 8016aca:	9a00      	ldr	r2, [sp, #0]
 8016acc:	f843 2b04 	str.w	r2, [r3], #4
 8016ad0:	9302      	str	r3, [sp, #8]
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	469b      	mov	fp, r3
 8016ad6:	9300      	str	r3, [sp, #0]
 8016ad8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016adc:	f7ff fec6 	bl	801686c <__hexdig_fun>
 8016ae0:	f000 000f 	and.w	r0, r0, #15
 8016ae4:	9b00      	ldr	r3, [sp, #0]
 8016ae6:	fa00 f00b 	lsl.w	r0, r0, fp
 8016aea:	f10b 0b04 	add.w	fp, fp, #4
 8016aee:	4303      	orrs	r3, r0
 8016af0:	9300      	str	r3, [sp, #0]
 8016af2:	9b03      	ldr	r3, [sp, #12]
 8016af4:	e00d      	b.n	8016b12 <__gethex+0x27a>
 8016af6:	9b03      	ldr	r3, [sp, #12]
 8016af8:	9a06      	ldr	r2, [sp, #24]
 8016afa:	4413      	add	r3, r2
 8016afc:	42bb      	cmp	r3, r7
 8016afe:	d3e0      	bcc.n	8016ac2 <__gethex+0x22a>
 8016b00:	4618      	mov	r0, r3
 8016b02:	4652      	mov	r2, sl
 8016b04:	9901      	ldr	r1, [sp, #4]
 8016b06:	9307      	str	r3, [sp, #28]
 8016b08:	f7fd fe99 	bl	801483e <strncmp>
 8016b0c:	9b07      	ldr	r3, [sp, #28]
 8016b0e:	2800      	cmp	r0, #0
 8016b10:	d1d7      	bne.n	8016ac2 <__gethex+0x22a>
 8016b12:	461e      	mov	r6, r3
 8016b14:	e78b      	b.n	8016a2e <__gethex+0x196>
 8016b16:	f04f 0a03 	mov.w	sl, #3
 8016b1a:	e7b8      	b.n	8016a8e <__gethex+0x1f6>
 8016b1c:	da0a      	bge.n	8016b34 <__gethex+0x29c>
 8016b1e:	1a37      	subs	r7, r6, r0
 8016b20:	4621      	mov	r1, r4
 8016b22:	ee18 0a10 	vmov	r0, s16
 8016b26:	463a      	mov	r2, r7
 8016b28:	1bed      	subs	r5, r5, r7
 8016b2a:	f000 fcb1 	bl	8017490 <__lshift>
 8016b2e:	4604      	mov	r4, r0
 8016b30:	f100 0914 	add.w	r9, r0, #20
 8016b34:	f04f 0a00 	mov.w	sl, #0
 8016b38:	e7ae      	b.n	8016a98 <__gethex+0x200>
 8016b3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016b3e:	42a8      	cmp	r0, r5
 8016b40:	dd72      	ble.n	8016c28 <__gethex+0x390>
 8016b42:	1b45      	subs	r5, r0, r5
 8016b44:	42ae      	cmp	r6, r5
 8016b46:	dc35      	bgt.n	8016bb4 <__gethex+0x31c>
 8016b48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016b4c:	2b02      	cmp	r3, #2
 8016b4e:	d029      	beq.n	8016ba4 <__gethex+0x30c>
 8016b50:	2b03      	cmp	r3, #3
 8016b52:	d02b      	beq.n	8016bac <__gethex+0x314>
 8016b54:	2b01      	cmp	r3, #1
 8016b56:	d11b      	bne.n	8016b90 <__gethex+0x2f8>
 8016b58:	42ae      	cmp	r6, r5
 8016b5a:	d119      	bne.n	8016b90 <__gethex+0x2f8>
 8016b5c:	2e01      	cmp	r6, #1
 8016b5e:	d111      	bne.n	8016b84 <__gethex+0x2ec>
 8016b60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016b64:	2762      	movs	r7, #98	; 0x62
 8016b66:	9a04      	ldr	r2, [sp, #16]
 8016b68:	6013      	str	r3, [r2, #0]
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	6123      	str	r3, [r4, #16]
 8016b6e:	f8c9 3000 	str.w	r3, [r9]
 8016b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b74:	601c      	str	r4, [r3, #0]
 8016b76:	e723      	b.n	80169c0 <__gethex+0x128>
 8016b78:	0818aedc 	.word	0x0818aedc
 8016b7c:	0818ae00 	.word	0x0818ae00
 8016b80:	0818ae74 	.word	0x0818ae74
 8016b84:	1e71      	subs	r1, r6, #1
 8016b86:	4620      	mov	r0, r4
 8016b88:	f000 feca 	bl	8017920 <__any_on>
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	d1e7      	bne.n	8016b60 <__gethex+0x2c8>
 8016b90:	4621      	mov	r1, r4
 8016b92:	ee18 0a10 	vmov	r0, s16
 8016b96:	f000 fa5f 	bl	8017058 <_Bfree>
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016b9e:	2750      	movs	r7, #80	; 0x50
 8016ba0:	6013      	str	r3, [r2, #0]
 8016ba2:	e70d      	b.n	80169c0 <__gethex+0x128>
 8016ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d1f2      	bne.n	8016b90 <__gethex+0x2f8>
 8016baa:	e7d9      	b.n	8016b60 <__gethex+0x2c8>
 8016bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d1d6      	bne.n	8016b60 <__gethex+0x2c8>
 8016bb2:	e7ed      	b.n	8016b90 <__gethex+0x2f8>
 8016bb4:	1e6f      	subs	r7, r5, #1
 8016bb6:	f1ba 0f00 	cmp.w	sl, #0
 8016bba:	d132      	bne.n	8016c22 <__gethex+0x38a>
 8016bbc:	b127      	cbz	r7, 8016bc8 <__gethex+0x330>
 8016bbe:	4639      	mov	r1, r7
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f000 fead 	bl	8017920 <__any_on>
 8016bc6:	4682      	mov	sl, r0
 8016bc8:	117b      	asrs	r3, r7, #5
 8016bca:	2101      	movs	r1, #1
 8016bcc:	f007 071f 	and.w	r7, r7, #31
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016bd6:	1b76      	subs	r6, r6, r5
 8016bd8:	fa01 f707 	lsl.w	r7, r1, r7
 8016bdc:	4629      	mov	r1, r5
 8016bde:	421f      	tst	r7, r3
 8016be0:	f04f 0702 	mov.w	r7, #2
 8016be4:	bf18      	it	ne
 8016be6:	f04a 0a02 	orrne.w	sl, sl, #2
 8016bea:	f7ff fdee 	bl	80167ca <rshift>
 8016bee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016bf2:	f1ba 0f00 	cmp.w	sl, #0
 8016bf6:	d048      	beq.n	8016c8a <__gethex+0x3f2>
 8016bf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016bfc:	2b02      	cmp	r3, #2
 8016bfe:	d015      	beq.n	8016c2c <__gethex+0x394>
 8016c00:	2b03      	cmp	r3, #3
 8016c02:	d017      	beq.n	8016c34 <__gethex+0x39c>
 8016c04:	2b01      	cmp	r3, #1
 8016c06:	d109      	bne.n	8016c1c <__gethex+0x384>
 8016c08:	f01a 0f02 	tst.w	sl, #2
 8016c0c:	d006      	beq.n	8016c1c <__gethex+0x384>
 8016c0e:	f8d9 0000 	ldr.w	r0, [r9]
 8016c12:	ea4a 0a00 	orr.w	sl, sl, r0
 8016c16:	f01a 0f01 	tst.w	sl, #1
 8016c1a:	d10e      	bne.n	8016c3a <__gethex+0x3a2>
 8016c1c:	f047 0710 	orr.w	r7, r7, #16
 8016c20:	e033      	b.n	8016c8a <__gethex+0x3f2>
 8016c22:	f04f 0a01 	mov.w	sl, #1
 8016c26:	e7cf      	b.n	8016bc8 <__gethex+0x330>
 8016c28:	2701      	movs	r7, #1
 8016c2a:	e7e2      	b.n	8016bf2 <__gethex+0x35a>
 8016c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c2e:	f1c3 0301 	rsb	r3, r3, #1
 8016c32:	9315      	str	r3, [sp, #84]	; 0x54
 8016c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d0f0      	beq.n	8016c1c <__gethex+0x384>
 8016c3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016c3e:	f104 0314 	add.w	r3, r4, #20
 8016c42:	f04f 0c00 	mov.w	ip, #0
 8016c46:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016c4a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c54:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8016c58:	d01c      	beq.n	8016c94 <__gethex+0x3fc>
 8016c5a:	3201      	adds	r2, #1
 8016c5c:	6002      	str	r2, [r0, #0]
 8016c5e:	2f02      	cmp	r7, #2
 8016c60:	f104 0314 	add.w	r3, r4, #20
 8016c64:	d13f      	bne.n	8016ce6 <__gethex+0x44e>
 8016c66:	f8d8 2000 	ldr.w	r2, [r8]
 8016c6a:	3a01      	subs	r2, #1
 8016c6c:	42b2      	cmp	r2, r6
 8016c6e:	d10a      	bne.n	8016c86 <__gethex+0x3ee>
 8016c70:	1171      	asrs	r1, r6, #5
 8016c72:	2201      	movs	r2, #1
 8016c74:	f006 061f 	and.w	r6, r6, #31
 8016c78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016c7c:	fa02 f606 	lsl.w	r6, r2, r6
 8016c80:	421e      	tst	r6, r3
 8016c82:	bf18      	it	ne
 8016c84:	4617      	movne	r7, r2
 8016c86:	f047 0720 	orr.w	r7, r7, #32
 8016c8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c8c:	601c      	str	r4, [r3, #0]
 8016c8e:	9b04      	ldr	r3, [sp, #16]
 8016c90:	601d      	str	r5, [r3, #0]
 8016c92:	e695      	b.n	80169c0 <__gethex+0x128>
 8016c94:	4299      	cmp	r1, r3
 8016c96:	f843 cc04 	str.w	ip, [r3, #-4]
 8016c9a:	d8d8      	bhi.n	8016c4e <__gethex+0x3b6>
 8016c9c:	68a3      	ldr	r3, [r4, #8]
 8016c9e:	459b      	cmp	fp, r3
 8016ca0:	db19      	blt.n	8016cd6 <__gethex+0x43e>
 8016ca2:	6861      	ldr	r1, [r4, #4]
 8016ca4:	ee18 0a10 	vmov	r0, s16
 8016ca8:	3101      	adds	r1, #1
 8016caa:	f000 f995 	bl	8016fd8 <_Balloc>
 8016cae:	4681      	mov	r9, r0
 8016cb0:	b918      	cbnz	r0, 8016cba <__gethex+0x422>
 8016cb2:	4b1b      	ldr	r3, [pc, #108]	; (8016d20 <__gethex+0x488>)
 8016cb4:	4602      	mov	r2, r0
 8016cb6:	2184      	movs	r1, #132	; 0x84
 8016cb8:	e6a8      	b.n	8016a0c <__gethex+0x174>
 8016cba:	6922      	ldr	r2, [r4, #16]
 8016cbc:	f104 010c 	add.w	r1, r4, #12
 8016cc0:	300c      	adds	r0, #12
 8016cc2:	3202      	adds	r2, #2
 8016cc4:	0092      	lsls	r2, r2, #2
 8016cc6:	f7fc fd6b 	bl	80137a0 <memcpy>
 8016cca:	4621      	mov	r1, r4
 8016ccc:	464c      	mov	r4, r9
 8016cce:	ee18 0a10 	vmov	r0, s16
 8016cd2:	f000 f9c1 	bl	8017058 <_Bfree>
 8016cd6:	6923      	ldr	r3, [r4, #16]
 8016cd8:	1c5a      	adds	r2, r3, #1
 8016cda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016cde:	6122      	str	r2, [r4, #16]
 8016ce0:	2201      	movs	r2, #1
 8016ce2:	615a      	str	r2, [r3, #20]
 8016ce4:	e7bb      	b.n	8016c5e <__gethex+0x3c6>
 8016ce6:	6922      	ldr	r2, [r4, #16]
 8016ce8:	455a      	cmp	r2, fp
 8016cea:	dd0b      	ble.n	8016d04 <__gethex+0x46c>
 8016cec:	2101      	movs	r1, #1
 8016cee:	4620      	mov	r0, r4
 8016cf0:	f7ff fd6b 	bl	80167ca <rshift>
 8016cf4:	3501      	adds	r5, #1
 8016cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016cfa:	42ab      	cmp	r3, r5
 8016cfc:	f6ff aed0 	blt.w	8016aa0 <__gethex+0x208>
 8016d00:	2701      	movs	r7, #1
 8016d02:	e7c0      	b.n	8016c86 <__gethex+0x3ee>
 8016d04:	f016 061f 	ands.w	r6, r6, #31
 8016d08:	d0fa      	beq.n	8016d00 <__gethex+0x468>
 8016d0a:	4453      	add	r3, sl
 8016d0c:	f1c6 0620 	rsb	r6, r6, #32
 8016d10:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016d14:	f000 fa54 	bl	80171c0 <__hi0bits>
 8016d18:	42b0      	cmp	r0, r6
 8016d1a:	dbe7      	blt.n	8016cec <__gethex+0x454>
 8016d1c:	e7f0      	b.n	8016d00 <__gethex+0x468>
 8016d1e:	bf00      	nop
 8016d20:	0818ae00 	.word	0x0818ae00

08016d24 <L_shift>:
 8016d24:	f1c2 0208 	rsb	r2, r2, #8
 8016d28:	0092      	lsls	r2, r2, #2
 8016d2a:	b570      	push	{r4, r5, r6, lr}
 8016d2c:	f1c2 0620 	rsb	r6, r2, #32
 8016d30:	6843      	ldr	r3, [r0, #4]
 8016d32:	6804      	ldr	r4, [r0, #0]
 8016d34:	fa03 f506 	lsl.w	r5, r3, r6
 8016d38:	40d3      	lsrs	r3, r2
 8016d3a:	432c      	orrs	r4, r5
 8016d3c:	6004      	str	r4, [r0, #0]
 8016d3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016d42:	4288      	cmp	r0, r1
 8016d44:	d3f4      	bcc.n	8016d30 <L_shift+0xc>
 8016d46:	bd70      	pop	{r4, r5, r6, pc}

08016d48 <__match>:
 8016d48:	6803      	ldr	r3, [r0, #0]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	b530      	push	{r4, r5, lr}
 8016d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d52:	b914      	cbnz	r4, 8016d5a <__match+0x12>
 8016d54:	6003      	str	r3, [r0, #0]
 8016d56:	2001      	movs	r0, #1
 8016d58:	bd30      	pop	{r4, r5, pc}
 8016d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016d62:	2d19      	cmp	r5, #25
 8016d64:	bf98      	it	ls
 8016d66:	3220      	addls	r2, #32
 8016d68:	42a2      	cmp	r2, r4
 8016d6a:	d0f0      	beq.n	8016d4e <__match+0x6>
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	e7f3      	b.n	8016d58 <__match+0x10>

08016d70 <__hexnan>:
 8016d70:	680b      	ldr	r3, [r1, #0]
 8016d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d76:	115e      	asrs	r6, r3, #5
 8016d78:	f013 031f 	ands.w	r3, r3, #31
 8016d7c:	f04f 0500 	mov.w	r5, #0
 8016d80:	b087      	sub	sp, #28
 8016d82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016d86:	4690      	mov	r8, r2
 8016d88:	4682      	mov	sl, r0
 8016d8a:	6802      	ldr	r2, [r0, #0]
 8016d8c:	bf18      	it	ne
 8016d8e:	3604      	addne	r6, #4
 8016d90:	46ab      	mov	fp, r5
 8016d92:	9301      	str	r3, [sp, #4]
 8016d94:	1f37      	subs	r7, r6, #4
 8016d96:	f846 5c04 	str.w	r5, [r6, #-4]
 8016d9a:	9502      	str	r5, [sp, #8]
 8016d9c:	46b9      	mov	r9, r7
 8016d9e:	463c      	mov	r4, r7
 8016da0:	1c53      	adds	r3, r2, #1
 8016da2:	7851      	ldrb	r1, [r2, #1]
 8016da4:	9303      	str	r3, [sp, #12]
 8016da6:	b341      	cbz	r1, 8016dfa <__hexnan+0x8a>
 8016da8:	4608      	mov	r0, r1
 8016daa:	9205      	str	r2, [sp, #20]
 8016dac:	9104      	str	r1, [sp, #16]
 8016dae:	f7ff fd5d 	bl	801686c <__hexdig_fun>
 8016db2:	2800      	cmp	r0, #0
 8016db4:	d14f      	bne.n	8016e56 <__hexnan+0xe6>
 8016db6:	9904      	ldr	r1, [sp, #16]
 8016db8:	9a05      	ldr	r2, [sp, #20]
 8016dba:	2920      	cmp	r1, #32
 8016dbc:	d818      	bhi.n	8016df0 <__hexnan+0x80>
 8016dbe:	9b02      	ldr	r3, [sp, #8]
 8016dc0:	459b      	cmp	fp, r3
 8016dc2:	dd13      	ble.n	8016dec <__hexnan+0x7c>
 8016dc4:	454c      	cmp	r4, r9
 8016dc6:	d206      	bcs.n	8016dd6 <__hexnan+0x66>
 8016dc8:	2d07      	cmp	r5, #7
 8016dca:	dc04      	bgt.n	8016dd6 <__hexnan+0x66>
 8016dcc:	462a      	mov	r2, r5
 8016dce:	4649      	mov	r1, r9
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f7ff ffa7 	bl	8016d24 <L_shift>
 8016dd6:	4544      	cmp	r4, r8
 8016dd8:	d94f      	bls.n	8016e7a <__hexnan+0x10a>
 8016dda:	2300      	movs	r3, #0
 8016ddc:	f1a4 0904 	sub.w	r9, r4, #4
 8016de0:	f8cd b008 	str.w	fp, [sp, #8]
 8016de4:	f844 3c04 	str.w	r3, [r4, #-4]
 8016de8:	461d      	mov	r5, r3
 8016dea:	464c      	mov	r4, r9
 8016dec:	9a03      	ldr	r2, [sp, #12]
 8016dee:	e7d7      	b.n	8016da0 <__hexnan+0x30>
 8016df0:	2929      	cmp	r1, #41	; 0x29
 8016df2:	d155      	bne.n	8016ea0 <__hexnan+0x130>
 8016df4:	3202      	adds	r2, #2
 8016df6:	f8ca 2000 	str.w	r2, [sl]
 8016dfa:	f1bb 0f00 	cmp.w	fp, #0
 8016dfe:	d04f      	beq.n	8016ea0 <__hexnan+0x130>
 8016e00:	454c      	cmp	r4, r9
 8016e02:	d206      	bcs.n	8016e12 <__hexnan+0xa2>
 8016e04:	2d07      	cmp	r5, #7
 8016e06:	dc04      	bgt.n	8016e12 <__hexnan+0xa2>
 8016e08:	462a      	mov	r2, r5
 8016e0a:	4649      	mov	r1, r9
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	f7ff ff89 	bl	8016d24 <L_shift>
 8016e12:	4544      	cmp	r4, r8
 8016e14:	d933      	bls.n	8016e7e <__hexnan+0x10e>
 8016e16:	f1a8 0204 	sub.w	r2, r8, #4
 8016e1a:	4623      	mov	r3, r4
 8016e1c:	f853 1b04 	ldr.w	r1, [r3], #4
 8016e20:	429f      	cmp	r7, r3
 8016e22:	f842 1f04 	str.w	r1, [r2, #4]!
 8016e26:	d2f9      	bcs.n	8016e1c <__hexnan+0xac>
 8016e28:	1b3b      	subs	r3, r7, r4
 8016e2a:	3e03      	subs	r6, #3
 8016e2c:	3401      	adds	r4, #1
 8016e2e:	2200      	movs	r2, #0
 8016e30:	f023 0303 	bic.w	r3, r3, #3
 8016e34:	3304      	adds	r3, #4
 8016e36:	42b4      	cmp	r4, r6
 8016e38:	bf88      	it	hi
 8016e3a:	2304      	movhi	r3, #4
 8016e3c:	4443      	add	r3, r8
 8016e3e:	f843 2b04 	str.w	r2, [r3], #4
 8016e42:	429f      	cmp	r7, r3
 8016e44:	d2fb      	bcs.n	8016e3e <__hexnan+0xce>
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	b91b      	cbnz	r3, 8016e52 <__hexnan+0xe2>
 8016e4a:	4547      	cmp	r7, r8
 8016e4c:	d126      	bne.n	8016e9c <__hexnan+0x12c>
 8016e4e:	2301      	movs	r3, #1
 8016e50:	603b      	str	r3, [r7, #0]
 8016e52:	2005      	movs	r0, #5
 8016e54:	e025      	b.n	8016ea2 <__hexnan+0x132>
 8016e56:	3501      	adds	r5, #1
 8016e58:	f10b 0b01 	add.w	fp, fp, #1
 8016e5c:	2d08      	cmp	r5, #8
 8016e5e:	dd05      	ble.n	8016e6c <__hexnan+0xfc>
 8016e60:	4544      	cmp	r4, r8
 8016e62:	d9c3      	bls.n	8016dec <__hexnan+0x7c>
 8016e64:	2300      	movs	r3, #0
 8016e66:	3c04      	subs	r4, #4
 8016e68:	2501      	movs	r5, #1
 8016e6a:	6023      	str	r3, [r4, #0]
 8016e6c:	6822      	ldr	r2, [r4, #0]
 8016e6e:	f000 000f 	and.w	r0, r0, #15
 8016e72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016e76:	6022      	str	r2, [r4, #0]
 8016e78:	e7b8      	b.n	8016dec <__hexnan+0x7c>
 8016e7a:	2508      	movs	r5, #8
 8016e7c:	e7b6      	b.n	8016dec <__hexnan+0x7c>
 8016e7e:	9b01      	ldr	r3, [sp, #4]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d0e0      	beq.n	8016e46 <__hexnan+0xd6>
 8016e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016e88:	f1c3 0320 	rsb	r3, r3, #32
 8016e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8016e90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016e94:	401a      	ands	r2, r3
 8016e96:	f846 2c04 	str.w	r2, [r6, #-4]
 8016e9a:	e7d4      	b.n	8016e46 <__hexnan+0xd6>
 8016e9c:	3f04      	subs	r7, #4
 8016e9e:	e7d2      	b.n	8016e46 <__hexnan+0xd6>
 8016ea0:	2004      	movs	r0, #4
 8016ea2:	b007      	add	sp, #28
 8016ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ea8 <_localeconv_r>:
 8016ea8:	4800      	ldr	r0, [pc, #0]	; (8016eac <_localeconv_r+0x4>)
 8016eaa:	4770      	bx	lr
 8016eac:	20000264 	.word	0x20000264

08016eb0 <__retarget_lock_init_recursive>:
 8016eb0:	4770      	bx	lr

08016eb2 <__retarget_lock_acquire_recursive>:
 8016eb2:	4770      	bx	lr

08016eb4 <__retarget_lock_release_recursive>:
 8016eb4:	4770      	bx	lr

08016eb6 <__swhatbuf_r>:
 8016eb6:	b570      	push	{r4, r5, r6, lr}
 8016eb8:	460e      	mov	r6, r1
 8016eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ebe:	b096      	sub	sp, #88	; 0x58
 8016ec0:	4614      	mov	r4, r2
 8016ec2:	2900      	cmp	r1, #0
 8016ec4:	461d      	mov	r5, r3
 8016ec6:	da08      	bge.n	8016eda <__swhatbuf_r+0x24>
 8016ec8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	602a      	str	r2, [r5, #0]
 8016ed0:	061a      	lsls	r2, r3, #24
 8016ed2:	d410      	bmi.n	8016ef6 <__swhatbuf_r+0x40>
 8016ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ed8:	e00e      	b.n	8016ef8 <__swhatbuf_r+0x42>
 8016eda:	466a      	mov	r2, sp
 8016edc:	f001 f8b6 	bl	801804c <_fstat_r>
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	dbf1      	blt.n	8016ec8 <__swhatbuf_r+0x12>
 8016ee4:	9a01      	ldr	r2, [sp, #4]
 8016ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016eee:	425a      	negs	r2, r3
 8016ef0:	415a      	adcs	r2, r3
 8016ef2:	602a      	str	r2, [r5, #0]
 8016ef4:	e7ee      	b.n	8016ed4 <__swhatbuf_r+0x1e>
 8016ef6:	2340      	movs	r3, #64	; 0x40
 8016ef8:	2000      	movs	r0, #0
 8016efa:	6023      	str	r3, [r4, #0]
 8016efc:	b016      	add	sp, #88	; 0x58
 8016efe:	bd70      	pop	{r4, r5, r6, pc}

08016f00 <__smakebuf_r>:
 8016f00:	898b      	ldrh	r3, [r1, #12]
 8016f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f04:	079d      	lsls	r5, r3, #30
 8016f06:	4606      	mov	r6, r0
 8016f08:	460c      	mov	r4, r1
 8016f0a:	d507      	bpl.n	8016f1c <__smakebuf_r+0x1c>
 8016f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016f10:	6023      	str	r3, [r4, #0]
 8016f12:	6123      	str	r3, [r4, #16]
 8016f14:	2301      	movs	r3, #1
 8016f16:	6163      	str	r3, [r4, #20]
 8016f18:	b002      	add	sp, #8
 8016f1a:	bd70      	pop	{r4, r5, r6, pc}
 8016f1c:	ab01      	add	r3, sp, #4
 8016f1e:	466a      	mov	r2, sp
 8016f20:	f7ff ffc9 	bl	8016eb6 <__swhatbuf_r>
 8016f24:	9900      	ldr	r1, [sp, #0]
 8016f26:	4605      	mov	r5, r0
 8016f28:	4630      	mov	r0, r6
 8016f2a:	f7fc fcbb 	bl	80138a4 <_malloc_r>
 8016f2e:	b948      	cbnz	r0, 8016f44 <__smakebuf_r+0x44>
 8016f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f34:	059a      	lsls	r2, r3, #22
 8016f36:	d4ef      	bmi.n	8016f18 <__smakebuf_r+0x18>
 8016f38:	f023 0303 	bic.w	r3, r3, #3
 8016f3c:	f043 0302 	orr.w	r3, r3, #2
 8016f40:	81a3      	strh	r3, [r4, #12]
 8016f42:	e7e3      	b.n	8016f0c <__smakebuf_r+0xc>
 8016f44:	4b0d      	ldr	r3, [pc, #52]	; (8016f7c <__smakebuf_r+0x7c>)
 8016f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8016f48:	89a3      	ldrh	r3, [r4, #12]
 8016f4a:	6020      	str	r0, [r4, #0]
 8016f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f50:	6120      	str	r0, [r4, #16]
 8016f52:	81a3      	strh	r3, [r4, #12]
 8016f54:	9b00      	ldr	r3, [sp, #0]
 8016f56:	6163      	str	r3, [r4, #20]
 8016f58:	9b01      	ldr	r3, [sp, #4]
 8016f5a:	b15b      	cbz	r3, 8016f74 <__smakebuf_r+0x74>
 8016f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f60:	4630      	mov	r0, r6
 8016f62:	f001 f885 	bl	8018070 <_isatty_r>
 8016f66:	b128      	cbz	r0, 8016f74 <__smakebuf_r+0x74>
 8016f68:	89a3      	ldrh	r3, [r4, #12]
 8016f6a:	f023 0303 	bic.w	r3, r3, #3
 8016f6e:	f043 0301 	orr.w	r3, r3, #1
 8016f72:	81a3      	strh	r3, [r4, #12]
 8016f74:	89a0      	ldrh	r0, [r4, #12]
 8016f76:	4305      	orrs	r5, r0
 8016f78:	81a5      	strh	r5, [r4, #12]
 8016f7a:	e7cd      	b.n	8016f18 <__smakebuf_r+0x18>
 8016f7c:	08016629 	.word	0x08016629

08016f80 <__ascii_mbtowc>:
 8016f80:	b082      	sub	sp, #8
 8016f82:	b901      	cbnz	r1, 8016f86 <__ascii_mbtowc+0x6>
 8016f84:	a901      	add	r1, sp, #4
 8016f86:	b142      	cbz	r2, 8016f9a <__ascii_mbtowc+0x1a>
 8016f88:	b14b      	cbz	r3, 8016f9e <__ascii_mbtowc+0x1e>
 8016f8a:	7813      	ldrb	r3, [r2, #0]
 8016f8c:	600b      	str	r3, [r1, #0]
 8016f8e:	7812      	ldrb	r2, [r2, #0]
 8016f90:	1e10      	subs	r0, r2, #0
 8016f92:	bf18      	it	ne
 8016f94:	2001      	movne	r0, #1
 8016f96:	b002      	add	sp, #8
 8016f98:	4770      	bx	lr
 8016f9a:	4610      	mov	r0, r2
 8016f9c:	e7fb      	b.n	8016f96 <__ascii_mbtowc+0x16>
 8016f9e:	f06f 0001 	mvn.w	r0, #1
 8016fa2:	e7f8      	b.n	8016f96 <__ascii_mbtowc+0x16>

08016fa4 <memchr>:
 8016fa4:	b2c9      	uxtb	r1, r1
 8016fa6:	4402      	add	r2, r0
 8016fa8:	b510      	push	{r4, lr}
 8016faa:	4290      	cmp	r0, r2
 8016fac:	4603      	mov	r3, r0
 8016fae:	d101      	bne.n	8016fb4 <memchr+0x10>
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	e003      	b.n	8016fbc <memchr+0x18>
 8016fb4:	781c      	ldrb	r4, [r3, #0]
 8016fb6:	3001      	adds	r0, #1
 8016fb8:	428c      	cmp	r4, r1
 8016fba:	d1f6      	bne.n	8016faa <memchr+0x6>
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	bd10      	pop	{r4, pc}

08016fc0 <__malloc_lock>:
 8016fc0:	4801      	ldr	r0, [pc, #4]	; (8016fc8 <__malloc_lock+0x8>)
 8016fc2:	f7ff bf76 	b.w	8016eb2 <__retarget_lock_acquire_recursive>
 8016fc6:	bf00      	nop
 8016fc8:	200032bc 	.word	0x200032bc

08016fcc <__malloc_unlock>:
 8016fcc:	4801      	ldr	r0, [pc, #4]	; (8016fd4 <__malloc_unlock+0x8>)
 8016fce:	f7ff bf71 	b.w	8016eb4 <__retarget_lock_release_recursive>
 8016fd2:	bf00      	nop
 8016fd4:	200032bc 	.word	0x200032bc

08016fd8 <_Balloc>:
 8016fd8:	b570      	push	{r4, r5, r6, lr}
 8016fda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016fdc:	4604      	mov	r4, r0
 8016fde:	460d      	mov	r5, r1
 8016fe0:	b976      	cbnz	r6, 8017000 <_Balloc+0x28>
 8016fe2:	2010      	movs	r0, #16
 8016fe4:	f7fc fbbc 	bl	8013760 <malloc>
 8016fe8:	4602      	mov	r2, r0
 8016fea:	6260      	str	r0, [r4, #36]	; 0x24
 8016fec:	b920      	cbnz	r0, 8016ff8 <_Balloc+0x20>
 8016fee:	4b18      	ldr	r3, [pc, #96]	; (8017050 <_Balloc+0x78>)
 8016ff0:	2166      	movs	r1, #102	; 0x66
 8016ff2:	4818      	ldr	r0, [pc, #96]	; (8017054 <_Balloc+0x7c>)
 8016ff4:	f000 ffea 	bl	8017fcc <__assert_func>
 8016ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ffc:	6006      	str	r6, [r0, #0]
 8016ffe:	60c6      	str	r6, [r0, #12]
 8017000:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017002:	68f3      	ldr	r3, [r6, #12]
 8017004:	b183      	cbz	r3, 8017028 <_Balloc+0x50>
 8017006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017008:	68db      	ldr	r3, [r3, #12]
 801700a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801700e:	b9b8      	cbnz	r0, 8017040 <_Balloc+0x68>
 8017010:	2101      	movs	r1, #1
 8017012:	4620      	mov	r0, r4
 8017014:	fa01 f605 	lsl.w	r6, r1, r5
 8017018:	1d72      	adds	r2, r6, #5
 801701a:	0092      	lsls	r2, r2, #2
 801701c:	f000 fca1 	bl	8017962 <_calloc_r>
 8017020:	b160      	cbz	r0, 801703c <_Balloc+0x64>
 8017022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017026:	e00e      	b.n	8017046 <_Balloc+0x6e>
 8017028:	2221      	movs	r2, #33	; 0x21
 801702a:	2104      	movs	r1, #4
 801702c:	4620      	mov	r0, r4
 801702e:	f000 fc98 	bl	8017962 <_calloc_r>
 8017032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017034:	60f0      	str	r0, [r6, #12]
 8017036:	68db      	ldr	r3, [r3, #12]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d1e4      	bne.n	8017006 <_Balloc+0x2e>
 801703c:	2000      	movs	r0, #0
 801703e:	bd70      	pop	{r4, r5, r6, pc}
 8017040:	6802      	ldr	r2, [r0, #0]
 8017042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017046:	2300      	movs	r3, #0
 8017048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801704c:	e7f7      	b.n	801703e <_Balloc+0x66>
 801704e:	bf00      	nop
 8017050:	0818ad8e 	.word	0x0818ad8e
 8017054:	0818aef0 	.word	0x0818aef0

08017058 <_Bfree>:
 8017058:	b570      	push	{r4, r5, r6, lr}
 801705a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801705c:	4605      	mov	r5, r0
 801705e:	460c      	mov	r4, r1
 8017060:	b976      	cbnz	r6, 8017080 <_Bfree+0x28>
 8017062:	2010      	movs	r0, #16
 8017064:	f7fc fb7c 	bl	8013760 <malloc>
 8017068:	4602      	mov	r2, r0
 801706a:	6268      	str	r0, [r5, #36]	; 0x24
 801706c:	b920      	cbnz	r0, 8017078 <_Bfree+0x20>
 801706e:	4b09      	ldr	r3, [pc, #36]	; (8017094 <_Bfree+0x3c>)
 8017070:	218a      	movs	r1, #138	; 0x8a
 8017072:	4809      	ldr	r0, [pc, #36]	; (8017098 <_Bfree+0x40>)
 8017074:	f000 ffaa 	bl	8017fcc <__assert_func>
 8017078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801707c:	6006      	str	r6, [r0, #0]
 801707e:	60c6      	str	r6, [r0, #12]
 8017080:	b13c      	cbz	r4, 8017092 <_Bfree+0x3a>
 8017082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017084:	6862      	ldr	r2, [r4, #4]
 8017086:	68db      	ldr	r3, [r3, #12]
 8017088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801708c:	6021      	str	r1, [r4, #0]
 801708e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017092:	bd70      	pop	{r4, r5, r6, pc}
 8017094:	0818ad8e 	.word	0x0818ad8e
 8017098:	0818aef0 	.word	0x0818aef0

0801709c <__multadd>:
 801709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170a0:	f101 0c14 	add.w	ip, r1, #20
 80170a4:	4607      	mov	r7, r0
 80170a6:	460c      	mov	r4, r1
 80170a8:	461e      	mov	r6, r3
 80170aa:	690d      	ldr	r5, [r1, #16]
 80170ac:	2000      	movs	r0, #0
 80170ae:	f8dc 3000 	ldr.w	r3, [ip]
 80170b2:	3001      	adds	r0, #1
 80170b4:	b299      	uxth	r1, r3
 80170b6:	4285      	cmp	r5, r0
 80170b8:	fb02 6101 	mla	r1, r2, r1, r6
 80170bc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80170c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80170c4:	b289      	uxth	r1, r1
 80170c6:	fb02 3306 	mla	r3, r2, r6, r3
 80170ca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80170ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80170d2:	f84c 1b04 	str.w	r1, [ip], #4
 80170d6:	dcea      	bgt.n	80170ae <__multadd+0x12>
 80170d8:	b30e      	cbz	r6, 801711e <__multadd+0x82>
 80170da:	68a3      	ldr	r3, [r4, #8]
 80170dc:	42ab      	cmp	r3, r5
 80170de:	dc19      	bgt.n	8017114 <__multadd+0x78>
 80170e0:	6861      	ldr	r1, [r4, #4]
 80170e2:	4638      	mov	r0, r7
 80170e4:	3101      	adds	r1, #1
 80170e6:	f7ff ff77 	bl	8016fd8 <_Balloc>
 80170ea:	4680      	mov	r8, r0
 80170ec:	b928      	cbnz	r0, 80170fa <__multadd+0x5e>
 80170ee:	4602      	mov	r2, r0
 80170f0:	4b0c      	ldr	r3, [pc, #48]	; (8017124 <__multadd+0x88>)
 80170f2:	21b5      	movs	r1, #181	; 0xb5
 80170f4:	480c      	ldr	r0, [pc, #48]	; (8017128 <__multadd+0x8c>)
 80170f6:	f000 ff69 	bl	8017fcc <__assert_func>
 80170fa:	6922      	ldr	r2, [r4, #16]
 80170fc:	f104 010c 	add.w	r1, r4, #12
 8017100:	300c      	adds	r0, #12
 8017102:	3202      	adds	r2, #2
 8017104:	0092      	lsls	r2, r2, #2
 8017106:	f7fc fb4b 	bl	80137a0 <memcpy>
 801710a:	4621      	mov	r1, r4
 801710c:	4644      	mov	r4, r8
 801710e:	4638      	mov	r0, r7
 8017110:	f7ff ffa2 	bl	8017058 <_Bfree>
 8017114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017118:	3501      	adds	r5, #1
 801711a:	615e      	str	r6, [r3, #20]
 801711c:	6125      	str	r5, [r4, #16]
 801711e:	4620      	mov	r0, r4
 8017120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017124:	0818ae00 	.word	0x0818ae00
 8017128:	0818aef0 	.word	0x0818aef0

0801712c <__s2b>:
 801712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017130:	4615      	mov	r5, r2
 8017132:	461f      	mov	r7, r3
 8017134:	2209      	movs	r2, #9
 8017136:	3308      	adds	r3, #8
 8017138:	460c      	mov	r4, r1
 801713a:	4606      	mov	r6, r0
 801713c:	2100      	movs	r1, #0
 801713e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017142:	2201      	movs	r2, #1
 8017144:	429a      	cmp	r2, r3
 8017146:	db09      	blt.n	801715c <__s2b+0x30>
 8017148:	4630      	mov	r0, r6
 801714a:	f7ff ff45 	bl	8016fd8 <_Balloc>
 801714e:	b940      	cbnz	r0, 8017162 <__s2b+0x36>
 8017150:	4602      	mov	r2, r0
 8017152:	4b19      	ldr	r3, [pc, #100]	; (80171b8 <__s2b+0x8c>)
 8017154:	21ce      	movs	r1, #206	; 0xce
 8017156:	4819      	ldr	r0, [pc, #100]	; (80171bc <__s2b+0x90>)
 8017158:	f000 ff38 	bl	8017fcc <__assert_func>
 801715c:	0052      	lsls	r2, r2, #1
 801715e:	3101      	adds	r1, #1
 8017160:	e7f0      	b.n	8017144 <__s2b+0x18>
 8017162:	9b08      	ldr	r3, [sp, #32]
 8017164:	2d09      	cmp	r5, #9
 8017166:	6143      	str	r3, [r0, #20]
 8017168:	f04f 0301 	mov.w	r3, #1
 801716c:	6103      	str	r3, [r0, #16]
 801716e:	dd16      	ble.n	801719e <__s2b+0x72>
 8017170:	f104 0909 	add.w	r9, r4, #9
 8017174:	442c      	add	r4, r5
 8017176:	46c8      	mov	r8, r9
 8017178:	f818 3b01 	ldrb.w	r3, [r8], #1
 801717c:	4601      	mov	r1, r0
 801717e:	220a      	movs	r2, #10
 8017180:	4630      	mov	r0, r6
 8017182:	3b30      	subs	r3, #48	; 0x30
 8017184:	f7ff ff8a 	bl	801709c <__multadd>
 8017188:	45a0      	cmp	r8, r4
 801718a:	d1f5      	bne.n	8017178 <__s2b+0x4c>
 801718c:	f1a5 0408 	sub.w	r4, r5, #8
 8017190:	444c      	add	r4, r9
 8017192:	1b2d      	subs	r5, r5, r4
 8017194:	1963      	adds	r3, r4, r5
 8017196:	42bb      	cmp	r3, r7
 8017198:	db04      	blt.n	80171a4 <__s2b+0x78>
 801719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801719e:	340a      	adds	r4, #10
 80171a0:	2509      	movs	r5, #9
 80171a2:	e7f6      	b.n	8017192 <__s2b+0x66>
 80171a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80171a8:	4601      	mov	r1, r0
 80171aa:	220a      	movs	r2, #10
 80171ac:	4630      	mov	r0, r6
 80171ae:	3b30      	subs	r3, #48	; 0x30
 80171b0:	f7ff ff74 	bl	801709c <__multadd>
 80171b4:	e7ee      	b.n	8017194 <__s2b+0x68>
 80171b6:	bf00      	nop
 80171b8:	0818ae00 	.word	0x0818ae00
 80171bc:	0818aef0 	.word	0x0818aef0

080171c0 <__hi0bits>:
 80171c0:	0c03      	lsrs	r3, r0, #16
 80171c2:	041b      	lsls	r3, r3, #16
 80171c4:	b9d3      	cbnz	r3, 80171fc <__hi0bits+0x3c>
 80171c6:	0400      	lsls	r0, r0, #16
 80171c8:	2310      	movs	r3, #16
 80171ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80171ce:	bf04      	itt	eq
 80171d0:	0200      	lsleq	r0, r0, #8
 80171d2:	3308      	addeq	r3, #8
 80171d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80171d8:	bf04      	itt	eq
 80171da:	0100      	lsleq	r0, r0, #4
 80171dc:	3304      	addeq	r3, #4
 80171de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80171e2:	bf04      	itt	eq
 80171e4:	0080      	lsleq	r0, r0, #2
 80171e6:	3302      	addeq	r3, #2
 80171e8:	2800      	cmp	r0, #0
 80171ea:	db05      	blt.n	80171f8 <__hi0bits+0x38>
 80171ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80171f0:	f103 0301 	add.w	r3, r3, #1
 80171f4:	bf08      	it	eq
 80171f6:	2320      	moveq	r3, #32
 80171f8:	4618      	mov	r0, r3
 80171fa:	4770      	bx	lr
 80171fc:	2300      	movs	r3, #0
 80171fe:	e7e4      	b.n	80171ca <__hi0bits+0xa>

08017200 <__lo0bits>:
 8017200:	6803      	ldr	r3, [r0, #0]
 8017202:	4601      	mov	r1, r0
 8017204:	f013 0207 	ands.w	r2, r3, #7
 8017208:	d00b      	beq.n	8017222 <__lo0bits+0x22>
 801720a:	07da      	lsls	r2, r3, #31
 801720c:	d423      	bmi.n	8017256 <__lo0bits+0x56>
 801720e:	0798      	lsls	r0, r3, #30
 8017210:	bf47      	ittee	mi
 8017212:	085b      	lsrmi	r3, r3, #1
 8017214:	2001      	movmi	r0, #1
 8017216:	089b      	lsrpl	r3, r3, #2
 8017218:	2002      	movpl	r0, #2
 801721a:	bf4c      	ite	mi
 801721c:	600b      	strmi	r3, [r1, #0]
 801721e:	600b      	strpl	r3, [r1, #0]
 8017220:	4770      	bx	lr
 8017222:	b298      	uxth	r0, r3
 8017224:	b9a8      	cbnz	r0, 8017252 <__lo0bits+0x52>
 8017226:	0c1b      	lsrs	r3, r3, #16
 8017228:	2010      	movs	r0, #16
 801722a:	b2da      	uxtb	r2, r3
 801722c:	b90a      	cbnz	r2, 8017232 <__lo0bits+0x32>
 801722e:	3008      	adds	r0, #8
 8017230:	0a1b      	lsrs	r3, r3, #8
 8017232:	071a      	lsls	r2, r3, #28
 8017234:	bf04      	itt	eq
 8017236:	091b      	lsreq	r3, r3, #4
 8017238:	3004      	addeq	r0, #4
 801723a:	079a      	lsls	r2, r3, #30
 801723c:	bf04      	itt	eq
 801723e:	089b      	lsreq	r3, r3, #2
 8017240:	3002      	addeq	r0, #2
 8017242:	07da      	lsls	r2, r3, #31
 8017244:	d403      	bmi.n	801724e <__lo0bits+0x4e>
 8017246:	085b      	lsrs	r3, r3, #1
 8017248:	f100 0001 	add.w	r0, r0, #1
 801724c:	d005      	beq.n	801725a <__lo0bits+0x5a>
 801724e:	600b      	str	r3, [r1, #0]
 8017250:	4770      	bx	lr
 8017252:	4610      	mov	r0, r2
 8017254:	e7e9      	b.n	801722a <__lo0bits+0x2a>
 8017256:	2000      	movs	r0, #0
 8017258:	4770      	bx	lr
 801725a:	2020      	movs	r0, #32
 801725c:	4770      	bx	lr
	...

08017260 <__i2b>:
 8017260:	b510      	push	{r4, lr}
 8017262:	460c      	mov	r4, r1
 8017264:	2101      	movs	r1, #1
 8017266:	f7ff feb7 	bl	8016fd8 <_Balloc>
 801726a:	4602      	mov	r2, r0
 801726c:	b928      	cbnz	r0, 801727a <__i2b+0x1a>
 801726e:	4b05      	ldr	r3, [pc, #20]	; (8017284 <__i2b+0x24>)
 8017270:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017274:	4804      	ldr	r0, [pc, #16]	; (8017288 <__i2b+0x28>)
 8017276:	f000 fea9 	bl	8017fcc <__assert_func>
 801727a:	2301      	movs	r3, #1
 801727c:	6144      	str	r4, [r0, #20]
 801727e:	6103      	str	r3, [r0, #16]
 8017280:	bd10      	pop	{r4, pc}
 8017282:	bf00      	nop
 8017284:	0818ae00 	.word	0x0818ae00
 8017288:	0818aef0 	.word	0x0818aef0

0801728c <__multiply>:
 801728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017290:	4691      	mov	r9, r2
 8017292:	690a      	ldr	r2, [r1, #16]
 8017294:	460c      	mov	r4, r1
 8017296:	b085      	sub	sp, #20
 8017298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801729c:	429a      	cmp	r2, r3
 801729e:	bfbe      	ittt	lt
 80172a0:	460b      	movlt	r3, r1
 80172a2:	464c      	movlt	r4, r9
 80172a4:	4699      	movlt	r9, r3
 80172a6:	6927      	ldr	r7, [r4, #16]
 80172a8:	68a3      	ldr	r3, [r4, #8]
 80172aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80172ae:	6861      	ldr	r1, [r4, #4]
 80172b0:	eb07 060a 	add.w	r6, r7, sl
 80172b4:	42b3      	cmp	r3, r6
 80172b6:	bfb8      	it	lt
 80172b8:	3101      	addlt	r1, #1
 80172ba:	f7ff fe8d 	bl	8016fd8 <_Balloc>
 80172be:	b930      	cbnz	r0, 80172ce <__multiply+0x42>
 80172c0:	4602      	mov	r2, r0
 80172c2:	4b44      	ldr	r3, [pc, #272]	; (80173d4 <__multiply+0x148>)
 80172c4:	f240 115d 	movw	r1, #349	; 0x15d
 80172c8:	4843      	ldr	r0, [pc, #268]	; (80173d8 <__multiply+0x14c>)
 80172ca:	f000 fe7f 	bl	8017fcc <__assert_func>
 80172ce:	f100 0514 	add.w	r5, r0, #20
 80172d2:	2200      	movs	r2, #0
 80172d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80172d8:	462b      	mov	r3, r5
 80172da:	4543      	cmp	r3, r8
 80172dc:	d321      	bcc.n	8017322 <__multiply+0x96>
 80172de:	f104 0314 	add.w	r3, r4, #20
 80172e2:	f104 0115 	add.w	r1, r4, #21
 80172e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80172ea:	f109 0314 	add.w	r3, r9, #20
 80172ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80172f2:	9202      	str	r2, [sp, #8]
 80172f4:	1b3a      	subs	r2, r7, r4
 80172f6:	3a15      	subs	r2, #21
 80172f8:	f022 0203 	bic.w	r2, r2, #3
 80172fc:	3204      	adds	r2, #4
 80172fe:	428f      	cmp	r7, r1
 8017300:	bf38      	it	cc
 8017302:	2204      	movcc	r2, #4
 8017304:	9201      	str	r2, [sp, #4]
 8017306:	9a02      	ldr	r2, [sp, #8]
 8017308:	9303      	str	r3, [sp, #12]
 801730a:	429a      	cmp	r2, r3
 801730c:	d80c      	bhi.n	8017328 <__multiply+0x9c>
 801730e:	2e00      	cmp	r6, #0
 8017310:	dd03      	ble.n	801731a <__multiply+0x8e>
 8017312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017316:	2b00      	cmp	r3, #0
 8017318:	d05a      	beq.n	80173d0 <__multiply+0x144>
 801731a:	6106      	str	r6, [r0, #16]
 801731c:	b005      	add	sp, #20
 801731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017322:	f843 2b04 	str.w	r2, [r3], #4
 8017326:	e7d8      	b.n	80172da <__multiply+0x4e>
 8017328:	f8b3 a000 	ldrh.w	sl, [r3]
 801732c:	f1ba 0f00 	cmp.w	sl, #0
 8017330:	d024      	beq.n	801737c <__multiply+0xf0>
 8017332:	f104 0e14 	add.w	lr, r4, #20
 8017336:	46a9      	mov	r9, r5
 8017338:	f04f 0c00 	mov.w	ip, #0
 801733c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017340:	f8d9 1000 	ldr.w	r1, [r9]
 8017344:	fa1f fb82 	uxth.w	fp, r2
 8017348:	4577      	cmp	r7, lr
 801734a:	b289      	uxth	r1, r1
 801734c:	fb0a 110b 	mla	r1, sl, fp, r1
 8017350:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017354:	f8d9 2000 	ldr.w	r2, [r9]
 8017358:	4461      	add	r1, ip
 801735a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801735e:	fb0a c20b 	mla	r2, sl, fp, ip
 8017362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017366:	b289      	uxth	r1, r1
 8017368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801736c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017370:	f849 1b04 	str.w	r1, [r9], #4
 8017374:	d8e2      	bhi.n	801733c <__multiply+0xb0>
 8017376:	9a01      	ldr	r2, [sp, #4]
 8017378:	f845 c002 	str.w	ip, [r5, r2]
 801737c:	9a03      	ldr	r2, [sp, #12]
 801737e:	3304      	adds	r3, #4
 8017380:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017384:	f1b9 0f00 	cmp.w	r9, #0
 8017388:	d020      	beq.n	80173cc <__multiply+0x140>
 801738a:	6829      	ldr	r1, [r5, #0]
 801738c:	f104 0c14 	add.w	ip, r4, #20
 8017390:	46ae      	mov	lr, r5
 8017392:	f04f 0a00 	mov.w	sl, #0
 8017396:	f8bc b000 	ldrh.w	fp, [ip]
 801739a:	b289      	uxth	r1, r1
 801739c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80173a0:	fb09 220b 	mla	r2, r9, fp, r2
 80173a4:	4492      	add	sl, r2
 80173a6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80173aa:	f84e 1b04 	str.w	r1, [lr], #4
 80173ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80173b2:	f8be 1000 	ldrh.w	r1, [lr]
 80173b6:	0c12      	lsrs	r2, r2, #16
 80173b8:	4567      	cmp	r7, ip
 80173ba:	fb09 1102 	mla	r1, r9, r2, r1
 80173be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80173c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80173c6:	d8e6      	bhi.n	8017396 <__multiply+0x10a>
 80173c8:	9a01      	ldr	r2, [sp, #4]
 80173ca:	50a9      	str	r1, [r5, r2]
 80173cc:	3504      	adds	r5, #4
 80173ce:	e79a      	b.n	8017306 <__multiply+0x7a>
 80173d0:	3e01      	subs	r6, #1
 80173d2:	e79c      	b.n	801730e <__multiply+0x82>
 80173d4:	0818ae00 	.word	0x0818ae00
 80173d8:	0818aef0 	.word	0x0818aef0

080173dc <__pow5mult>:
 80173dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173e0:	4615      	mov	r5, r2
 80173e2:	f012 0203 	ands.w	r2, r2, #3
 80173e6:	4606      	mov	r6, r0
 80173e8:	460f      	mov	r7, r1
 80173ea:	d007      	beq.n	80173fc <__pow5mult+0x20>
 80173ec:	3a01      	subs	r2, #1
 80173ee:	4c25      	ldr	r4, [pc, #148]	; (8017484 <__pow5mult+0xa8>)
 80173f0:	2300      	movs	r3, #0
 80173f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80173f6:	f7ff fe51 	bl	801709c <__multadd>
 80173fa:	4607      	mov	r7, r0
 80173fc:	10ad      	asrs	r5, r5, #2
 80173fe:	d03d      	beq.n	801747c <__pow5mult+0xa0>
 8017400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017402:	b97c      	cbnz	r4, 8017424 <__pow5mult+0x48>
 8017404:	2010      	movs	r0, #16
 8017406:	f7fc f9ab 	bl	8013760 <malloc>
 801740a:	4602      	mov	r2, r0
 801740c:	6270      	str	r0, [r6, #36]	; 0x24
 801740e:	b928      	cbnz	r0, 801741c <__pow5mult+0x40>
 8017410:	4b1d      	ldr	r3, [pc, #116]	; (8017488 <__pow5mult+0xac>)
 8017412:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017416:	481d      	ldr	r0, [pc, #116]	; (801748c <__pow5mult+0xb0>)
 8017418:	f000 fdd8 	bl	8017fcc <__assert_func>
 801741c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017420:	6004      	str	r4, [r0, #0]
 8017422:	60c4      	str	r4, [r0, #12]
 8017424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801742c:	b94c      	cbnz	r4, 8017442 <__pow5mult+0x66>
 801742e:	f240 2171 	movw	r1, #625	; 0x271
 8017432:	4630      	mov	r0, r6
 8017434:	f7ff ff14 	bl	8017260 <__i2b>
 8017438:	2300      	movs	r3, #0
 801743a:	4604      	mov	r4, r0
 801743c:	f8c8 0008 	str.w	r0, [r8, #8]
 8017440:	6003      	str	r3, [r0, #0]
 8017442:	f04f 0900 	mov.w	r9, #0
 8017446:	07eb      	lsls	r3, r5, #31
 8017448:	d50a      	bpl.n	8017460 <__pow5mult+0x84>
 801744a:	4639      	mov	r1, r7
 801744c:	4622      	mov	r2, r4
 801744e:	4630      	mov	r0, r6
 8017450:	f7ff ff1c 	bl	801728c <__multiply>
 8017454:	4680      	mov	r8, r0
 8017456:	4639      	mov	r1, r7
 8017458:	4630      	mov	r0, r6
 801745a:	4647      	mov	r7, r8
 801745c:	f7ff fdfc 	bl	8017058 <_Bfree>
 8017460:	106d      	asrs	r5, r5, #1
 8017462:	d00b      	beq.n	801747c <__pow5mult+0xa0>
 8017464:	6820      	ldr	r0, [r4, #0]
 8017466:	b938      	cbnz	r0, 8017478 <__pow5mult+0x9c>
 8017468:	4622      	mov	r2, r4
 801746a:	4621      	mov	r1, r4
 801746c:	4630      	mov	r0, r6
 801746e:	f7ff ff0d 	bl	801728c <__multiply>
 8017472:	6020      	str	r0, [r4, #0]
 8017474:	f8c0 9000 	str.w	r9, [r0]
 8017478:	4604      	mov	r4, r0
 801747a:	e7e4      	b.n	8017446 <__pow5mult+0x6a>
 801747c:	4638      	mov	r0, r7
 801747e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017482:	bf00      	nop
 8017484:	0818b040 	.word	0x0818b040
 8017488:	0818ad8e 	.word	0x0818ad8e
 801748c:	0818aef0 	.word	0x0818aef0

08017490 <__lshift>:
 8017490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017494:	460c      	mov	r4, r1
 8017496:	4607      	mov	r7, r0
 8017498:	4691      	mov	r9, r2
 801749a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801749e:	6923      	ldr	r3, [r4, #16]
 80174a0:	6849      	ldr	r1, [r1, #4]
 80174a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80174a6:	68a3      	ldr	r3, [r4, #8]
 80174a8:	f108 0601 	add.w	r6, r8, #1
 80174ac:	42b3      	cmp	r3, r6
 80174ae:	db0b      	blt.n	80174c8 <__lshift+0x38>
 80174b0:	4638      	mov	r0, r7
 80174b2:	f7ff fd91 	bl	8016fd8 <_Balloc>
 80174b6:	4605      	mov	r5, r0
 80174b8:	b948      	cbnz	r0, 80174ce <__lshift+0x3e>
 80174ba:	4602      	mov	r2, r0
 80174bc:	4b2a      	ldr	r3, [pc, #168]	; (8017568 <__lshift+0xd8>)
 80174be:	f240 11d9 	movw	r1, #473	; 0x1d9
 80174c2:	482a      	ldr	r0, [pc, #168]	; (801756c <__lshift+0xdc>)
 80174c4:	f000 fd82 	bl	8017fcc <__assert_func>
 80174c8:	3101      	adds	r1, #1
 80174ca:	005b      	lsls	r3, r3, #1
 80174cc:	e7ee      	b.n	80174ac <__lshift+0x1c>
 80174ce:	2300      	movs	r3, #0
 80174d0:	f100 0114 	add.w	r1, r0, #20
 80174d4:	f100 0210 	add.w	r2, r0, #16
 80174d8:	4618      	mov	r0, r3
 80174da:	4553      	cmp	r3, sl
 80174dc:	db37      	blt.n	801754e <__lshift+0xbe>
 80174de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80174e2:	f104 0314 	add.w	r3, r4, #20
 80174e6:	6920      	ldr	r0, [r4, #16]
 80174e8:	f019 091f 	ands.w	r9, r9, #31
 80174ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80174f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80174f4:	d02f      	beq.n	8017556 <__lshift+0xc6>
 80174f6:	f1c9 0e20 	rsb	lr, r9, #32
 80174fa:	468a      	mov	sl, r1
 80174fc:	f04f 0c00 	mov.w	ip, #0
 8017500:	681a      	ldr	r2, [r3, #0]
 8017502:	fa02 f209 	lsl.w	r2, r2, r9
 8017506:	ea42 020c 	orr.w	r2, r2, ip
 801750a:	f84a 2b04 	str.w	r2, [sl], #4
 801750e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017512:	4298      	cmp	r0, r3
 8017514:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017518:	d8f2      	bhi.n	8017500 <__lshift+0x70>
 801751a:	1b03      	subs	r3, r0, r4
 801751c:	f104 0215 	add.w	r2, r4, #21
 8017520:	3b15      	subs	r3, #21
 8017522:	f023 0303 	bic.w	r3, r3, #3
 8017526:	3304      	adds	r3, #4
 8017528:	4290      	cmp	r0, r2
 801752a:	bf38      	it	cc
 801752c:	2304      	movcc	r3, #4
 801752e:	f841 c003 	str.w	ip, [r1, r3]
 8017532:	f1bc 0f00 	cmp.w	ip, #0
 8017536:	d001      	beq.n	801753c <__lshift+0xac>
 8017538:	f108 0602 	add.w	r6, r8, #2
 801753c:	3e01      	subs	r6, #1
 801753e:	4638      	mov	r0, r7
 8017540:	4621      	mov	r1, r4
 8017542:	612e      	str	r6, [r5, #16]
 8017544:	f7ff fd88 	bl	8017058 <_Bfree>
 8017548:	4628      	mov	r0, r5
 801754a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801754e:	3301      	adds	r3, #1
 8017550:	f842 0f04 	str.w	r0, [r2, #4]!
 8017554:	e7c1      	b.n	80174da <__lshift+0x4a>
 8017556:	3904      	subs	r1, #4
 8017558:	f853 2b04 	ldr.w	r2, [r3], #4
 801755c:	4298      	cmp	r0, r3
 801755e:	f841 2f04 	str.w	r2, [r1, #4]!
 8017562:	d8f9      	bhi.n	8017558 <__lshift+0xc8>
 8017564:	e7ea      	b.n	801753c <__lshift+0xac>
 8017566:	bf00      	nop
 8017568:	0818ae00 	.word	0x0818ae00
 801756c:	0818aef0 	.word	0x0818aef0

08017570 <__mcmp>:
 8017570:	6902      	ldr	r2, [r0, #16]
 8017572:	b530      	push	{r4, r5, lr}
 8017574:	690c      	ldr	r4, [r1, #16]
 8017576:	1b12      	subs	r2, r2, r4
 8017578:	d10e      	bne.n	8017598 <__mcmp+0x28>
 801757a:	f100 0314 	add.w	r3, r0, #20
 801757e:	3114      	adds	r1, #20
 8017580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801758c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017590:	42a5      	cmp	r5, r4
 8017592:	d003      	beq.n	801759c <__mcmp+0x2c>
 8017594:	d305      	bcc.n	80175a2 <__mcmp+0x32>
 8017596:	2201      	movs	r2, #1
 8017598:	4610      	mov	r0, r2
 801759a:	bd30      	pop	{r4, r5, pc}
 801759c:	4283      	cmp	r3, r0
 801759e:	d3f3      	bcc.n	8017588 <__mcmp+0x18>
 80175a0:	e7fa      	b.n	8017598 <__mcmp+0x28>
 80175a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80175a6:	e7f7      	b.n	8017598 <__mcmp+0x28>

080175a8 <__mdiff>:
 80175a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175ac:	460c      	mov	r4, r1
 80175ae:	4606      	mov	r6, r0
 80175b0:	4611      	mov	r1, r2
 80175b2:	4692      	mov	sl, r2
 80175b4:	4620      	mov	r0, r4
 80175b6:	f7ff ffdb 	bl	8017570 <__mcmp>
 80175ba:	1e05      	subs	r5, r0, #0
 80175bc:	d110      	bne.n	80175e0 <__mdiff+0x38>
 80175be:	4629      	mov	r1, r5
 80175c0:	4630      	mov	r0, r6
 80175c2:	f7ff fd09 	bl	8016fd8 <_Balloc>
 80175c6:	b930      	cbnz	r0, 80175d6 <__mdiff+0x2e>
 80175c8:	4b3d      	ldr	r3, [pc, #244]	; (80176c0 <__mdiff+0x118>)
 80175ca:	4602      	mov	r2, r0
 80175cc:	f240 2132 	movw	r1, #562	; 0x232
 80175d0:	483c      	ldr	r0, [pc, #240]	; (80176c4 <__mdiff+0x11c>)
 80175d2:	f000 fcfb 	bl	8017fcc <__assert_func>
 80175d6:	2301      	movs	r3, #1
 80175d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80175dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e0:	bfa4      	itt	ge
 80175e2:	4653      	movge	r3, sl
 80175e4:	46a2      	movge	sl, r4
 80175e6:	4630      	mov	r0, r6
 80175e8:	bfa8      	it	ge
 80175ea:	2500      	movge	r5, #0
 80175ec:	f8da 1004 	ldr.w	r1, [sl, #4]
 80175f0:	bfac      	ite	ge
 80175f2:	461c      	movge	r4, r3
 80175f4:	2501      	movlt	r5, #1
 80175f6:	f7ff fcef 	bl	8016fd8 <_Balloc>
 80175fa:	b920      	cbnz	r0, 8017606 <__mdiff+0x5e>
 80175fc:	4b30      	ldr	r3, [pc, #192]	; (80176c0 <__mdiff+0x118>)
 80175fe:	4602      	mov	r2, r0
 8017600:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017604:	e7e4      	b.n	80175d0 <__mdiff+0x28>
 8017606:	f8da 7010 	ldr.w	r7, [sl, #16]
 801760a:	f104 0914 	add.w	r9, r4, #20
 801760e:	6926      	ldr	r6, [r4, #16]
 8017610:	f100 0814 	add.w	r8, r0, #20
 8017614:	60c5      	str	r5, [r0, #12]
 8017616:	f10a 0514 	add.w	r5, sl, #20
 801761a:	f10a 0210 	add.w	r2, sl, #16
 801761e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017622:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8017626:	46c2      	mov	sl, r8
 8017628:	f04f 0c00 	mov.w	ip, #0
 801762c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017630:	f859 3b04 	ldr.w	r3, [r9], #4
 8017634:	fa1f f18b 	uxth.w	r1, fp
 8017638:	454e      	cmp	r6, r9
 801763a:	448c      	add	ip, r1
 801763c:	b299      	uxth	r1, r3
 801763e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8017642:	ebac 0101 	sub.w	r1, ip, r1
 8017646:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801764a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801764e:	b289      	uxth	r1, r1
 8017650:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8017654:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017658:	f84a 3b04 	str.w	r3, [sl], #4
 801765c:	d8e6      	bhi.n	801762c <__mdiff+0x84>
 801765e:	1b33      	subs	r3, r6, r4
 8017660:	3415      	adds	r4, #21
 8017662:	3b15      	subs	r3, #21
 8017664:	f023 0303 	bic.w	r3, r3, #3
 8017668:	3304      	adds	r3, #4
 801766a:	42a6      	cmp	r6, r4
 801766c:	bf38      	it	cc
 801766e:	2304      	movcc	r3, #4
 8017670:	441d      	add	r5, r3
 8017672:	4443      	add	r3, r8
 8017674:	462c      	mov	r4, r5
 8017676:	461e      	mov	r6, r3
 8017678:	4574      	cmp	r4, lr
 801767a:	d30e      	bcc.n	801769a <__mdiff+0xf2>
 801767c:	f10e 0203 	add.w	r2, lr, #3
 8017680:	1b52      	subs	r2, r2, r5
 8017682:	3d03      	subs	r5, #3
 8017684:	f022 0203 	bic.w	r2, r2, #3
 8017688:	45ae      	cmp	lr, r5
 801768a:	bf38      	it	cc
 801768c:	2200      	movcc	r2, #0
 801768e:	441a      	add	r2, r3
 8017690:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017694:	b18b      	cbz	r3, 80176ba <__mdiff+0x112>
 8017696:	6107      	str	r7, [r0, #16]
 8017698:	e7a0      	b.n	80175dc <__mdiff+0x34>
 801769a:	f854 8b04 	ldr.w	r8, [r4], #4
 801769e:	fa1f f288 	uxth.w	r2, r8
 80176a2:	4462      	add	r2, ip
 80176a4:	1411      	asrs	r1, r2, #16
 80176a6:	b292      	uxth	r2, r2
 80176a8:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 80176ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80176b0:	ea4f 4c21 	mov.w	ip, r1, asr #16
 80176b4:	f846 2b04 	str.w	r2, [r6], #4
 80176b8:	e7de      	b.n	8017678 <__mdiff+0xd0>
 80176ba:	3f01      	subs	r7, #1
 80176bc:	e7e8      	b.n	8017690 <__mdiff+0xe8>
 80176be:	bf00      	nop
 80176c0:	0818ae00 	.word	0x0818ae00
 80176c4:	0818aef0 	.word	0x0818aef0

080176c8 <__ulp>:
 80176c8:	b082      	sub	sp, #8
 80176ca:	4913      	ldr	r1, [pc, #76]	; (8017718 <__ulp+0x50>)
 80176cc:	ed8d 0b00 	vstr	d0, [sp]
 80176d0:	9b01      	ldr	r3, [sp, #4]
 80176d2:	4019      	ands	r1, r3
 80176d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80176d8:	2900      	cmp	r1, #0
 80176da:	dd05      	ble.n	80176e8 <__ulp+0x20>
 80176dc:	2200      	movs	r2, #0
 80176de:	460b      	mov	r3, r1
 80176e0:	ec43 2b10 	vmov	d0, r2, r3
 80176e4:	b002      	add	sp, #8
 80176e6:	4770      	bx	lr
 80176e8:	4249      	negs	r1, r1
 80176ea:	2200      	movs	r2, #0
 80176ec:	2300      	movs	r3, #0
 80176ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80176f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80176f6:	da04      	bge.n	8017702 <__ulp+0x3a>
 80176f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80176fc:	fa41 f300 	asr.w	r3, r1, r0
 8017700:	e7ee      	b.n	80176e0 <__ulp+0x18>
 8017702:	f1a0 0114 	sub.w	r1, r0, #20
 8017706:	291e      	cmp	r1, #30
 8017708:	bfd6      	itet	le
 801770a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801770e:	2101      	movgt	r1, #1
 8017710:	fa20 f101 	lsrle.w	r1, r0, r1
 8017714:	460a      	mov	r2, r1
 8017716:	e7e3      	b.n	80176e0 <__ulp+0x18>
 8017718:	7ff00000 	.word	0x7ff00000

0801771c <__b2d>:
 801771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801771e:	6905      	ldr	r5, [r0, #16]
 8017720:	f100 0714 	add.w	r7, r0, #20
 8017724:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017728:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801772c:	1f2e      	subs	r6, r5, #4
 801772e:	4620      	mov	r0, r4
 8017730:	f7ff fd46 	bl	80171c0 <__hi0bits>
 8017734:	f1c0 0320 	rsb	r3, r0, #32
 8017738:	280a      	cmp	r0, #10
 801773a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80177b8 <__b2d+0x9c>
 801773e:	600b      	str	r3, [r1, #0]
 8017740:	dc15      	bgt.n	801776e <__b2d+0x52>
 8017742:	f1c0 0e0b 	rsb	lr, r0, #11
 8017746:	42b7      	cmp	r7, r6
 8017748:	f100 0015 	add.w	r0, r0, #21
 801774c:	fa24 f10e 	lsr.w	r1, r4, lr
 8017750:	fa04 f000 	lsl.w	r0, r4, r0
 8017754:	ea41 030c 	orr.w	r3, r1, ip
 8017758:	bf34      	ite	cc
 801775a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801775e:	2100      	movcs	r1, #0
 8017760:	fa21 f10e 	lsr.w	r1, r1, lr
 8017764:	ea40 0201 	orr.w	r2, r0, r1
 8017768:	ec43 2b10 	vmov	d0, r2, r3
 801776c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801776e:	42b7      	cmp	r7, r6
 8017770:	bf3a      	itte	cc
 8017772:	f1a5 0608 	subcc.w	r6, r5, #8
 8017776:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801777a:	2100      	movcs	r1, #0
 801777c:	380b      	subs	r0, #11
 801777e:	d017      	beq.n	80177b0 <__b2d+0x94>
 8017780:	f1c0 0c20 	rsb	ip, r0, #32
 8017784:	fa04 f500 	lsl.w	r5, r4, r0
 8017788:	42be      	cmp	r6, r7
 801778a:	fa01 f000 	lsl.w	r0, r1, r0
 801778e:	fa21 f40c 	lsr.w	r4, r1, ip
 8017792:	ea45 0504 	orr.w	r5, r5, r4
 8017796:	bf8c      	ite	hi
 8017798:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801779c:	2400      	movls	r4, #0
 801779e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80177a2:	fa24 f40c 	lsr.w	r4, r4, ip
 80177a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80177aa:	ea40 0204 	orr.w	r2, r0, r4
 80177ae:	e7db      	b.n	8017768 <__b2d+0x4c>
 80177b0:	ea44 030c 	orr.w	r3, r4, ip
 80177b4:	460a      	mov	r2, r1
 80177b6:	e7d7      	b.n	8017768 <__b2d+0x4c>
 80177b8:	3ff00000 	.word	0x3ff00000

080177bc <__d2b>:
 80177bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80177c0:	4689      	mov	r9, r1
 80177c2:	2101      	movs	r1, #1
 80177c4:	4690      	mov	r8, r2
 80177c6:	ec57 6b10 	vmov	r6, r7, d0
 80177ca:	f7ff fc05 	bl	8016fd8 <_Balloc>
 80177ce:	4604      	mov	r4, r0
 80177d0:	b930      	cbnz	r0, 80177e0 <__d2b+0x24>
 80177d2:	4602      	mov	r2, r0
 80177d4:	4b25      	ldr	r3, [pc, #148]	; (801786c <__d2b+0xb0>)
 80177d6:	f240 310a 	movw	r1, #778	; 0x30a
 80177da:	4825      	ldr	r0, [pc, #148]	; (8017870 <__d2b+0xb4>)
 80177dc:	f000 fbf6 	bl	8017fcc <__assert_func>
 80177e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80177e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80177e8:	bb35      	cbnz	r5, 8017838 <__d2b+0x7c>
 80177ea:	2e00      	cmp	r6, #0
 80177ec:	9301      	str	r3, [sp, #4]
 80177ee:	d028      	beq.n	8017842 <__d2b+0x86>
 80177f0:	4668      	mov	r0, sp
 80177f2:	9600      	str	r6, [sp, #0]
 80177f4:	f7ff fd04 	bl	8017200 <__lo0bits>
 80177f8:	9900      	ldr	r1, [sp, #0]
 80177fa:	b300      	cbz	r0, 801783e <__d2b+0x82>
 80177fc:	9a01      	ldr	r2, [sp, #4]
 80177fe:	f1c0 0320 	rsb	r3, r0, #32
 8017802:	fa02 f303 	lsl.w	r3, r2, r3
 8017806:	40c2      	lsrs	r2, r0
 8017808:	430b      	orrs	r3, r1
 801780a:	9201      	str	r2, [sp, #4]
 801780c:	6163      	str	r3, [r4, #20]
 801780e:	9b01      	ldr	r3, [sp, #4]
 8017810:	2b00      	cmp	r3, #0
 8017812:	61a3      	str	r3, [r4, #24]
 8017814:	bf14      	ite	ne
 8017816:	2202      	movne	r2, #2
 8017818:	2201      	moveq	r2, #1
 801781a:	6122      	str	r2, [r4, #16]
 801781c:	b1d5      	cbz	r5, 8017854 <__d2b+0x98>
 801781e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017822:	4405      	add	r5, r0
 8017824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017828:	f8c9 5000 	str.w	r5, [r9]
 801782c:	f8c8 0000 	str.w	r0, [r8]
 8017830:	4620      	mov	r0, r4
 8017832:	b003      	add	sp, #12
 8017834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801783c:	e7d5      	b.n	80177ea <__d2b+0x2e>
 801783e:	6161      	str	r1, [r4, #20]
 8017840:	e7e5      	b.n	801780e <__d2b+0x52>
 8017842:	a801      	add	r0, sp, #4
 8017844:	f7ff fcdc 	bl	8017200 <__lo0bits>
 8017848:	9b01      	ldr	r3, [sp, #4]
 801784a:	2201      	movs	r2, #1
 801784c:	3020      	adds	r0, #32
 801784e:	6163      	str	r3, [r4, #20]
 8017850:	6122      	str	r2, [r4, #16]
 8017852:	e7e3      	b.n	801781c <__d2b+0x60>
 8017854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017858:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801785c:	f8c9 0000 	str.w	r0, [r9]
 8017860:	6918      	ldr	r0, [r3, #16]
 8017862:	f7ff fcad 	bl	80171c0 <__hi0bits>
 8017866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801786a:	e7df      	b.n	801782c <__d2b+0x70>
 801786c:	0818ae00 	.word	0x0818ae00
 8017870:	0818aef0 	.word	0x0818aef0

08017874 <__ratio>:
 8017874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017878:	4688      	mov	r8, r1
 801787a:	4681      	mov	r9, r0
 801787c:	4669      	mov	r1, sp
 801787e:	f7ff ff4d 	bl	801771c <__b2d>
 8017882:	a901      	add	r1, sp, #4
 8017884:	4640      	mov	r0, r8
 8017886:	ec55 4b10 	vmov	r4, r5, d0
 801788a:	f7ff ff47 	bl	801771c <__b2d>
 801788e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017892:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017896:	462f      	mov	r7, r5
 8017898:	eba3 0c02 	sub.w	ip, r3, r2
 801789c:	e9dd 3200 	ldrd	r3, r2, [sp]
 80178a0:	ec51 0b10 	vmov	r0, r1, d0
 80178a4:	1a9b      	subs	r3, r3, r2
 80178a6:	468b      	mov	fp, r1
 80178a8:	4620      	mov	r0, r4
 80178aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	bfd5      	itete	le
 80178b2:	460a      	movle	r2, r1
 80178b4:	462a      	movgt	r2, r5
 80178b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80178ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80178be:	bfd8      	it	le
 80178c0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80178c4:	ee10 2a10 	vmov	r2, s0
 80178c8:	4639      	mov	r1, r7
 80178ca:	465b      	mov	r3, fp
 80178cc:	f7e8 ffcc 	bl	8000868 <__aeabi_ddiv>
 80178d0:	ec41 0b10 	vmov	d0, r0, r1
 80178d4:	b003      	add	sp, #12
 80178d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080178da <__copybits>:
 80178da:	3901      	subs	r1, #1
 80178dc:	f102 0314 	add.w	r3, r2, #20
 80178e0:	1149      	asrs	r1, r1, #5
 80178e2:	b570      	push	{r4, r5, r6, lr}
 80178e4:	3101      	adds	r1, #1
 80178e6:	6914      	ldr	r4, [r2, #16]
 80178e8:	1f05      	subs	r5, r0, #4
 80178ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80178ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80178f2:	42a3      	cmp	r3, r4
 80178f4:	d30c      	bcc.n	8017910 <__copybits+0x36>
 80178f6:	1aa3      	subs	r3, r4, r2
 80178f8:	3211      	adds	r2, #17
 80178fa:	3b11      	subs	r3, #17
 80178fc:	f023 0303 	bic.w	r3, r3, #3
 8017900:	42a2      	cmp	r2, r4
 8017902:	bf88      	it	hi
 8017904:	2300      	movhi	r3, #0
 8017906:	4418      	add	r0, r3
 8017908:	2300      	movs	r3, #0
 801790a:	4288      	cmp	r0, r1
 801790c:	d305      	bcc.n	801791a <__copybits+0x40>
 801790e:	bd70      	pop	{r4, r5, r6, pc}
 8017910:	f853 6b04 	ldr.w	r6, [r3], #4
 8017914:	f845 6f04 	str.w	r6, [r5, #4]!
 8017918:	e7eb      	b.n	80178f2 <__copybits+0x18>
 801791a:	f840 3b04 	str.w	r3, [r0], #4
 801791e:	e7f4      	b.n	801790a <__copybits+0x30>

08017920 <__any_on>:
 8017920:	f100 0214 	add.w	r2, r0, #20
 8017924:	114b      	asrs	r3, r1, #5
 8017926:	6900      	ldr	r0, [r0, #16]
 8017928:	4298      	cmp	r0, r3
 801792a:	b510      	push	{r4, lr}
 801792c:	db11      	blt.n	8017952 <__any_on+0x32>
 801792e:	dd0a      	ble.n	8017946 <__any_on+0x26>
 8017930:	f011 011f 	ands.w	r1, r1, #31
 8017934:	d007      	beq.n	8017946 <__any_on+0x26>
 8017936:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801793a:	fa24 f001 	lsr.w	r0, r4, r1
 801793e:	fa00 f101 	lsl.w	r1, r0, r1
 8017942:	428c      	cmp	r4, r1
 8017944:	d10b      	bne.n	801795e <__any_on+0x3e>
 8017946:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801794a:	4293      	cmp	r3, r2
 801794c:	d803      	bhi.n	8017956 <__any_on+0x36>
 801794e:	2000      	movs	r0, #0
 8017950:	bd10      	pop	{r4, pc}
 8017952:	4603      	mov	r3, r0
 8017954:	e7f7      	b.n	8017946 <__any_on+0x26>
 8017956:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801795a:	2900      	cmp	r1, #0
 801795c:	d0f5      	beq.n	801794a <__any_on+0x2a>
 801795e:	2001      	movs	r0, #1
 8017960:	e7f6      	b.n	8017950 <__any_on+0x30>

08017962 <_calloc_r>:
 8017962:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017964:	fba1 2402 	umull	r2, r4, r1, r2
 8017968:	b94c      	cbnz	r4, 801797e <_calloc_r+0x1c>
 801796a:	4611      	mov	r1, r2
 801796c:	9201      	str	r2, [sp, #4]
 801796e:	f7fb ff99 	bl	80138a4 <_malloc_r>
 8017972:	9a01      	ldr	r2, [sp, #4]
 8017974:	4605      	mov	r5, r0
 8017976:	b930      	cbnz	r0, 8017986 <_calloc_r+0x24>
 8017978:	4628      	mov	r0, r5
 801797a:	b003      	add	sp, #12
 801797c:	bd30      	pop	{r4, r5, pc}
 801797e:	220c      	movs	r2, #12
 8017980:	2500      	movs	r5, #0
 8017982:	6002      	str	r2, [r0, #0]
 8017984:	e7f8      	b.n	8017978 <_calloc_r+0x16>
 8017986:	4621      	mov	r1, r4
 8017988:	f7fb ff17 	bl	80137ba <memset>
 801798c:	e7f4      	b.n	8017978 <_calloc_r+0x16>

0801798e <__ssputs_r>:
 801798e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017992:	688e      	ldr	r6, [r1, #8]
 8017994:	4682      	mov	sl, r0
 8017996:	460c      	mov	r4, r1
 8017998:	4690      	mov	r8, r2
 801799a:	429e      	cmp	r6, r3
 801799c:	461f      	mov	r7, r3
 801799e:	d838      	bhi.n	8017a12 <__ssputs_r+0x84>
 80179a0:	898a      	ldrh	r2, [r1, #12]
 80179a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80179a6:	d032      	beq.n	8017a0e <__ssputs_r+0x80>
 80179a8:	6825      	ldr	r5, [r4, #0]
 80179aa:	3301      	adds	r3, #1
 80179ac:	6909      	ldr	r1, [r1, #16]
 80179ae:	eba5 0901 	sub.w	r9, r5, r1
 80179b2:	6965      	ldr	r5, [r4, #20]
 80179b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179b8:	444b      	add	r3, r9
 80179ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80179be:	106d      	asrs	r5, r5, #1
 80179c0:	429d      	cmp	r5, r3
 80179c2:	bf38      	it	cc
 80179c4:	461d      	movcc	r5, r3
 80179c6:	0553      	lsls	r3, r2, #21
 80179c8:	d531      	bpl.n	8017a2e <__ssputs_r+0xa0>
 80179ca:	4629      	mov	r1, r5
 80179cc:	f7fb ff6a 	bl	80138a4 <_malloc_r>
 80179d0:	4606      	mov	r6, r0
 80179d2:	b950      	cbnz	r0, 80179ea <__ssputs_r+0x5c>
 80179d4:	230c      	movs	r3, #12
 80179d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179da:	f8ca 3000 	str.w	r3, [sl]
 80179de:	89a3      	ldrh	r3, [r4, #12]
 80179e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179e4:	81a3      	strh	r3, [r4, #12]
 80179e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179ea:	464a      	mov	r2, r9
 80179ec:	6921      	ldr	r1, [r4, #16]
 80179ee:	f7fb fed7 	bl	80137a0 <memcpy>
 80179f2:	89a3      	ldrh	r3, [r4, #12]
 80179f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80179f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179fc:	81a3      	strh	r3, [r4, #12]
 80179fe:	6126      	str	r6, [r4, #16]
 8017a00:	444e      	add	r6, r9
 8017a02:	6165      	str	r5, [r4, #20]
 8017a04:	eba5 0509 	sub.w	r5, r5, r9
 8017a08:	6026      	str	r6, [r4, #0]
 8017a0a:	463e      	mov	r6, r7
 8017a0c:	60a5      	str	r5, [r4, #8]
 8017a0e:	42be      	cmp	r6, r7
 8017a10:	d900      	bls.n	8017a14 <__ssputs_r+0x86>
 8017a12:	463e      	mov	r6, r7
 8017a14:	4632      	mov	r2, r6
 8017a16:	4641      	mov	r1, r8
 8017a18:	6820      	ldr	r0, [r4, #0]
 8017a1a:	f000 fb4b 	bl	80180b4 <memmove>
 8017a1e:	68a3      	ldr	r3, [r4, #8]
 8017a20:	2000      	movs	r0, #0
 8017a22:	1b9b      	subs	r3, r3, r6
 8017a24:	60a3      	str	r3, [r4, #8]
 8017a26:	6823      	ldr	r3, [r4, #0]
 8017a28:	4433      	add	r3, r6
 8017a2a:	6023      	str	r3, [r4, #0]
 8017a2c:	e7db      	b.n	80179e6 <__ssputs_r+0x58>
 8017a2e:	462a      	mov	r2, r5
 8017a30:	f000 fb5a 	bl	80180e8 <_realloc_r>
 8017a34:	4606      	mov	r6, r0
 8017a36:	2800      	cmp	r0, #0
 8017a38:	d1e1      	bne.n	80179fe <__ssputs_r+0x70>
 8017a3a:	6921      	ldr	r1, [r4, #16]
 8017a3c:	4650      	mov	r0, sl
 8017a3e:	f7fb fec5 	bl	80137cc <_free_r>
 8017a42:	e7c7      	b.n	80179d4 <__ssputs_r+0x46>

08017a44 <_svfiprintf_r>:
 8017a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a48:	4698      	mov	r8, r3
 8017a4a:	898b      	ldrh	r3, [r1, #12]
 8017a4c:	b09d      	sub	sp, #116	; 0x74
 8017a4e:	4607      	mov	r7, r0
 8017a50:	061b      	lsls	r3, r3, #24
 8017a52:	460d      	mov	r5, r1
 8017a54:	4614      	mov	r4, r2
 8017a56:	d50e      	bpl.n	8017a76 <_svfiprintf_r+0x32>
 8017a58:	690b      	ldr	r3, [r1, #16]
 8017a5a:	b963      	cbnz	r3, 8017a76 <_svfiprintf_r+0x32>
 8017a5c:	2140      	movs	r1, #64	; 0x40
 8017a5e:	f7fb ff21 	bl	80138a4 <_malloc_r>
 8017a62:	6028      	str	r0, [r5, #0]
 8017a64:	6128      	str	r0, [r5, #16]
 8017a66:	b920      	cbnz	r0, 8017a72 <_svfiprintf_r+0x2e>
 8017a68:	230c      	movs	r3, #12
 8017a6a:	603b      	str	r3, [r7, #0]
 8017a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a70:	e0d1      	b.n	8017c16 <_svfiprintf_r+0x1d2>
 8017a72:	2340      	movs	r3, #64	; 0x40
 8017a74:	616b      	str	r3, [r5, #20]
 8017a76:	2300      	movs	r3, #0
 8017a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a7c:	f04f 0901 	mov.w	r9, #1
 8017a80:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8017c30 <_svfiprintf_r+0x1ec>
 8017a84:	9309      	str	r3, [sp, #36]	; 0x24
 8017a86:	2320      	movs	r3, #32
 8017a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a8c:	2330      	movs	r3, #48	; 0x30
 8017a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a92:	4623      	mov	r3, r4
 8017a94:	469a      	mov	sl, r3
 8017a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a9a:	b10a      	cbz	r2, 8017aa0 <_svfiprintf_r+0x5c>
 8017a9c:	2a25      	cmp	r2, #37	; 0x25
 8017a9e:	d1f9      	bne.n	8017a94 <_svfiprintf_r+0x50>
 8017aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8017aa4:	d00b      	beq.n	8017abe <_svfiprintf_r+0x7a>
 8017aa6:	465b      	mov	r3, fp
 8017aa8:	4622      	mov	r2, r4
 8017aaa:	4629      	mov	r1, r5
 8017aac:	4638      	mov	r0, r7
 8017aae:	f7ff ff6e 	bl	801798e <__ssputs_r>
 8017ab2:	3001      	adds	r0, #1
 8017ab4:	f000 80aa 	beq.w	8017c0c <_svfiprintf_r+0x1c8>
 8017ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017aba:	445a      	add	r2, fp
 8017abc:	9209      	str	r2, [sp, #36]	; 0x24
 8017abe:	f89a 3000 	ldrb.w	r3, [sl]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	f000 80a2 	beq.w	8017c0c <_svfiprintf_r+0x1c8>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ace:	f10a 0a01 	add.w	sl, sl, #1
 8017ad2:	9304      	str	r3, [sp, #16]
 8017ad4:	9307      	str	r3, [sp, #28]
 8017ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ada:	931a      	str	r3, [sp, #104]	; 0x68
 8017adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ae0:	4654      	mov	r4, sl
 8017ae2:	2205      	movs	r2, #5
 8017ae4:	4852      	ldr	r0, [pc, #328]	; (8017c30 <_svfiprintf_r+0x1ec>)
 8017ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017aea:	f7ff fa5b 	bl	8016fa4 <memchr>
 8017aee:	9a04      	ldr	r2, [sp, #16]
 8017af0:	b9d8      	cbnz	r0, 8017b2a <_svfiprintf_r+0xe6>
 8017af2:	06d0      	lsls	r0, r2, #27
 8017af4:	bf44      	itt	mi
 8017af6:	2320      	movmi	r3, #32
 8017af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017afc:	0711      	lsls	r1, r2, #28
 8017afe:	bf44      	itt	mi
 8017b00:	232b      	movmi	r3, #43	; 0x2b
 8017b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b06:	f89a 3000 	ldrb.w	r3, [sl]
 8017b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8017b0c:	d015      	beq.n	8017b3a <_svfiprintf_r+0xf6>
 8017b0e:	9a07      	ldr	r2, [sp, #28]
 8017b10:	4654      	mov	r4, sl
 8017b12:	2000      	movs	r0, #0
 8017b14:	f04f 0c0a 	mov.w	ip, #10
 8017b18:	4621      	mov	r1, r4
 8017b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b1e:	3b30      	subs	r3, #48	; 0x30
 8017b20:	2b09      	cmp	r3, #9
 8017b22:	d94e      	bls.n	8017bc2 <_svfiprintf_r+0x17e>
 8017b24:	b1b0      	cbz	r0, 8017b54 <_svfiprintf_r+0x110>
 8017b26:	9207      	str	r2, [sp, #28]
 8017b28:	e014      	b.n	8017b54 <_svfiprintf_r+0x110>
 8017b2a:	eba0 0308 	sub.w	r3, r0, r8
 8017b2e:	46a2      	mov	sl, r4
 8017b30:	fa09 f303 	lsl.w	r3, r9, r3
 8017b34:	4313      	orrs	r3, r2
 8017b36:	9304      	str	r3, [sp, #16]
 8017b38:	e7d2      	b.n	8017ae0 <_svfiprintf_r+0x9c>
 8017b3a:	9b03      	ldr	r3, [sp, #12]
 8017b3c:	1d19      	adds	r1, r3, #4
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	9103      	str	r1, [sp, #12]
 8017b44:	bfbb      	ittet	lt
 8017b46:	425b      	neglt	r3, r3
 8017b48:	f042 0202 	orrlt.w	r2, r2, #2
 8017b4c:	9307      	strge	r3, [sp, #28]
 8017b4e:	9307      	strlt	r3, [sp, #28]
 8017b50:	bfb8      	it	lt
 8017b52:	9204      	strlt	r2, [sp, #16]
 8017b54:	7823      	ldrb	r3, [r4, #0]
 8017b56:	2b2e      	cmp	r3, #46	; 0x2e
 8017b58:	d10c      	bne.n	8017b74 <_svfiprintf_r+0x130>
 8017b5a:	7863      	ldrb	r3, [r4, #1]
 8017b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8017b5e:	d135      	bne.n	8017bcc <_svfiprintf_r+0x188>
 8017b60:	9b03      	ldr	r3, [sp, #12]
 8017b62:	3402      	adds	r4, #2
 8017b64:	1d1a      	adds	r2, r3, #4
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	9203      	str	r2, [sp, #12]
 8017b6c:	bfb8      	it	lt
 8017b6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017b72:	9305      	str	r3, [sp, #20]
 8017b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017c40 <_svfiprintf_r+0x1fc>
 8017b78:	2203      	movs	r2, #3
 8017b7a:	7821      	ldrb	r1, [r4, #0]
 8017b7c:	4650      	mov	r0, sl
 8017b7e:	f7ff fa11 	bl	8016fa4 <memchr>
 8017b82:	b140      	cbz	r0, 8017b96 <_svfiprintf_r+0x152>
 8017b84:	2340      	movs	r3, #64	; 0x40
 8017b86:	eba0 000a 	sub.w	r0, r0, sl
 8017b8a:	3401      	adds	r4, #1
 8017b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8017b90:	9b04      	ldr	r3, [sp, #16]
 8017b92:	4303      	orrs	r3, r0
 8017b94:	9304      	str	r3, [sp, #16]
 8017b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b9a:	2206      	movs	r2, #6
 8017b9c:	4825      	ldr	r0, [pc, #148]	; (8017c34 <_svfiprintf_r+0x1f0>)
 8017b9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ba2:	f7ff f9ff 	bl	8016fa4 <memchr>
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	d038      	beq.n	8017c1c <_svfiprintf_r+0x1d8>
 8017baa:	4b23      	ldr	r3, [pc, #140]	; (8017c38 <_svfiprintf_r+0x1f4>)
 8017bac:	bb1b      	cbnz	r3, 8017bf6 <_svfiprintf_r+0x1b2>
 8017bae:	9b03      	ldr	r3, [sp, #12]
 8017bb0:	3307      	adds	r3, #7
 8017bb2:	f023 0307 	bic.w	r3, r3, #7
 8017bb6:	3308      	adds	r3, #8
 8017bb8:	9303      	str	r3, [sp, #12]
 8017bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bbc:	4433      	add	r3, r6
 8017bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8017bc0:	e767      	b.n	8017a92 <_svfiprintf_r+0x4e>
 8017bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bc6:	460c      	mov	r4, r1
 8017bc8:	2001      	movs	r0, #1
 8017bca:	e7a5      	b.n	8017b18 <_svfiprintf_r+0xd4>
 8017bcc:	2300      	movs	r3, #0
 8017bce:	3401      	adds	r4, #1
 8017bd0:	f04f 0c0a 	mov.w	ip, #10
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	9305      	str	r3, [sp, #20]
 8017bd8:	4620      	mov	r0, r4
 8017bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bde:	3a30      	subs	r2, #48	; 0x30
 8017be0:	2a09      	cmp	r2, #9
 8017be2:	d903      	bls.n	8017bec <_svfiprintf_r+0x1a8>
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d0c5      	beq.n	8017b74 <_svfiprintf_r+0x130>
 8017be8:	9105      	str	r1, [sp, #20]
 8017bea:	e7c3      	b.n	8017b74 <_svfiprintf_r+0x130>
 8017bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	e7f0      	b.n	8017bd8 <_svfiprintf_r+0x194>
 8017bf6:	ab03      	add	r3, sp, #12
 8017bf8:	462a      	mov	r2, r5
 8017bfa:	a904      	add	r1, sp, #16
 8017bfc:	4638      	mov	r0, r7
 8017bfe:	9300      	str	r3, [sp, #0]
 8017c00:	4b0e      	ldr	r3, [pc, #56]	; (8017c3c <_svfiprintf_r+0x1f8>)
 8017c02:	f7fb ff63 	bl	8013acc <_printf_float>
 8017c06:	1c42      	adds	r2, r0, #1
 8017c08:	4606      	mov	r6, r0
 8017c0a:	d1d6      	bne.n	8017bba <_svfiprintf_r+0x176>
 8017c0c:	89ab      	ldrh	r3, [r5, #12]
 8017c0e:	065b      	lsls	r3, r3, #25
 8017c10:	f53f af2c 	bmi.w	8017a6c <_svfiprintf_r+0x28>
 8017c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c16:	b01d      	add	sp, #116	; 0x74
 8017c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c1c:	ab03      	add	r3, sp, #12
 8017c1e:	462a      	mov	r2, r5
 8017c20:	a904      	add	r1, sp, #16
 8017c22:	4638      	mov	r0, r7
 8017c24:	9300      	str	r3, [sp, #0]
 8017c26:	4b05      	ldr	r3, [pc, #20]	; (8017c3c <_svfiprintf_r+0x1f8>)
 8017c28:	f7fc f9f6 	bl	8014018 <_printf_i>
 8017c2c:	e7eb      	b.n	8017c06 <_svfiprintf_r+0x1c2>
 8017c2e:	bf00      	nop
 8017c30:	0818b04c 	.word	0x0818b04c
 8017c34:	0818b056 	.word	0x0818b056
 8017c38:	08013acd 	.word	0x08013acd
 8017c3c:	0801798f 	.word	0x0801798f
 8017c40:	0818b052 	.word	0x0818b052

08017c44 <__sfputc_r>:
 8017c44:	6893      	ldr	r3, [r2, #8]
 8017c46:	3b01      	subs	r3, #1
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	6093      	str	r3, [r2, #8]
 8017c4c:	b410      	push	{r4}
 8017c4e:	da08      	bge.n	8017c62 <__sfputc_r+0x1e>
 8017c50:	6994      	ldr	r4, [r2, #24]
 8017c52:	42a3      	cmp	r3, r4
 8017c54:	db01      	blt.n	8017c5a <__sfputc_r+0x16>
 8017c56:	290a      	cmp	r1, #10
 8017c58:	d103      	bne.n	8017c62 <__sfputc_r+0x1e>
 8017c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c5e:	f7fd bcbf 	b.w	80155e0 <__swbuf_r>
 8017c62:	6813      	ldr	r3, [r2, #0]
 8017c64:	1c58      	adds	r0, r3, #1
 8017c66:	6010      	str	r0, [r2, #0]
 8017c68:	4608      	mov	r0, r1
 8017c6a:	7019      	strb	r1, [r3, #0]
 8017c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c70:	4770      	bx	lr

08017c72 <__sfputs_r>:
 8017c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c74:	4606      	mov	r6, r0
 8017c76:	460f      	mov	r7, r1
 8017c78:	4614      	mov	r4, r2
 8017c7a:	18d5      	adds	r5, r2, r3
 8017c7c:	42ac      	cmp	r4, r5
 8017c7e:	d101      	bne.n	8017c84 <__sfputs_r+0x12>
 8017c80:	2000      	movs	r0, #0
 8017c82:	e007      	b.n	8017c94 <__sfputs_r+0x22>
 8017c84:	463a      	mov	r2, r7
 8017c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c8a:	4630      	mov	r0, r6
 8017c8c:	f7ff ffda 	bl	8017c44 <__sfputc_r>
 8017c90:	1c43      	adds	r3, r0, #1
 8017c92:	d1f3      	bne.n	8017c7c <__sfputs_r+0xa>
 8017c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c98 <_vfiprintf_r>:
 8017c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c9c:	460d      	mov	r5, r1
 8017c9e:	b09d      	sub	sp, #116	; 0x74
 8017ca0:	4614      	mov	r4, r2
 8017ca2:	4698      	mov	r8, r3
 8017ca4:	4606      	mov	r6, r0
 8017ca6:	b118      	cbz	r0, 8017cb0 <_vfiprintf_r+0x18>
 8017ca8:	6983      	ldr	r3, [r0, #24]
 8017caa:	b90b      	cbnz	r3, 8017cb0 <_vfiprintf_r+0x18>
 8017cac:	f7fe fcf0 	bl	8016690 <__sinit>
 8017cb0:	4b89      	ldr	r3, [pc, #548]	; (8017ed8 <_vfiprintf_r+0x240>)
 8017cb2:	429d      	cmp	r5, r3
 8017cb4:	d11b      	bne.n	8017cee <_vfiprintf_r+0x56>
 8017cb6:	6875      	ldr	r5, [r6, #4]
 8017cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cba:	07d9      	lsls	r1, r3, #31
 8017cbc:	d405      	bmi.n	8017cca <_vfiprintf_r+0x32>
 8017cbe:	89ab      	ldrh	r3, [r5, #12]
 8017cc0:	059a      	lsls	r2, r3, #22
 8017cc2:	d402      	bmi.n	8017cca <_vfiprintf_r+0x32>
 8017cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cc6:	f7ff f8f4 	bl	8016eb2 <__retarget_lock_acquire_recursive>
 8017cca:	89ab      	ldrh	r3, [r5, #12]
 8017ccc:	071b      	lsls	r3, r3, #28
 8017cce:	d501      	bpl.n	8017cd4 <_vfiprintf_r+0x3c>
 8017cd0:	692b      	ldr	r3, [r5, #16]
 8017cd2:	b9eb      	cbnz	r3, 8017d10 <_vfiprintf_r+0x78>
 8017cd4:	4629      	mov	r1, r5
 8017cd6:	4630      	mov	r0, r6
 8017cd8:	f7fd fcd4 	bl	8015684 <__swsetup_r>
 8017cdc:	b1c0      	cbz	r0, 8017d10 <_vfiprintf_r+0x78>
 8017cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ce0:	07dc      	lsls	r4, r3, #31
 8017ce2:	d50e      	bpl.n	8017d02 <_vfiprintf_r+0x6a>
 8017ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ce8:	b01d      	add	sp, #116	; 0x74
 8017cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cee:	4b7b      	ldr	r3, [pc, #492]	; (8017edc <_vfiprintf_r+0x244>)
 8017cf0:	429d      	cmp	r5, r3
 8017cf2:	d101      	bne.n	8017cf8 <_vfiprintf_r+0x60>
 8017cf4:	68b5      	ldr	r5, [r6, #8]
 8017cf6:	e7df      	b.n	8017cb8 <_vfiprintf_r+0x20>
 8017cf8:	4b79      	ldr	r3, [pc, #484]	; (8017ee0 <_vfiprintf_r+0x248>)
 8017cfa:	429d      	cmp	r5, r3
 8017cfc:	bf08      	it	eq
 8017cfe:	68f5      	ldreq	r5, [r6, #12]
 8017d00:	e7da      	b.n	8017cb8 <_vfiprintf_r+0x20>
 8017d02:	89ab      	ldrh	r3, [r5, #12]
 8017d04:	0598      	lsls	r0, r3, #22
 8017d06:	d4ed      	bmi.n	8017ce4 <_vfiprintf_r+0x4c>
 8017d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d0a:	f7ff f8d3 	bl	8016eb4 <__retarget_lock_release_recursive>
 8017d0e:	e7e9      	b.n	8017ce4 <_vfiprintf_r+0x4c>
 8017d10:	2300      	movs	r3, #0
 8017d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d16:	f04f 0901 	mov.w	r9, #1
 8017d1a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8017ee4 <_vfiprintf_r+0x24c>
 8017d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8017d20:	2320      	movs	r3, #32
 8017d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d26:	2330      	movs	r3, #48	; 0x30
 8017d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d2c:	4623      	mov	r3, r4
 8017d2e:	469a      	mov	sl, r3
 8017d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d34:	b10a      	cbz	r2, 8017d3a <_vfiprintf_r+0xa2>
 8017d36:	2a25      	cmp	r2, #37	; 0x25
 8017d38:	d1f9      	bne.n	8017d2e <_vfiprintf_r+0x96>
 8017d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8017d3e:	d00b      	beq.n	8017d58 <_vfiprintf_r+0xc0>
 8017d40:	465b      	mov	r3, fp
 8017d42:	4622      	mov	r2, r4
 8017d44:	4629      	mov	r1, r5
 8017d46:	4630      	mov	r0, r6
 8017d48:	f7ff ff93 	bl	8017c72 <__sfputs_r>
 8017d4c:	3001      	adds	r0, #1
 8017d4e:	f000 80aa 	beq.w	8017ea6 <_vfiprintf_r+0x20e>
 8017d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d54:	445a      	add	r2, fp
 8017d56:	9209      	str	r2, [sp, #36]	; 0x24
 8017d58:	f89a 3000 	ldrb.w	r3, [sl]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	f000 80a2 	beq.w	8017ea6 <_vfiprintf_r+0x20e>
 8017d62:	2300      	movs	r3, #0
 8017d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017d68:	f10a 0a01 	add.w	sl, sl, #1
 8017d6c:	9304      	str	r3, [sp, #16]
 8017d6e:	9307      	str	r3, [sp, #28]
 8017d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d74:	931a      	str	r3, [sp, #104]	; 0x68
 8017d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d7a:	4654      	mov	r4, sl
 8017d7c:	2205      	movs	r2, #5
 8017d7e:	4859      	ldr	r0, [pc, #356]	; (8017ee4 <_vfiprintf_r+0x24c>)
 8017d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d84:	f7ff f90e 	bl	8016fa4 <memchr>
 8017d88:	9a04      	ldr	r2, [sp, #16]
 8017d8a:	b9d8      	cbnz	r0, 8017dc4 <_vfiprintf_r+0x12c>
 8017d8c:	06d1      	lsls	r1, r2, #27
 8017d8e:	bf44      	itt	mi
 8017d90:	2320      	movmi	r3, #32
 8017d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d96:	0713      	lsls	r3, r2, #28
 8017d98:	bf44      	itt	mi
 8017d9a:	232b      	movmi	r3, #43	; 0x2b
 8017d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017da0:	f89a 3000 	ldrb.w	r3, [sl]
 8017da4:	2b2a      	cmp	r3, #42	; 0x2a
 8017da6:	d015      	beq.n	8017dd4 <_vfiprintf_r+0x13c>
 8017da8:	9a07      	ldr	r2, [sp, #28]
 8017daa:	4654      	mov	r4, sl
 8017dac:	2000      	movs	r0, #0
 8017dae:	f04f 0c0a 	mov.w	ip, #10
 8017db2:	4621      	mov	r1, r4
 8017db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017db8:	3b30      	subs	r3, #48	; 0x30
 8017dba:	2b09      	cmp	r3, #9
 8017dbc:	d94e      	bls.n	8017e5c <_vfiprintf_r+0x1c4>
 8017dbe:	b1b0      	cbz	r0, 8017dee <_vfiprintf_r+0x156>
 8017dc0:	9207      	str	r2, [sp, #28]
 8017dc2:	e014      	b.n	8017dee <_vfiprintf_r+0x156>
 8017dc4:	eba0 0308 	sub.w	r3, r0, r8
 8017dc8:	46a2      	mov	sl, r4
 8017dca:	fa09 f303 	lsl.w	r3, r9, r3
 8017dce:	4313      	orrs	r3, r2
 8017dd0:	9304      	str	r3, [sp, #16]
 8017dd2:	e7d2      	b.n	8017d7a <_vfiprintf_r+0xe2>
 8017dd4:	9b03      	ldr	r3, [sp, #12]
 8017dd6:	1d19      	adds	r1, r3, #4
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	9103      	str	r1, [sp, #12]
 8017dde:	bfbb      	ittet	lt
 8017de0:	425b      	neglt	r3, r3
 8017de2:	f042 0202 	orrlt.w	r2, r2, #2
 8017de6:	9307      	strge	r3, [sp, #28]
 8017de8:	9307      	strlt	r3, [sp, #28]
 8017dea:	bfb8      	it	lt
 8017dec:	9204      	strlt	r2, [sp, #16]
 8017dee:	7823      	ldrb	r3, [r4, #0]
 8017df0:	2b2e      	cmp	r3, #46	; 0x2e
 8017df2:	d10c      	bne.n	8017e0e <_vfiprintf_r+0x176>
 8017df4:	7863      	ldrb	r3, [r4, #1]
 8017df6:	2b2a      	cmp	r3, #42	; 0x2a
 8017df8:	d135      	bne.n	8017e66 <_vfiprintf_r+0x1ce>
 8017dfa:	9b03      	ldr	r3, [sp, #12]
 8017dfc:	3402      	adds	r4, #2
 8017dfe:	1d1a      	adds	r2, r3, #4
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	9203      	str	r2, [sp, #12]
 8017e06:	bfb8      	it	lt
 8017e08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017e0c:	9305      	str	r3, [sp, #20]
 8017e0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017ef4 <_vfiprintf_r+0x25c>
 8017e12:	2203      	movs	r2, #3
 8017e14:	7821      	ldrb	r1, [r4, #0]
 8017e16:	4650      	mov	r0, sl
 8017e18:	f7ff f8c4 	bl	8016fa4 <memchr>
 8017e1c:	b140      	cbz	r0, 8017e30 <_vfiprintf_r+0x198>
 8017e1e:	2340      	movs	r3, #64	; 0x40
 8017e20:	eba0 000a 	sub.w	r0, r0, sl
 8017e24:	3401      	adds	r4, #1
 8017e26:	fa03 f000 	lsl.w	r0, r3, r0
 8017e2a:	9b04      	ldr	r3, [sp, #16]
 8017e2c:	4303      	orrs	r3, r0
 8017e2e:	9304      	str	r3, [sp, #16]
 8017e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e34:	2206      	movs	r2, #6
 8017e36:	482c      	ldr	r0, [pc, #176]	; (8017ee8 <_vfiprintf_r+0x250>)
 8017e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e3c:	f7ff f8b2 	bl	8016fa4 <memchr>
 8017e40:	2800      	cmp	r0, #0
 8017e42:	d03f      	beq.n	8017ec4 <_vfiprintf_r+0x22c>
 8017e44:	4b29      	ldr	r3, [pc, #164]	; (8017eec <_vfiprintf_r+0x254>)
 8017e46:	bb1b      	cbnz	r3, 8017e90 <_vfiprintf_r+0x1f8>
 8017e48:	9b03      	ldr	r3, [sp, #12]
 8017e4a:	3307      	adds	r3, #7
 8017e4c:	f023 0307 	bic.w	r3, r3, #7
 8017e50:	3308      	adds	r3, #8
 8017e52:	9303      	str	r3, [sp, #12]
 8017e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e56:	443b      	add	r3, r7
 8017e58:	9309      	str	r3, [sp, #36]	; 0x24
 8017e5a:	e767      	b.n	8017d2c <_vfiprintf_r+0x94>
 8017e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e60:	460c      	mov	r4, r1
 8017e62:	2001      	movs	r0, #1
 8017e64:	e7a5      	b.n	8017db2 <_vfiprintf_r+0x11a>
 8017e66:	2300      	movs	r3, #0
 8017e68:	3401      	adds	r4, #1
 8017e6a:	f04f 0c0a 	mov.w	ip, #10
 8017e6e:	4619      	mov	r1, r3
 8017e70:	9305      	str	r3, [sp, #20]
 8017e72:	4620      	mov	r0, r4
 8017e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e78:	3a30      	subs	r2, #48	; 0x30
 8017e7a:	2a09      	cmp	r2, #9
 8017e7c:	d903      	bls.n	8017e86 <_vfiprintf_r+0x1ee>
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d0c5      	beq.n	8017e0e <_vfiprintf_r+0x176>
 8017e82:	9105      	str	r1, [sp, #20]
 8017e84:	e7c3      	b.n	8017e0e <_vfiprintf_r+0x176>
 8017e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	e7f0      	b.n	8017e72 <_vfiprintf_r+0x1da>
 8017e90:	ab03      	add	r3, sp, #12
 8017e92:	462a      	mov	r2, r5
 8017e94:	a904      	add	r1, sp, #16
 8017e96:	4630      	mov	r0, r6
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	4b15      	ldr	r3, [pc, #84]	; (8017ef0 <_vfiprintf_r+0x258>)
 8017e9c:	f7fb fe16 	bl	8013acc <_printf_float>
 8017ea0:	4607      	mov	r7, r0
 8017ea2:	1c78      	adds	r0, r7, #1
 8017ea4:	d1d6      	bne.n	8017e54 <_vfiprintf_r+0x1bc>
 8017ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ea8:	07d9      	lsls	r1, r3, #31
 8017eaa:	d405      	bmi.n	8017eb8 <_vfiprintf_r+0x220>
 8017eac:	89ab      	ldrh	r3, [r5, #12]
 8017eae:	059a      	lsls	r2, r3, #22
 8017eb0:	d402      	bmi.n	8017eb8 <_vfiprintf_r+0x220>
 8017eb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017eb4:	f7fe fffe 	bl	8016eb4 <__retarget_lock_release_recursive>
 8017eb8:	89ab      	ldrh	r3, [r5, #12]
 8017eba:	065b      	lsls	r3, r3, #25
 8017ebc:	f53f af12 	bmi.w	8017ce4 <_vfiprintf_r+0x4c>
 8017ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ec2:	e711      	b.n	8017ce8 <_vfiprintf_r+0x50>
 8017ec4:	ab03      	add	r3, sp, #12
 8017ec6:	462a      	mov	r2, r5
 8017ec8:	a904      	add	r1, sp, #16
 8017eca:	4630      	mov	r0, r6
 8017ecc:	9300      	str	r3, [sp, #0]
 8017ece:	4b08      	ldr	r3, [pc, #32]	; (8017ef0 <_vfiprintf_r+0x258>)
 8017ed0:	f7fc f8a2 	bl	8014018 <_printf_i>
 8017ed4:	e7e4      	b.n	8017ea0 <_vfiprintf_r+0x208>
 8017ed6:	bf00      	nop
 8017ed8:	0818ae34 	.word	0x0818ae34
 8017edc:	0818ae54 	.word	0x0818ae54
 8017ee0:	0818ae14 	.word	0x0818ae14
 8017ee4:	0818b04c 	.word	0x0818b04c
 8017ee8:	0818b056 	.word	0x0818b056
 8017eec:	08013acd 	.word	0x08013acd
 8017ef0:	08017c73 	.word	0x08017c73
 8017ef4:	0818b052 	.word	0x0818b052

08017ef8 <nan>:
 8017ef8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017f00 <nan+0x8>
 8017efc:	4770      	bx	lr
 8017efe:	bf00      	nop
 8017f00:	00000000 	.word	0x00000000
 8017f04:	7ff80000 	.word	0x7ff80000

08017f08 <__sread>:
 8017f08:	b510      	push	{r4, lr}
 8017f0a:	460c      	mov	r4, r1
 8017f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f10:	f000 f91a 	bl	8018148 <_read_r>
 8017f14:	2800      	cmp	r0, #0
 8017f16:	bfab      	itete	ge
 8017f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8017f1c:	181b      	addge	r3, r3, r0
 8017f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017f22:	bfac      	ite	ge
 8017f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8017f26:	81a3      	strhlt	r3, [r4, #12]
 8017f28:	bd10      	pop	{r4, pc}

08017f2a <__swrite>:
 8017f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f2e:	461f      	mov	r7, r3
 8017f30:	898b      	ldrh	r3, [r1, #12]
 8017f32:	4605      	mov	r5, r0
 8017f34:	460c      	mov	r4, r1
 8017f36:	05db      	lsls	r3, r3, #23
 8017f38:	4616      	mov	r6, r2
 8017f3a:	d505      	bpl.n	8017f48 <__swrite+0x1e>
 8017f3c:	2302      	movs	r3, #2
 8017f3e:	2200      	movs	r2, #0
 8017f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f44:	f000 f8a4 	bl	8018090 <_lseek_r>
 8017f48:	89a3      	ldrh	r3, [r4, #12]
 8017f4a:	4632      	mov	r2, r6
 8017f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f50:	4628      	mov	r0, r5
 8017f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017f56:	81a3      	strh	r3, [r4, #12]
 8017f58:	463b      	mov	r3, r7
 8017f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f5e:	f000 b823 	b.w	8017fa8 <_write_r>

08017f62 <__sseek>:
 8017f62:	b510      	push	{r4, lr}
 8017f64:	460c      	mov	r4, r1
 8017f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f6a:	f000 f891 	bl	8018090 <_lseek_r>
 8017f6e:	1c43      	adds	r3, r0, #1
 8017f70:	89a3      	ldrh	r3, [r4, #12]
 8017f72:	bf15      	itete	ne
 8017f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f7e:	81a3      	strheq	r3, [r4, #12]
 8017f80:	bf18      	it	ne
 8017f82:	81a3      	strhne	r3, [r4, #12]
 8017f84:	bd10      	pop	{r4, pc}

08017f86 <__sclose>:
 8017f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f8a:	f000 b83d 	b.w	8018008 <_close_r>

08017f8e <__ascii_wctomb>:
 8017f8e:	b149      	cbz	r1, 8017fa4 <__ascii_wctomb+0x16>
 8017f90:	2aff      	cmp	r2, #255	; 0xff
 8017f92:	bf8d      	iteet	hi
 8017f94:	238a      	movhi	r3, #138	; 0x8a
 8017f96:	2001      	movls	r0, #1
 8017f98:	700a      	strbls	r2, [r1, #0]
 8017f9a:	6003      	strhi	r3, [r0, #0]
 8017f9c:	bf88      	it	hi
 8017f9e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017fa2:	4770      	bx	lr
 8017fa4:	4608      	mov	r0, r1
 8017fa6:	4770      	bx	lr

08017fa8 <_write_r>:
 8017fa8:	b538      	push	{r3, r4, r5, lr}
 8017faa:	4604      	mov	r4, r0
 8017fac:	4d06      	ldr	r5, [pc, #24]	; (8017fc8 <_write_r+0x20>)
 8017fae:	4608      	mov	r0, r1
 8017fb0:	4611      	mov	r1, r2
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	602a      	str	r2, [r5, #0]
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	f7e9 fbe1 	bl	800177e <_write>
 8017fbc:	1c43      	adds	r3, r0, #1
 8017fbe:	d102      	bne.n	8017fc6 <_write_r+0x1e>
 8017fc0:	682b      	ldr	r3, [r5, #0]
 8017fc2:	b103      	cbz	r3, 8017fc6 <_write_r+0x1e>
 8017fc4:	6023      	str	r3, [r4, #0]
 8017fc6:	bd38      	pop	{r3, r4, r5, pc}
 8017fc8:	200032c0 	.word	0x200032c0

08017fcc <__assert_func>:
 8017fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017fce:	4614      	mov	r4, r2
 8017fd0:	461a      	mov	r2, r3
 8017fd2:	4b09      	ldr	r3, [pc, #36]	; (8017ff8 <__assert_func+0x2c>)
 8017fd4:	4605      	mov	r5, r0
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	68d8      	ldr	r0, [r3, #12]
 8017fda:	b14c      	cbz	r4, 8017ff0 <__assert_func+0x24>
 8017fdc:	4b07      	ldr	r3, [pc, #28]	; (8017ffc <__assert_func+0x30>)
 8017fde:	9100      	str	r1, [sp, #0]
 8017fe0:	4907      	ldr	r1, [pc, #28]	; (8018000 <__assert_func+0x34>)
 8017fe2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017fe6:	462b      	mov	r3, r5
 8017fe8:	f000 f81e 	bl	8018028 <fiprintf>
 8017fec:	f000 f8be 	bl	801816c <abort>
 8017ff0:	4b04      	ldr	r3, [pc, #16]	; (8018004 <__assert_func+0x38>)
 8017ff2:	461c      	mov	r4, r3
 8017ff4:	e7f3      	b.n	8017fde <__assert_func+0x12>
 8017ff6:	bf00      	nop
 8017ff8:	2000010c 	.word	0x2000010c
 8017ffc:	0818b05d 	.word	0x0818b05d
 8018000:	0818b06a 	.word	0x0818b06a
 8018004:	0818b098 	.word	0x0818b098

08018008 <_close_r>:
 8018008:	b538      	push	{r3, r4, r5, lr}
 801800a:	2300      	movs	r3, #0
 801800c:	4d05      	ldr	r5, [pc, #20]	; (8018024 <_close_r+0x1c>)
 801800e:	4604      	mov	r4, r0
 8018010:	4608      	mov	r0, r1
 8018012:	602b      	str	r3, [r5, #0]
 8018014:	f7e9 fbcf 	bl	80017b6 <_close>
 8018018:	1c43      	adds	r3, r0, #1
 801801a:	d102      	bne.n	8018022 <_close_r+0x1a>
 801801c:	682b      	ldr	r3, [r5, #0]
 801801e:	b103      	cbz	r3, 8018022 <_close_r+0x1a>
 8018020:	6023      	str	r3, [r4, #0]
 8018022:	bd38      	pop	{r3, r4, r5, pc}
 8018024:	200032c0 	.word	0x200032c0

08018028 <fiprintf>:
 8018028:	b40e      	push	{r1, r2, r3}
 801802a:	b503      	push	{r0, r1, lr}
 801802c:	ab03      	add	r3, sp, #12
 801802e:	4601      	mov	r1, r0
 8018030:	4805      	ldr	r0, [pc, #20]	; (8018048 <fiprintf+0x20>)
 8018032:	f853 2b04 	ldr.w	r2, [r3], #4
 8018036:	6800      	ldr	r0, [r0, #0]
 8018038:	9301      	str	r3, [sp, #4]
 801803a:	f7ff fe2d 	bl	8017c98 <_vfiprintf_r>
 801803e:	b002      	add	sp, #8
 8018040:	f85d eb04 	ldr.w	lr, [sp], #4
 8018044:	b003      	add	sp, #12
 8018046:	4770      	bx	lr
 8018048:	2000010c 	.word	0x2000010c

0801804c <_fstat_r>:
 801804c:	b538      	push	{r3, r4, r5, lr}
 801804e:	2300      	movs	r3, #0
 8018050:	4d06      	ldr	r5, [pc, #24]	; (801806c <_fstat_r+0x20>)
 8018052:	4604      	mov	r4, r0
 8018054:	4608      	mov	r0, r1
 8018056:	4611      	mov	r1, r2
 8018058:	602b      	str	r3, [r5, #0]
 801805a:	f7e9 fbb8 	bl	80017ce <_fstat>
 801805e:	1c43      	adds	r3, r0, #1
 8018060:	d102      	bne.n	8018068 <_fstat_r+0x1c>
 8018062:	682b      	ldr	r3, [r5, #0]
 8018064:	b103      	cbz	r3, 8018068 <_fstat_r+0x1c>
 8018066:	6023      	str	r3, [r4, #0]
 8018068:	bd38      	pop	{r3, r4, r5, pc}
 801806a:	bf00      	nop
 801806c:	200032c0 	.word	0x200032c0

08018070 <_isatty_r>:
 8018070:	b538      	push	{r3, r4, r5, lr}
 8018072:	2300      	movs	r3, #0
 8018074:	4d05      	ldr	r5, [pc, #20]	; (801808c <_isatty_r+0x1c>)
 8018076:	4604      	mov	r4, r0
 8018078:	4608      	mov	r0, r1
 801807a:	602b      	str	r3, [r5, #0]
 801807c:	f7e9 fbb7 	bl	80017ee <_isatty>
 8018080:	1c43      	adds	r3, r0, #1
 8018082:	d102      	bne.n	801808a <_isatty_r+0x1a>
 8018084:	682b      	ldr	r3, [r5, #0]
 8018086:	b103      	cbz	r3, 801808a <_isatty_r+0x1a>
 8018088:	6023      	str	r3, [r4, #0]
 801808a:	bd38      	pop	{r3, r4, r5, pc}
 801808c:	200032c0 	.word	0x200032c0

08018090 <_lseek_r>:
 8018090:	b538      	push	{r3, r4, r5, lr}
 8018092:	4604      	mov	r4, r0
 8018094:	4d06      	ldr	r5, [pc, #24]	; (80180b0 <_lseek_r+0x20>)
 8018096:	4608      	mov	r0, r1
 8018098:	4611      	mov	r1, r2
 801809a:	2200      	movs	r2, #0
 801809c:	602a      	str	r2, [r5, #0]
 801809e:	461a      	mov	r2, r3
 80180a0:	f7e9 fbb0 	bl	8001804 <_lseek>
 80180a4:	1c43      	adds	r3, r0, #1
 80180a6:	d102      	bne.n	80180ae <_lseek_r+0x1e>
 80180a8:	682b      	ldr	r3, [r5, #0]
 80180aa:	b103      	cbz	r3, 80180ae <_lseek_r+0x1e>
 80180ac:	6023      	str	r3, [r4, #0]
 80180ae:	bd38      	pop	{r3, r4, r5, pc}
 80180b0:	200032c0 	.word	0x200032c0

080180b4 <memmove>:
 80180b4:	4288      	cmp	r0, r1
 80180b6:	b510      	push	{r4, lr}
 80180b8:	eb01 0402 	add.w	r4, r1, r2
 80180bc:	d902      	bls.n	80180c4 <memmove+0x10>
 80180be:	4284      	cmp	r4, r0
 80180c0:	4623      	mov	r3, r4
 80180c2:	d807      	bhi.n	80180d4 <memmove+0x20>
 80180c4:	1e43      	subs	r3, r0, #1
 80180c6:	42a1      	cmp	r1, r4
 80180c8:	d008      	beq.n	80180dc <memmove+0x28>
 80180ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80180ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180d2:	e7f8      	b.n	80180c6 <memmove+0x12>
 80180d4:	4402      	add	r2, r0
 80180d6:	4601      	mov	r1, r0
 80180d8:	428a      	cmp	r2, r1
 80180da:	d100      	bne.n	80180de <memmove+0x2a>
 80180dc:	bd10      	pop	{r4, pc}
 80180de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80180e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80180e6:	e7f7      	b.n	80180d8 <memmove+0x24>

080180e8 <_realloc_r>:
 80180e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180ec:	4680      	mov	r8, r0
 80180ee:	4614      	mov	r4, r2
 80180f0:	460e      	mov	r6, r1
 80180f2:	b921      	cbnz	r1, 80180fe <_realloc_r+0x16>
 80180f4:	4611      	mov	r1, r2
 80180f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180fa:	f7fb bbd3 	b.w	80138a4 <_malloc_r>
 80180fe:	b92a      	cbnz	r2, 801810c <_realloc_r+0x24>
 8018100:	4625      	mov	r5, r4
 8018102:	f7fb fb63 	bl	80137cc <_free_r>
 8018106:	4628      	mov	r0, r5
 8018108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801810c:	f000 f835 	bl	801817a <_malloc_usable_size_r>
 8018110:	4284      	cmp	r4, r0
 8018112:	4607      	mov	r7, r0
 8018114:	d802      	bhi.n	801811c <_realloc_r+0x34>
 8018116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801811a:	d812      	bhi.n	8018142 <_realloc_r+0x5a>
 801811c:	4621      	mov	r1, r4
 801811e:	4640      	mov	r0, r8
 8018120:	f7fb fbc0 	bl	80138a4 <_malloc_r>
 8018124:	4605      	mov	r5, r0
 8018126:	2800      	cmp	r0, #0
 8018128:	d0ed      	beq.n	8018106 <_realloc_r+0x1e>
 801812a:	42bc      	cmp	r4, r7
 801812c:	4622      	mov	r2, r4
 801812e:	4631      	mov	r1, r6
 8018130:	bf28      	it	cs
 8018132:	463a      	movcs	r2, r7
 8018134:	f7fb fb34 	bl	80137a0 <memcpy>
 8018138:	4631      	mov	r1, r6
 801813a:	4640      	mov	r0, r8
 801813c:	f7fb fb46 	bl	80137cc <_free_r>
 8018140:	e7e1      	b.n	8018106 <_realloc_r+0x1e>
 8018142:	4635      	mov	r5, r6
 8018144:	e7df      	b.n	8018106 <_realloc_r+0x1e>
	...

08018148 <_read_r>:
 8018148:	b538      	push	{r3, r4, r5, lr}
 801814a:	4604      	mov	r4, r0
 801814c:	4d06      	ldr	r5, [pc, #24]	; (8018168 <_read_r+0x20>)
 801814e:	4608      	mov	r0, r1
 8018150:	4611      	mov	r1, r2
 8018152:	2200      	movs	r2, #0
 8018154:	602a      	str	r2, [r5, #0]
 8018156:	461a      	mov	r2, r3
 8018158:	f7e9 faf4 	bl	8001744 <_read>
 801815c:	1c43      	adds	r3, r0, #1
 801815e:	d102      	bne.n	8018166 <_read_r+0x1e>
 8018160:	682b      	ldr	r3, [r5, #0]
 8018162:	b103      	cbz	r3, 8018166 <_read_r+0x1e>
 8018164:	6023      	str	r3, [r4, #0]
 8018166:	bd38      	pop	{r3, r4, r5, pc}
 8018168:	200032c0 	.word	0x200032c0

0801816c <abort>:
 801816c:	2006      	movs	r0, #6
 801816e:	b508      	push	{r3, lr}
 8018170:	f000 f834 	bl	80181dc <raise>
 8018174:	2001      	movs	r0, #1
 8018176:	f7e9 fadb 	bl	8001730 <_exit>

0801817a <_malloc_usable_size_r>:
 801817a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801817e:	1f18      	subs	r0, r3, #4
 8018180:	2b00      	cmp	r3, #0
 8018182:	bfbc      	itt	lt
 8018184:	580b      	ldrlt	r3, [r1, r0]
 8018186:	18c0      	addlt	r0, r0, r3
 8018188:	4770      	bx	lr

0801818a <_raise_r>:
 801818a:	291f      	cmp	r1, #31
 801818c:	b538      	push	{r3, r4, r5, lr}
 801818e:	4604      	mov	r4, r0
 8018190:	460d      	mov	r5, r1
 8018192:	d904      	bls.n	801819e <_raise_r+0x14>
 8018194:	2316      	movs	r3, #22
 8018196:	6003      	str	r3, [r0, #0]
 8018198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801819c:	bd38      	pop	{r3, r4, r5, pc}
 801819e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80181a0:	b112      	cbz	r2, 80181a8 <_raise_r+0x1e>
 80181a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181a6:	b94b      	cbnz	r3, 80181bc <_raise_r+0x32>
 80181a8:	4620      	mov	r0, r4
 80181aa:	f000 f831 	bl	8018210 <_getpid_r>
 80181ae:	462a      	mov	r2, r5
 80181b0:	4601      	mov	r1, r0
 80181b2:	4620      	mov	r0, r4
 80181b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181b8:	f000 b818 	b.w	80181ec <_kill_r>
 80181bc:	2b01      	cmp	r3, #1
 80181be:	d00a      	beq.n	80181d6 <_raise_r+0x4c>
 80181c0:	1c59      	adds	r1, r3, #1
 80181c2:	d103      	bne.n	80181cc <_raise_r+0x42>
 80181c4:	2316      	movs	r3, #22
 80181c6:	6003      	str	r3, [r0, #0]
 80181c8:	2001      	movs	r0, #1
 80181ca:	e7e7      	b.n	801819c <_raise_r+0x12>
 80181cc:	2400      	movs	r4, #0
 80181ce:	4628      	mov	r0, r5
 80181d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80181d4:	4798      	blx	r3
 80181d6:	2000      	movs	r0, #0
 80181d8:	e7e0      	b.n	801819c <_raise_r+0x12>
	...

080181dc <raise>:
 80181dc:	4b02      	ldr	r3, [pc, #8]	; (80181e8 <raise+0xc>)
 80181de:	4601      	mov	r1, r0
 80181e0:	6818      	ldr	r0, [r3, #0]
 80181e2:	f7ff bfd2 	b.w	801818a <_raise_r>
 80181e6:	bf00      	nop
 80181e8:	2000010c 	.word	0x2000010c

080181ec <_kill_r>:
 80181ec:	b538      	push	{r3, r4, r5, lr}
 80181ee:	2300      	movs	r3, #0
 80181f0:	4d06      	ldr	r5, [pc, #24]	; (801820c <_kill_r+0x20>)
 80181f2:	4604      	mov	r4, r0
 80181f4:	4608      	mov	r0, r1
 80181f6:	4611      	mov	r1, r2
 80181f8:	602b      	str	r3, [r5, #0]
 80181fa:	f7e9 fa89 	bl	8001710 <_kill>
 80181fe:	1c43      	adds	r3, r0, #1
 8018200:	d102      	bne.n	8018208 <_kill_r+0x1c>
 8018202:	682b      	ldr	r3, [r5, #0]
 8018204:	b103      	cbz	r3, 8018208 <_kill_r+0x1c>
 8018206:	6023      	str	r3, [r4, #0]
 8018208:	bd38      	pop	{r3, r4, r5, pc}
 801820a:	bf00      	nop
 801820c:	200032c0 	.word	0x200032c0

08018210 <_getpid_r>:
 8018210:	f7e9 ba76 	b.w	8001700 <_getpid>

08018214 <_init>:
 8018214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018216:	bf00      	nop
 8018218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801821a:	bc08      	pop	{r3}
 801821c:	469e      	mov	lr, r3
 801821e:	4770      	bx	lr

08018220 <_fini>:
 8018220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018222:	bf00      	nop
 8018224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018226:	bc08      	pop	{r3}
 8018228:	469e      	mov	lr, r3
 801822a:	4770      	bx	lr
 801822c:	0000      	movs	r0, r0
	...
